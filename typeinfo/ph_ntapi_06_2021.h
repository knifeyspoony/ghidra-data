/*
How this file was generated:

1. Clone https://github.com/processhacker/processhacker
2. Create a project in VS2019 that has the 19041 headers (Windows Kits/Include/19041/...) on the include path
3. Add the processhacker/phnt/include directory to the include path
4. Set the compile options for "Preprocess to a File (/P)" and "Preprocess Suppress Line Numbers (/EP)"
5. Add a simple source file:
	#include <phnt_windows.h>
	#include <phnt.h>
	int main() {
		return 1;
	}
6. Compile

Modifications to the generated file:
1. Delete all pragmas -> "#pragma[^\n]+\n"
2. Remove all inline/forceinline bodies -> (?:__forceinline|__inline)((?:[^{]*\n[^{]*))\{(?:(?>\{(?<LEVEL>)|\}(?<-LEVEL>)|(?!\{|\}).\s*)+(?(LEVEL)(?!)))\}
3. Remove all __declspecs -> __declspec\([^\)]+\)+
4. Add defines
	#define __pragma(x)
	#define __unaligned
	#define unsigned char _Bool
*/

// MACRO DEFINES
#define __pragma(x)
#define __unaligned
typedef unsigned char _Bool;


typedef unsigned __int64  uintptr_t;
typedef char* va_list;
void __cdecl __va_start(va_list*, ...);
__pragma(pack(push, 8))
typedef unsigned __int64 size_t;
typedef __int64          ptrdiff_t;
typedef __int64          intptr_t;
typedef _Bool __vcrt_bool;
typedef unsigned short wchar_t;
void __cdecl __security_init_cookie(void);
void __cdecl __security_check_cookie(uintptr_t _StackCookie);
void __cdecl __report_gsfailure(uintptr_t _StackCookie);
extern uintptr_t __security_cookie;
__pragma(pack(pop))
__pragma(pack(push, 8))
typedef enum _EXCEPTION_DISPOSITION
{
	ExceptionContinueExecution,
	ExceptionContinueSearch,
	ExceptionNestedException,
	ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;
struct _EXCEPTION_RECORD;
struct _CONTEXT;
struct _DISPATCHER_CONTEXT;
EXCEPTION_DISPOSITION __cdecl __C_specific_handler(
	struct _EXCEPTION_RECORD* ExceptionRecord,
	void* EstablisherFrame,
	struct _CONTEXT* ContextRecord,
	struct _DISPATCHER_CONTEXT* DispatcherContext
);
unsigned long __cdecl _exception_code(void);
void* __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);
__pragma(pack(pop))
__pragma(pack(push, 8))
__pragma(pack(pop))
typedef unsigned long ULONG;
typedef ULONG* PULONG;
typedef unsigned short USHORT;
typedef USHORT* PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR* PUCHAR;
typedef   char* PSZ;
typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT* PFLOAT;
typedef BOOL* PBOOL;
typedef BOOL* LPBOOL;
typedef BYTE* PBYTE;
typedef BYTE* LPBYTE;
typedef int* PINT;
typedef int* LPINT;
typedef WORD* PWORD;
typedef WORD* LPWORD;
typedef long* LPLONG;
typedef DWORD* PDWORD;
typedef DWORD* LPDWORD;
typedef void* LPVOID;
typedef const void* LPCVOID;
typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int* PUINT;
__pragma(pack(push, 8))
typedef _Bool __crt_bool;
void __cdecl _invalid_parameter(
	wchar_t const*,
	wchar_t const*,
	wchar_t const*,
	unsigned int,
	uintptr_t
);
void __cdecl _invalid_parameter_noinfo(void);
void __cdecl _invalid_parameter_noinfo_noreturn(void);

void __cdecl _invoke_watson(
	wchar_t const* _Expression,
	wchar_t const* _FunctionName,
	wchar_t const* _FileName,
	unsigned int _LineNo,
	uintptr_t _Reserved);
typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;
typedef struct __crt_locale_data_public
{
	unsigned short const* _locale_pctype;
	int _locale_mb_cur_max;
	unsigned int _locale_lc_codepage;
} __crt_locale_data_public;
typedef struct __crt_locale_pointers
{
	struct __crt_locale_data* locinfo;
	struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;
typedef __crt_locale_pointers* _locale_t;
typedef struct _Mbstatet
{
	unsigned long _Wchar;
	unsigned short _Byte, _State;
} _Mbstatet;
typedef _Mbstatet mbstate_t;
typedef __time64_t time_t;
typedef size_t rsize_t;
__pragma(pack(pop))
__pragma(pack(push, 8))
const unsigned short* __cdecl __pctype_func(void);
const wctype_t* __cdecl __pwctype_func(void);
int __cdecl iswalnum(wint_t _C);
int __cdecl iswalpha(wint_t _C);
int __cdecl iswascii(wint_t _C);
int __cdecl iswblank(wint_t _C);
int __cdecl iswcntrl(wint_t _C);
int __cdecl iswdigit(wint_t _C);
int __cdecl iswgraph(wint_t _C);
int __cdecl iswlower(wint_t _C);
int __cdecl iswprint(wint_t _C);
int __cdecl iswpunct(wint_t _C);
int __cdecl iswspace(wint_t _C);
int __cdecl iswupper(wint_t _C);
int __cdecl iswxdigit(wint_t _C);
int __cdecl __iswcsymf(wint_t _C);
int __cdecl __iswcsym(wint_t _C);
int __cdecl _iswalnum_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswalpha_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswblank_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswcntrl_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswdigit_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswgraph_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswlower_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswprint_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswpunct_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswspace_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswupper_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswxdigit_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswcsymf_l(wint_t _C, _locale_t _Locale);
int __cdecl _iswcsym_l(wint_t _C, _locale_t _Locale);
wint_t __cdecl towupper(wint_t _C);
wint_t __cdecl towlower(wint_t _C);
int    __cdecl iswctype(wint_t _C, wctype_t _Type);
wint_t __cdecl _towupper_l(wint_t _C, _locale_t _Locale);
wint_t __cdecl _towlower_l(wint_t _C, _locale_t _Locale);
int    __cdecl _iswctype_l(wint_t _C, wctype_t _Type, _locale_t _Locale);
int __cdecl isleadbyte(int _C);
int __cdecl _isleadbyte_l(int _C, _locale_t _Locale);
int __cdecl is_wctype(wint_t _C, wctype_t _Type);
__pragma(pack(pop))
__pragma(pack(push, 8))
int __cdecl _isctype(int _C, int _Type);
int __cdecl _isctype_l(int _C, int _Type, _locale_t _Locale);
int __cdecl isalpha(int _C);
int __cdecl _isalpha_l(int _C, _locale_t _Locale);
int __cdecl isupper(int _C);
int __cdecl _isupper_l(int _C, _locale_t _Locale);
int __cdecl islower(int _C);
int __cdecl _islower_l(int _C, _locale_t _Locale);
int __cdecl isdigit(int _C);
int __cdecl _isdigit_l(int _C, _locale_t _Locale);
int __cdecl isxdigit(int _C);
int __cdecl _isxdigit_l(int _C, _locale_t _Locale);
int __cdecl isspace(int _C);
int __cdecl _isspace_l(int _C, _locale_t _Locale);
int __cdecl ispunct(int _C);
int __cdecl _ispunct_l(int _C, _locale_t _Locale);
int __cdecl isblank(int _C);
int __cdecl _isblank_l(int _C, _locale_t _Locale);
int __cdecl isalnum(int _C);
int __cdecl _isalnum_l(int _C, _locale_t _Locale);
int __cdecl isprint(int _C);
int __cdecl _isprint_l(int _C, _locale_t _Locale);
int __cdecl isgraph(int _C);
int __cdecl _isgraph_l(int _C, _locale_t _Locale);
int __cdecl iscntrl(int _C);
int __cdecl _iscntrl_l(int _C, _locale_t _Locale);
int __cdecl toupper(int _C);
int __cdecl tolower(int _C);
int __cdecl _tolower(int _C);
int __cdecl _tolower_l(int _C, _locale_t _Locale);
int __cdecl _toupper(int _C);
int __cdecl _toupper_l(int _C, _locale_t _Locale);
int __cdecl __isascii(int _C);
int __cdecl __toascii(int _C);
int __cdecl __iscsymf(int _C);
int __cdecl __iscsym(int _C);
int __cdecl __acrt_locale_get_ctype_array_value(
	unsigned short const* const _Locale_pctype_array,
	int                    const _Char_value,
	int                    const _Mask
);
int __cdecl ___mb_cur_max_func(void);
int __cdecl ___mb_cur_max_l_func(_locale_t _Locale);
int __cdecl _chvalidator(int _Ch, int _Mask);
int __cdecl __ascii_tolower(int const _C);
int __cdecl __ascii_toupper(int const _C);
int __cdecl __ascii_iswalpha(int const _C);
int __cdecl __ascii_iswdigit(int const _C);
int __cdecl __ascii_towlower(int const _C);
int __cdecl __ascii_towupper(int const _C);
__crt_locale_data_public* __cdecl __acrt_get_locale_data_prefix(void const volatile* const _LocalePointers);
int __cdecl _chvalidator_l(_locale_t, int _Ch, int _Mask);
int __cdecl _chvalidchk_l(
	int       const _C,
	int       const _Mask,
	_locale_t const _Locale
);
int __cdecl _ischartype_l(
	int       const _C,
	int       const _Mask,
	_locale_t const _Locale
);
__pragma(pack(pop))
typedef unsigned __int64 POINTER_64_INT;
typedef signed char         INT8, * PINT8;
typedef signed short        INT16, * PINT16;
typedef signed int          INT32, * PINT32;
typedef signed __int64      INT64, * PINT64;
typedef unsigned char       UINT8, * PUINT8;
typedef unsigned short      UINT16, * PUINT16;
typedef unsigned int        UINT32, * PUINT32;
typedef unsigned __int64    UINT64, * PUINT64;
typedef signed int LONG32, * PLONG32;
typedef unsigned int ULONG32, * PULONG32;
typedef unsigned int DWORD32, * PDWORD32;
typedef __int64 INT_PTR, * PINT_PTR;
typedef unsigned __int64 UINT_PTR, * PUINT_PTR;
typedef __int64 LONG_PTR, * PLONG_PTR;
typedef unsigned __int64 ULONG_PTR, * PULONG_PTR;
typedef __int64 SHANDLE_PTR;
typedef unsigned __int64 HANDLE_PTR;
typedef unsigned int UHALF_PTR, * PUHALF_PTR;
typedef int HALF_PTR, * PHALF_PTR;

unsigned long
HandleToULong(
	const void* h
);

long
HandleToLong(
	const void* h
);

void*
ULongToHandle(
	const unsigned long h
);

void*
LongToHandle(
	const long h
);

unsigned long
PtrToUlong(
	const void* p
);

unsigned int
PtrToUint(
	const void* p
);

unsigned short
PtrToUshort(
	const void* p
);

long
PtrToLong(
	const void* p
);

int
PtrToInt(
	const void* p
);

short
PtrToShort(
	const void* p
);

void*
IntToPtr(
	const int i
);

void*
UIntToPtr(
	const unsigned int ui
);

void*
LongToPtr(
	const long l
);

void*
ULongToPtr(
	const unsigned long ul
);

void*
Ptr32ToPtr(
	const void* __ptr32 p
);

void*
Handle32ToHandle(
	const void* __ptr32 h
);

void* __ptr32
PtrToPtr32(
	const void* p
);
typedef ULONG_PTR SIZE_T, * PSIZE_T;
typedef LONG_PTR SSIZE_T, * PSSIZE_T;
typedef ULONG_PTR DWORD_PTR, * PDWORD_PTR;
typedef __int64 LONG64, * PLONG64;
typedef unsigned __int64 ULONG64, * PULONG64;
typedef unsigned __int64 DWORD64, * PDWORD64;
typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY* PKAFFINITY;
typedef void* PVOID;
typedef void* __ptr64 PVOID64;
typedef char CHAR;
typedef short SHORT;
typedef long LONG;
typedef int INT;
typedef wchar_t WCHAR;
typedef WCHAR* PWCHAR, * LPWCH, * PWCH;
typedef const WCHAR* LPCWCH, * PCWCH;
typedef   WCHAR* NWPSTR, * LPWSTR, * PWSTR;
typedef   PWSTR* PZPWSTR;
typedef   const PWSTR* PCZPWSTR;
typedef   WCHAR __unaligned* LPUWSTR, * PUWSTR;
typedef   const WCHAR* LPCWSTR, * PCWSTR;
typedef   PCWSTR* PZPCWSTR;
typedef   const PCWSTR* PCZPCWSTR;
typedef   const WCHAR __unaligned* LPCUWSTR, * PCUWSTR;
typedef   WCHAR* PZZWSTR;
typedef   const WCHAR* PCZZWSTR;
typedef   WCHAR __unaligned* PUZZWSTR;
typedef   const WCHAR __unaligned* PCUZZWSTR;
typedef  WCHAR* PNZWCH;
typedef  const WCHAR* PCNZWCH;
typedef  WCHAR __unaligned* PUNZWCH;
typedef  const WCHAR __unaligned* PCUNZWCH;
typedef const WCHAR* LPCWCHAR, * PCWCHAR;
typedef const WCHAR __unaligned* LPCUWCHAR, * PCUWCHAR;
typedef unsigned long UCSCHAR;
typedef UCSCHAR* PUCSCHAR;
typedef const UCSCHAR* PCUCSCHAR;
typedef UCSCHAR* PUCSSTR;
typedef UCSCHAR __unaligned* PUUCSSTR;
typedef const UCSCHAR* PCUCSSTR;
typedef const UCSCHAR __unaligned* PCUUCSSTR;
typedef UCSCHAR __unaligned* PUUCSCHAR;
typedef const UCSCHAR __unaligned* PCUUCSCHAR;
typedef CHAR* PCHAR, * LPCH, * PCH;
typedef const CHAR* LPCCH, * PCCH;
typedef   CHAR* NPSTR, * LPSTR, * PSTR;
typedef   PSTR* PZPSTR;
typedef   const PSTR* PCZPSTR;
typedef   const CHAR* LPCSTR, * PCSTR;
typedef   PCSTR* PZPCSTR;
typedef   const PCSTR* PCZPCSTR;
typedef   CHAR* PZZSTR;
typedef   const CHAR* PCZZSTR;
typedef  CHAR* PNZCH;
typedef  const CHAR* PCNZCH;
typedef WCHAR TCHAR, * PTCHAR;
typedef WCHAR TBYTE, * PTBYTE;
typedef LPWCH LPTCH, PTCH;
typedef LPCWCH LPCTCH, PCTCH;
typedef LPWSTR PTSTR, LPTSTR;
typedef LPCWSTR PCTSTR, LPCTSTR;
typedef LPUWSTR PUTSTR, LPUTSTR;
typedef LPCUWSTR PCUTSTR, LPCUTSTR;
typedef LPWSTR LP;
typedef PZZWSTR PZZTSTR;
typedef PCZZWSTR PCZZTSTR;
typedef PUZZWSTR PUZZTSTR;
typedef PCUZZWSTR PCUZZTSTR;
typedef PZPWSTR PZPTSTR;
typedef PNZWCH PNZTCH;
typedef PCNZWCH PCNZTCH;
typedef PUNZWCH PUNZTCH;
typedef PCUNZWCH PCUNZTCH;
typedef SHORT* PSHORT;
typedef LONG* PLONG;
typedef struct _PROCESSOR_NUMBER {
	WORD   Group;
	BYTE  Number;
	BYTE  Reserved;
} PROCESSOR_NUMBER, * PPROCESSOR_NUMBER;
typedef struct _GROUP_AFFINITY {
	KAFFINITY Mask;
	WORD   Group;
	WORD   Reserved[3];
} GROUP_AFFINITY, * PGROUP_AFFINITY;
typedef void* HANDLE;
typedef HANDLE* PHANDLE;
typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;
typedef   long HRESULT;
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD   LANGID;
typedef enum {
	UNSPECIFIED_COMPARTMENT_ID = 0,
	DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, * PCOMPARTMENT_ID;
typedef struct _FLOAT128 {
	__int64 LowPart;
	__int64 HighPart;
} FLOAT128;
typedef FLOAT128* PFLOAT128;
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
typedef LONGLONG* PLONGLONG;
typedef ULONGLONG* PULONGLONG;
typedef LONGLONG USN;
typedef union _LARGE_INTEGER {
	struct {
		DWORD LowPart;
		LONG HighPart;
	};
	struct {
		DWORD LowPart;
		LONG HighPart;
	} u;
	LONGLONG QuadPart;
} LARGE_INTEGER;
typedef LARGE_INTEGER* PLARGE_INTEGER;
typedef union _ULARGE_INTEGER {
	struct {
		DWORD LowPart;
		DWORD HighPart;
	};
	struct {
		DWORD LowPart;
		DWORD HighPart;
	} u;
	ULONGLONG QuadPart;
} ULARGE_INTEGER;
typedef ULARGE_INTEGER* PULARGE_INTEGER;
typedef LONG_PTR RTL_REFERENCE_COUNT, * PRTL_REFERENCE_COUNT;
typedef LONG RTL_REFERENCE_COUNT32, * PRTL_REFERENCE_COUNT32;
typedef struct _LUID {
	DWORD LowPart;
	LONG HighPart;
} LUID, * PLUID;
typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG* PDWORDLONG;
unsigned char
__cdecl
_rotl8(
	unsigned char Value,
	unsigned char Shift
);
unsigned short
__cdecl
_rotl16(
	unsigned short Value,
	unsigned char Shift
);
unsigned char
__cdecl
_rotr8(
	unsigned char Value,
	unsigned char Shift
);
unsigned short
__cdecl
_rotr16(
	unsigned short Value,
	unsigned char Shift
);
unsigned int
__cdecl
_rotl(
	unsigned int Value,
	int Shift
);
unsigned __int64
__cdecl
_rotl64(
	unsigned __int64 Value,
	int Shift
);
unsigned int
__cdecl
_rotr(
	unsigned int Value,
	int Shift
);
unsigned __int64
__cdecl
_rotr64(
	unsigned __int64 Value,
	int Shift
);
typedef BYTE  BOOLEAN;
typedef BOOLEAN* PBOOLEAN;
typedef struct _LIST_ENTRY {
	struct _LIST_ENTRY* Flink;
	struct _LIST_ENTRY* Blink;
} LIST_ENTRY, * PLIST_ENTRY, * PRLIST_ENTRY;
typedef struct _SINGLE_LIST_ENTRY {
	struct _SINGLE_LIST_ENTRY* Next;
} SINGLE_LIST_ENTRY, * PSINGLE_LIST_ENTRY;
typedef struct LIST_ENTRY32 {
	DWORD Flink;
	DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32* PLIST_ENTRY32;
typedef struct LIST_ENTRY64 {
	ULONGLONG Flink;
	ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64* PLIST_ENTRY64;
typedef struct _GUID {
	unsigned long  Data1;
	unsigned short Data2;
	unsigned short Data3;
	unsigned char  Data4[8];
} GUID;
typedef GUID* LPGUID;
typedef const GUID* LPCGUID;
typedef GUID IID;
typedef IID* LPIID;
typedef GUID CLSID;
typedef CLSID* LPCLSID;
typedef GUID FMTID;
typedef FMTID* LPFMTID;
__pragma(pack(push, 8))
int* __cdecl _errno(void);
errno_t __cdecl _set_errno(int _Value);
errno_t __cdecl _get_errno(int* _Value);
unsigned long* __cdecl __doserrno(void);
errno_t __cdecl _set_doserrno(unsigned long _Value);
errno_t __cdecl _get_doserrno(unsigned long* _Value);
__pragma(pack(pop))
__pragma(pack(push, 8))
void* __cdecl memchr(
	void const* _Buf,
	int         _Val,
	size_t      _MaxCount
);
int __cdecl memcmp(
	void const* _Buf1,
	void const* _Buf2,
	size_t      _Size
);
void* __cdecl memcpy(
	void* _Dst,
	void const* _Src,
	size_t      _Size
);
void* __cdecl memmove(
	void* _Dst,
	void const* _Src,
	size_t      _Size
);
void* __cdecl memset(
	void* _Dst,
	int    _Val,
	size_t _Size
);
char* __cdecl strchr(
	char const* _Str,
	int         _Val
);
char* __cdecl strrchr(
	char const* _Str,
	int         _Ch
);
char* __cdecl strstr(
	char const* _Str,
	char const* _SubStr
);
wchar_t* __cdecl wcschr(
	wchar_t const* _Str,
	wchar_t        _Ch
);
wchar_t* __cdecl wcsrchr(
	wchar_t const* _Str,
	wchar_t        _Ch
);
wchar_t* __cdecl wcsstr(
	wchar_t const* _Str,
	wchar_t const* _SubStr
);
__pragma(pack(pop))
__pragma(pack(push, 8))
static  errno_t __cdecl memcpy_s(
	void* const _Destination,
	rsize_t     const _DestinationSize,
	void const* const _Source,
	rsize_t     const _SourceSize
);
static  errno_t __cdecl memmove_s(
	void* const _Destination,
	rsize_t     const _DestinationSize,
	void const* const _Source,
	rsize_t     const _SourceSize
);
__pragma(pack(pop))
__pragma(pack(push, 8))
int __cdecl _memicmp(
	void const* _Buf1,
	void const* _Buf2,
	size_t      _Size
);
int __cdecl _memicmp_l(
	void const* _Buf1,
	void const* _Buf2,
	size_t      _Size,
	_locale_t   _Locale
);

void* __cdecl memccpy(
	void* _Dst,
	void const* _Src,
	int         _Val,
	size_t      _Size
);

int __cdecl memicmp(
	void const* _Buf1,
	void const* _Buf2,
	size_t      _Size
);
__pragma(pack(pop))
__pragma(pack(push, 8))
errno_t __cdecl wcscat_s(
	wchar_t* _Destination,
	rsize_t _SizeInWords,
	wchar_t const* _Source
);
errno_t __cdecl wcscpy_s(
	wchar_t* _Destination,
	rsize_t _SizeInWords,
	wchar_t const* _Source
);
errno_t __cdecl wcsncat_s(
	wchar_t* _Destination,
	rsize_t        _SizeInWords,
	wchar_t const* _Source,
	rsize_t        _MaxCount
);
errno_t __cdecl wcsncpy_s(
	wchar_t* _Destination,
	rsize_t        _SizeInWords,
	wchar_t const* _Source,
	rsize_t        _MaxCount
);
wchar_t* __cdecl wcstok_s(
	wchar_t* _String,
	wchar_t const* _Delimiter,
	wchar_t** _Context
);
wchar_t* __cdecl _wcsdup(
	wchar_t const* _String
);
wchar_t* __cdecl wcscat(wchar_t* _Destination, wchar_t const* _Source);
int __cdecl wcscmp(
	wchar_t const* _String1,
	wchar_t const* _String2
);
wchar_t* __cdecl wcscpy(wchar_t* _Destination, wchar_t const* _Source);
size_t __cdecl wcscspn(
	wchar_t const* _String,
	wchar_t const* _Control
);
size_t __cdecl wcslen(
	wchar_t const* _String
);
size_t __cdecl wcsnlen(
	wchar_t const* _Source,
	size_t         _MaxCount
);
static  size_t __cdecl wcsnlen_s(
	wchar_t const* _Source,
	size_t         _MaxCount
);
wchar_t* __cdecl wcsncat(wchar_t* _Destination, wchar_t const* _Source, size_t _Count);
int __cdecl wcsncmp(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount
);
wchar_t* __cdecl wcsncpy(wchar_t* _Destination, wchar_t const* _Source, size_t _Count);
wchar_t* __cdecl wcspbrk(
	wchar_t const* _String,
	wchar_t const* _Control
);
size_t __cdecl wcsspn(
	wchar_t const* _String,
	wchar_t const* _Control
);

wchar_t* __cdecl wcstok(
	wchar_t* _String,
	wchar_t const* _Delimiter,
	wchar_t** _Context
);

static  wchar_t* __cdecl _wcstok(
	wchar_t* const _String,
	wchar_t const* const _Delimiter
);

wchar_t* __cdecl _wcserror(
	int _ErrorNumber
);
errno_t __cdecl _wcserror_s(
	wchar_t* _Buffer,
	size_t   _SizeInWords,
	int      _ErrorNumber
);

wchar_t* __cdecl __wcserror(
	wchar_t const* _String
);
errno_t __cdecl __wcserror_s(
	wchar_t* _Buffer,
	size_t         _SizeInWords,
	wchar_t const* _ErrorMessage
);
int __cdecl _wcsicmp(
	wchar_t const* _String1,
	wchar_t const* _String2
);
int __cdecl _wcsicmp_l(
	wchar_t const* _String1,
	wchar_t const* _String2,
	_locale_t      _Locale
);
int __cdecl _wcsnicmp(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount
);
int __cdecl _wcsnicmp_l(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount,
	_locale_t      _Locale
);
errno_t __cdecl _wcsnset_s(
	wchar_t* _Destination,
	size_t   _SizeInWords,
	wchar_t  _Value,
	size_t   _MaxCount
);
wchar_t* __cdecl _wcsnset(wchar_t* _String, wchar_t _Value, size_t _MaxCount);
wchar_t* __cdecl _wcsrev(
	wchar_t* _String
);
errno_t __cdecl _wcsset_s(
	wchar_t* _Destination,
	size_t   _SizeInWords,
	wchar_t  _Value
);
wchar_t* __cdecl _wcsset(wchar_t* _String, wchar_t _Value);
errno_t __cdecl _wcslwr_s(
	wchar_t* _String,
	size_t   _SizeInWords
);
wchar_t* __cdecl _wcslwr(wchar_t* _String);
errno_t __cdecl _wcslwr_s_l(
	wchar_t* _String,
	size_t    _SizeInWords,
	_locale_t _Locale
);
wchar_t* __cdecl _wcslwr_l(wchar_t* _String, _locale_t _Locale);
errno_t __cdecl _wcsupr_s(
	wchar_t* _String,
	size_t   _Size
);
wchar_t* __cdecl _wcsupr(wchar_t* _String);
errno_t __cdecl _wcsupr_s_l(
	wchar_t* _String,
	size_t    _Size,
	_locale_t _Locale
);
wchar_t* __cdecl _wcsupr_l(wchar_t* _String, _locale_t _Locale);
size_t __cdecl wcsxfrm(
	wchar_t* _Destination,
	wchar_t const* _Source,
	size_t         _MaxCount
);
size_t __cdecl _wcsxfrm_l(
	wchar_t* _Destination,
	wchar_t const* _Source,
	size_t         _MaxCount,
	_locale_t      _Locale
);
int __cdecl wcscoll(
	wchar_t const* _String1,
	wchar_t const* _String2
);
int __cdecl _wcscoll_l(
	wchar_t const* _String1,
	wchar_t const* _String2,
	_locale_t      _Locale
);
int __cdecl _wcsicoll(
	wchar_t const* _String1,
	wchar_t const* _String2
);
int __cdecl _wcsicoll_l(
	wchar_t const* _String1,
	wchar_t const* _String2,
	_locale_t      _Locale
);
int __cdecl _wcsncoll(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount
);
int __cdecl _wcsncoll_l(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount,
	_locale_t      _Locale
);
int __cdecl _wcsnicoll(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount
);
int __cdecl _wcsnicoll_l(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount,
	_locale_t      _Locale
);

wchar_t* __cdecl wcsdup(
	wchar_t const* _String
);

int __cdecl wcsicmp(
	wchar_t const* _String1,
	wchar_t const* _String2
);

int __cdecl wcsnicmp(
	wchar_t const* _String1,
	wchar_t const* _String2,
	size_t         _MaxCount
);

wchar_t* __cdecl wcsnset(
	wchar_t* _String,
	wchar_t  _Value,
	size_t   _MaxCount
);

wchar_t* __cdecl wcsrev(
	wchar_t* _String
);

wchar_t* __cdecl wcsset(
	wchar_t* _String,
	wchar_t  _Value
);

wchar_t* __cdecl wcslwr(
	wchar_t* _String
);

wchar_t* __cdecl wcsupr(
	wchar_t* _String
);

int __cdecl wcsicoll(
	wchar_t const* _String1,
	wchar_t const* _String2
);
__pragma(pack(pop))
__pragma(pack(push, 8))
errno_t __cdecl strcpy_s(
	char* _Destination,
	rsize_t     _SizeInBytes,
	char const* _Source
);
errno_t __cdecl strcat_s(
	char* _Destination,
	rsize_t     _SizeInBytes,
	char const* _Source
);
errno_t __cdecl strerror_s(
	char* _Buffer,
	size_t _SizeInBytes,
	int    _ErrorNumber);
errno_t __cdecl strncat_s(
	char* _Destination,
	rsize_t     _SizeInBytes,
	char const* _Source,
	rsize_t     _MaxCount
);
errno_t __cdecl strncpy_s(
	char* _Destination,
	rsize_t     _SizeInBytes,
	char const* _Source,
	rsize_t     _MaxCount
);
char* __cdecl strtok_s(
	char* _String,
	char const* _Delimiter,
	char** _Context
);
void* __cdecl _memccpy(
	void* _Dst,
	void const* _Src,
	int         _Val,
	size_t      _MaxCount
);
char* __cdecl strcat(char* _Destination, char const* _Source);
int __cdecl strcmp(
	char const* _Str1,
	char const* _Str2
);
int __cdecl _strcmpi(
	char const* _String1,
	char const* _String2
);
int __cdecl strcoll(
	char const* _String1,
	char const* _String2
);
int __cdecl _strcoll_l(
	char const* _String1,
	char const* _String2,
	_locale_t   _Locale
);
char* __cdecl strcpy(char* _Destination, char const* _Source);
size_t __cdecl strcspn(
	char const* _Str,
	char const* _Control
);
char* __cdecl _strdup(
	char const* _Source
);

char* __cdecl _strerror(
	char const* _ErrorMessage
);
errno_t __cdecl _strerror_s(
	char* _Buffer,
	size_t      _SizeInBytes,
	char const* _ErrorMessage
);

char* __cdecl strerror(
	int _ErrorMessage
);
int __cdecl _stricmp(
	char const* _String1,
	char const* _String2
);
int __cdecl _stricoll(
	char const* _String1,
	char const* _String2
);
int __cdecl _stricoll_l(
	char const* _String1,
	char const* _String2,
	_locale_t   _Locale
);
int __cdecl _stricmp_l(
	char const* _String1,
	char const* _String2,
	_locale_t   _Locale
);
size_t __cdecl strlen(
	char const* _Str
);
errno_t __cdecl _strlwr_s(
	char* _String,
	size_t _Size
);
char* __cdecl _strlwr(char* _String);
errno_t __cdecl _strlwr_s_l(
	char* _String,
	size_t    _Size,
	_locale_t _Locale
);
char* __cdecl _strlwr_l(char* _String, _locale_t _Locale);
char* __cdecl strncat(char* _Destination, char const* _Source, size_t _Count);
int __cdecl strncmp(
	char const* _Str1,
	char const* _Str2,
	size_t      _MaxCount
);
int __cdecl _strnicmp(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount
);
int __cdecl _strnicmp_l(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount,
	_locale_t   _Locale
);
int __cdecl _strnicoll(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount
);
int __cdecl _strnicoll_l(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount,
	_locale_t   _Locale
);
int __cdecl _strncoll(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount
);
int __cdecl _strncoll_l(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount,
	_locale_t   _Locale
);
size_t __cdecl __strncnt(
	char const* _String,
	size_t      _Count
);
char* __cdecl strncpy(char* _Destination, char const* _Source, size_t _Count);
size_t __cdecl strnlen(
	char const* _String,
	size_t      _MaxCount
);
static  size_t __cdecl strnlen_s(
	char const* _String,
	size_t      _MaxCount
);
errno_t __cdecl _strnset_s(
	char* _String,
	size_t _SizeInBytes,
	int    _Value,
	size_t _MaxCount
);
char* __cdecl _strnset(char* _Destination, int _Value, size_t _Count);
char* __cdecl strpbrk(
	char const* _Str,
	char const* _Control
);
char* __cdecl _strrev(
	char* _Str
);
errno_t __cdecl _strset_s(
	char* _Destination,
	size_t _DestinationSize,
	int    _Value
);
char* __cdecl _strset(char* _Destination, int _Value);
size_t __cdecl strspn(
	char const* _Str,
	char const* _Control
);

char* __cdecl strtok(
	char* _String,
	char const* _Delimiter
);
errno_t __cdecl _strupr_s(
	char* _String,
	size_t _Size
);
char* __cdecl _strupr(char* _String);
errno_t __cdecl _strupr_s_l(
	char* _String,
	size_t    _Size,
	_locale_t _Locale
);
char* __cdecl _strupr_l(char* _String, _locale_t _Locale);
size_t __cdecl strxfrm(
	char* _Destination,
	char const* _Source,
	size_t      _MaxCount
);
size_t __cdecl _strxfrm_l(
	char* _Destination,
	char const* _Source,
	size_t      _MaxCount,
	_locale_t   _Locale
);

char* __cdecl strdup(
	char const* _String
);

int __cdecl strcmpi(
	char const* _String1,
	char const* _String2
);

int __cdecl stricmp(
	char const* _String1,
	char const* _String2
);

char* __cdecl strlwr(
	char* _String
);

int __cdecl strnicmp(
	char const* _String1,
	char const* _String2,
	size_t      _MaxCount
);

char* __cdecl strnset(
	char* _String,
	int    _Value,
	size_t _MaxCount
);

char* __cdecl strrev(
	char* _String
);

char* __cdecl strset(
	char* _String,
	int   _Value);

char* __cdecl strupr(
	char* _String
);
__pragma(pack(pop))
typedef struct  _OBJECTID {
	GUID Lineage;
	DWORD Uniquifier;
} OBJECTID;
typedef
EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE(
	struct _EXCEPTION_RECORD* ExceptionRecord,
	PVOID EstablisherFrame,
	struct _CONTEXT* ContextRecord,
	PVOID DispatcherContext
);
typedef EXCEPTION_ROUTINE* PEXCEPTION_ROUTINE;
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((struct { char x; LARGE_INTEGER test; }*)0)->test)) == 8) ? 1 : -1];
typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK* PKSPIN_LOCK;
typedef struct  _M128A {
	ULONGLONG Low;
	LONGLONG High;
} M128A, * PM128A;
typedef struct  _XSAVE_FORMAT {
	WORD   ControlWord;
	WORD   StatusWord;
	BYTE  TagWord;
	BYTE  Reserved1;
	WORD   ErrorOpcode;
	DWORD ErrorOffset;
	WORD   ErrorSelector;
	WORD   Reserved2;
	DWORD DataOffset;
	WORD   DataSelector;
	WORD   Reserved3;
	DWORD MxCsr;
	DWORD MxCsr_Mask;
	M128A FloatRegisters[8];
	M128A XmmRegisters[16];
	BYTE  Reserved4[96];
} XSAVE_FORMAT, * PXSAVE_FORMAT;
typedef struct _XSAVE_CET_U_FORMAT {
	DWORD64 Ia32CetUMsr;
	DWORD64 Ia32Pl3SspMsr;
} XSAVE_CET_U_FORMAT, * PXSAVE_CET_U_FORMAT;
typedef struct  _XSAVE_AREA_HEADER {
	DWORD64 Mask;
	DWORD64 CompactionMask;
	DWORD64 Reserved2[6];
} XSAVE_AREA_HEADER, * PXSAVE_AREA_HEADER;
typedef struct  _XSAVE_AREA {
	XSAVE_FORMAT LegacyState;
	XSAVE_AREA_HEADER Header;
} XSAVE_AREA, * PXSAVE_AREA;
typedef struct _XSTATE_CONTEXT {
	DWORD64 Mask;
	DWORD Length;
	DWORD Reserved1;
	PXSAVE_AREA Area;
	PVOID Buffer;
} XSTATE_CONTEXT, * PXSTATE_CONTEXT;
typedef struct _SCOPE_TABLE_AMD64 {
	DWORD Count;
	struct {
		DWORD BeginAddress;
		DWORD EndAddress;
		DWORD HandlerAddress;
		DWORD JumpTarget;
	} ScopeRecord[1];
} SCOPE_TABLE_AMD64, * PSCOPE_TABLE_AMD64;
BOOLEAN
_bittest(
	LONG const* Base,
	LONG Offset
);
BOOLEAN
_bittestandcomplement(
	LONG* Base,
	LONG Offset
);
BOOLEAN
_bittestandset(
	LONG* Base,
	LONG Offset
);
BOOLEAN
_bittestandreset(
	LONG* Base,
	LONG Offset
);
BOOLEAN
_interlockedbittestandset(
	LONG volatile* Base,
	LONG Offset
);
BOOLEAN
_interlockedbittestandreset(
	LONG volatile* Base,
	LONG Offset
);
BOOLEAN
_bittest64(
	LONG64 const* Base,
	LONG64 Offset
);
BOOLEAN
_bittestandcomplement64(
	LONG64* Base,
	LONG64 Offset
);
BOOLEAN
_bittestandset64(
	LONG64* Base,
	LONG64 Offset
);
BOOLEAN
_bittestandreset64(
	LONG64* Base,
	LONG64 Offset
);
BOOLEAN
_interlockedbittestandset64(
	LONG64 volatile* Base,
	LONG64 Offset
);
BOOLEAN
_interlockedbittestandreset64(
	LONG64 volatile* Base,
	LONG64 Offset
);
BOOLEAN
_BitScanForward(
	DWORD* Index,
	DWORD Mask
);
BOOLEAN
_BitScanReverse(
	DWORD* Index,
	DWORD Mask
);
BOOLEAN
_BitScanForward64(
	DWORD* Index,
	DWORD64 Mask
);
BOOLEAN
_BitScanReverse64(
	DWORD* Index,
	DWORD64 Mask
);
SHORT
_InterlockedIncrement16(
	SHORT volatile* Addend
);
SHORT
_InterlockedDecrement16(
	SHORT volatile* Addend
);
SHORT
_InterlockedCompareExchange16(
	SHORT volatile* Destination,
	SHORT ExChange,
	SHORT Comperand
);
LONG
_InterlockedAnd(
	LONG volatile* Destination,
	LONG Value
);
LONG
_InterlockedOr(
	LONG volatile* Destination,
	LONG Value
);
LONG
_InterlockedXor(
	LONG volatile* Destination,
	LONG Value
);
LONG64
_InterlockedAnd64(
	LONG64 volatile* Destination,
	LONG64 Value
);
LONG64
_InterlockedOr64(
	LONG64 volatile* Destination,
	LONG64 Value
);
LONG64
_InterlockedXor64(
	LONG64 volatile* Destination,
	LONG64 Value
);
LONG
_InterlockedIncrement(
	LONG volatile* Addend
);
LONG
_InterlockedDecrement(
	LONG volatile* Addend
);
LONG
_InterlockedExchange(
	LONG volatile* Target,
	LONG Value
);
LONG
_InterlockedExchangeAdd(
	LONG volatile* Addend,
	LONG Value
);

LONG
_InlineInterlockedAdd(
	LONG volatile* Addend,
	LONG Value
);
LONG
_InterlockedCompareExchange(
	LONG volatile* Destination,
	LONG ExChange,
	LONG Comperand
);
LONG64
_InterlockedIncrement64(
	LONG64 volatile* Addend
);
LONG64
_InterlockedDecrement64(
	LONG64 volatile* Addend
);
LONG64
_InterlockedExchange64(
	LONG64 volatile* Target,
	LONG64 Value
);
LONG64
_InterlockedExchangeAdd64(
	LONG64 volatile* Addend,
	LONG64 Value
);

LONG64
_InlineInterlockedAdd64(
	LONG64 volatile* Addend,
	LONG64 Value
);
LONG64
_InterlockedCompareExchange64(
	LONG64 volatile* Destination,
	LONG64 ExChange,
	LONG64 Comperand
);
BOOLEAN
_InterlockedCompareExchange128(
	LONG64 volatile* Destination,
	LONG64 ExchangeHigh,
	LONG64 ExchangeLow,
	LONG64* ComparandResult
);
PVOID
_InterlockedCompareExchangePointer(
	PVOID volatile* Destination,
	PVOID Exchange,
	PVOID Comperand
);
PVOID
_InterlockedExchangePointer(
	PVOID volatile* Target,
	PVOID Value
);
CHAR
_InterlockedExchange8(
	CHAR volatile* Target,
	CHAR Value
);
SHORT
_InterlockedExchange16(
	SHORT volatile* Destination,
	SHORT ExChange
);
char
_InterlockedExchangeAdd8(
	char volatile* _Addend,
	char _Value
);
char
_InterlockedAnd8(
	char volatile* Destination,
	char Value
);
char
_InterlockedOr8(
	char volatile* Destination,
	char Value
);
char
_InterlockedXor8(
	char volatile* Destination,
	char Value
);
SHORT
_InterlockedAnd16(
	SHORT volatile* Destination,
	SHORT Value
);
SHORT
_InterlockedOr16(
	SHORT volatile* Destination,
	SHORT Value
);
SHORT
_InterlockedXor16(
	SHORT volatile* Destination,
	SHORT Value
);
void
__cpuidex(
	int CPUInfo[4],
	int Function,
	int SubLeaf
);
void
_mm_clflush(
	void const* Address
);
void
_ReadWriteBarrier(
	void
);
void
__faststorefence(
	void
);
void
_mm_lfence(
	void
);
void
_mm_mfence(
	void
);
void
_mm_sfence(
	void
);
void
_mm_pause(
	void
);
void
_mm_prefetch(
	CHAR const* a,
	int sel
);
void
_m_prefetchw(
	volatile const void* Source
);
unsigned int
_mm_getcsr(
	void
);
void
_mm_setcsr(
	unsigned int MxCsr
);
unsigned __int32
__getcallerseflags(
	void
);
DWORD
__segmentlimit(
	DWORD Selector
);
DWORD64
__readpmc(
	DWORD Counter
);
DWORD64
__rdtsc(
	void
);
void
__movsb(
	PBYTE  Destination,
	BYTE  const* Source,
	SIZE_T Count
);
void
__movsw(
	PWORD   Destination,
	WORD   const* Source,
	SIZE_T Count
);
void
__movsd(
	PDWORD Destination,
	DWORD const* Source,
	SIZE_T Count
);
void
__movsq(
	PDWORD64 Destination,
	DWORD64 const* Source,
	SIZE_T Count
);
void
__stosb(
	PBYTE  Destination,
	BYTE  Value,
	SIZE_T Count
);
void
__stosw(
	PWORD   Destination,
	WORD   Value,
	SIZE_T Count
);
void
__stosd(
	PDWORD Destination,
	DWORD Value,
	SIZE_T Count
);
void
__stosq(
	PDWORD64 Destination,
	DWORD64 Value,
	SIZE_T Count
);
LONGLONG
__mulh(
	LONG64 Multiplier,
	LONG64 Multiplicand
);
ULONGLONG
__umulh(
	DWORD64 Multiplier,
	DWORD64 Multiplicand
);
DWORD64
__popcnt64(
	DWORD64 operand
);
DWORD64
__shiftleft128(
	DWORD64 LowPart,
	DWORD64 HighPart,
	BYTE  Shift
);
DWORD64
__shiftright128(
	DWORD64 LowPart,
	DWORD64 HighPart,
	BYTE  Shift
);
LONG64
_mul128(
	LONG64 Multiplier,
	LONG64 Multiplicand,
	LONG64* HighProduct
);
DWORD64
_umul128(
	DWORD64 Multiplier,
	DWORD64 Multiplicand,
	DWORD64* HighProduct
);

LONG64
MultiplyExtract128(
	LONG64 Multiplier,
	LONG64 Multiplicand,
	BYTE  Shift
);

DWORD64
UnsignedMultiplyExtract128(
	DWORD64 Multiplier,
	DWORD64 Multiplicand,
	BYTE  Shift
);
BYTE
__readgsbyte(
	DWORD Offset
);
WORD
__readgsword(
	DWORD Offset
);
DWORD
__readgsdword(
	DWORD Offset
);
DWORD64
__readgsqword(
	DWORD Offset
);
void
__writegsbyte(
	DWORD Offset,
	BYTE  Data
);
void
__writegsword(
	DWORD Offset,
	WORD   Data
);
void
__writegsdword(
	DWORD Offset,
	DWORD Data
);
void
__writegsqword(
	DWORD Offset,
	DWORD64 Data
);
void
__incgsbyte(
	DWORD Offset
);
void
__addgsbyte(
	DWORD Offset,
	BYTE  Value
);
void
__incgsword(
	DWORD Offset
);
void
__addgsword(
	DWORD Offset,
	WORD   Value
);
void
__incgsdword(
	DWORD Offset
);
void
__addgsdword(
	DWORD Offset,
	DWORD Value
);
void
__incgsqword(
	DWORD Offset
);
void
__addgsqword(
	DWORD Offset,
	DWORD64 Value
);
typedef XSAVE_FORMAT XMM_SAVE_AREA32, * PXMM_SAVE_AREA32;
typedef struct   _CONTEXT {
	DWORD64 P1Home;
	DWORD64 P2Home;
	DWORD64 P3Home;
	DWORD64 P4Home;
	DWORD64 P5Home;
	DWORD64 P6Home;
	DWORD ContextFlags;
	DWORD MxCsr;
	WORD   SegCs;
	WORD   SegDs;
	WORD   SegEs;
	WORD   SegFs;
	WORD   SegGs;
	WORD   SegSs;
	DWORD EFlags;
	DWORD64 Dr0;
	DWORD64 Dr1;
	DWORD64 Dr2;
	DWORD64 Dr3;
	DWORD64 Dr6;
	DWORD64 Dr7;
	DWORD64 Rax;
	DWORD64 Rcx;
	DWORD64 Rdx;
	DWORD64 Rbx;
	DWORD64 Rsp;
	DWORD64 Rbp;
	DWORD64 Rsi;
	DWORD64 Rdi;
	DWORD64 R8;
	DWORD64 R9;
	DWORD64 R10;
	DWORD64 R11;
	DWORD64 R12;
	DWORD64 R13;
	DWORD64 R14;
	DWORD64 R15;
	DWORD64 Rip;
	union {
		XMM_SAVE_AREA32 FltSave;
		struct {
			M128A Header[2];
			M128A Legacy[8];
			M128A Xmm0;
			M128A Xmm1;
			M128A Xmm2;
			M128A Xmm3;
			M128A Xmm4;
			M128A Xmm5;
			M128A Xmm6;
			M128A Xmm7;
			M128A Xmm8;
			M128A Xmm9;
			M128A Xmm10;
			M128A Xmm11;
			M128A Xmm12;
			M128A Xmm13;
			M128A Xmm14;
			M128A Xmm15;
		};
	};
	M128A VectorRegister[26];
	DWORD64 VectorControl;
	DWORD64 DebugControl;
	DWORD64 LastBranchToRip;
	DWORD64 LastBranchFromRip;
	DWORD64 LastExceptionToRip;
	DWORD64 LastExceptionFromRip;
} CONTEXT, * PCONTEXT;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY RUNTIME_FUNCTION, * PRUNTIME_FUNCTION;
typedef SCOPE_TABLE_AMD64 SCOPE_TABLE, * PSCOPE_TABLE;
typedef struct _UNWIND_HISTORY_TABLE_ENTRY {
	DWORD64 ImageBase;
	PRUNTIME_FUNCTION FunctionEntry;
} UNWIND_HISTORY_TABLE_ENTRY, * PUNWIND_HISTORY_TABLE_ENTRY;
typedef struct _UNWIND_HISTORY_TABLE {
	DWORD Count;
	BYTE  LocalHint;
	BYTE  GlobalHint;
	BYTE  Search;
	BYTE  Once;
	DWORD64 LowAddress;
	DWORD64 HighAddress;
	UNWIND_HISTORY_TABLE_ENTRY Entry[12];
} UNWIND_HISTORY_TABLE, * PUNWIND_HISTORY_TABLE;
typedef
PRUNTIME_FUNCTION
GET_RUNTIME_FUNCTION_CALLBACK(
	DWORD64 ControlPc,
	PVOID Context
);
typedef GET_RUNTIME_FUNCTION_CALLBACK* PGET_RUNTIME_FUNCTION_CALLBACK;
typedef
DWORD
OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK(
	HANDLE Process,
	PVOID TableAddress,
	PDWORD Entries,
	PRUNTIME_FUNCTION* Functions
);
typedef OUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK* POUT_OF_PROCESS_FUNCTION_TABLE_CALLBACK;
typedef struct _DISPATCHER_CONTEXT {
	DWORD64 ControlPc;
	DWORD64 ImageBase;
	PRUNTIME_FUNCTION FunctionEntry;
	DWORD64 EstablisherFrame;
	DWORD64 TargetIp;
	PCONTEXT ContextRecord;
	PEXCEPTION_ROUTINE LanguageHandler;
	PVOID HandlerData;
	PUNWIND_HISTORY_TABLE HistoryTable;
	DWORD ScopeIndex;
	DWORD Fill0;
} DISPATCHER_CONTEXT, * PDISPATCHER_CONTEXT;
struct _EXCEPTION_POINTERS;
typedef
LONG
(*PEXCEPTION_FILTER) (
	struct _EXCEPTION_POINTERS* ExceptionPointers,
	PVOID EstablisherFrame
	);
typedef
void
(*PTERMINATION_HANDLER) (
	BOOLEAN _abnormal_termination,
	PVOID EstablisherFrame
	);
typedef struct _KNONVOLATILE_CONTEXT_POINTERS {
	union {
		PM128A FloatingContext[16];
		struct {
			PM128A Xmm0;
			PM128A Xmm1;
			PM128A Xmm2;
			PM128A Xmm3;
			PM128A Xmm4;
			PM128A Xmm5;
			PM128A Xmm6;
			PM128A Xmm7;
			PM128A Xmm8;
			PM128A Xmm9;
			PM128A Xmm10;
			PM128A Xmm11;
			PM128A Xmm12;
			PM128A Xmm13;
			PM128A Xmm14;
			PM128A Xmm15;
		};
	};
	union {
		PDWORD64 IntegerContext[16];
		struct {
			PDWORD64 Rax;
			PDWORD64 Rcx;
			PDWORD64 Rdx;
			PDWORD64 Rbx;
			PDWORD64 Rsp;
			PDWORD64 Rbp;
			PDWORD64 Rsi;
			PDWORD64 Rdi;
			PDWORD64 R8;
			PDWORD64 R9;
			PDWORD64 R10;
			PDWORD64 R11;
			PDWORD64 R12;
			PDWORD64 R13;
			PDWORD64 R14;
			PDWORD64 R15;
		};
	};
} KNONVOLATILE_CONTEXT_POINTERS, * PKNONVOLATILE_CONTEXT_POINTERS;
typedef struct _SCOPE_TABLE_ARM {
	DWORD Count;
	struct
	{
		DWORD BeginAddress;
		DWORD EndAddress;
		DWORD HandlerAddress;
		DWORD JumpTarget;
	} ScopeRecord[1];
} SCOPE_TABLE_ARM, * PSCOPE_TABLE_ARM;
typedef struct _SCOPE_TABLE_ARM64 {
	DWORD Count;
	struct
	{
		DWORD BeginAddress;
		DWORD EndAddress;
		DWORD HandlerAddress;
		DWORD JumpTarget;
	} ScopeRecord[1];
} SCOPE_TABLE_ARM64, * PSCOPE_TABLE_ARM64;
typedef struct _KNONVOLATILE_CONTEXT_POINTERS_ARM64 {
	PDWORD64 X19;
	PDWORD64 X20;
	PDWORD64 X21;
	PDWORD64 X22;
	PDWORD64 X23;
	PDWORD64 X24;
	PDWORD64 X25;
	PDWORD64 X26;
	PDWORD64 X27;
	PDWORD64 X28;
	PDWORD64 Fp;
	PDWORD64 Lr;
	PDWORD64 D8;
	PDWORD64 D9;
	PDWORD64 D10;
	PDWORD64 D11;
	PDWORD64 D12;
	PDWORD64 D13;
	PDWORD64 D14;
	PDWORD64 D15;
} KNONVOLATILE_CONTEXT_POINTERS_ARM64, * PKNONVOLATILE_CONTEXT_POINTERS_ARM64;
void
__int2c(
	void
);
typedef struct _LDT_ENTRY {
	WORD    LimitLow;
	WORD    BaseLow;
	union {
		struct {
			BYTE    BaseMid;
			BYTE    Flags1;
			BYTE    Flags2;
			BYTE    BaseHi;
		} Bytes;
		struct {
			DWORD   BaseMid : 8;
			DWORD   Type : 5;
			DWORD   Dpl : 2;
			DWORD   Pres : 1;
			DWORD   LimitHi : 4;
			DWORD   Sys : 1;
			DWORD   Reserved_0 : 1;
			DWORD   Default_Big : 1;
			DWORD   Granularity : 1;
			DWORD   BaseHi : 8;
		} Bits;
	} HighWord;
} LDT_ENTRY, * PLDT_ENTRY;

CHAR
ReadAcquire8(
	CHAR const volatile* Source
);

CHAR
ReadNoFence8(
	CHAR const volatile* Source
);

void
WriteRelease8(
	CHAR volatile* Destination,
	CHAR Value
);

void
WriteNoFence8(
	CHAR volatile* Destination,
	CHAR Value
);

SHORT
ReadAcquire16(
	SHORT const volatile* Source
);

SHORT
ReadNoFence16(
	SHORT const volatile* Source
);

void
WriteRelease16(
	SHORT volatile* Destination,
	SHORT Value
);

void
WriteNoFence16(
	SHORT volatile* Destination,
	SHORT Value
);

LONG
ReadAcquire(
	LONG const volatile* Source
);

LONG
ReadNoFence(
	LONG const volatile* Source
);

void
WriteRelease(
	LONG volatile* Destination,
	LONG Value
);

void
WriteNoFence(
	LONG volatile* Destination,
	LONG Value
);

LONG64
ReadAcquire64(
	LONG64 const volatile* Source
);

LONG64
ReadNoFence64(
	LONG64 const volatile* Source
);

void
WriteRelease64(
	LONG64 volatile* Destination,
	LONG64 Value
);

void
WriteNoFence64(
	LONG64 volatile* Destination,
	LONG64 Value
);

CHAR
ReadRaw8(
	CHAR const volatile* Source
);

void
WriteRaw8(
	CHAR volatile* Destination,
	CHAR Value
);

SHORT
ReadRaw16(
	SHORT const volatile* Source
);

void
WriteRaw16(
	SHORT volatile* Destination,
	SHORT Value
);

LONG
ReadRaw(
	LONG const volatile* Source
);

void
WriteRaw(
	LONG volatile* Destination,
	LONG Value
);

LONG64
ReadRaw64(
	LONG64 const volatile* Source
);

void
WriteRaw64(
	LONG64 volatile* Destination,
	LONG64 Value
);

BYTE
ReadUCharAcquire(
	BYTE  const volatile* Source
);

BYTE
ReadUCharNoFence(
	BYTE  const volatile* Source
);

BYTE
ReadBooleanAcquire(
	BOOLEAN const volatile* Source
);

BYTE
ReadBooleanNoFence(
	BOOLEAN const volatile* Source
);

BYTE
ReadUCharRaw(
	BYTE  const volatile* Source
);

void
WriteUCharRelease(
	BYTE  volatile* Destination,
	BYTE  Value
);

void
WriteUCharNoFence(
	BYTE  volatile* Destination,
	BYTE  Value
);

void
WriteBooleanRelease(
	BOOLEAN volatile* Destination,
	BOOLEAN Value
);

void
WriteBooleanNoFence(
	BOOLEAN volatile* Destination,
	BOOLEAN Value
);

void
WriteUCharRaw(
	BYTE  volatile* Destination,
	BYTE  Value
);

WORD
ReadUShortAcquire(
	WORD   const volatile* Source
);

WORD
ReadUShortNoFence(
	WORD   const volatile* Source
);

WORD
ReadUShortRaw(
	WORD   const volatile* Source
);

void
WriteUShortRelease(
	WORD   volatile* Destination,
	WORD   Value
);

void
WriteUShortNoFence(
	WORD   volatile* Destination,
	WORD   Value
);

void
WriteUShortRaw(
	WORD   volatile* Destination,
	WORD   Value
);

DWORD
ReadULongAcquire(
	DWORD const volatile* Source
);

DWORD
ReadULongNoFence(
	DWORD const volatile* Source
);

DWORD
ReadULongRaw(
	DWORD const volatile* Source
);

void
WriteULongRelease(
	DWORD volatile* Destination,
	DWORD Value
);

void
WriteULongNoFence(
	DWORD volatile* Destination,
	DWORD Value
);

void
WriteULongRaw(
	DWORD volatile* Destination,
	DWORD Value
);

DWORD64
ReadULong64Acquire(
	DWORD64 const volatile* Source
);

DWORD64
ReadULong64NoFence(
	DWORD64 const volatile* Source
);

DWORD64
ReadULong64Raw(
	DWORD64 const volatile* Source
);

void
WriteULong64Release(
	DWORD64 volatile* Destination,
	DWORD64 Value
);

void
WriteULong64NoFence(
	DWORD64 volatile* Destination,
	DWORD64 Value
);

void
WriteULong64Raw(
	DWORD64 volatile* Destination,
	DWORD64 Value
);

PVOID
ReadPointerAcquire(
	PVOID const volatile* Source
);

PVOID
ReadPointerNoFence(
	PVOID const volatile* Source
);

PVOID
ReadPointerRaw(
	PVOID const volatile* Source
);

void
WritePointerRelease(
	PVOID volatile* Destination,
	PVOID Value
);

void
WritePointerNoFence(
	PVOID volatile* Destination,
	PVOID Value
);

void
WritePointerRaw(
	PVOID volatile* Destination,
	PVOID Value
);
typedef struct _WOW64_FLOATING_SAVE_AREA {
	DWORD   ControlWord;
	DWORD   StatusWord;
	DWORD   TagWord;
	DWORD   ErrorOffset;
	DWORD   ErrorSelector;
	DWORD   DataOffset;
	DWORD   DataSelector;
	BYTE    RegisterArea[80];
	DWORD   Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;
typedef WOW64_FLOATING_SAVE_AREA* PWOW64_FLOATING_SAVE_AREA;
typedef struct _WOW64_CONTEXT {
	DWORD ContextFlags;
	DWORD   Dr0;
	DWORD   Dr1;
	DWORD   Dr2;
	DWORD   Dr3;
	DWORD   Dr6;
	DWORD   Dr7;
	WOW64_FLOATING_SAVE_AREA FloatSave;
	DWORD   SegGs;
	DWORD   SegFs;
	DWORD   SegEs;
	DWORD   SegDs;
	DWORD   Edi;
	DWORD   Esi;
	DWORD   Ebx;
	DWORD   Edx;
	DWORD   Ecx;
	DWORD   Eax;
	DWORD   Ebp;
	DWORD   Eip;
	DWORD   SegCs;
	DWORD   EFlags;
	DWORD   Esp;
	DWORD   SegSs;
	BYTE    ExtendedRegisters[512];
} WOW64_CONTEXT;
typedef WOW64_CONTEXT* PWOW64_CONTEXT;
typedef struct _WOW64_LDT_ENTRY {
	WORD    LimitLow;
	WORD    BaseLow;
	union {
		struct {
			BYTE    BaseMid;
			BYTE    Flags1;
			BYTE    Flags2;
			BYTE    BaseHi;
		} Bytes;
		struct {
			DWORD   BaseMid : 8;
			DWORD   Type : 5;
			DWORD   Dpl : 2;
			DWORD   Pres : 1;
			DWORD   LimitHi : 4;
			DWORD   Sys : 1;
			DWORD   Reserved_0 : 1;
			DWORD   Default_Big : 1;
			DWORD   Granularity : 1;
			DWORD   BaseHi : 8;
		} Bits;
	} HighWord;
} WOW64_LDT_ENTRY, * PWOW64_LDT_ENTRY;
typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
	DWORD Selector;
	WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, * PWOW64_DESCRIPTOR_TABLE_ENTRY;
typedef struct _EXCEPTION_RECORD {
	DWORD    ExceptionCode;
	DWORD ExceptionFlags;
	struct _EXCEPTION_RECORD* ExceptionRecord;
	PVOID ExceptionAddress;
	DWORD NumberParameters;
	ULONG_PTR ExceptionInformation[15];
} EXCEPTION_RECORD;
typedef EXCEPTION_RECORD* PEXCEPTION_RECORD;
typedef struct _EXCEPTION_RECORD32 {
	DWORD    ExceptionCode;
	DWORD ExceptionFlags;
	DWORD ExceptionRecord;
	DWORD ExceptionAddress;
	DWORD NumberParameters;
	DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, * PEXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 {
	DWORD    ExceptionCode;
	DWORD ExceptionFlags;
	DWORD64 ExceptionRecord;
	DWORD64 ExceptionAddress;
	DWORD NumberParameters;
	DWORD __unusedAlignment;
	DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, * PEXCEPTION_RECORD64;
typedef struct _EXCEPTION_POINTERS {
	PEXCEPTION_RECORD ExceptionRecord;
	PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, * PEXCEPTION_POINTERS;
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
typedef PVOID PCLAIMS_BLOB;
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK* PACCESS_MASK;
typedef struct _GENERIC_MAPPING {
	ACCESS_MASK GenericRead;
	ACCESS_MASK GenericWrite;
	ACCESS_MASK GenericExecute;
	ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING* PGENERIC_MAPPING;
typedef struct _LUID_AND_ATTRIBUTES {
	LUID Luid;
	DWORD Attributes;
} LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY* PLUID_AND_ATTRIBUTES_ARRAY;
typedef struct _SID_IDENTIFIER_AUTHORITY {
	BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, * PSID_IDENTIFIER_AUTHORITY;
typedef struct _SID {
	BYTE  Revision;
	BYTE  SubAuthorityCount;
	SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
	DWORD SubAuthority[1];
} SID, * PISID;
typedef union _SE_SID {
	SID Sid;
	BYTE  Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
} SE_SID, * PSE_SID;
typedef enum _SID_NAME_USE {
	SidTypeUser = 1,
	SidTypeGroup,
	SidTypeDomain,
	SidTypeAlias,
	SidTypeWellKnownGroup,
	SidTypeDeletedAccount,
	SidTypeInvalid,
	SidTypeUnknown,
	SidTypeComputer,
	SidTypeLabel,
	SidTypeLogonSession
} SID_NAME_USE, * PSID_NAME_USE;
typedef struct _SID_AND_ATTRIBUTES {
	PSID Sid;
	DWORD Attributes;
} SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY* PSID_AND_ATTRIBUTES_ARRAY;
typedef ULONG_PTR SID_HASH_ENTRY, * PSID_HASH_ENTRY;
typedef struct _SID_AND_ATTRIBUTES_HASH {
	DWORD SidCount;
	PSID_AND_ATTRIBUTES SidAttr;
	SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, * PSID_AND_ATTRIBUTES_HASH;
typedef enum {
	WinNullSid = 0,
	WinWorldSid = 1,
	WinLocalSid = 2,
	WinCreatorOwnerSid = 3,
	WinCreatorGroupSid = 4,
	WinCreatorOwnerServerSid = 5,
	WinCreatorGroupServerSid = 6,
	WinNtAuthoritySid = 7,
	WinDialupSid = 8,
	WinNetworkSid = 9,
	WinBatchSid = 10,
	WinInteractiveSid = 11,
	WinServiceSid = 12,
	WinAnonymousSid = 13,
	WinProxySid = 14,
	WinEnterpriseControllersSid = 15,
	WinSelfSid = 16,
	WinAuthenticatedUserSid = 17,
	WinRestrictedCodeSid = 18,
	WinTerminalServerSid = 19,
	WinRemoteLogonIdSid = 20,
	WinLogonIdsSid = 21,
	WinLocalSystemSid = 22,
	WinLocalServiceSid = 23,
	WinNetworkServiceSid = 24,
	WinBuiltinDomainSid = 25,
	WinBuiltinAdministratorsSid = 26,
	WinBuiltinUsersSid = 27,
	WinBuiltinGuestsSid = 28,
	WinBuiltinPowerUsersSid = 29,
	WinBuiltinAccountOperatorsSid = 30,
	WinBuiltinSystemOperatorsSid = 31,
	WinBuiltinPrintOperatorsSid = 32,
	WinBuiltinBackupOperatorsSid = 33,
	WinBuiltinReplicatorSid = 34,
	WinBuiltinPreWindows2000CompatibleAccessSid = 35,
	WinBuiltinRemoteDesktopUsersSid = 36,
	WinBuiltinNetworkConfigurationOperatorsSid = 37,
	WinAccountAdministratorSid = 38,
	WinAccountGuestSid = 39,
	WinAccountKrbtgtSid = 40,
	WinAccountDomainAdminsSid = 41,
	WinAccountDomainUsersSid = 42,
	WinAccountDomainGuestsSid = 43,
	WinAccountComputersSid = 44,
	WinAccountControllersSid = 45,
	WinAccountCertAdminsSid = 46,
	WinAccountSchemaAdminsSid = 47,
	WinAccountEnterpriseAdminsSid = 48,
	WinAccountPolicyAdminsSid = 49,
	WinAccountRasAndIasServersSid = 50,
	WinNTLMAuthenticationSid = 51,
	WinDigestAuthenticationSid = 52,
	WinSChannelAuthenticationSid = 53,
	WinThisOrganizationSid = 54,
	WinOtherOrganizationSid = 55,
	WinBuiltinIncomingForestTrustBuildersSid = 56,
	WinBuiltinPerfMonitoringUsersSid = 57,
	WinBuiltinPerfLoggingUsersSid = 58,
	WinBuiltinAuthorizationAccessSid = 59,
	WinBuiltinTerminalServerLicenseServersSid = 60,
	WinBuiltinDCOMUsersSid = 61,
	WinBuiltinIUsersSid = 62,
	WinIUserSid = 63,
	WinBuiltinCryptoOperatorsSid = 64,
	WinUntrustedLabelSid = 65,
	WinLowLabelSid = 66,
	WinMediumLabelSid = 67,
	WinHighLabelSid = 68,
	WinSystemLabelSid = 69,
	WinWriteRestrictedCodeSid = 70,
	WinCreatorOwnerRightsSid = 71,
	WinCacheablePrincipalsGroupSid = 72,
	WinNonCacheablePrincipalsGroupSid = 73,
	WinEnterpriseReadonlyControllersSid = 74,
	WinAccountReadonlyControllersSid = 75,
	WinBuiltinEventLogReadersGroup = 76,
	WinNewEnterpriseReadonlyControllersSid = 77,
	WinBuiltinCertSvcDComAccessGroup = 78,
	WinMediumPlusLabelSid = 79,
	WinLocalLogonSid = 80,
	WinConsoleLogonSid = 81,
	WinThisOrganizationCertificateSid = 82,
	WinApplicationPackageAuthoritySid = 83,
	WinBuiltinAnyPackageSid = 84,
	WinCapabilityInternetClientSid = 85,
	WinCapabilityInternetClientServerSid = 86,
	WinCapabilityPrivateNetworkClientServerSid = 87,
	WinCapabilityPicturesLibrarySid = 88,
	WinCapabilityVideosLibrarySid = 89,
	WinCapabilityMusicLibrarySid = 90,
	WinCapabilityDocumentsLibrarySid = 91,
	WinCapabilitySharedUserCertificatesSid = 92,
	WinCapabilityEnterpriseAuthenticationSid = 93,
	WinCapabilityRemovableStorageSid = 94,
	WinBuiltinRDSRemoteAccessServersSid = 95,
	WinBuiltinRDSEndpointServersSid = 96,
	WinBuiltinRDSManagementServersSid = 97,
	WinUserModeDriversSid = 98,
	WinBuiltinHyperVAdminsSid = 99,
	WinAccountCloneableControllersSid = 100,
	WinBuiltinAccessControlAssistanceOperatorsSid = 101,
	WinBuiltinRemoteManagementUsersSid = 102,
	WinAuthenticationAuthorityAssertedSid = 103,
	WinAuthenticationServiceAssertedSid = 104,
	WinLocalAccountSid = 105,
	WinLocalAccountAndAdministratorSid = 106,
	WinAccountProtectedUsersSid = 107,
	WinCapabilityAppointmentsSid = 108,
	WinCapabilityContactsSid = 109,
	WinAccountDefaultSystemManagedSid = 110,
	WinBuiltinDefaultSystemManagedGroupSid = 111,
	WinBuiltinStorageReplicaAdminsSid = 112,
	WinAccountKeyAdminsSid = 113,
	WinAccountEnterpriseKeyAdminsSid = 114,
	WinAuthenticationKeyTrustSid = 115,
	WinAuthenticationKeyPropertyMFASid = 116,
	WinAuthenticationKeyPropertyAttestationSid = 117,
	WinAuthenticationFreshKeyAuthSid = 118,
	WinBuiltinDeviceOwnersSid = 119,
} WELL_KNOWN_SID_TYPE;
typedef struct _ACL {
	BYTE  AclRevision;
	BYTE  Sbz1;
	WORD   AclSize;
	WORD   AceCount;
	WORD   Sbz2;
} ACL;
typedef ACL* PACL;
typedef struct _ACE_HEADER {
	BYTE  AceType;
	BYTE  AceFlags;
	WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER* PACE_HEADER;
typedef struct _ACCESS_ALLOWED_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} ACCESS_ALLOWED_ACE;
typedef ACCESS_ALLOWED_ACE* PACCESS_ALLOWED_ACE;
typedef struct _ACCESS_DENIED_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE* PACCESS_DENIED_ACE;
typedef struct _SYSTEM_AUDIT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE* PSYSTEM_AUDIT_ACE;
typedef struct _SYSTEM_ALARM_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE* PSYSTEM_ALARM_ACE;
typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, * PSYSTEM_RESOURCE_ATTRIBUTE_ACE;
typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, * PSYSTEM_SCOPED_POLICY_ID_ACE;
typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, * PSYSTEM_MANDATORY_LABEL_ACE;
typedef struct _SYSTEM_PROCESS_TRUST_LABEL_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_PROCESS_TRUST_LABEL_ACE, * PSYSTEM_PROCESS_TRUST_LABEL_ACE;
typedef struct _SYSTEM_ACCESS_FILTER_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_ACCESS_FILTER_ACE, * PSYSTEM_ACCESS_FILTER_ACE;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, * PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _ACCESS_DENIED_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, * PACCESS_DENIED_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, * PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, * PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_ACE, * PACCESS_ALLOWED_CALLBACK_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} ACCESS_DENIED_CALLBACK_ACE, * PACCESS_DENIED_CALLBACK_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_ACE, * PSYSTEM_AUDIT_CALLBACK_ACE;
typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD SidStart;
} SYSTEM_ALARM_CALLBACK_ACE, * PSYSTEM_ALARM_CALLBACK_ACE;
typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, * PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;
typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, * PACCESS_DENIED_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, * PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;
typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
	ACE_HEADER Header;
	ACCESS_MASK Mask;
	DWORD Flags;
	GUID ObjectType;
	GUID InheritedObjectType;
	DWORD SidStart;
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, * PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;
typedef enum _ACL_INFORMATION_CLASS {
	AclRevisionInformation = 1,
	AclSizeInformation
} ACL_INFORMATION_CLASS;
typedef struct _ACL_REVISION_INFORMATION {
	DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION* PACL_REVISION_INFORMATION;
typedef struct _ACL_SIZE_INFORMATION {
	DWORD AceCount;
	DWORD AclBytesInUse;
	DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION* PACL_SIZE_INFORMATION;
typedef WORD   SECURITY_DESCRIPTOR_CONTROL, * PSECURITY_DESCRIPTOR_CONTROL;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
	BYTE  Revision;
	BYTE  Sbz1;
	SECURITY_DESCRIPTOR_CONTROL Control;
	DWORD Owner;
	DWORD Group;
	DWORD Sacl;
	DWORD Dacl;
} SECURITY_DESCRIPTOR_RELATIVE, * PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct _SECURITY_DESCRIPTOR {
	BYTE  Revision;
	BYTE  Sbz1;
	SECURITY_DESCRIPTOR_CONTROL Control;
	PSID Owner;
	PSID Group;
	PACL Sacl;
	PACL Dacl;
} SECURITY_DESCRIPTOR, * PISECURITY_DESCRIPTOR;
typedef struct _SECURITY_OBJECT_AI_PARAMS {
	DWORD Size;
	DWORD ConstraintMask;
} SECURITY_OBJECT_AI_PARAMS, * PSECURITY_OBJECT_AI_PARAMS;
typedef struct _OBJECT_TYPE_LIST {
	WORD   Level;
	WORD   Sbz;
	GUID* ObjectType;
} OBJECT_TYPE_LIST, * POBJECT_TYPE_LIST;
typedef enum _AUDIT_EVENT_TYPE {
	AuditEventObjectAccess,
	AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, * PAUDIT_EVENT_TYPE;
typedef struct _PRIVILEGE_SET {
	DWORD PrivilegeCount;
	DWORD Control;
	LUID_AND_ATTRIBUTES Privilege[1];
} PRIVILEGE_SET, * PPRIVILEGE_SET;
typedef enum _ACCESS_REASON_TYPE {
	AccessReasonNone = 0x00000000,
	AccessReasonAllowedAce = 0x00010000,
	AccessReasonDeniedAce = 0x00020000,
	AccessReasonAllowedParentAce = 0x00030000,
	AccessReasonDeniedParentAce = 0x00040000,
	AccessReasonNotGrantedByCape = 0x00050000,
	AccessReasonNotGrantedByParentCape = 0x00060000,
	AccessReasonNotGrantedToAppContainer = 0x00070000,
	AccessReasonMissingPrivilege = 0x00100000,
	AccessReasonFromPrivilege = 0x00200000,
	AccessReasonIntegrityLevel = 0x00300000,
	AccessReasonOwnership = 0x00400000,
	AccessReasonNullDacl = 0x00500000,
	AccessReasonEmptyDacl = 0x00600000,
	AccessReasonNoSD = 0x00700000,
	AccessReasonNoGrant = 0x00800000,
	AccessReasonTrustLabel = 0x00900000,
	AccessReasonFilterAce = 0x00a00000
}
ACCESS_REASON_TYPE;
typedef DWORD ACCESS_REASON;
typedef struct _ACCESS_REASONS {
	ACCESS_REASON Data[32];
} ACCESS_REASONS, * PACCESS_REASONS;
typedef struct _SE_SECURITY_DESCRIPTOR
{
	DWORD Size;
	DWORD Flags;
	PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, * PSE_SECURITY_DESCRIPTOR;
typedef struct _SE_ACCESS_REQUEST
{
	DWORD Size;
	PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
	ACCESS_MASK DesiredAccess;
	ACCESS_MASK PreviouslyGrantedAccess;
	PSID PrincipalSelfSid;
	PGENERIC_MAPPING GenericMapping;
	DWORD ObjectTypeListCount;
	POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, * PSE_ACCESS_REQUEST;
typedef struct _SE_ACCESS_REPLY
{
	DWORD Size;
	DWORD ResultListCount;
	PACCESS_MASK GrantedAccess;
	PDWORD    AccessStatus;
	PACCESS_REASONS AccessReason;
	PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, * PSE_ACCESS_REPLY;
typedef enum _SECURITY_IMPERSONATION_LEVEL {
	SecurityAnonymous,
	SecurityIdentification,
	SecurityImpersonation,
	SecurityDelegation
} SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
typedef enum _TOKEN_TYPE {
	TokenPrimary = 1,
	TokenImpersonation
} TOKEN_TYPE;
typedef TOKEN_TYPE* PTOKEN_TYPE;
typedef enum _TOKEN_ELEVATION_TYPE {
	TokenElevationTypeDefault = 1,
	TokenElevationTypeFull,
	TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, * PTOKEN_ELEVATION_TYPE;
typedef enum _TOKEN_INFORMATION_CLASS {
	TokenUser = 1,
	TokenGroups,
	TokenPrivileges,
	TokenOwner,
	TokenPrimaryGroup,
	TokenDefaultDacl,
	TokenSource,
	TokenType,
	TokenImpersonationLevel,
	TokenStatistics,
	TokenRestrictedSids,
	TokenSessionId,
	TokenGroupsAndPrivileges,
	TokenSessionReference,
	TokenSandBoxInert,
	TokenAuditPolicy,
	TokenOrigin,
	TokenElevationType,
	TokenLinkedToken,
	TokenElevation,
	TokenHasRestrictions,
	TokenAccessInformation,
	TokenVirtualizationAllowed,
	TokenVirtualizationEnabled,
	TokenIntegrityLevel,
	TokenUIAccess,
	TokenMandatoryPolicy,
	TokenLogonSid,
	TokenIsAppContainer,
	TokenCapabilities,
	TokenAppContainerSid,
	TokenAppContainerNumber,
	TokenUserClaimAttributes,
	TokenDeviceClaimAttributes,
	TokenRestrictedUserClaimAttributes,
	TokenRestrictedDeviceClaimAttributes,
	TokenDeviceGroups,
	TokenRestrictedDeviceGroups,
	TokenSecurityAttributes,
	TokenIsRestricted,
	TokenProcessTrustLevel,
	TokenPrivateNameSpace,
	TokenSingletonAttributes,
	TokenBnoIsolation,
	TokenChildProcessFlags,
	TokenIsLessPrivilegedAppContainer,
	TokenIsSandboxed,
	TokenOriginatingProcessTrustLevel,
	MaxTokenInfoClass
} TOKEN_INFORMATION_CLASS, * PTOKEN_INFORMATION_CLASS;
typedef struct _TOKEN_USER {
	SID_AND_ATTRIBUTES User;
} TOKEN_USER, * PTOKEN_USER;
typedef struct _SE_TOKEN_USER {
	union {
		TOKEN_USER TokenUser;
		SID_AND_ATTRIBUTES User;
	};
	union {
		SID Sid;
		BYTE  Buffer[(sizeof(SID) - sizeof(DWORD) + ((15) * sizeof(DWORD)))];
	};
} SE_TOKEN_USER, PSE_TOKEN_USER;
typedef struct _TOKEN_GROUPS {
	DWORD GroupCount;
	SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, * PTOKEN_GROUPS;
typedef struct _TOKEN_PRIVILEGES {
	DWORD PrivilegeCount;
	LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, * PTOKEN_PRIVILEGES;
typedef struct _TOKEN_OWNER {
	PSID Owner;
} TOKEN_OWNER, * PTOKEN_OWNER;
typedef struct _TOKEN_PRIMARY_GROUP {
	PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, * PTOKEN_PRIMARY_GROUP;
typedef struct _TOKEN_DEFAULT_DACL {
	PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, * PTOKEN_DEFAULT_DACL;
typedef struct _TOKEN_USER_CLAIMS {
	PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, * PTOKEN_USER_CLAIMS;
typedef struct _TOKEN_DEVICE_CLAIMS {
	PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, * PTOKEN_DEVICE_CLAIMS;
typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
	DWORD SidCount;
	DWORD SidLength;
	PSID_AND_ATTRIBUTES Sids;
	DWORD RestrictedSidCount;
	DWORD RestrictedSidLength;
	PSID_AND_ATTRIBUTES RestrictedSids;
	DWORD PrivilegeCount;
	DWORD PrivilegeLength;
	PLUID_AND_ATTRIBUTES Privileges;
	LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, * PTOKEN_GROUPS_AND_PRIVILEGES;
typedef struct _TOKEN_LINKED_TOKEN {
	HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, * PTOKEN_LINKED_TOKEN;
typedef struct _TOKEN_ELEVATION {
	DWORD TokenIsElevated;
} TOKEN_ELEVATION, * PTOKEN_ELEVATION;
typedef struct _TOKEN_MANDATORY_LABEL {
	SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, * PTOKEN_MANDATORY_LABEL;
typedef struct _TOKEN_MANDATORY_POLICY {
	DWORD Policy;
} TOKEN_MANDATORY_POLICY, * PTOKEN_MANDATORY_POLICY;
typedef PVOID PSECURITY_ATTRIBUTES_OPAQUE;
typedef struct _TOKEN_ACCESS_INFORMATION {
	PSID_AND_ATTRIBUTES_HASH SidHash;
	PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
	PTOKEN_PRIVILEGES Privileges;
	LUID AuthenticationId;
	TOKEN_TYPE TokenType;
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	TOKEN_MANDATORY_POLICY MandatoryPolicy;
	DWORD Flags;
	DWORD AppContainerNumber;
	PSID PackageSid;
	PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
	PSID TrustLevelSid;
	PSECURITY_ATTRIBUTES_OPAQUE SecurityAttributes;
} TOKEN_ACCESS_INFORMATION, * PTOKEN_ACCESS_INFORMATION;
typedef struct _TOKEN_AUDIT_POLICY {
	BYTE  PerUserPolicy[(((59)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, * PTOKEN_AUDIT_POLICY;
typedef struct _TOKEN_SOURCE {
	CHAR SourceName[8];
	LUID SourceIdentifier;
} TOKEN_SOURCE, * PTOKEN_SOURCE;
typedef struct _TOKEN_STATISTICS {
	LUID TokenId;
	LUID AuthenticationId;
	LARGE_INTEGER ExpirationTime;
	TOKEN_TYPE TokenType;
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	DWORD DynamicCharged;
	DWORD DynamicAvailable;
	DWORD GroupCount;
	DWORD PrivilegeCount;
	LUID ModifiedId;
} TOKEN_STATISTICS, * PTOKEN_STATISTICS;
typedef struct _TOKEN_CONTROL {
	LUID TokenId;
	LUID AuthenticationId;
	LUID ModifiedId;
	TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, * PTOKEN_CONTROL;
typedef struct _TOKEN_ORIGIN {
	LUID OriginatingLogonSession;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN;
typedef enum _MANDATORY_LEVEL {
	MandatoryLevelUntrusted = 0,
	MandatoryLevelLow,
	MandatoryLevelMedium,
	MandatoryLevelHigh,
	MandatoryLevelSystem,
	MandatoryLevelSecureProcess,
	MandatoryLevelCount
} MANDATORY_LEVEL, * PMANDATORY_LEVEL;
typedef struct _TOKEN_APPCONTAINER_INFORMATION {
	PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, * PTOKEN_APPCONTAINER_INFORMATION;
typedef struct _TOKEN_SID_INFORMATION {
	PSID Sid;
} TOKEN_SID_INFORMATION, * PTOKEN_SID_INFORMATION;
typedef struct _TOKEN_BNO_ISOLATION_INFORMATION {
	PWSTR       IsolationPrefix;
	BOOLEAN     IsolationEnabled;
} TOKEN_BNO_ISOLATION_INFORMATION, * PTOKEN_BNO_ISOLATION_INFORMATION;
typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
	DWORD64             Version;
	PWSTR               Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, * PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;
typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
	PVOID   pValue;
	DWORD   ValueLength;
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
* PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {
	PWSTR   Name;
	WORD    ValueType;
	WORD    Reserved;
	DWORD   Flags;
	DWORD   ValueCount;
	union {
		PLONG64                                         pInt64;
		PDWORD64                                        pUint64;
		PWSTR* ppString;
		PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE            pFqbn;
		PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE    pOctetString;
	} Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, * PCLAIM_SECURITY_ATTRIBUTE_V1;
typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {
	DWORD   Name;
	WORD    ValueType;
	WORD    Reserved;
	DWORD   Flags;
	DWORD   ValueCount;
	union {
		DWORD pInt64[1];
		DWORD pUint64[1];
		DWORD ppString[1];
		DWORD pFqbn[1];
		DWORD pOctetString[1];
	} Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, * PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;
typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {
	WORD    Version;
	WORD    Reserved;
	DWORD   AttributeCount;
	union {
		PCLAIM_SECURITY_ATTRIBUTE_V1    pAttributeV1;
	} Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, * PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
* PSECURITY_CONTEXT_TRACKING_MODE;
typedef struct _SECURITY_QUALITY_OF_SERVICE {
	DWORD Length;
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
	SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
	BOOLEAN EffectiveOnly;
} SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SE_IMPERSONATION_STATE {
	PACCESS_TOKEN Token;
	BOOLEAN CopyOnOpen;
	BOOLEAN EffectiveOnly;
	SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, * PSE_IMPERSONATION_STATE;
typedef DWORD SECURITY_INFORMATION, * PSECURITY_INFORMATION;
typedef BYTE  SE_SIGNING_LEVEL, * PSE_SIGNING_LEVEL;
typedef enum _SE_IMAGE_SIGNATURE_TYPE
{
	SeImageSignatureNone = 0,
	SeImageSignatureEmbedded,
	SeImageSignatureCache,
	SeImageSignatureCatalogCached,
	SeImageSignatureCatalogNotCached,
	SeImageSignatureCatalogHint,
	SeImageSignaturePackageCatalog,
} SE_IMAGE_SIGNATURE_TYPE, * PSE_IMAGE_SIGNATURE_TYPE;
typedef enum _SE_LEARNING_MODE_DATA_TYPE {
	SeLearningModeInvalidType = 0,
	SeLearningModeSettings,
	SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;
typedef struct _SECURITY_CAPABILITIES {
	PSID AppContainerSid;
	PSID_AND_ATTRIBUTES Capabilities;
	DWORD CapabilityCount;
	DWORD Reserved;
} SECURITY_CAPABILITIES, * PSECURITY_CAPABILITIES, * LPSECURITY_CAPABILITIES;
typedef struct _JOB_SET_ARRAY {
	HANDLE JobHandle;
	DWORD MemberLevel;
	DWORD Flags;
} JOB_SET_ARRAY, * PJOB_SET_ARRAY;
typedef struct _EXCEPTION_REGISTRATION_RECORD {
	struct _EXCEPTION_REGISTRATION_RECORD* Next;
	PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;
typedef EXCEPTION_REGISTRATION_RECORD* PEXCEPTION_REGISTRATION_RECORD;
typedef struct _NT_TIB {
	struct _EXCEPTION_REGISTRATION_RECORD* ExceptionList;
	PVOID StackBase;
	PVOID StackLimit;
	PVOID SubSystemTib;
	union {
		PVOID FiberData;
		DWORD Version;
	};
	PVOID ArbitraryUserPointer;
	struct _NT_TIB* Self;
} NT_TIB;
typedef NT_TIB* PNT_TIB;
typedef struct _NT_TIB32 {
	DWORD ExceptionList;
	DWORD StackBase;
	DWORD StackLimit;
	DWORD SubSystemTib;
	union {
		DWORD FiberData;
		DWORD Version;
	};
	DWORD ArbitraryUserPointer;
	DWORD Self;
} NT_TIB32, * PNT_TIB32;
typedef struct _NT_TIB64 {
	DWORD64 ExceptionList;
	DWORD64 StackBase;
	DWORD64 StackLimit;
	DWORD64 SubSystemTib;
	union {
		DWORD64 FiberData;
		DWORD Version;
	};
	DWORD64 ArbitraryUserPointer;
	DWORD64 Self;
} NT_TIB64, * PNT_TIB64;
typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {
	DWORD UmsVersion;
	PVOID UmsContext;
	PVOID UmsCompletionList;
} UMS_CREATE_THREAD_ATTRIBUTES, * PUMS_CREATE_THREAD_ATTRIBUTES;
typedef struct _WOW64_ARCHITECTURE_INFORMATION {
	DWORD Machine : 16;
	DWORD KernelMode : 1;
	DWORD UserMode : 1;
	DWORD Native : 1;
	DWORD Process : 1;
	DWORD ReservedZero0 : 12;
} WOW64_ARCHITECTURE_INFORMATION;
typedef struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGET {
	ULONG_PTR TargetAddress;
	ULONG_PTR Flags;
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGET, * PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET;
typedef struct _PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION {
	WORD   NumberOfTargets;
	WORD   Reserved;
	DWORD Reserved2;
	PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets;
} PROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION, * PPROCESS_DYNAMIC_EH_CONTINUATION_TARGETS_INFORMATION;
typedef struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE {
	ULONG_PTR BaseAddress;
	SIZE_T Size;
	DWORD Flags;
} PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE, * PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE;
typedef struct _PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION {
	WORD   NumberOfRanges;
	WORD   Reserved;
	DWORD Reserved2;
	PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges;
} PROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION, * PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGES_INFORMATION;
typedef struct _QUOTA_LIMITS {
	SIZE_T PagedPoolLimit;
	SIZE_T NonPagedPoolLimit;
	SIZE_T MinimumWorkingSetSize;
	SIZE_T MaximumWorkingSetSize;
	SIZE_T PagefileLimit;
	LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, * PQUOTA_LIMITS;
typedef union _RATE_QUOTA_LIMIT {
	DWORD RateData;
	struct {
		DWORD RatePercent : 7;
		DWORD Reserved0 : 25;
	};
} RATE_QUOTA_LIMIT, * PRATE_QUOTA_LIMIT;
typedef struct _QUOTA_LIMITS_EX {
	SIZE_T PagedPoolLimit;
	SIZE_T NonPagedPoolLimit;
	SIZE_T MinimumWorkingSetSize;
	SIZE_T MaximumWorkingSetSize;
	SIZE_T PagefileLimit;
	LARGE_INTEGER TimeLimit;
	SIZE_T WorkingSetLimit;
	SIZE_T Reserved2;
	SIZE_T Reserved3;
	SIZE_T Reserved4;
	DWORD  Flags;
	RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, * PQUOTA_LIMITS_EX;
typedef struct _IO_COUNTERS {
	ULONGLONG  ReadOperationCount;
	ULONGLONG  WriteOperationCount;
	ULONGLONG  OtherOperationCount;
	ULONGLONG ReadTransferCount;
	ULONGLONG WriteTransferCount;
	ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS* PIO_COUNTERS;
typedef enum _HARDWARE_COUNTER_TYPE {
	PMCCounter,
	MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, * PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
	ProcessDEPPolicy,
	ProcessASLRPolicy,
	ProcessDynamicCodePolicy,
	ProcessStrictHandleCheckPolicy,
	ProcessSystemCallDisablePolicy,
	ProcessMitigationOptionsMask,
	ProcessExtensionPointDisablePolicy,
	ProcessControlFlowGuardPolicy,
	ProcessSignaturePolicy,
	ProcessFontDisablePolicy,
	ProcessImageLoadPolicy,
	ProcessSystemCallFilterPolicy,
	ProcessPayloadRestrictionPolicy,
	ProcessChildProcessPolicy,
	ProcessSideChannelIsolationPolicy,
	ProcessUserShadowStackPolicy,
	MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, * PPROCESS_MITIGATION_POLICY;
typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD EnableBottomUpRandomization : 1;
			DWORD EnableForceRelocateImages : 1;
			DWORD EnableHighEntropy : 1;
			DWORD DisallowStrippedImages : 1;
			DWORD ReservedFlags : 28;
		};
	};
} PROCESS_MITIGATION_ASLR_POLICY, * PPROCESS_MITIGATION_ASLR_POLICY;
typedef struct _PROCESS_MITIGATION_DEP_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD Enable : 1;
			DWORD DisableAtlThunkEmulation : 1;
			DWORD ReservedFlags : 30;
		};
	};
	BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, * PPROCESS_MITIGATION_DEP_POLICY;
typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD RaiseExceptionOnInvalidHandleReference : 1;
			DWORD HandleExceptionsPermanentlyEnabled : 1;
			DWORD ReservedFlags : 30;
		};
	};
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, * PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD DisallowWin32kSystemCalls : 1;
			DWORD AuditDisallowWin32kSystemCalls : 1;
			DWORD ReservedFlags : 30;
		};
	};
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, * PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD DisableExtensionPoints : 1;
			DWORD ReservedFlags : 31;
		};
	};
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, * PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
typedef struct _PROCESS_MITIGATION_DYNAMIC_CODE_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD ProhibitDynamicCode : 1;
			DWORD AllowThreadOptOut : 1;
			DWORD AllowRemoteDowngrade : 1;
			DWORD AuditProhibitDynamicCode : 1;
			DWORD ReservedFlags : 28;
		};
	};
} PROCESS_MITIGATION_DYNAMIC_CODE_POLICY, * PPROCESS_MITIGATION_DYNAMIC_CODE_POLICY;
typedef struct _PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD EnableControlFlowGuard : 1;
			DWORD EnableExportSuppression : 1;
			DWORD StrictMode : 1;
			DWORD ReservedFlags : 29;
		};
	};
} PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY, * PPROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
typedef struct _PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD MicrosoftSignedOnly : 1;
			DWORD StoreSignedOnly : 1;
			DWORD MitigationOptIn : 1;
			DWORD AuditMicrosoftSignedOnly : 1;
			DWORD AuditStoreSignedOnly : 1;
			DWORD ReservedFlags : 27;
		};
	};
} PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY, * PPROCESS_MITIGATION_BINARY_SIGNATURE_POLICY;
typedef struct _PROCESS_MITIGATION_FONT_DISABLE_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD DisableNonSystemFonts : 1;
			DWORD AuditNonSystemFontLoading : 1;
			DWORD ReservedFlags : 30;
		};
	};
} PROCESS_MITIGATION_FONT_DISABLE_POLICY, * PPROCESS_MITIGATION_FONT_DISABLE_POLICY;
typedef struct _PROCESS_MITIGATION_IMAGE_LOAD_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD NoRemoteImages : 1;
			DWORD NoLowMandatoryLabelImages : 1;
			DWORD PreferSystem32Images : 1;
			DWORD AuditNoRemoteImages : 1;
			DWORD AuditNoLowMandatoryLabelImages : 1;
			DWORD ReservedFlags : 27;
		};
	};
} PROCESS_MITIGATION_IMAGE_LOAD_POLICY, * PPROCESS_MITIGATION_IMAGE_LOAD_POLICY;
typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD FilterId : 4;
			DWORD ReservedFlags : 28;
		};
	};
} PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY, * PPROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY;
typedef struct _PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD EnableExportAddressFilter : 1;
			DWORD AuditExportAddressFilter : 1;
			DWORD EnableExportAddressFilterPlus : 1;
			DWORD AuditExportAddressFilterPlus : 1;
			DWORD EnableImportAddressFilter : 1;
			DWORD AuditImportAddressFilter : 1;
			DWORD EnableRopStackPivot : 1;
			DWORD AuditRopStackPivot : 1;
			DWORD EnableRopCallerCheck : 1;
			DWORD AuditRopCallerCheck : 1;
			DWORD EnableRopSimExec : 1;
			DWORD AuditRopSimExec : 1;
			DWORD ReservedFlags : 20;
		};
	};
} PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY, * PPROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
typedef struct _PROCESS_MITIGATION_CHILD_PROCESS_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD NoChildProcessCreation : 1;
			DWORD AuditNoChildProcessCreation : 1;
			DWORD AllowSecureProcessCreation : 1;
			DWORD ReservedFlags : 29;
		};
	};
} PROCESS_MITIGATION_CHILD_PROCESS_POLICY, * PPROCESS_MITIGATION_CHILD_PROCESS_POLICY;
typedef struct _PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD SmtBranchTargetIsolation : 1;
			DWORD IsolateSecurityDomain : 1;
			DWORD DisablePageCombine : 1;
			DWORD SpeculativeStoreBypassDisable : 1;
			DWORD ReservedFlags : 28;
		};
	};
} PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY, * PPROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY;
typedef struct _PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY {
	union {
		DWORD Flags;
		struct {
			DWORD EnableUserShadowStack : 1;
			DWORD AuditUserShadowStack : 1;
			DWORD SetContextIpValidation : 1;
			DWORD AuditSetContextIpValidation : 1;
			DWORD EnableUserShadowStackStrictMode : 1;
			DWORD BlockNonCetBinaries : 1;
			DWORD BlockNonCetBinariesNonEhcont : 1;
			DWORD AuditBlockNonCetBinaries : 1;
			DWORD CetDynamicApisOutOfProcOnly : 1;
			DWORD SetContextIpValidationRelaxedMode : 1;
			DWORD ReservedFlags : 22;
		};
	};
} PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY, * PPROCESS_MITIGATION_USER_SHADOW_STACK_POLICY;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
	LARGE_INTEGER TotalUserTime;
	LARGE_INTEGER TotalKernelTime;
	LARGE_INTEGER ThisPeriodTotalUserTime;
	LARGE_INTEGER ThisPeriodTotalKernelTime;
	DWORD TotalPageFaultCount;
	DWORD TotalProcesses;
	DWORD ActiveProcesses;
	DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, * PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
	LARGE_INTEGER PerProcessUserTimeLimit;
	LARGE_INTEGER PerJobUserTimeLimit;
	DWORD LimitFlags;
	SIZE_T MinimumWorkingSetSize;
	SIZE_T MaximumWorkingSetSize;
	DWORD ActiveProcessLimit;
	ULONG_PTR Affinity;
	DWORD PriorityClass;
	DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, * PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
	JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
	IO_COUNTERS IoInfo;
	SIZE_T ProcessMemoryLimit;
	SIZE_T JobMemoryLimit;
	SIZE_T PeakProcessMemoryUsed;
	SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, * PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
	DWORD NumberOfAssignedProcesses;
	DWORD NumberOfProcessIdsInList;
	ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, * PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
	DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, * PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
	DWORD SecurityLimitFlags;
	HANDLE JobToken;
	PTOKEN_GROUPS SidsToDisable;
	PTOKEN_PRIVILEGES PrivilegesToDelete;
	PTOKEN_GROUPS RestrictedSids;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, * PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
	DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, * PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
	PVOID CompletionKey;
	HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, * PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
	JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, * PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_JOBSET_INFORMATION {
	DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, * PJOBOBJECT_JOBSET_INFORMATION;
typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
	ToleranceLow = 1,
	ToleranceMedium,
	ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE, * PJOBOBJECT_RATE_CONTROL_TOLERANCE;
typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
	ToleranceIntervalShort = 1,
	ToleranceIntervalMedium,
	ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL,
* PJOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;
typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
	DWORD64 IoReadBytesLimit;
	DWORD64 IoWriteBytesLimit;
	LARGE_INTEGER PerJobUserTimeLimit;
	DWORD64 JobMemoryLimit;
	JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
	DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, * PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;
typedef struct JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2 {
	DWORD64 IoReadBytesLimit;
	DWORD64 IoWriteBytesLimit;
	LARGE_INTEGER PerJobUserTimeLimit;
	union {
		DWORD64 JobHighMemoryLimit;
		DWORD64 JobMemoryLimit;
	};
	union {
		JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
		JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
	};
	union {
		JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
		JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL
			CpuRateControlToleranceInterval;
	};
	DWORD LimitFlags;
	JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
	DWORD64 JobLowMemoryLimit;
	JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL IoRateControlToleranceInterval;
	JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
	JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL NetRateControlToleranceInterval;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION_2;
typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
	DWORD LimitFlags;
	DWORD ViolationLimitFlags;
	DWORD64 IoReadBytes;
	DWORD64 IoReadBytesLimit;
	DWORD64 IoWriteBytes;
	DWORD64 IoWriteBytesLimit;
	LARGE_INTEGER PerJobUserTime;
	LARGE_INTEGER PerJobUserTimeLimit;
	DWORD64 JobMemory;
	DWORD64 JobMemoryLimit;
	JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
	JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, * PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;
typedef struct JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2 {
	DWORD LimitFlags;
	DWORD ViolationLimitFlags;
	DWORD64 IoReadBytes;
	DWORD64 IoReadBytesLimit;
	DWORD64 IoWriteBytes;
	DWORD64 IoWriteBytesLimit;
	LARGE_INTEGER PerJobUserTime;
	LARGE_INTEGER PerJobUserTimeLimit;
	DWORD64 JobMemory;
	union {
		DWORD64 JobHighMemoryLimit;
		DWORD64 JobMemoryLimit;
	};
	union {
		JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
		JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlTolerance;
	};
	union {
		JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlToleranceLimit;
		JOBOBJECT_RATE_CONTROL_TOLERANCE CpuRateControlToleranceLimit;
	};
	DWORD64 JobLowMemoryLimit;
	JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlTolerance;
	JOBOBJECT_RATE_CONTROL_TOLERANCE IoRateControlToleranceLimit;
	JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlTolerance;
	JOBOBJECT_RATE_CONTROL_TOLERANCE NetRateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION_2;
typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
	DWORD ControlFlags;
	union {
		DWORD CpuRate;
		DWORD Weight;
		struct {
			WORD   MinRate;
			WORD   MaxRate;
		};
	};
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, * PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;
typedef enum JOB_OBJECT_NET_RATE_CONTROL_FLAGS {
	JOB_OBJECT_NET_RATE_CONTROL_ENABLE = 0x1,
	JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH = 0x2,
	JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG = 0x4,
	JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS = 0x7
} JOB_OBJECT_NET_RATE_CONTROL_FLAGS;
typedef char __C_ASSERT__[(JOB_OBJECT_NET_RATE_CONTROL_VALID_FLAGS == (JOB_OBJECT_NET_RATE_CONTROL_ENABLE + JOB_OBJECT_NET_RATE_CONTROL_MAX_BANDWIDTH + JOB_OBJECT_NET_RATE_CONTROL_DSCP_TAG)) ? 1 : -1];
typedef struct JOBOBJECT_NET_RATE_CONTROL_INFORMATION {
	DWORD64 MaxBandwidth;
	JOB_OBJECT_NET_RATE_CONTROL_FLAGS ControlFlags;
	BYTE  DscpTag;
} JOBOBJECT_NET_RATE_CONTROL_INFORMATION;
typedef enum JOB_OBJECT_IO_RATE_CONTROL_FLAGS {
	JOB_OBJECT_IO_RATE_CONTROL_ENABLE = 0x1,
	JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME = 0x2,
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL = 0x4,
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP = 0x8,
	JOB_OBJECT_IO_RATE_CONTROL_VALID_FLAGS = JOB_OBJECT_IO_RATE_CONTROL_ENABLE |
	JOB_OBJECT_IO_RATE_CONTROL_STANDALONE_VOLUME |
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ALL |
	JOB_OBJECT_IO_RATE_CONTROL_FORCE_UNIT_ACCESS_ON_SOFT_CAP
} JOB_OBJECT_IO_RATE_CONTROL_FLAGS;
typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE {
	LONG64 MaxIops;
	LONG64 MaxBandwidth;
	LONG64 ReservationIops;
	PWSTR VolumeName;
	DWORD BaseIoSize;
	JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	WORD   VolumeNameLength;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE;
typedef JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE
JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V1;
typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2 {
	LONG64 MaxIops;
	LONG64 MaxBandwidth;
	LONG64 ReservationIops;
	PWSTR VolumeName;
	DWORD BaseIoSize;
	JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	WORD   VolumeNameLength;
	LONG64 CriticalReservationIops;
	LONG64 ReservationBandwidth;
	LONG64 CriticalReservationBandwidth;
	LONG64 MaxTimePercent;
	LONG64 ReservationTimePercent;
	LONG64 CriticalReservationTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V2;
typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3 {
	LONG64 MaxIops;
	LONG64 MaxBandwidth;
	LONG64 ReservationIops;
	PWSTR VolumeName;
	DWORD BaseIoSize;
	JOB_OBJECT_IO_RATE_CONTROL_FLAGS ControlFlags;
	WORD   VolumeNameLength;
	LONG64 CriticalReservationIops;
	LONG64 ReservationBandwidth;
	LONG64 CriticalReservationBandwidth;
	LONG64 MaxTimePercent;
	LONG64 ReservationTimePercent;
	LONG64 CriticalReservationTimePercent;
	LONG64 SoftMaxIops;
	LONG64 SoftMaxBandwidth;
	LONG64 SoftMaxTimePercent;
	LONG64 LimitExcessNotifyIops;
	LONG64 LimitExcessNotifyBandwidth;
	LONG64 LimitExcessNotifyTimePercent;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION_NATIVE_V3;
typedef enum JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS {
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_ENABLE = 0x1,
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_DISABLE = 0x2,
	JOBOBJECT_IO_ATTRIBUTION_CONTROL_VALID_FLAGS = 0x3
} JOBOBJECT_IO_ATTRIBUTION_CONTROL_FLAGS;
typedef struct _JOBOBJECT_IO_ATTRIBUTION_STATS {
	ULONG_PTR IoCount;
	ULONGLONG TotalNonOverlappedQueueTime;
	ULONGLONG TotalNonOverlappedServiceTime;
	ULONGLONG TotalSize;
} JOBOBJECT_IO_ATTRIBUTION_STATS, * PJOBOBJECT_IO_ATTRIBUTION_STATS;
typedef struct _JOBOBJECT_IO_ATTRIBUTION_INFORMATION {
	DWORD ControlFlags;
	JOBOBJECT_IO_ATTRIBUTION_STATS ReadStats;
	JOBOBJECT_IO_ATTRIBUTION_STATS WriteStats;
} JOBOBJECT_IO_ATTRIBUTION_INFORMATION, * PJOBOBJECT_IO_ATTRIBUTION_INFORMATION;
typedef enum _JOBOBJECTINFOCLASS {
	JobObjectBasicAccountingInformation = 1,
	JobObjectBasicLimitInformation,
	JobObjectBasicProcessIdList,
	JobObjectBasicUIRestrictions,
	JobObjectSecurityLimitInformation,
	JobObjectEndOfJobTimeInformation,
	JobObjectAssociateCompletionPortInformation,
	JobObjectBasicAndIoAccountingInformation,
	JobObjectExtendedLimitInformation,
	JobObjectJobSetInformation,
	JobObjectGroupInformation,
	JobObjectNotificationLimitInformation,
	JobObjectLimitViolationInformation,
	JobObjectGroupInformationEx,
	JobObjectCpuRateControlInformation,
	JobObjectCompletionFilter,
	JobObjectCompletionCounter,
	JobObjectReserved1Information = 18,
	JobObjectReserved2Information,
	JobObjectReserved3Information,
	JobObjectReserved4Information,
	JobObjectReserved5Information,
	JobObjectReserved6Information,
	JobObjectReserved7Information,
	JobObjectReserved8Information,
	JobObjectReserved9Information,
	JobObjectReserved10Information,
	JobObjectReserved11Information,
	JobObjectReserved12Information,
	JobObjectReserved13Information,
	JobObjectReserved14Information = 31,
	JobObjectNetRateControlInformation,
	JobObjectNotificationLimitInformation2,
	JobObjectLimitViolationInformation2,
	JobObjectCreateSilo,
	JobObjectSiloBasicInformation,
	JobObjectReserved15Information = 37,
	JobObjectReserved16Information = 38,
	JobObjectReserved17Information = 39,
	JobObjectReserved18Information = 40,
	JobObjectReserved19Information = 41,
	JobObjectReserved20Information = 42,
	JobObjectReserved21Information = 43,
	JobObjectReserved22Information = 44,
	JobObjectReserved23Information = 45,
	JobObjectReserved24Information = 46,
	JobObjectReserved25Information = 47,
	MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;
typedef struct _SILOOBJECT_BASIC_INFORMATION {
	DWORD SiloId;
	DWORD SiloParentId;
	DWORD NumberOfProcesses;
	BOOLEAN IsInServerSilo;
	BYTE  Reserved[3];
} SILOOBJECT_BASIC_INFORMATION, * PSILOOBJECT_BASIC_INFORMATION;
typedef enum _SERVERSILO_STATE {
	SERVERSILO_INITING = 0,
	SERVERSILO_STARTED,
	SERVERSILO_SHUTTING_DOWN,
	SERVERSILO_TERMINATING,
	SERVERSILO_TERMINATED,
} SERVERSILO_STATE, * PSERVERSILO_STATE;
typedef struct _SERVERSILO_BASIC_INFORMATION {
	DWORD ServiceSessionId;
	SERVERSILO_STATE State;
	DWORD    ExitStatus;
	BOOLEAN IsDownlevelContainer;
	PVOID ApiSetSchema;
	PVOID HostApiSetSchema;
} SERVERSILO_BASIC_INFORMATION, * PSERVERSILO_BASIC_INFORMATION;
typedef enum _FIRMWARE_TYPE {
	FirmwareTypeUnknown,
	FirmwareTypeBios,
	FirmwareTypeUefi,
	FirmwareTypeMax
} FIRMWARE_TYPE, * PFIRMWARE_TYPE;
typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
	RelationProcessorCore,
	RelationNumaNode,
	RelationCache,
	RelationProcessorPackage,
	RelationGroup,
	RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;
typedef enum _PROCESSOR_CACHE_TYPE {
	CacheUnified,
	CacheInstruction,
	CacheData,
	CacheTrace
} PROCESSOR_CACHE_TYPE;
typedef struct _CACHE_DESCRIPTOR {
	BYTE   Level;
	BYTE   Associativity;
	WORD   LineSize;
	DWORD  Size;
	PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, * PCACHE_DESCRIPTOR;
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
	ULONG_PTR   ProcessorMask;
	LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	union {
		struct {
			BYTE  Flags;
		} ProcessorCore;
		struct {
			DWORD NodeNumber;
		} NumaNode;
		CACHE_DESCRIPTOR Cache;
		ULONGLONG  Reserved[2];
	};
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, * PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;
typedef struct _PROCESSOR_RELATIONSHIP {
	BYTE  Flags;
	BYTE  EfficiencyClass;
	BYTE  Reserved[20];
	WORD   GroupCount;
	GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, * PPROCESSOR_RELATIONSHIP;
typedef struct _NUMA_NODE_RELATIONSHIP {
	DWORD NodeNumber;
	BYTE  Reserved[20];
	GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, * PNUMA_NODE_RELATIONSHIP;
typedef struct _CACHE_RELATIONSHIP {
	BYTE  Level;
	BYTE  Associativity;
	WORD   LineSize;
	DWORD CacheSize;
	PROCESSOR_CACHE_TYPE Type;
	BYTE  Reserved[20];
	GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, * PCACHE_RELATIONSHIP;
typedef struct _PROCESSOR_GROUP_INFO {
	BYTE  MaximumProcessorCount;
	BYTE  ActiveProcessorCount;
	BYTE  Reserved[38];
	KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, * PPROCESSOR_GROUP_INFO;
typedef struct _GROUP_RELATIONSHIP {
	WORD   MaximumGroupCount;
	WORD   ActiveGroupCount;
	BYTE  Reserved[20];
	PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, * PGROUP_RELATIONSHIP;
struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
	LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
	DWORD Size;
	union {
		PROCESSOR_RELATIONSHIP Processor;
		NUMA_NODE_RELATIONSHIP NumaNode;
		CACHE_RELATIONSHIP Cache;
		GROUP_RELATIONSHIP Group;
	};
};
typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, * PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;
typedef enum _CPU_SET_INFORMATION_TYPE {
	CpuSetInformation
} CPU_SET_INFORMATION_TYPE, * PCPU_SET_INFORMATION_TYPE;
struct _SYSTEM_CPU_SET_INFORMATION {
	DWORD Size;
	CPU_SET_INFORMATION_TYPE Type;
	union {
		struct {
			DWORD Id;
			WORD   Group;
			BYTE  LogicalProcessorIndex;
			BYTE  CoreIndex;
			BYTE  LastLevelCacheIndex;
			BYTE  NumaNodeIndex;
			BYTE  EfficiencyClass;
			union {
				BYTE  AllFlags;
				struct {
					BYTE  Parked : 1;
					BYTE  Allocated : 1;
					BYTE  AllocatedToTargetProcess : 1;
					BYTE  RealTime : 1;
					BYTE  ReservedFlags : 4;
				};
			};
			union {
				DWORD Reserved;
				BYTE  SchedulingClass;
			};
			DWORD64 AllocationTag;
		} CpuSet;
	};
};
typedef struct _SYSTEM_CPU_SET_INFORMATION SYSTEM_CPU_SET_INFORMATION, * PSYSTEM_CPU_SET_INFORMATION;
typedef struct _SYSTEM_POOL_ZEROING_INFORMATION {
	BOOLEAN PoolZeroingSupportPresent;
} SYSTEM_POOL_ZEROING_INFORMATION, * PSYSTEM_POOL_ZEROING_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
	DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, * PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;
typedef struct _XSTATE_FEATURE {
	DWORD Offset;
	DWORD Size;
} XSTATE_FEATURE, * PXSTATE_FEATURE;
typedef struct _XSTATE_CONFIGURATION {
	DWORD64 EnabledFeatures;
	DWORD64 EnabledVolatileFeatures;
	DWORD Size;
	union {
		DWORD ControlFlags;
		struct
		{
			DWORD OptimizedSave : 1;
			DWORD CompactionEnabled : 1;
		};
	};
	XSTATE_FEATURE Features[(64)];
	DWORD64 EnabledSupervisorFeatures;
	DWORD64 AlignedFeatures;
	DWORD AllFeatureSize;
	DWORD AllFeatures[(64)];
	DWORD64 EnabledUserVisibleSupervisorFeatures;
} XSTATE_CONFIGURATION, * PXSTATE_CONFIGURATION;
typedef struct _MEMORY_BASIC_INFORMATION {
	PVOID BaseAddress;
	PVOID AllocationBase;
	DWORD AllocationProtect;
	WORD   PartitionId;
	SIZE_T RegionSize;
	DWORD State;
	DWORD Protect;
	DWORD Type;
} MEMORY_BASIC_INFORMATION, * PMEMORY_BASIC_INFORMATION;
typedef struct _MEMORY_BASIC_INFORMATION32 {
	DWORD BaseAddress;
	DWORD AllocationBase;
	DWORD AllocationProtect;
	DWORD RegionSize;
	DWORD State;
	DWORD Protect;
	DWORD Type;
} MEMORY_BASIC_INFORMATION32, * PMEMORY_BASIC_INFORMATION32;
typedef struct  _MEMORY_BASIC_INFORMATION64 {
	ULONGLONG BaseAddress;
	ULONGLONG AllocationBase;
	DWORD     AllocationProtect;
	DWORD     __alignment1;
	ULONGLONG RegionSize;
	DWORD     State;
	DWORD     Protect;
	DWORD     Type;
	DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, * PMEMORY_BASIC_INFORMATION64;
typedef struct _CFG_CALL_TARGET_INFO {
	ULONG_PTR Offset;
	ULONG_PTR Flags;
} CFG_CALL_TARGET_INFO, * PCFG_CALL_TARGET_INFO;
typedef struct _MEM_ADDRESS_REQUIREMENTS {
	PVOID LowestStartingAddress;
	PVOID HighestEndingAddress;
	SIZE_T Alignment;
} MEM_ADDRESS_REQUIREMENTS, * PMEM_ADDRESS_REQUIREMENTS;
typedef enum MEM_EXTENDED_PARAMETER_TYPE {
	MemExtendedParameterInvalidType = 0,
	MemExtendedParameterAddressRequirements,
	MemExtendedParameterNumaNode,
	MemExtendedParameterPartitionHandle,
	MemExtendedParameterUserPhysicalHandle,
	MemExtendedParameterAttributeFlags,
	MemExtendedParameterMax
} MEM_EXTENDED_PARAMETER_TYPE, * PMEM_EXTENDED_PARAMETER_TYPE;
typedef struct  MEM_EXTENDED_PARAMETER {
	struct {
		DWORD64 Type : 8;
		DWORD64 Reserved : 64 - 8;
	};
	union {
		DWORD64 ULong64;
		PVOID Pointer;
		SIZE_T Size;
		HANDLE Handle;
		DWORD ULong;
	};
} MEM_EXTENDED_PARAMETER, * PMEM_EXTENDED_PARAMETER;
typedef enum MEM_SECTION_EXTENDED_PARAMETER_TYPE {
	MemSectionExtendedParameterInvalidType = 0,
	MemSectionExtendedParameterUserPhysicalFlags,
	MemSectionExtendedParameterNumaNode,
	MemSectionExtendedParameterMax
} MEM_SECTION_EXTENDED_PARAMETER_TYPE, * PMEM_SECTION_EXTENDED_PARAMETER_TYPE;
typedef struct _ENCLAVE_CREATE_INFO_SGX {
	BYTE  Secs[4096];
} ENCLAVE_CREATE_INFO_SGX, * PENCLAVE_CREATE_INFO_SGX;
typedef struct _ENCLAVE_INIT_INFO_SGX {
	BYTE  SigStruct[1808];
	BYTE  Reserved1[240];
	BYTE  EInitToken[304];
	BYTE  Reserved2[1744];
} ENCLAVE_INIT_INFO_SGX, * PENCLAVE_INIT_INFO_SGX;
typedef struct _ENCLAVE_CREATE_INFO_VBS {
	DWORD Flags;
	BYTE  OwnerID[32];
} ENCLAVE_CREATE_INFO_VBS, * PENCLAVE_CREATE_INFO_VBS;
typedef struct _ENCLAVE_CREATE_INFO_VBS_BASIC {
	DWORD Flags;
	BYTE  OwnerID[32];
} ENCLAVE_CREATE_INFO_VBS_BASIC, * PENCLAVE_CREATE_INFO_VBS_BASIC;
typedef struct _ENCLAVE_LOAD_DATA_VBS_BASIC {
	DWORD PageType;
} ENCLAVE_LOAD_DATA_VBS_BASIC, * PENCLAVE_LOAD_DATA_VBS_BASIC;
typedef struct _ENCLAVE_INIT_INFO_VBS_BASIC {
	BYTE  FamilyId[16];
	BYTE  ImageId[16];
	ULONGLONG EnclaveSize;
	DWORD EnclaveSvn;
	DWORD Reserved;
	union {
		HANDLE SignatureInfoHandle;
		ULONGLONG Unused;
	};
} ENCLAVE_INIT_INFO_VBS_BASIC, * PENCLAVE_INIT_INFO_VBS_BASIC;
typedef struct _ENCLAVE_INIT_INFO_VBS {
	DWORD Length;
	DWORD ThreadCount;
} ENCLAVE_INIT_INFO_VBS, * PENCLAVE_INIT_INFO_VBS;
typedef PVOID(ENCLAVE_TARGET_FUNCTION)(PVOID);
typedef ENCLAVE_TARGET_FUNCTION(*PENCLAVE_TARGET_FUNCTION);
typedef PENCLAVE_TARGET_FUNCTION LPENCLAVE_TARGET_FUNCTION;
typedef struct _FILE_ID_128 {
	BYTE  Identifier[16];
} FILE_ID_128, * PFILE_ID_128;
typedef struct _FILE_NOTIFY_INFORMATION {
	DWORD NextEntryOffset;
	DWORD Action;
	DWORD FileNameLength;
	WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, * PFILE_NOTIFY_INFORMATION;
typedef struct _FILE_NOTIFY_EXTENDED_INFORMATION {
	DWORD NextEntryOffset;
	DWORD Action;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastModificationTime;
	LARGE_INTEGER LastChangeTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER AllocatedLength;
	LARGE_INTEGER FileSize;
	DWORD FileAttributes;
	DWORD ReparsePointTag;
	LARGE_INTEGER FileId;
	LARGE_INTEGER ParentFileId;
	DWORD FileNameLength;
	WCHAR FileName[1];
} FILE_NOTIFY_EXTENDED_INFORMATION, * PFILE_NOTIFY_EXTENDED_INFORMATION;
typedef union _FILE_SEGMENT_ELEMENT {
	PVOID64 Buffer;
	ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, * PFILE_SEGMENT_ELEMENT;
typedef struct _REPARSE_GUID_DATA_BUFFER {
	DWORD  ReparseTag;
	WORD   ReparseDataLength;
	WORD   Reserved;
	GUID   ReparseGuid;
	struct {
		BYTE   DataBuffer[1];
	} GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, * PREPARSE_GUID_DATA_BUFFER;
typedef struct _SCRUB_DATA_INPUT {
	DWORD Size;
	DWORD Flags;
	DWORD MaximumIos;
	DWORD ObjectId[4];
	DWORD Reserved[25];
	BYTE  ResumeContext[816];
} SCRUB_DATA_INPUT, * PSCRUB_DATA_INPUT;
typedef struct _SCRUB_PARITY_EXTENT {
	LONGLONG Offset;
	ULONGLONG Length;
} SCRUB_PARITY_EXTENT, * PSCRUB_PARITY_EXTENT;
typedef struct _SCRUB_PARITY_EXTENT_DATA {
	WORD   Size;
	WORD   Flags;
	WORD   NumberOfParityExtents;
	WORD   MaximumNumberOfParityExtents;
	SCRUB_PARITY_EXTENT ParityExtents[1];
} SCRUB_PARITY_EXTENT_DATA, * PSCRUB_PARITY_EXTENT_DATA;
typedef struct _SCRUB_DATA_OUTPUT {
	DWORD Size;
	DWORD Flags;
	DWORD Status;
	ULONGLONG ErrorFileOffset;
	ULONGLONG ErrorLength;
	ULONGLONG NumberOfBytesRepaired;
	ULONGLONG NumberOfBytesFailed;
	ULONGLONG InternalFileReference;
	WORD   ResumeContextLength;
	WORD   ParityExtentDataOffset;
	DWORD Reserved[9];
	ULONGLONG NumberOfMetadataBytesProcessed;
	ULONGLONG NumberOfDataBytesProcessed;
	ULONGLONG TotalNumberOfMetadataBytesInUse;
	ULONGLONG TotalNumberOfDataBytesInUse;
	BYTE  ResumeContext[816];
} SCRUB_DATA_OUTPUT, * PSCRUB_DATA_OUTPUT;
typedef enum _SharedVirtualDiskSupportType
{
	SharedVirtualDisksUnsupported = 0,
	SharedVirtualDisksSupported = 1,
	SharedVirtualDiskSnapshotsSupported = 3,
	SharedVirtualDiskCDPSnapshotsSupported = 7
} SharedVirtualDiskSupportType;
typedef enum _SharedVirtualDiskHandleState
{
	SharedVirtualDiskHandleStateNone = 0,
	SharedVirtualDiskHandleStateFileShared = 1,
	SharedVirtualDiskHandleStateHandleShared = 3
} SharedVirtualDiskHandleState;
typedef struct _SHARED_VIRTUAL_DISK_SUPPORT {
	SharedVirtualDiskSupportType SharedVirtualDiskSupport;
	SharedVirtualDiskHandleState HandleState;
} SHARED_VIRTUAL_DISK_SUPPORT, * PSHARED_VIRTUAL_DISK_SUPPORT;
typedef struct _REARRANGE_FILE_DATA {
	ULONGLONG SourceStartingOffset;
	ULONGLONG TargetOffset;
	HANDLE SourceFileHandle;
	DWORD Length;
	DWORD Flags;
} REARRANGE_FILE_DATA, * PREARRANGE_FILE_DATA;
typedef struct _REARRANGE_FILE_DATA32 {
	ULONGLONG SourceStartingOffset;
	ULONGLONG TargetOffset;
	UINT32 SourceFileHandle;
	DWORD Length;
	DWORD Flags;
} REARRANGE_FILE_DATA32, * PREARRANGE_FILE_DATA32;
typedef struct _SHUFFLE_FILE_DATA {
	LONGLONG StartingOffset;
	LONGLONG Length;
	DWORD Flags;
} SHUFFLE_FILE_DATA, * PSHUFFLE_FILE_DATA;
typedef struct _NETWORK_APP_INSTANCE_EA {
	GUID AppInstanceID;
	DWORD CsvFlags;
} NETWORK_APP_INSTANCE_EA, * PNETWORK_APP_INSTANCE_EA;
extern const GUID  GUID_MAX_POWER_SAVINGS = { 0xA1841308, 0x3541, 0x4FAB, { 0xBC, 0x81, 0xF7, 0x15, 0x56, 0xF2, 0x0B, 0x4A } };
extern const GUID  GUID_MIN_POWER_SAVINGS = { 0x8C5E7FDA, 0xE8BF, 0x4A96, { 0x9A, 0x85, 0xA6, 0xE2, 0x3A, 0x8C, 0x63, 0x5C } };
extern const GUID  GUID_TYPICAL_POWER_SAVINGS = { 0x381B4222, 0xF694, 0x41F0, { 0x96, 0x85, 0xFF, 0x5B, 0xB2, 0x60, 0xDF, 0x2E } };
extern const GUID  NO_SUBGROUP_GUID = { 0xFEA3413E, 0x7E05, 0x4911, { 0x9A, 0x71, 0x70, 0x03, 0x31, 0xF1, 0xC2, 0x94 } };
extern const GUID  ALL_POWERSCHEMES_GUID = { 0x68A1E95E, 0x13EA, 0x41E1, { 0x80, 0x11, 0x0C, 0x49, 0x6C, 0xA4, 0x90, 0xB0 } };
extern const GUID  GUID_POWERSCHEME_PERSONALITY = { 0x245D8541, 0x3943, 0x4422, { 0xB0, 0x25, 0x13, 0xA7, 0x84, 0xF6, 0x79, 0xB7 } };
extern const GUID  GUID_ACTIVE_POWERSCHEME = { 0x31F9F286, 0x5084, 0x42FE, { 0xB7, 0x20, 0x2B, 0x02, 0x64, 0x99, 0x37, 0x63 } };
extern const GUID  GUID_IDLE_RESILIENCY_SUBGROUP = { 0x2e601130, 0x5351, 0x4d9d, { 0x8e, 0x4, 0x25, 0x29, 0x66, 0xba, 0xd0, 0x54 } };
extern const GUID  GUID_IDLE_RESILIENCY_PERIOD = { 0xc42b79aa, 0xaa3a, 0x484b, { 0xa9, 0x8f, 0x2c, 0xf3, 0x2a, 0xa9, 0xa, 0x28 } };
extern const GUID  GUID_DEEP_SLEEP_ENABLED = { 0xd502f7ee, 0x1dc7, 0x4efd, { 0xa5, 0x5d, 0xf0, 0x4b, 0x6f, 0x5c, 0x5, 0x45 } };
extern const GUID  GUID_DEEP_SLEEP_PLATFORM_STATE = { 0xd23f2fb8, 0x9536, 0x4038, { 0x9c, 0x94, 0x1c, 0xe0, 0x2e, 0x5c, 0x21, 0x52 } };
extern const GUID  GUID_DISK_COALESCING_POWERDOWN_TIMEOUT = { 0xc36f0eb4, 0x2988, 0x4a70, { 0x8e, 0xee, 0x8, 0x84, 0xfc, 0x2c, 0x24, 0x33 } };
extern const GUID  GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT = { 0x3166bc41, 0x7e98, 0x4e03, { 0xb3, 0x4e, 0xec, 0xf, 0x5f, 0x2b, 0x21, 0x8e } };
extern const GUID  GUID_VIDEO_SUBGROUP = { 0x7516B95F, 0xF776, 0x4464, { 0x8C, 0x53, 0x06, 0x16, 0x7F, 0x40, 0xCC, 0x99 } };
extern const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT = { 0x3C0BC021, 0xC8A8, 0x4E07, { 0xA9, 0x73, 0x6B, 0x14, 0xCB, 0xCB, 0x2B, 0x7E } };
extern const GUID  GUID_VIDEO_ANNOYANCE_TIMEOUT = { 0x82DBCF2D, 0xCD67, 0x40C5, { 0xBF, 0xDC, 0x9F, 0x1A, 0x5C, 0xCD, 0x46, 0x63 } };
extern const GUID  GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE = { 0xEED904DF, 0xB142, 0x4183, { 0xB1, 0x0B, 0x5A, 0x11, 0x97, 0xA3, 0x78, 0x64 } };
extern const GUID  GUID_VIDEO_DIM_TIMEOUT = { 0x17aaa29b, 0x8b43, 0x4b94, { 0xaa, 0xfe, 0x35, 0xf6, 0x4d, 0xaa, 0xf1, 0xee } };
extern const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN = { 0x90959D22, 0xD6A1, 0x49B9, { 0xAF, 0x93, 0xBC, 0xE8, 0x85, 0xAD, 0x33, 0x5B } };
extern const GUID  GUID_MONITOR_POWER_ON = { 0x02731015, 0x4510, 0x4526, { 0x99, 0xE6, 0xE5, 0xA1, 0x7E, 0xBD, 0x1A, 0xEA } };
extern const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS = { 0xaded5e82L, 0xb909, 0x4619, { 0x99, 0x49, 0xf5, 0xd7, 0x1d, 0xac, 0x0b, 0xcb } };
extern const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS = { 0xf1fbfde2, 0xa960, 0x4165, { 0x9f, 0x88, 0x50, 0x66, 0x79, 0x11, 0xce, 0x96 } };
extern const GUID  GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS = { 0x8ffee2c6, 0x2d01, 0x46be, { 0xad, 0xb9, 0x39, 0x8a, 0xdd, 0xc5, 0xb4, 0xff } };
extern const GUID  GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS = { 0xFBD9AA66, 0x9553, 0x4097, { 0xBA, 0x44, 0xED, 0x6E, 0x9D, 0x65, 0xEA, 0xB8 } };
extern const GUID  GUID_CONSOLE_DISPLAY_STATE = { 0x6fe69556, 0x704a, 0x47a0, { 0x8f, 0x24, 0xc2, 0x8d, 0x93, 0x6f, 0xda, 0x47 } };
extern const GUID  GUID_ALLOW_DISPLAY_REQUIRED = { 0xA9CEB8DA, 0xCD46, 0x44FB, { 0xA9, 0x8B, 0x02, 0xAF, 0x69, 0xDE, 0x46, 0x23 } };
extern const GUID  GUID_VIDEO_CONSOLE_LOCK_TIMEOUT = { 0x8ec4b3a5, 0x6868, 0x48c2, { 0xbe, 0x75, 0x4f, 0x30, 0x44, 0xbe, 0x88, 0xa7 } };
extern const GUID  GUID_ADVANCED_COLOR_QUALITY_BIAS = { 0x684c3e69, 0xa4f7, 0x4014, { 0x87, 0x54, 0xd4, 0x51, 0x79, 0xa5, 0x61, 0x67 } };
extern const GUID  GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP = { 0x8619b916, 0xe004, 0x4dd8, { 0x9b, 0x66, 0xda, 0xe8, 0x6f, 0x80, 0x66, 0x98 } };
extern const GUID  GUID_NON_ADAPTIVE_INPUT_TIMEOUT = { 0x5adbbfbc, 0x74e, 0x4da1, { 0xba, 0x38, 0xdb, 0x8b, 0x36, 0xb2, 0xc8, 0xf3 } };
extern const GUID  GUID_ADAPTIVE_INPUT_CONTROLLER_STATE = { 0xe98fae9, 0xf45a, 0x4de1, { 0xa7, 0x57, 0x60, 0x31, 0xf1, 0x97, 0xf6, 0xea } };
extern const GUID  GUID_DISK_SUBGROUP = { 0x0012EE47, 0x9041, 0x4B5D, { 0x9B, 0x77, 0x53, 0x5F, 0xBA, 0x8B, 0x14, 0x42 } };
extern const GUID  GUID_DISK_MAX_POWER = { 0x51dea550, 0xbb38, 0x4bc4, { 0x99, 0x1b, 0xea, 0xcf, 0x37, 0xbe, 0x5e, 0xc8 } };
extern const GUID  GUID_DISK_POWERDOWN_TIMEOUT = { 0x6738E2C4, 0xE8A5, 0x4A42, { 0xB1, 0x6A, 0xE0, 0x40, 0xE7, 0x69, 0x75, 0x6E } };
extern const GUID  GUID_DISK_IDLE_TIMEOUT = { 0x58E39BA8, 0xB8E6, 0x4EF6, { 0x90, 0xD0, 0x89, 0xAE, 0x32, 0xB2, 0x58, 0xD6 } };
extern const GUID  GUID_DISK_BURST_IGNORE_THRESHOLD = { 0x80e3c60e, 0xbb94, 0x4ad8, { 0xbb, 0xe0, 0x0d, 0x31, 0x95, 0xef, 0xc6, 0x63 } };
extern const GUID  GUID_DISK_ADAPTIVE_POWERDOWN = { 0x396A32E1, 0x499A, 0x40B2, { 0x91, 0x24, 0xA9, 0x6A, 0xFE, 0x70, 0x76, 0x67 } };
extern const GUID  GUID_DISK_NVME_NOPPME = { 0xfc7372b6, 0xab2d, 0x43ee, { 0x87, 0x97, 0x15, 0xe9, 0x84, 0x1f, 0x2c, 0xca } };
extern const GUID  GUID_SLEEP_SUBGROUP = { 0x238C9FA8, 0x0AAD, 0x41ED, { 0x83, 0xF4, 0x97, 0xBE, 0x24, 0x2C, 0x8F, 0x20 } };
extern const GUID  GUID_SLEEP_IDLE_THRESHOLD = { 0x81cd32e0, 0x7833, 0x44f3, { 0x87, 0x37, 0x70, 0x81, 0xf3, 0x8d, 0x1f, 0x70 } };
extern const GUID  GUID_STANDBY_TIMEOUT = { 0x29F6C1DB, 0x86DA, 0x48C5, { 0x9F, 0xDB, 0xF2, 0xB6, 0x7B, 0x1F, 0x44, 0xDA } };
extern const GUID  GUID_UNATTEND_SLEEP_TIMEOUT = { 0x7bc4a2f9, 0xd8fc, 0x4469, { 0xb0, 0x7b, 0x33, 0xeb, 0x78, 0x5a, 0xac, 0xa0 } };
extern const GUID  GUID_HIBERNATE_TIMEOUT = { 0x9D7815A6, 0x7EE4, 0x497E, { 0x88, 0x88, 0x51, 0x5A, 0x05, 0xF0, 0x23, 0x64 } };
extern const GUID  GUID_HIBERNATE_FASTS4_POLICY = { 0x94AC6D29, 0x73CE, 0x41A6, { 0x80, 0x9F, 0x63, 0x63, 0xBA, 0x21, 0xB4, 0x7E } };
extern const GUID  GUID_CRITICAL_POWER_TRANSITION = { 0xB7A27025, 0xE569, 0x46c2, { 0xA5, 0x04, 0x2B, 0x96, 0xCA, 0xD2, 0x25, 0xA1 } };
extern const GUID  GUID_SYSTEM_AWAYMODE = { 0x98A7F580, 0x01F7, 0x48AA, { 0x9C, 0x0F, 0x44, 0x35, 0x2C, 0x29, 0xE5, 0xC0 } };
extern const GUID  GUID_ALLOW_AWAYMODE = { 0x25dfa149, 0x5dd1, 0x4736, { 0xb5, 0xab, 0xe8, 0xa3, 0x7b, 0x5b, 0x81, 0x87 } };
extern const GUID  GUID_USER_PRESENCE_PREDICTION = { 0x82011705, 0xfb95, 0x4d46, { 0x8d, 0x35, 0x40, 0x42, 0xb1, 0xd2, 0xd, 0xef } };
extern const GUID  GUID_STANDBY_BUDGET_GRACE_PERIOD = { 0x60c07fe1, 0x0556, 0x45cf, { 0x99, 0x03, 0xd5, 0x6e, 0x32, 0x21, 0x2, 0x42 } };
extern const GUID  GUID_STANDBY_BUDGET_PERCENT = { 0x9fe527be, 0x1b70, 0x48da, { 0x93, 0x0d, 0x7b, 0xcf, 0x17, 0xb4, 0x49, 0x90 } };
extern const GUID  GUID_STANDBY_RESERVE_GRACE_PERIOD = { 0xc763ee92, 0x71e8, 0x4127, { 0x84, 0xeb, 0xf6, 0xed, 0x04, 0x3a, 0x3e, 0x3d } };
extern const GUID  GUID_STANDBY_RESERVE_TIME = { 0x468FE7E5, 0x1158, 0x46EC, { 0x88, 0xbc, 0x5b, 0x96, 0xc9, 0xe4, 0x4f, 0xd0 } };
extern const GUID  GUID_STANDBY_RESET_PERCENT = { 0x49cb11a5, 0x56e2, 0x4afb, { 0x9d, 0x38, 0x3d, 0xf4, 0x78, 0x72, 0xe2, 0x1b } };
extern const GUID  GUID_ALLOW_STANDBY_STATES = { 0xabfc2519, 0x3608, 0x4c2a, { 0x94, 0xea, 0x17, 0x1b, 0x0e, 0xd5, 0x46, 0xab } };
extern const GUID  GUID_ALLOW_RTC_WAKE = { 0xBD3B718A, 0x0680, 0x4D9D, { 0x8A, 0xB2, 0xE1, 0xD2, 0xB4, 0xAC, 0x80, 0x6D } };
extern const GUID  GUID_LEGACY_RTC_MITIGATION = { 0x1A34BDC3, 0x7E6B, 0x442E, { 0xA9, 0xD0, 0x64, 0xB6, 0xEF, 0x37, 0x8E, 0x84 } };
extern const GUID  GUID_ALLOW_SYSTEM_REQUIRED = { 0xA4B195F5, 0x8225, 0x47D8, { 0x80, 0x12, 0x9D, 0x41, 0x36, 0x97, 0x86, 0xE2 } };
extern const GUID  GUID_POWER_SAVING_STATUS = { 0xe00958c0, 0xc213, 0x4ace, { 0xac, 0x77, 0xfe, 0xcc, 0xed, 0x2e, 0xee, 0xa5 } };
extern const GUID  GUID_ENERGY_SAVER_SUBGROUP = { 0xDE830923, 0xA562, 0x41AF, { 0xA0, 0x86, 0xE3, 0xA2, 0xC6, 0xBA, 0xD2, 0xDA } };
extern const GUID  GUID_ENERGY_SAVER_BATTERY_THRESHOLD = { 0xE69653CA, 0xCF7F, 0x4F05, { 0xAA, 0x73, 0xCB, 0x83, 0x3F, 0xA9, 0x0A, 0xD4 } };
extern const GUID  GUID_ENERGY_SAVER_BRIGHTNESS = { 0x13D09884, 0xF74E, 0x474A, { 0xA8, 0x52, 0xB6, 0xBD, 0xE8, 0xAD, 0x03, 0xA8 } };
extern const GUID  GUID_ENERGY_SAVER_POLICY = { 0x5c5bb349, 0xad29, 0x4ee2, { 0x9d, 0xb, 0x2b, 0x25, 0x27, 0xf, 0x7a, 0x81 } };
extern const GUID  GUID_SYSTEM_BUTTON_SUBGROUP = { 0x4F971E89, 0xEEBD, 0x4455, { 0xA8, 0xDE, 0x9E, 0x59, 0x04, 0x0E, 0x73, 0x47 } };
extern const GUID  GUID_POWERBUTTON_ACTION = { 0x7648EFA3, 0xDD9C, 0x4E3E, { 0xB5, 0x66, 0x50, 0xF9, 0x29, 0x38, 0x62, 0x80 } };
extern const GUID  GUID_SLEEPBUTTON_ACTION = { 0x96996BC0, 0xAD50, 0x47EC, { 0x92, 0x3B, 0x6F, 0x41, 0x87, 0x4D, 0xD9, 0xEB } };
extern const GUID  GUID_USERINTERFACEBUTTON_ACTION = { 0xA7066653, 0x8D6C, 0x40A8, { 0x91, 0x0E, 0xA1, 0xF5, 0x4B, 0x84, 0xC7, 0xE5 } };
extern const GUID  GUID_LIDCLOSE_ACTION = { 0x5CA83367, 0x6E45, 0x459F, { 0xA2, 0x7B, 0x47, 0x6B, 0x1D, 0x01, 0xC9, 0x36 } };
extern const GUID  GUID_LIDOPEN_POWERSTATE = { 0x99FF10E7, 0x23B1, 0x4C07, { 0xA9, 0xD1, 0x5C, 0x32, 0x06, 0xD7, 0x41, 0xB4 } };
extern const GUID  GUID_BATTERY_SUBGROUP = { 0xE73A048D, 0xBF27, 0x4F12, { 0x97, 0x31, 0x8B, 0x20, 0x76, 0xE8, 0x89, 0x1F } };
extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_0 = { 0x637EA02F, 0xBBCB, 0x4015, { 0x8E, 0x2C, 0xA1, 0xC7, 0xB9, 0xC0, 0xB5, 0x46 } };
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0 = { 0x9A66D8D7, 0x4FF7, 0x4EF9, { 0xB5, 0xA2, 0x5A, 0x32, 0x6C, 0xA2, 0xA4, 0x69 } };
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0 = { 0x5dbb7c9f, 0x38e9, 0x40d2, { 0x97, 0x49, 0x4f, 0x8a, 0x0e, 0x9f, 0x64, 0x0f } };
extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_1 = { 0xD8742DCB, 0x3E6A, 0x4B3C, { 0xB3, 0xFE, 0x37, 0x46, 0x23, 0xCD, 0xCF, 0x06 } };
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1 = { 0x8183BA9A, 0xE910, 0x48DA, { 0x87, 0x69, 0x14, 0xAE, 0x6D, 0xC1, 0x17, 0x0A } };
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1 = { 0xbcded951, 0x187b, 0x4d05, { 0xbc, 0xcc, 0xf7, 0xe5, 0x19, 0x60, 0xc2, 0x58 } };
extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_2 = { 0x421CBA38, 0x1A8E, 0x4881, { 0xAC, 0x89, 0xE3, 0x3A, 0x8B, 0x04, 0xEC, 0xE4 } };
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2 = { 0x07A07CA2, 0xADAF, 0x40D7, { 0xB0, 0x77, 0x53, 0x3A, 0xAD, 0xED, 0x1B, 0xFA } };
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2 = { 0x7fd2f0c4, 0xfeb7, 0x4da3, { 0x81, 0x17, 0xe3, 0xfb, 0xed, 0xc4, 0x65, 0x82 } };
extern const GUID  GUID_BATTERY_DISCHARGE_ACTION_3 = { 0x80472613, 0x9780, 0x455E, { 0xB3, 0x08, 0x72, 0xD3, 0x00, 0x3C, 0xF2, 0xF8 } };
extern const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3 = { 0x58AFD5A6, 0xC2DD, 0x47D2, { 0x9F, 0xBF, 0xEF, 0x70, 0xCC, 0x5C, 0x59, 0x65 } };
extern const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3 = { 0x73613ccf, 0xdbfa, 0x4279, { 0x83, 0x56, 0x49, 0x35, 0xf6, 0xbf, 0x62, 0xf3 } };
extern const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP = { 0x54533251, 0x82BE, 0x4824, { 0x96, 0xC1, 0x47, 0xB6, 0x0B, 0x74, 0x0D, 0x00 } };
extern const GUID  GUID_PROCESSOR_THROTTLE_POLICY = { 0x57027304, 0x4AF6, 0x4104, { 0x92, 0x60, 0xE3, 0xD9, 0x52, 0x48, 0xFC, 0x36 } };
extern const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM = { 0xBC5038F7, 0x23E0, 0x4960, { 0x96, 0xDA, 0x33, 0xAB, 0xAF, 0x59, 0x35, 0xEC } };
extern const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM_1 = { 0xBC5038F7, 0x23E0, 0x4960, { 0x96, 0xDA, 0x33, 0xAB, 0xAF, 0x59, 0x35, 0xED } };
extern const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM = { 0x893DEE8E, 0x2BEF, 0x41E0, { 0x89, 0xC6, 0xB5, 0x5D, 0x09, 0x29, 0x96, 0x4C } };
extern const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM_1 = { 0x893DEE8E, 0x2BEF, 0x41E0, { 0x89, 0xC6, 0xB5, 0x5D, 0x09, 0x29, 0x96, 0x4D } };
extern const GUID  GUID_PROCESSOR_FREQUENCY_LIMIT = { 0x75b0ae3f, 0xbce0, 0x45a7, { 0x8c, 0x89, 0xc9, 0x61, 0x1c, 0x25, 0xe1, 0x00 } };
extern const GUID  GUID_PROCESSOR_FREQUENCY_LIMIT_1 = { 0x75b0ae3f, 0xbce0, 0x45a7, { 0x8c, 0x89, 0xc9, 0x61, 0x1c, 0x25, 0xe1, 0x01 } };
extern const GUID  GUID_PROCESSOR_ALLOW_THROTTLING = { 0x3b04d4fd, 0x1cc7, 0x4f23, { 0xab, 0x1c, 0xd1, 0x33, 0x78, 0x19, 0xc4, 0xbb } };
extern const GUID  GUID_PROCESSOR_IDLESTATE_POLICY = { 0x68f262a7, 0xf621, 0x4069, { 0xb9, 0xa5, 0x48, 0x74, 0x16, 0x9b, 0xe2, 0x3c } };
extern const GUID  GUID_PROCESSOR_PERFSTATE_POLICY = { 0xBBDC3814, 0x18E9, 0x4463, { 0x8A, 0x55, 0xD1, 0x97, 0x32, 0x7C, 0x45, 0xC0 } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD = { 0x06cadf0e, 0x64ed, 0x448a, { 0x89, 0x27, 0xce, 0x7b, 0xf9, 0x0e, 0xb3, 0x5d } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD_1 = { 0x06cadf0e, 0x64ed, 0x448a, { 0x89, 0x27, 0xce, 0x7b, 0xf9, 0x0e, 0xb3, 0x5e } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD = { 0x12a0ab44, 0xfe28, 0x4fa9, { 0xb3, 0xbd, 0x4b, 0x64, 0xf4, 0x49, 0x60, 0xa6 } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD_1 = { 0x12a0ab44, 0xfe28, 0x4fa9, { 0xb3, 0xbd, 0x4b, 0x64, 0xf4, 0x49, 0x60, 0xa7 } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY = { 0x465e1f50, 0xb610, 0x473a, { 0xab, 0x58, 0x0, 0xd1, 0x7, 0x7d, 0xc4, 0x18 } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY_1 = { 0x465e1f50, 0xb610, 0x473a, { 0xab, 0x58, 0x0, 0xd1, 0x7, 0x7d, 0xc4, 0x19 } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY = { 0x40fbefc7, 0x2e9d, 0x4d25, { 0xa1, 0x85, 0xc, 0xfd, 0x85, 0x74, 0xba, 0xc6 } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY_1 = { 0x40fbefc7, 0x2e9d, 0x4d25, { 0xa1, 0x85, 0xc, 0xfd, 0x85, 0x74, 0xba, 0xc7 } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME = { 0x984cf492, 0x3bed, 0x4488, { 0xa8, 0xf9, 0x42, 0x86, 0xc9, 0x7b, 0xf5, 0xaa } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME_1 = { 0x984cf492, 0x3bed, 0x4488, { 0xa8, 0xf9, 0x42, 0x86, 0xc9, 0x7b, 0xf5, 0xab } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME = { 0xd8edeb9b, 0x95cf, 0x4f95, { 0xa7, 0x3c, 0xb0, 0x61, 0x97, 0x36, 0x93, 0xc8 } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME_1 = { 0xd8edeb9b, 0x95cf, 0x4f95, { 0xa7, 0x3c, 0xb0, 0x61, 0x97, 0x36, 0x93, 0xc9 } };
extern const GUID  GUID_PROCESSOR_PERF_TIME_CHECK = { 0x4d2b0152, 0x7d5c, 0x498b, { 0x88, 0xe2, 0x34, 0x34, 0x53, 0x92, 0xa2, 0xc5 } };
extern const GUID  GUID_PROCESSOR_PERF_BOOST_POLICY = { 0x45bcc044, 0xd885, 0x43e2, { 0x86, 0x5, 0xee, 0xe, 0xc6, 0xe9, 0x6b, 0x59 } };
extern const GUID  GUID_PROCESSOR_PERF_BOOST_MODE = { 0xbe337238, 0xd82, 0x4146, { 0xa9, 0x60, 0x4f, 0x37, 0x49, 0xd4, 0x70, 0xc7 } };
extern const GUID  GUID_PROCESSOR_PERF_AUTONOMOUS_MODE = { 0x8baa4a8a, 0x14c6, 0x4451, { 0x8e, 0x8b, 0x14, 0xbd, 0xbd, 0x19, 0x75, 0x37 } };
extern const GUID  GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE = { 0x36687f9e, 0xe3a5, 0x4dbf, { 0xb1, 0xdc, 0x15, 0xeb, 0x38, 0x1c, 0x68, 0x63 } };
extern const GUID  GUID_PROCESSOR_PERF_ENERGY_PERFORMANCE_PREFERENCE_1 = { 0x36687f9e, 0xe3a5, 0x4dbf, { 0xb1, 0xdc, 0x15, 0xeb, 0x38, 0x1c, 0x68, 0x64 } };
extern const GUID  GUID_PROCESSOR_PERF_AUTONOMOUS_ACTIVITY_WINDOW = { 0xcfeda3d0, 0x7697, 0x4566, { 0xa9, 0x22, 0xa9, 0x8, 0x6c, 0xd4, 0x9d, 0xfa } };
extern const GUID  GUID_PROCESSOR_DUTY_CYCLING = { 0x4e4450b3, 0x6179, 0x4e91, { 0xb8, 0xf1, 0x5b, 0xb9, 0x93, 0x8f, 0x81, 0xa1 } };
extern const GUID  GUID_PROCESSOR_IDLE_ALLOW_SCALING = { 0x6c2993b0, 0x8f48, 0x481f, { 0xbc, 0xc6, 0x0, 0xdd, 0x27, 0x42, 0xaa, 0x6 } };
extern const GUID  GUID_PROCESSOR_IDLE_DISABLE = { 0x5d76a2ca, 0xe8c0, 0x402f, { 0xa1, 0x33, 0x21, 0x58, 0x49, 0x2d, 0x58, 0xad } };
extern const GUID  GUID_PROCESSOR_IDLE_STATE_MAXIMUM = { 0x9943e905, 0x9a30, 0x4ec1, { 0x9b, 0x99, 0x44, 0xdd, 0x3b, 0x76, 0xf7, 0xa2 } };
extern const GUID  GUID_PROCESSOR_IDLE_TIME_CHECK = { 0xc4581c31, 0x89ab, 0x4597, { 0x8e, 0x2b, 0x9c, 0x9c, 0xab, 0x44, 0xe, 0x6b } };
extern const GUID  GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD = { 0x4b92d758, 0x5a24, 0x4851, { 0xa4, 0x70, 0x81, 0x5d, 0x78, 0xae, 0xe1, 0x19 } };
extern const GUID  GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD = { 0x7b224883, 0xb3cc, 0x4d79, { 0x81, 0x9f, 0x83, 0x74, 0x15, 0x2c, 0xbe, 0x7c } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD = { 0xdf142941, 0x20f3, 0x4edf, { 0x9a, 0x4a, 0x9c, 0x83, 0xd3, 0xd7, 0x17, 0xd1 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD = { 0x68dd2f27, 0xa4ce, 0x4e11, { 0x84, 0x87, 0x37, 0x94, 0xe4, 0x13, 0x5d, 0xfa } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY = { 0xc7be0679, 0x2817, 0x4d69, { 0x9d, 0x02, 0x51, 0x9a, 0x53, 0x7e, 0xd0, 0xc6 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY = { 0x71021b41, 0xc749, 0x4d21, { 0xbe, 0x74, 0xa0, 0x0f, 0x33, 0x5d, 0x58, 0x2b } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES = { 0xea062031, 0x0e34, 0x4ff1, { 0x9b, 0x6d, 0xeb, 0x10, 0x59, 0x33, 0x40, 0x28 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES_1 = { 0xea062031, 0x0e34, 0x4ff1, { 0x9b, 0x6d, 0xeb, 0x10, 0x59, 0x33, 0x40, 0x29 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES = { 0x0cc5b647, 0xc1df, 0x4637, { 0x89, 0x1a, 0xde, 0xc3, 0x5c, 0x31, 0x85, 0x83 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES_1 = { 0x0cc5b647, 0xc1df, 0x4637, { 0x89, 0x1a, 0xde, 0xc3, 0x5c, 0x31, 0x85, 0x84 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME = { 0x2ddd5a84, 0x5a71, 0x437e, { 0x91, 0x2a, 0xdb, 0x0b, 0x8c, 0x78, 0x87, 0x32 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME = { 0xdfd10d17, 0xd5eb, 0x45dd, { 0x87, 0x7a, 0x9a, 0x34, 0xdd, 0xd1, 0x5c, 0x82 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR = { 0x8f7b45e3, 0xc393, 0x480a, { 0x87, 0x8c, 0xf6, 0x7a, 0xc3, 0xd0, 0x70, 0x82 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD = { 0x5b33697b, 0xe89d, 0x4d38, { 0xaa, 0x46, 0x9e, 0x7d, 0xfb, 0x7c, 0xd2, 0xf9 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING = { 0xe70867f1, 0xfa2f, 0x4f4e, { 0xae, 0xa1, 0x4d, 0x8a, 0x0b, 0xa2, 0x3b, 0x20 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR = { 0x1299023c, 0xbc28, 0x4f0a, { 0x81, 0xec, 0xd3, 0x29, 0x5a, 0x8d, 0x81, 0x5d } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD = { 0x9ac18e92, 0xaa3c, 0x4e27, { 0xb3, 0x07, 0x01, 0xae, 0x37, 0x30, 0x71, 0x29 } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING = { 0x8809c2d8, 0xb155, 0x42d4, { 0xbc, 0xda, 0x0d, 0x34, 0x56, 0x51, 0xb1, 0xdb } };
extern const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD = { 0x943c8cb6, 0x6f93, 0x4227, { 0xad, 0x87, 0xe9, 0xa3, 0xfe, 0xec, 0x08, 0xd1 } };
extern const GUID  GUID_PROCESSOR_PARKING_CORE_OVERRIDE = { 0xa55612aa, 0xf624, 0x42c6, { 0xa4, 0x43, 0x73, 0x97, 0xd0, 0x64, 0xc0, 0x4f } };
extern const GUID  GUID_PROCESSOR_PARKING_PERF_STATE = { 0x447235c7, 0x6a8d, 0x4cc0, { 0x8e, 0x24, 0x9e, 0xaf, 0x70, 0xb9, 0x6e, 0x2b } };
extern const GUID  GUID_PROCESSOR_PARKING_PERF_STATE_1 = { 0x447235c7, 0x6a8d, 0x4cc0, { 0x8e, 0x24, 0x9e, 0xaf, 0x70, 0xb9, 0x6e, 0x2c } };
extern const GUID  GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD = { 0x2430ab6f, 0xa520, 0x44a2, { 0x96, 0x01, 0xf7, 0xf2, 0x3b, 0x51, 0x34, 0xb1 } };
extern const GUID  GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD = { 0xf735a673, 0x2066, 0x4f80, { 0xa0, 0xc5, 0xdd, 0xee, 0x0c, 0xf1, 0xbf, 0x5d } };
extern const GUID  GUID_PROCESSOR_PARKING_DISTRIBUTION_THRESHOLD = { 0x4bdaf4e9, 0xd103, 0x46d7, { 0xa5, 0xf0, 0x62, 0x80, 0x12, 0x16, 0x16, 0xef } };
extern const GUID  GUID_PROCESSOR_SOFT_PARKING_LATENCY = { 0x97cfac41, 0x2217, 0x47eb, { 0x99, 0x2d, 0x61, 0x8b, 0x19, 0x77, 0xc9, 0x7 } };
extern const GUID  GUID_PROCESSOR_PERF_HISTORY = { 0x7d24baa7, 0x0b84, 0x480f, { 0x84, 0x0c, 0x1b, 0x07, 0x43, 0xc0, 0x0f, 0x5f } };
extern const GUID  GUID_PROCESSOR_PERF_HISTORY_1 = { 0x7d24baa7, 0x0b84, 0x480f, { 0x84, 0x0c, 0x1b, 0x07, 0x43, 0xc0, 0x0f, 0x60 } };
extern const GUID  GUID_PROCESSOR_PERF_INCREASE_HISTORY = { 0x99b3ef01, 0x752f, 0x46a1, { 0x80, 0xfb, 0x77, 0x30, 0x1, 0x1f, 0x23, 0x54 } };
extern const GUID  GUID_PROCESSOR_PERF_DECREASE_HISTORY = { 0x300f6f8, 0xabd6, 0x45a9, { 0xb7, 0x4f, 0x49, 0x8, 0x69, 0x1a, 0x40, 0xb5 } };
extern const GUID  GUID_PROCESSOR_PERF_CORE_PARKING_HISTORY = { 0x77d7f282, 0x8f1a, 0x42cd, { 0x85, 0x37, 0x45, 0x45, 0xa, 0x83, 0x9b, 0xe8 } };
extern const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT = { 0x0822df31, 0x9c83, 0x441c, { 0xa0, 0x79, 0x0d, 0xe4, 0xcf, 0x00, 0x9c, 0x7b } };
extern const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF = { 0x619b7505, 0x3b, 0x4e82, { 0xb7, 0xa6, 0x4d, 0xd2, 0x9c, 0x30, 0x9, 0x71 } };
extern const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT_PERF_1 = { 0x619b7505, 0x3b, 0x4e82, { 0xb7, 0xa6, 0x4d, 0xd2, 0x9c, 0x30, 0x9, 0x72 } };
extern const GUID  GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK = { 0x616cdaa5, 0x695e, 0x4545, { 0x97, 0xad, 0x97, 0xdc, 0x2d, 0x1b, 0xdd, 0x88 } };
extern const GUID  GUID_PROCESSOR_LATENCY_HINT_MIN_UNPARK_1 = { 0x616cdaa5, 0x695e, 0x4545, { 0x97, 0xad, 0x97, 0xdc, 0x2d, 0x1b, 0xdd, 0x89 } };
extern const GUID  GUID_PROCESSOR_DISTRIBUTE_UTILITY = { 0xe0007330, 0xf589, 0x42ed, { 0xa4, 0x01, 0x5d, 0xdb, 0x10, 0xe7, 0x85, 0xd3 } };
extern const GUID  GUID_PROCESSOR_HETEROGENEOUS_POLICY = { 0x7f2f5cfa, 0xf10c, 0x4823, { 0xb5, 0xe1, 0xe9, 0x3a, 0xe8, 0x5f, 0x46, 0xb5 } };
extern const GUID  GUID_PROCESSOR_HETERO_DECREASE_TIME = { 0x7f2492b6, 0x60b1, 0x45e5, { 0xae, 0x55, 0x77, 0x3f, 0x8c, 0xd5, 0xca, 0xec } };
extern const GUID  GUID_PROCESSOR_HETERO_INCREASE_TIME = { 0x4009efa7, 0xe72d, 0x4cba, { 0x9e, 0xdf, 0x91, 0x08, 0x4e, 0xa8, 0xcb, 0xc3 } };
extern const GUID  GUID_PROCESSOR_HETERO_DECREASE_THRESHOLD = { 0xf8861c27, 0x95e7, 0x475c, { 0x86, 0x5b, 0x13, 0xc0, 0xcb, 0x3f, 0x9d, 0x6b } };
extern const GUID  GUID_PROCESSOR_HETERO_INCREASE_THRESHOLD = { 0xb000397d, 0x9b0b, 0x483d, { 0x98, 0xc9, 0x69, 0x2a, 0x60, 0x60, 0xcf, 0xbf } };
extern const GUID  GUID_PROCESSOR_CLASS0_FLOOR_PERF = { 0xfddc842b, 0x8364, 0x4edc, { 0x94, 0xcf, 0xc1, 0x7f, 0x60, 0xde, 0x1c, 0x80 } };
extern const GUID  GUID_PROCESSOR_CLASS1_INITIAL_PERF = { 0x1facfc65, 0xa930, 0x4bc5, { 0x9f, 0x38, 0x50, 0x4e, 0xc0, 0x97, 0xbb, 0xc0 } };
extern const GUID  GUID_PROCESSOR_THREAD_SCHEDULING_POLICY = { 0x93b8b6dc, 0x698, 0x4d1c, { 0x9e, 0xe4, 0x6, 0x44, 0xe9, 0x0, 0xc8, 0x5d } };
extern const GUID  GUID_PROCESSOR_SHORT_THREAD_SCHEDULING_POLICY = { 0xbae08b81, 0x2d5e, 0x4688, { 0xad, 0x6a, 0x13, 0x24, 0x33, 0x56, 0x65, 0x4b } };
extern const GUID  GUID_SYSTEM_COOLING_POLICY = { 0x94D3A615, 0xA899, 0x4AC5, { 0xAE, 0x2B, 0xE4, 0xD8, 0xF6, 0x34, 0x36, 0x7F } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD = { 0x38b8383d, 0xcce0, 0x4c79, { 0x9e, 0x3e, 0x56, 0xa4, 0xf1, 0x7c, 0xc4, 0x80 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_DISABLE_THRESHOLD_1 = { 0x38b8383d, 0xcce0, 0x4c79, { 0x9e, 0x3e, 0x56, 0xa4, 0xf1, 0x7c, 0xc4, 0x81 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD = { 0x3d44e256, 0x7222, 0x4415, { 0xa9, 0xed, 0x9c, 0x45, 0xfa, 0x3d, 0xd8, 0x30 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_ENABLE_THRESHOLD_1 = { 0x3d44e256, 0x7222, 0x4415, { 0xa9, 0xed, 0x9c, 0x45, 0xfa, 0x3d, 0xd8, 0x31 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME = { 0xf565999f, 0x3fb0, 0x411a, { 0xa2, 0x26, 0x3f, 0x1, 0x98, 0xde, 0xc1, 0x30 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_DISABLE_TIME_1 = { 0xf565999f, 0x3fb0, 0x411a, { 0xa2, 0x26, 0x3f, 0x1, 0x98, 0xde, 0xc1, 0x31 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME = { 0x3d915188, 0x7830, 0x49ae, { 0xa7, 0x9a, 0xf, 0xb0, 0xa1, 0xe5, 0xa2, 0x0 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_ENABLE_TIME_1 = { 0x3d915188, 0x7830, 0x49ae, { 0xa7, 0x9a, 0xf, 0xb0, 0xa1, 0xe5, 0xa2, 0x1 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING = { 0x4427c73b, 0x9756, 0x4a5c, { 0xb8, 0x4b, 0xc7, 0xbd, 0xa7, 0x9c, 0x73, 0x20 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_EPP_CEILING_1 = { 0x4427c73b, 0x9756, 0x4a5c, { 0xb8, 0x4b, 0xc7, 0xbd, 0xa7, 0x9c, 0x73, 0x21 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR = { 0xce8e92ee, 0x6a86, 0x4572, { 0xbf, 0xe0, 0x20, 0xc2, 0x1d, 0x3, 0xcd, 0x40 } };
extern const GUID  GUID_PROCESSOR_RESPONSIVENESS_PERF_FLOOR_1 = { 0xce8e92ee, 0x6a86, 0x4572, { 0xbf, 0xe0, 0x20, 0xc2, 0x1d, 0x3, 0xcd, 0x41 } };
extern const GUID  GUID_LOCK_CONSOLE_ON_WAKE = { 0x0E796BDB, 0x100D, 0x47D6, { 0xA2, 0xD5, 0xF7, 0xD2, 0xDA, 0xA5, 0x1F, 0x51 } };
extern const GUID  GUID_DEVICE_IDLE_POLICY = { 0x4faab71a, 0x92e5, 0x4726, { 0xb5, 0x31, 0x22, 0x45, 0x59, 0x67, 0x2d, 0x19 } };
extern const GUID  GUID_CONNECTIVITY_IN_STANDBY = { 0xF15576E8, 0x98B7, 0x4186, { 0xB9, 0x44, 0xEA, 0xFA, 0x66, 0x44, 0x02, 0xD9 } };
extern const GUID  GUID_DISCONNECTED_STANDBY_MODE = { 0x68AFB2D9, 0xEE95, 0x47A8, { 0x8F, 0x50, 0x41, 0x15, 0x08, 0x80, 0x73, 0xB1 } };
extern const GUID  GUID_ACDC_POWER_SOURCE = { 0x5D3E9A59, 0xE9D5, 0x4B00, { 0xA6, 0xBD, 0xFF, 0x34, 0xFF, 0x51, 0x65, 0x48 } };
extern const GUID  GUID_LIDSWITCH_STATE_CHANGE = { 0xBA3E0F4D, 0xB817, 0x4094, { 0xA2, 0xD1, 0xD5, 0x63, 0x79, 0xE6, 0xA0, 0xF3 } };
extern const GUID  GUID_BATTERY_PERCENTAGE_REMAINING = { 0xA7AD8041, 0xB45A, 0x4CAE, { 0x87, 0xA3, 0xEE, 0xCB, 0xB4, 0x68, 0xA9, 0xE1 } };
extern const GUID  GUID_BATTERY_COUNT = { 0x7d263f15, 0xfca4, 0x49e5, { 0x85, 0x4b, 0xa9, 0xf2, 0xbf, 0xbd, 0x5c, 0x24 } };
extern const GUID  GUID_GLOBAL_USER_PRESENCE = { 0x786e8a1d, 0xb427, 0x4344, { 0x92, 0x7, 0x9, 0xe7, 0xb, 0xdc, 0xbe, 0xa9 } };
extern const GUID  GUID_SESSION_DISPLAY_STATUS = { 0x2b84c20e, 0xad23, 0x4ddf, { 0x93, 0xdb, 0x5, 0xff, 0xbd, 0x7e, 0xfc, 0xa5 } };
extern const GUID  GUID_SESSION_USER_PRESENCE = { 0x3c0f4548, 0xc03f, 0x4c4d, { 0xb9, 0xf2, 0x23, 0x7e, 0xde, 0x68, 0x63, 0x76 } };
extern const GUID  GUID_IDLE_BACKGROUND_TASK = { 0x515C31D8, 0xF734, 0x163D, { 0xA0, 0xFD, 0x11, 0xA0, 0x8C, 0x91, 0xE8, 0xF1 } };
extern const GUID  GUID_BACKGROUND_TASK_NOTIFICATION = { 0xCF23F240, 0x2A54, 0x48D8, { 0xB1, 0x14, 0xDE, 0x15, 0x18, 0xFF, 0x05, 0x2E } };
extern const GUID  GUID_APPLAUNCH_BUTTON = { 0x1A689231, 0x7399, 0x4E9A, { 0x8F, 0x99, 0xB7, 0x1F, 0x99, 0x9D, 0xB3, 0xFA } };
extern const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP = { 0x501a4d13, 0x42af, 0x4429, { 0x9f, 0xd1, 0xa8, 0x21, 0x8c, 0x26, 0x8e, 0x20 } };
extern const GUID  GUID_PCIEXPRESS_ASPM_POLICY = { 0xee12f906, 0xd277, 0x404b, { 0xb6, 0xda, 0xe5, 0xfa, 0x1a, 0x57, 0x6d, 0xf5 } };
extern const GUID  GUID_ENABLE_SWITCH_FORCED_SHUTDOWN = { 0x833a6b62, 0xdfa4, 0x46d1, { 0x82, 0xf8, 0xe0, 0x9e, 0x34, 0xd0, 0x29, 0xd6 } };
extern const GUID  GUID_INTSTEER_SUBGROUP = { 0x48672f38, 0x7a9a, 0x4bb2, { 0x8b, 0xf8, 0x3d, 0x85, 0xbe, 0x19, 0xde, 0x4e } };
extern const GUID  GUID_INTSTEER_MODE = { 0x2bfc24f9, 0x5ea2, 0x4801, { 0x82, 0x13, 0x3d, 0xba, 0xe0, 0x1a, 0xa3, 0x9d } };
extern const GUID  GUID_INTSTEER_LOAD_PER_PROC_TRIGGER = { 0x73cde64d, 0xd720, 0x4bb2, { 0xa8, 0x60, 0xc7, 0x55, 0xaf, 0xe7, 0x7e, 0xf2 } };
extern const GUID  GUID_INTSTEER_TIME_UNPARK_TRIGGER = { 0xd6ba4903, 0x386f, 0x4c2c, { 0x8a, 0xdb, 0x5c, 0x21, 0xb3, 0x32, 0x8d, 0x25 } };
extern const GUID  GUID_GRAPHICS_SUBGROUP = { 0x5fb4938d, 0x1ee8, 0x4b0f, { 0x9a, 0x3c, 0x50, 0x36, 0xb0, 0xab, 0x99, 0x5c } };
extern const GUID  GUID_GPU_PREFERENCE_POLICY = { 0xdd848b2a, 0x8a5d, 0x4451, { 0x9a, 0xe2, 0x39, 0xcd, 0x41, 0x65, 0x8f, 0x6c } };
extern const GUID  GUID_MIXED_REALITY_MODE = { 0x1e626b4e, 0xcf04, 0x4f8d, { 0x9c, 0xc7, 0xc9, 0x7c, 0x5b, 0xf, 0x23, 0x91 } };
extern const GUID  GUID_SPR_ACTIVE_SESSION_CHANGE = { 0xe24ce38, 0xc393, 0x4742, { 0xbd, 0xb1, 0x74, 0x4f, 0x4b, 0x9e, 0xe0, 0x8e } };
typedef enum _SYSTEM_POWER_STATE {
	PowerSystemUnspecified = 0,
	PowerSystemWorking = 1,
	PowerSystemSleeping1 = 2,
	PowerSystemSleeping2 = 3,
	PowerSystemSleeping3 = 4,
	PowerSystemHibernate = 5,
	PowerSystemShutdown = 6,
	PowerSystemMaximum = 7
} SYSTEM_POWER_STATE, * PSYSTEM_POWER_STATE;
typedef enum {
	PowerActionNone = 0,
	PowerActionReserved,
	PowerActionSleep,
	PowerActionHibernate,
	PowerActionShutdown,
	PowerActionShutdownReset,
	PowerActionShutdownOff,
	PowerActionWarmEject,
	PowerActionDisplayOff
} POWER_ACTION, * PPOWER_ACTION;
typedef enum _DEVICE_POWER_STATE {
	PowerDeviceUnspecified = 0,
	PowerDeviceD0,
	PowerDeviceD1,
	PowerDeviceD2,
	PowerDeviceD3,
	PowerDeviceMaximum
} DEVICE_POWER_STATE, * PDEVICE_POWER_STATE;
typedef enum _MONITOR_DISPLAY_STATE {
	PowerMonitorOff = 0,
	PowerMonitorOn,
	PowerMonitorDim
} MONITOR_DISPLAY_STATE, * PMONITOR_DISPLAY_STATE;
typedef enum _USER_ACTIVITY_PRESENCE {
	PowerUserPresent = 0,
	PowerUserNotPresent,
	PowerUserInactive,
	PowerUserMaximum,
	PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, * PUSER_ACTIVITY_PRESENCE;
typedef DWORD EXECUTION_STATE, * PEXECUTION_STATE;
typedef enum {
	LT_DONT_CARE,
	LT_LOWEST_LATENCY
} LATENCY_TIME;
typedef enum _POWER_REQUEST_TYPE {
	PowerRequestDisplayRequired,
	PowerRequestSystemRequired,
	PowerRequestAwayModeRequired,
	PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, * PPOWER_REQUEST_TYPE;
typedef struct CM_Power_Data_s {
	DWORD               PD_Size;
	DEVICE_POWER_STATE  PD_MostRecentPowerState;
	DWORD               PD_Capabilities;
	DWORD               PD_D1Latency;
	DWORD               PD_D2Latency;
	DWORD               PD_D3Latency;
	DEVICE_POWER_STATE  PD_PowerStateMapping[7];
	SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, * PCM_POWER_DATA;
typedef enum {
	SystemPowerPolicyAc,
	SystemPowerPolicyDc,
	VerifySystemPolicyAc,
	VerifySystemPolicyDc,
	SystemPowerCapabilities,
	SystemBatteryState,
	SystemPowerStateHandler,
	ProcessorStateHandler,
	SystemPowerPolicyCurrent,
	AdministratorPowerPolicy,
	SystemReserveHiberFile,
	ProcessorInformation,
	SystemPowerInformation,
	ProcessorStateHandler2,
	LastWakeTime,
	LastSleepTime,
	SystemExecutionState,
	SystemPowerStateNotifyHandler,
	ProcessorPowerPolicyAc,
	ProcessorPowerPolicyDc,
	VerifyProcessorPowerPolicyAc,
	VerifyProcessorPowerPolicyDc,
	ProcessorPowerPolicyCurrent,
	SystemPowerStateLogging,
	SystemPowerLoggingEntry,
	SetPowerSettingValue,
	NotifyUserPowerSetting,
	PowerInformationLevelUnused0,
	SystemMonitorHiberBootPowerOff,
	SystemVideoState,
	TraceApplicationPowerMessage,
	TraceApplicationPowerMessageEnd,
	ProcessorPerfStates,
	ProcessorIdleStates,
	ProcessorCap,
	SystemWakeSource,
	SystemHiberFileInformation,
	TraceServicePowerMessage,
	ProcessorLoad,
	PowerShutdownNotification,
	MonitorCapabilities,
	SessionPowerInit,
	SessionDisplayState,
	PowerRequestCreate,
	PowerRequestAction,
	GetPowerRequestList,
	ProcessorInformationEx,
	NotifyUserModeLegacyPowerEvent,
	GroupPark,
	ProcessorIdleDomains,
	WakeTimerList,
	SystemHiberFileSize,
	ProcessorIdleStatesHv,
	ProcessorPerfStatesHv,
	ProcessorPerfCapHv,
	ProcessorSetIdle,
	LogicalProcessorIdling,
	UserPresence,
	PowerSettingNotificationName,
	GetPowerSettingValue,
	IdleResiliency,
	SessionRITState,
	SessionConnectNotification,
	SessionPowerCleanup,
	SessionLockState,
	SystemHiberbootState,
	PlatformInformation,
	PdcInvocation,
	MonitorInvocation,
	FirmwareTableInformationRegistered,
	SetShutdownSelectedTime,
	SuspendResumeInvocation,
	PlmPowerRequestCreate,
	ScreenOff,
	CsDeviceNotification,
	PlatformRole,
	LastResumePerformance,
	DisplayBurst,
	ExitLatencySamplingPercentage,
	RegisterSpmPowerSettings,
	PlatformIdleStates,
	ProcessorIdleVeto,
	PlatformIdleVeto,
	SystemBatteryStatePrecise,
	ThermalEvent,
	PowerRequestActionInternal,
	BatteryDeviceState,
	PowerInformationInternal,
	ThermalStandby,
	SystemHiberFileType,
	PhysicalPowerButtonPress,
	QueryPotentialDripsConstraint,
	EnergyTrackerCreate,
	EnergyTrackerQuery,
	UpdateBlackBoxRecorder,
	SessionAllowExternalDmaDevices,
	PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;
typedef enum {
	UserNotPresent = 0,
	UserPresent = 1,
	UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, * PPOWER_USER_PRESENCE_TYPE;
typedef struct _POWER_USER_PRESENCE {
	POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, * PPOWER_USER_PRESENCE;
typedef struct _POWER_SESSION_CONNECT {
	BOOLEAN Connected;
	BOOLEAN Console;
} POWER_SESSION_CONNECT, * PPOWER_SESSION_CONNECT;
typedef struct _POWER_SESSION_TIMEOUTS {
	DWORD InputTimeout;
	DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, * PPOWER_SESSION_TIMEOUTS;
typedef struct _POWER_SESSION_RIT_STATE {
	BOOLEAN Active;
	DWORD LastInputTime;
} POWER_SESSION_RIT_STATE, * PPOWER_SESSION_RIT_STATE;
typedef struct _POWER_SESSION_WINLOGON {
	DWORD SessionId;
	BOOLEAN Console;
	BOOLEAN Locked;
} POWER_SESSION_WINLOGON, * PPOWER_SESSION_WINLOGON;
typedef struct _POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES {
	BOOLEAN IsAllowed;
} POWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES, * PPOWER_SESSION_ALLOW_EXTERNAL_DMA_DEVICES;
typedef struct _POWER_IDLE_RESILIENCY {
	DWORD CoalescingTimeout;
	DWORD IdleResiliencyPeriod;
} POWER_IDLE_RESILIENCY, * PPOWER_IDLE_RESILIENCY;
typedef enum {
	MonitorRequestReasonUnknown,
	MonitorRequestReasonPowerButton,
	MonitorRequestReasonRemoteConnection,
	MonitorRequestReasonScMonitorpower,
	MonitorRequestReasonUserInput,
	MonitorRequestReasonAcDcDisplayBurst,
	MonitorRequestReasonUserDisplayBurst,
	MonitorRequestReasonPoSetSystemState,
	MonitorRequestReasonSetThreadExecutionState,
	MonitorRequestReasonFullWake,
	MonitorRequestReasonSessionUnlock,
	MonitorRequestReasonScreenOffRequest,
	MonitorRequestReasonIdleTimeout,
	MonitorRequestReasonPolicyChange,
	MonitorRequestReasonSleepButton,
	MonitorRequestReasonLid,
	MonitorRequestReasonBatteryCountChange,
	MonitorRequestReasonGracePeriod,
	MonitorRequestReasonPnP,
	MonitorRequestReasonDP,
	MonitorRequestReasonSxTransition,
	MonitorRequestReasonSystemIdle,
	MonitorRequestReasonNearProximity,
	MonitorRequestReasonThermalStandby,
	MonitorRequestReasonResumePdc,
	MonitorRequestReasonResumeS4,
	MonitorRequestReasonTerminal,
	MonitorRequestReasonPdcSignal,
	MonitorRequestReasonAcDcDisplayBurstSuppressed,
	MonitorRequestReasonSystemStateEntered,
	MonitorRequestReasonWinrt,
	MonitorRequestReasonUserInputKeyboard,
	MonitorRequestReasonUserInputMouse,
	MonitorRequestReasonUserInputTouch,
	MonitorRequestReasonUserInputPen,
	MonitorRequestReasonUserInputAccelerometer,
	MonitorRequestReasonUserInputHid,
	MonitorRequestReasonUserInputPoUserPresent,
	MonitorRequestReasonUserInputSessionSwitch,
	MonitorRequestReasonUserInputInitialization,
	MonitorRequestReasonPdcSignalWindowsMobilePwrNotif,
	MonitorRequestReasonPdcSignalWindowsMobileShell,
	MonitorRequestReasonPdcSignalHeyCortana,
	MonitorRequestReasonPdcSignalHolographicShell,
	MonitorRequestReasonPdcSignalFingerprint,
	MonitorRequestReasonDirectedDrips,
	MonitorRequestReasonDim,
	MonitorRequestReasonBuiltinPanel,
	MonitorRequestReasonDisplayRequiredUnDim,
	MonitorRequestReasonBatteryCountChangeSuppressed,
	MonitorRequestReasonResumeModernStandby,
	MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;
typedef enum _POWER_MONITOR_REQUEST_TYPE {
	MonitorRequestTypeOff,
	MonitorRequestTypeOnAndPresent,
	MonitorRequestTypeToggleOn
} POWER_MONITOR_REQUEST_TYPE;
typedef struct _POWER_MONITOR_INVOCATION {
	BOOLEAN Console;
	POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, * PPOWER_MONITOR_INVOCATION;
typedef struct _RESUME_PERFORMANCE {
	DWORD PostTimeMs;
	ULONGLONG TotalResumeTimeMs;
	ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, * PRESUME_PERFORMANCE;
typedef enum {
	PoAc,
	PoDc,
	PoHot,
	PoConditionMaximum
} SYSTEM_POWER_CONDITION;
typedef struct {
	DWORD       Version;
	GUID        Guid;
	SYSTEM_POWER_CONDITION PowerCondition;
	DWORD       DataLength;
	BYTE    Data[1];
} SET_POWER_SETTING_VALUE, * PSET_POWER_SETTING_VALUE;
typedef struct {
	GUID Guid;
} NOTIFY_USER_POWER_SETTING, * PNOTIFY_USER_POWER_SETTING;
typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {
	LARGE_INTEGER       ActivationTime;
	DWORD               Flags;
	DWORD               ButtonInstanceID;
} APPLICATIONLAUNCH_SETTING_VALUE, * PAPPLICATIONLAUNCH_SETTING_VALUE;
typedef enum _POWER_PLATFORM_ROLE {
	PlatformRoleUnspecified = 0,
	PlatformRoleDesktop,
	PlatformRoleMobile,
	PlatformRoleWorkstation,
	PlatformRoleEnterpriseServer,
	PlatformRoleSOHOServer,
	PlatformRoleAppliancePC,
	PlatformRolePerformanceServer,
	PlatformRoleSlate,
	PlatformRoleMaximum
} POWER_PLATFORM_ROLE, * PPOWER_PLATFORM_ROLE;
typedef struct _POWER_PLATFORM_INFORMATION {
	BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, * PPOWER_PLATFORM_INFORMATION;
typedef struct {
	DWORD       Granularity;
	DWORD       Capacity;
} BATTERY_REPORTING_SCALE, * PBATTERY_REPORTING_SCALE;
typedef struct {
	DWORD   Frequency;
	DWORD   Flags;
	DWORD   PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, * PPPM_WMI_LEGACY_PERFSTATE;
typedef struct {
	DWORD Latency;
	DWORD Power;
	DWORD TimeCheck;
	BYTE  PromotePercent;
	BYTE  DemotePercent;
	BYTE  StateType;
	BYTE  Reserved;
	DWORD StateFlags;
	DWORD Context;
	DWORD IdleHandler;
	DWORD Reserved1;
} PPM_WMI_IDLE_STATE, * PPPM_WMI_IDLE_STATE;
typedef struct {
	DWORD Type;
	DWORD Count;
	DWORD TargetState;
	DWORD OldState;
	DWORD64 TargetProcessors;
	PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, * PPPM_WMI_IDLE_STATES;
typedef struct {
	DWORD Type;
	DWORD Count;
	DWORD TargetState;
	DWORD OldState;
	PVOID TargetProcessors;
	PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, * PPPM_WMI_IDLE_STATES_EX;
typedef struct {
	DWORD Frequency;
	DWORD Power;
	BYTE  PercentFrequency;
	BYTE  IncreaseLevel;
	BYTE  DecreaseLevel;
	BYTE  Type;
	DWORD IncreaseTime;
	DWORD DecreaseTime;
	DWORD64 Control;
	DWORD64 Status;
	DWORD HitCount;
	DWORD Reserved1;
	DWORD64 Reserved2;
	DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, * PPPM_WMI_PERF_STATE;
typedef struct {
	DWORD Count;
	DWORD MaxFrequency;
	DWORD CurrentState;
	DWORD MaxPerfState;
	DWORD MinPerfState;
	DWORD LowestPerfState;
	DWORD ThermalConstraint;
	BYTE  BusyAdjThreshold;
	BYTE  PolicyType;
	BYTE  Type;
	BYTE  Reserved;
	DWORD TimerInterval;
	DWORD64 TargetProcessors;
	DWORD PStateHandler;
	DWORD PStateContext;
	DWORD TStateHandler;
	DWORD TStateContext;
	DWORD FeedbackHandler;
	DWORD Reserved1;
	DWORD64 Reserved2;
	PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, * PPPM_WMI_PERF_STATES;
typedef struct {
	DWORD Count;
	DWORD MaxFrequency;
	DWORD CurrentState;
	DWORD MaxPerfState;
	DWORD MinPerfState;
	DWORD LowestPerfState;
	DWORD ThermalConstraint;
	BYTE  BusyAdjThreshold;
	BYTE  PolicyType;
	BYTE  Type;
	BYTE  Reserved;
	DWORD TimerInterval;
	PVOID TargetProcessors;
	DWORD PStateHandler;
	DWORD PStateContext;
	DWORD TStateHandler;
	DWORD TStateContext;
	DWORD FeedbackHandler;
	DWORD Reserved1;
	DWORD64 Reserved2;
	PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, * PPPM_WMI_PERF_STATES_EX;
typedef struct {
	DWORD IdleTransitions;
	DWORD FailedTransitions;
	DWORD InvalidBucketIndex;
	DWORD64 TotalTime;
	DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, * PPPM_IDLE_STATE_ACCOUNTING;
typedef struct {
	DWORD StateCount;
	DWORD TotalTransitions;
	DWORD ResetCount;
	DWORD64 StartTime;
	PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, * PPPM_IDLE_ACCOUNTING;
typedef struct {
	DWORD64 TotalTimeUs;
	DWORD MinTimeUs;
	DWORD MaxTimeUs;
	DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, * PPPM_IDLE_STATE_BUCKET_EX;
typedef struct {
	DWORD64 TotalTime;
	DWORD IdleTransitions;
	DWORD FailedTransitions;
	DWORD InvalidBucketIndex;
	DWORD MinTimeUs;
	DWORD MaxTimeUs;
	DWORD CancelledTransitions;
	PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, * PPPM_IDLE_STATE_ACCOUNTING_EX;
typedef struct {
	DWORD StateCount;
	DWORD TotalTransitions;
	DWORD ResetCount;
	DWORD AbortCount;
	DWORD64 StartTime;
	PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, * PPPM_IDLE_ACCOUNTING_EX;
extern const GUID  PPM_PERFSTATE_CHANGE_GUID = { 0xa5b32ddd, 0x7f39, 0x4abc, { 0xb8, 0x92, 0x90, 0xe, 0x43, 0xb5, 0x9e, 0xbb } };
extern const GUID  PPM_PERFSTATE_DOMAIN_CHANGE_GUID = { 0x995e6b7f, 0xd653, 0x497a, { 0xb9, 0x78, 0x36, 0xa3, 0xc, 0x29, 0xbf, 0x1 } };
extern const GUID  PPM_IDLESTATE_CHANGE_GUID = { 0x4838fe4f, 0xf71c, 0x4e51, { 0x9e, 0xcc, 0x84, 0x30, 0xa7, 0xac, 0x4c, 0x6c } };
extern const GUID  PPM_PERFSTATES_DATA_GUID = { 0x5708cc20, 0x7d40, 0x4bf4, { 0xb4, 0xaa, 0x2b, 0x01, 0x33, 0x8d, 0x01, 0x26 } };
extern const GUID  PPM_IDLESTATES_DATA_GUID = { 0xba138e10, 0xe250, 0x4ad7, { 0x86, 0x16, 0xcf, 0x1a, 0x7a, 0xd4, 0x10, 0xe7 } };
extern const GUID  PPM_IDLE_ACCOUNTING_GUID = { 0xe2a26f78, 0xae07, 0x4ee0, { 0xa3, 0x0f, 0xce, 0x54, 0xf5, 0x5a, 0x94, 0xcd } };
extern const GUID  PPM_IDLE_ACCOUNTING_EX_GUID = { 0xd67abd39, 0x81f8, 0x4a5e, { 0x81, 0x52, 0x72, 0xe3, 0x1e, 0xc9, 0x12, 0xee } };
extern const GUID  PPM_THERMALCONSTRAINT_GUID = { 0xa852c2c8, 0x1a4c, 0x423b, { 0x8c, 0x2c, 0xf3, 0x0d, 0x82, 0x93, 0x1a, 0x88 } };
extern const GUID  PPM_PERFMON_PERFSTATE_GUID = { 0x7fd18652, 0xcfe, 0x40d2, { 0xb0, 0xa1, 0xb, 0x6, 0x6a, 0x87, 0x75, 0x9e } };
extern const GUID  PPM_THERMAL_POLICY_CHANGE_GUID = { 0x48f377b8, 0x6880, 0x4c7b, { 0x8b, 0xdc, 0x38, 0x1, 0x76, 0xc6, 0x65, 0x4d } };
typedef struct {
	DWORD State;
	DWORD Status;
	DWORD Latency;
	DWORD Speed;
	DWORD Processor;
} PPM_PERFSTATE_EVENT, * PPPM_PERFSTATE_EVENT;
typedef struct {
	DWORD State;
	DWORD Latency;
	DWORD Speed;
	DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, * PPPM_PERFSTATE_DOMAIN_EVENT;
typedef struct {
	DWORD NewState;
	DWORD OldState;
	DWORD64 Processors;
} PPM_IDLESTATE_EVENT, * PPPM_IDLESTATE_EVENT;
typedef struct {
	DWORD ThermalConstraint;
	DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, * PPPM_THERMALCHANGE_EVENT;
typedef struct {
	BYTE  Mode;
	DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, * PPPM_THERMAL_POLICY_EVENT;
typedef struct {
	POWER_ACTION    Action;
	DWORD           Flags;
	DWORD           EventCode;
} POWER_ACTION_POLICY, * PPOWER_ACTION_POLICY;
typedef struct {
	BOOLEAN                 Enable;
	BYTE                    Spare[3];
	DWORD                   BatteryLevel;
	POWER_ACTION_POLICY     PowerPolicy;
	SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, * PSYSTEM_POWER_LEVEL;
typedef struct _SYSTEM_POWER_POLICY {
	DWORD                   Revision;
	POWER_ACTION_POLICY     PowerButton;
	POWER_ACTION_POLICY     SleepButton;
	POWER_ACTION_POLICY     LidClose;
	SYSTEM_POWER_STATE      LidOpenWake;
	DWORD                   Reserved;
	POWER_ACTION_POLICY     Idle;
	DWORD                   IdleTimeout;
	BYTE                    IdleSensitivity;
	BYTE                    DynamicThrottle;
	BYTE                    Spare2[2];
	SYSTEM_POWER_STATE      MinSleep;
	SYSTEM_POWER_STATE      MaxSleep;
	SYSTEM_POWER_STATE      ReducedLatencySleep;
	DWORD                   WinLogonFlags;
	DWORD                   Spare3;
	DWORD                   DozeS4Timeout;
	DWORD                   BroadcastCapacityResolution;
	SYSTEM_POWER_LEVEL      DischargePolicy[4];
	DWORD                   VideoTimeout;
	BOOLEAN                 VideoDimDisplay;
	DWORD                   VideoReserved[3];
	DWORD                   SpindownTimeout;
	BOOLEAN                 OptimizeForPower;
	BYTE                    FanThrottleTolerance;
	BYTE                    ForcedThrottle;
	BYTE                    MinThrottle;
	POWER_ACTION_POLICY     OverThrottled;
} SYSTEM_POWER_POLICY, * PSYSTEM_POWER_POLICY;
typedef struct {
	DWORD TimeCheck;
	BYTE  DemotePercent;
	BYTE  PromotePercent;
	BYTE  Spare[2];
} PROCESSOR_IDLESTATE_INFO, * PPROCESSOR_IDLESTATE_INFO;
typedef struct {
	WORD   Revision;
	union {
		WORD   AsWORD;
		struct {
			WORD   AllowScaling : 1;
			WORD   Disabled : 1;
			WORD   Reserved : 14;
		};
	} Flags;
	DWORD PolicyCount;
	PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, * PPROCESSOR_IDLESTATE_POLICY;
typedef struct _PROCESSOR_POWER_POLICY_INFO {
	DWORD                   TimeCheck;
	DWORD                   DemoteLimit;
	DWORD                   PromoteLimit;
	BYTE                    DemotePercent;
	BYTE                    PromotePercent;
	BYTE                    Spare[2];
	DWORD                   AllowDemotion : 1;
	DWORD                   AllowPromotion : 1;
	DWORD                   Reserved : 30;
} PROCESSOR_POWER_POLICY_INFO, * PPROCESSOR_POWER_POLICY_INFO;
typedef struct _PROCESSOR_POWER_POLICY {
	DWORD                       Revision;
	BYTE                        DynamicThrottle;
	BYTE                        Spare[3];
	DWORD                       DisableCStates : 1;
	DWORD                       Reserved : 31;
	DWORD                       PolicyCount;
	PROCESSOR_POWER_POLICY_INFO Policy[3];
} PROCESSOR_POWER_POLICY, * PPROCESSOR_POWER_POLICY;
typedef struct {
	DWORD Revision;
	BYTE  MaxThrottle;
	BYTE  MinThrottle;
	BYTE  BusyAdjThreshold;
	union {
		BYTE  Spare;
		union {
			BYTE  AsBYTE;
			struct {
				BYTE  NoDomainAccounting : 1;
				BYTE  IncreasePolicy : 2;
				BYTE  DecreasePolicy : 2;
				BYTE  Reserved : 3;
			};
		} Flags;
	};
	DWORD TimeCheck;
	DWORD IncreaseTime;
	DWORD DecreaseTime;
	DWORD IncreasePercent;
	DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, * PPROCESSOR_PERFSTATE_POLICY;
typedef struct _ADMINISTRATOR_POWER_POLICY {
	SYSTEM_POWER_STATE      MinSleep;
	SYSTEM_POWER_STATE      MaxSleep;
	DWORD                   MinVideoTimeout;
	DWORD                   MaxVideoTimeout;
	DWORD                   MinSpindownTimeout;
	DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, * PADMINISTRATOR_POWER_POLICY;
typedef enum _HIBERFILE_BUCKET_SIZE {
	HiberFileBucket1GB = 0,
	HiberFileBucket2GB,
	HiberFileBucket4GB,
	HiberFileBucket8GB,
	HiberFileBucket16GB,
	HiberFileBucket32GB,
	HiberFileBucketUnlimited,
	HiberFileBucketMax
} HIBERFILE_BUCKET_SIZE, * PHIBERFILE_BUCKET_SIZE;
typedef struct _HIBERFILE_BUCKET {
	DWORD64 MaxPhysicalMemory;
	DWORD PhysicalMemoryPercent[0x03];
} HIBERFILE_BUCKET, * PHIBERFILE_BUCKET;
typedef struct {
	BOOLEAN             PowerButtonPresent;
	BOOLEAN             SleepButtonPresent;
	BOOLEAN             LidPresent;
	BOOLEAN             SystemS1;
	BOOLEAN             SystemS2;
	BOOLEAN             SystemS3;
	BOOLEAN             SystemS4;
	BOOLEAN             SystemS5;
	BOOLEAN             HiberFilePresent;
	BOOLEAN             FullWake;
	BOOLEAN             VideoDimPresent;
	BOOLEAN             ApmPresent;
	BOOLEAN             UpsPresent;
	BOOLEAN             ThermalControl;
	BOOLEAN             ProcessorThrottle;
	BYTE                ProcessorMinThrottle;
	BYTE                ProcessorMaxThrottle;
	BOOLEAN             FastSystemS4;
	BOOLEAN             Hiberboot;
	BOOLEAN             WakeAlarmPresent;
	BOOLEAN             AoAc;
	BOOLEAN             DiskSpinDown;
	BYTE                HiberFileType;
	BOOLEAN             AoAcConnectivitySupported;
	BYTE                spare3[6];
	BOOLEAN             SystemBatteriesPresent;
	BOOLEAN             BatteriesAreShortTerm;
	BATTERY_REPORTING_SCALE BatteryScale[3];
	SYSTEM_POWER_STATE  AcOnLineWake;
	SYSTEM_POWER_STATE  SoftLidWake;
	SYSTEM_POWER_STATE  RtcWake;
	SYSTEM_POWER_STATE  MinDeviceWakeState;
	SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, * PSYSTEM_POWER_CAPABILITIES;
typedef struct {
	BOOLEAN             AcOnLine;
	BOOLEAN             BatteryPresent;
	BOOLEAN             Charging;
	BOOLEAN             Discharging;
	BOOLEAN             Spare1[3];
	BYTE                Tag;
	DWORD               MaxCapacity;
	DWORD               RemainingCapacity;
	DWORD               Rate;
	DWORD               EstimatedTime;
	DWORD               DefaultAlert1;
	DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, * PSYSTEM_BATTERY_STATE;
typedef struct _IMAGE_DOS_HEADER {
	WORD   e_magic;
	WORD   e_cblp;
	WORD   e_cp;
	WORD   e_crlc;
	WORD   e_cparhdr;
	WORD   e_minalloc;
	WORD   e_maxalloc;
	WORD   e_ss;
	WORD   e_sp;
	WORD   e_csum;
	WORD   e_ip;
	WORD   e_cs;
	WORD   e_lfarlc;
	WORD   e_ovno;
	WORD   e_res[4];
	WORD   e_oemid;
	WORD   e_oeminfo;
	WORD   e_res2[10];
	LONG   e_lfanew;
} IMAGE_DOS_HEADER, * PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER {
	WORD   ne_magic;
	CHAR   ne_ver;
	CHAR   ne_rev;
	WORD   ne_enttab;
	WORD   ne_cbenttab;
	LONG   ne_crc;
	WORD   ne_flags;
	WORD   ne_autodata;
	WORD   ne_heap;
	WORD   ne_stack;
	LONG   ne_csip;
	LONG   ne_sssp;
	WORD   ne_cseg;
	WORD   ne_cmod;
	WORD   ne_cbnrestab;
	WORD   ne_segtab;
	WORD   ne_rsrctab;
	WORD   ne_restab;
	WORD   ne_modtab;
	WORD   ne_imptab;
	LONG   ne_nrestab;
	WORD   ne_cmovent;
	WORD   ne_align;
	WORD   ne_cres;
	BYTE   ne_exetyp;
	BYTE   ne_flagsothers;
	WORD   ne_pretthunks;
	WORD   ne_psegrefbytes;
	WORD   ne_swaparea;
	WORD   ne_expver;
} IMAGE_OS2_HEADER, * PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER {
	WORD   e32_magic;
	BYTE   e32_border;
	BYTE   e32_worder;
	DWORD  e32_level;
	WORD   e32_cpu;
	WORD   e32_os;
	DWORD  e32_ver;
	DWORD  e32_mflags;
	DWORD  e32_mpages;
	DWORD  e32_startobj;
	DWORD  e32_eip;
	DWORD  e32_stackobj;
	DWORD  e32_esp;
	DWORD  e32_pagesize;
	DWORD  e32_lastpagesize;
	DWORD  e32_fixupsize;
	DWORD  e32_fixupsum;
	DWORD  e32_ldrsize;
	DWORD  e32_ldrsum;
	DWORD  e32_objtab;
	DWORD  e32_objcnt;
	DWORD  e32_objmap;
	DWORD  e32_itermap;
	DWORD  e32_rsrctab;
	DWORD  e32_rsrccnt;
	DWORD  e32_restab;
	DWORD  e32_enttab;
	DWORD  e32_dirtab;
	DWORD  e32_dircnt;
	DWORD  e32_fpagetab;
	DWORD  e32_frectab;
	DWORD  e32_impmod;
	DWORD  e32_impmodcnt;
	DWORD  e32_impproc;
	DWORD  e32_pagesum;
	DWORD  e32_datapage;
	DWORD  e32_preload;
	DWORD  e32_nrestab;
	DWORD  e32_cbnrestab;
	DWORD  e32_nressum;
	DWORD  e32_autodata;
	DWORD  e32_debuginfo;
	DWORD  e32_debuglen;
	DWORD  e32_instpreload;
	DWORD  e32_instdemand;
	DWORD  e32_heapsize;
	BYTE   e32_res3[12];
	DWORD  e32_winresoff;
	DWORD  e32_winreslen;
	WORD   e32_devid;
	WORD   e32_ddkver;
} IMAGE_VXD_HEADER, * PIMAGE_VXD_HEADER;
typedef struct _IMAGE_FILE_HEADER {
	WORD    Machine;
	WORD    NumberOfSections;
	DWORD   TimeDateStamp;
	DWORD   PointerToSymbolTable;
	DWORD   NumberOfSymbols;
	WORD    SizeOfOptionalHeader;
	WORD    Characteristics;
} IMAGE_FILE_HEADER, * PIMAGE_FILE_HEADER;
typedef struct _IMAGE_DATA_DIRECTORY {
	DWORD   VirtualAddress;
	DWORD   Size;
} IMAGE_DATA_DIRECTORY, * PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_OPTIONAL_HEADER {
	WORD    Magic;
	BYTE    MajorLinkerVersion;
	BYTE    MinorLinkerVersion;
	DWORD   SizeOfCode;
	DWORD   SizeOfInitializedData;
	DWORD   SizeOfUninitializedData;
	DWORD   AddressOfEntryPoint;
	DWORD   BaseOfCode;
	DWORD   BaseOfData;
	DWORD   ImageBase;
	DWORD   SectionAlignment;
	DWORD   FileAlignment;
	WORD    MajorOperatingSystemVersion;
	WORD    MinorOperatingSystemVersion;
	WORD    MajorImageVersion;
	WORD    MinorImageVersion;
	WORD    MajorSubsystemVersion;
	WORD    MinorSubsystemVersion;
	DWORD   Win32VersionValue;
	DWORD   SizeOfImage;
	DWORD   SizeOfHeaders;
	DWORD   CheckSum;
	WORD    Subsystem;
	WORD    DllCharacteristics;
	DWORD   SizeOfStackReserve;
	DWORD   SizeOfStackCommit;
	DWORD   SizeOfHeapReserve;
	DWORD   SizeOfHeapCommit;
	DWORD   LoaderFlags;
	DWORD   NumberOfRvaAndSizes;
	IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, * PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
	WORD   Magic;
	BYTE   MajorLinkerVersion;
	BYTE   MinorLinkerVersion;
	DWORD  SizeOfCode;
	DWORD  SizeOfInitializedData;
	DWORD  SizeOfUninitializedData;
	DWORD  AddressOfEntryPoint;
	DWORD  BaseOfCode;
	DWORD  BaseOfData;
	DWORD  BaseOfBss;
	DWORD  GprMask;
	DWORD  CprMask[4];
	DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, * PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _IMAGE_OPTIONAL_HEADER64 {
	WORD        Magic;
	BYTE        MajorLinkerVersion;
	BYTE        MinorLinkerVersion;
	DWORD       SizeOfCode;
	DWORD       SizeOfInitializedData;
	DWORD       SizeOfUninitializedData;
	DWORD       AddressOfEntryPoint;
	DWORD       BaseOfCode;
	ULONGLONG   ImageBase;
	DWORD       SectionAlignment;
	DWORD       FileAlignment;
	WORD        MajorOperatingSystemVersion;
	WORD        MinorOperatingSystemVersion;
	WORD        MajorImageVersion;
	WORD        MinorImageVersion;
	WORD        MajorSubsystemVersion;
	WORD        MinorSubsystemVersion;
	DWORD       Win32VersionValue;
	DWORD       SizeOfImage;
	DWORD       SizeOfHeaders;
	DWORD       CheckSum;
	WORD        Subsystem;
	WORD        DllCharacteristics;
	ULONGLONG   SizeOfStackReserve;
	ULONGLONG   SizeOfStackCommit;
	ULONGLONG   SizeOfHeapReserve;
	ULONGLONG   SizeOfHeapCommit;
	DWORD       LoaderFlags;
	DWORD       NumberOfRvaAndSizes;
	IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, * PIMAGE_OPTIONAL_HEADER64;
typedef IMAGE_OPTIONAL_HEADER64             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER64            PIMAGE_OPTIONAL_HEADER;
typedef struct _IMAGE_NT_HEADERS64 {
	DWORD Signature;
	IMAGE_FILE_HEADER FileHeader;
	IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, * PIMAGE_NT_HEADERS64;
typedef struct _IMAGE_NT_HEADERS {
	DWORD Signature;
	IMAGE_FILE_HEADER FileHeader;
	IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, * PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_ROM_HEADERS {
	IMAGE_FILE_HEADER FileHeader;
	IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, * PIMAGE_ROM_HEADERS;
typedef IMAGE_NT_HEADERS64                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS64                 PIMAGE_NT_HEADERS;
typedef struct ANON_OBJECT_HEADER {
	WORD    Sig1;
	WORD    Sig2;
	WORD    Version;
	WORD    Machine;
	DWORD   TimeDateStamp;
	CLSID   ClassID;
	DWORD   SizeOfData;
} ANON_OBJECT_HEADER;
typedef struct ANON_OBJECT_HEADER_V2 {
	WORD    Sig1;
	WORD    Sig2;
	WORD    Version;
	WORD    Machine;
	DWORD   TimeDateStamp;
	CLSID   ClassID;
	DWORD   SizeOfData;
	DWORD   Flags;
	DWORD   MetaDataSize;
	DWORD   MetaDataOffset;
} ANON_OBJECT_HEADER_V2;
typedef struct ANON_OBJECT_HEADER_BIGOBJ {
	WORD    Sig1;
	WORD    Sig2;
	WORD    Version;
	WORD    Machine;
	DWORD   TimeDateStamp;
	CLSID   ClassID;
	DWORD   SizeOfData;
	DWORD   Flags;
	DWORD   MetaDataSize;
	DWORD   MetaDataOffset;
	DWORD   NumberOfSections;
	DWORD   PointerToSymbolTable;
	DWORD   NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;
typedef struct _IMAGE_SECTION_HEADER {
	BYTE    Name[8];
	union {
		DWORD   PhysicalAddress;
		DWORD   VirtualSize;
	} Misc;
	DWORD   VirtualAddress;
	DWORD   SizeOfRawData;
	DWORD   PointerToRawData;
	DWORD   PointerToRelocations;
	DWORD   PointerToLinenumbers;
	WORD    NumberOfRelocations;
	WORD    NumberOfLinenumbers;
	DWORD   Characteristics;
} IMAGE_SECTION_HEADER, * PIMAGE_SECTION_HEADER;
typedef struct _IMAGE_SYMBOL {
	union {
		BYTE    ShortName[8];
		struct {
			DWORD   Short;
			DWORD   Long;
		} Name;
		DWORD   LongName[2];
	} N;
	DWORD   Value;
	SHORT   SectionNumber;
	WORD    Type;
	BYTE    StorageClass;
	BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL __unaligned* PIMAGE_SYMBOL;
typedef struct _IMAGE_SYMBOL_EX {
	union {
		BYTE     ShortName[8];
		struct {
			DWORD   Short;
			DWORD   Long;
		} Name;
		DWORD   LongName[2];
	} N;
	DWORD   Value;
	LONG    SectionNumber;
	WORD    Type;
	BYTE    StorageClass;
	BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX __unaligned* PIMAGE_SYMBOL_EX;
typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
	BYTE  bAuxType;
	BYTE  bReserved;
	DWORD SymbolTableIndex;
	BYTE  rgbReserved[12];
} IMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef IMAGE_AUX_SYMBOL_TOKEN_DEF __unaligned* PIMAGE_AUX_SYMBOL_TOKEN_DEF;
typedef union _IMAGE_AUX_SYMBOL {
	struct {
		DWORD    TagIndex;
		union {
			struct {
				WORD    Linenumber;
				WORD    Size;
			} LnSz;
			DWORD    TotalSize;
		} Misc;
		union {
			struct {
				DWORD    PointerToLinenumber;
				DWORD    PointerToNextFunction;
			} Function;
			struct {
				WORD     Dimension[4];
			} Array;
		} FcnAry;
		WORD    TvIndex;
	} Sym;
	struct {
		BYTE    Name[18];
	} File;
	struct {
		DWORD   Length;
		WORD    NumberOfRelocations;
		WORD    NumberOfLinenumbers;
		DWORD   CheckSum;
		SHORT   Number;
		BYTE    Selection;
		BYTE    bReserved;
		SHORT   HighNumber;
	} Section;
	IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
	struct {
		DWORD crc;
		BYTE  rgbReserved[14];
	} CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL __unaligned* PIMAGE_AUX_SYMBOL;
typedef union _IMAGE_AUX_SYMBOL_EX {
	struct {
		DWORD   WeakDefaultSymIndex;
		DWORD   WeakSearchType;
		BYTE    rgbReserved[12];
	} Sym;
	struct {
		BYTE    Name[sizeof(IMAGE_SYMBOL_EX)];
	} File;
	struct {
		DWORD   Length;
		WORD    NumberOfRelocations;
		WORD    NumberOfLinenumbers;
		DWORD   CheckSum;
		SHORT   Number;
		BYTE    Selection;
		BYTE    bReserved;
		SHORT   HighNumber;
		BYTE    rgbReserved[2];
	} Section;
	struct {
		IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
		BYTE  rgbReserved[2];
	};
	struct {
		DWORD crc;
		BYTE  rgbReserved[16];
	} CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX __unaligned* PIMAGE_AUX_SYMBOL_EX;
typedef enum IMAGE_AUX_SYMBOL_TYPE {
	IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;
typedef struct _IMAGE_RELOCATION {
	union {
		DWORD   VirtualAddress;
		DWORD   RelocCount;
	};
	DWORD   SymbolTableIndex;
	WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION __unaligned* PIMAGE_RELOCATION;
typedef struct _IMAGE_LINENUMBER {
	union {
		DWORD   SymbolTableIndex;
		DWORD   VirtualAddress;
	} Type;
	WORD    Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER __unaligned* PIMAGE_LINENUMBER;
typedef struct _IMAGE_BASE_RELOCATION {
	DWORD   VirtualAddress;
	DWORD   SizeOfBlock;
} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION __unaligned* PIMAGE_BASE_RELOCATION;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
	BYTE     Name[16];
	BYTE     Date[12];
	BYTE     UserID[6];
	BYTE     GroupID[6];
	BYTE     Mode[8];
	BYTE     Size[10];
	BYTE     EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, * PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_EXPORT_DIRECTORY {
	DWORD   Characteristics;
	DWORD   TimeDateStamp;
	WORD    MajorVersion;
	WORD    MinorVersion;
	DWORD   Name;
	DWORD   Base;
	DWORD   NumberOfFunctions;
	DWORD   NumberOfNames;
	DWORD   AddressOfFunctions;
	DWORD   AddressOfNames;
	DWORD   AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, * PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_IMPORT_BY_NAME {
	WORD    Hint;
	CHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, * PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_THUNK_DATA64 {
	union {
		ULONGLONG ForwarderString;
		ULONGLONG Function;
		ULONGLONG Ordinal;
		ULONGLONG AddressOfData;
	} u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64* PIMAGE_THUNK_DATA64;
typedef struct _IMAGE_THUNK_DATA32 {
	union {
		DWORD ForwarderString;
		DWORD Function;
		DWORD Ordinal;
		DWORD AddressOfData;
	} u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32* PIMAGE_THUNK_DATA32;
typedef void
(__stdcall* PIMAGE_TLS_CALLBACK) (
	PVOID DllHandle,
	DWORD Reason,
	PVOID Reserved
	);
typedef struct _IMAGE_TLS_DIRECTORY64 {
	ULONGLONG StartAddressOfRawData;
	ULONGLONG EndAddressOfRawData;
	ULONGLONG AddressOfIndex;
	ULONGLONG AddressOfCallBacks;
	DWORD SizeOfZeroFill;
	union {
		DWORD Characteristics;
		struct {
			DWORD Reserved0 : 20;
			DWORD Alignment : 4;
			DWORD Reserved1 : 8;
		};
	};
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64* PIMAGE_TLS_DIRECTORY64;
typedef struct _IMAGE_TLS_DIRECTORY32 {
	DWORD   StartAddressOfRawData;
	DWORD   EndAddressOfRawData;
	DWORD   AddressOfIndex;
	DWORD   AddressOfCallBacks;
	DWORD   SizeOfZeroFill;
	union {
		DWORD Characteristics;
		struct {
			DWORD Reserved0 : 20;
			DWORD Alignment : 4;
			DWORD Reserved1 : 8;
		};
	};
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32* PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_THUNK_DATA64              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA64             PIMAGE_THUNK_DATA;
typedef IMAGE_TLS_DIRECTORY64           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY64          PIMAGE_TLS_DIRECTORY;
typedef struct _IMAGE_IMPORT_DESCRIPTOR {
	union {
		DWORD   Characteristics;
		DWORD   OriginalFirstThunk;
	};
	DWORD   TimeDateStamp;
	DWORD   ForwarderChain;
	DWORD   Name;
	DWORD   FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned* PIMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
	DWORD   TimeDateStamp;
	WORD    OffsetModuleName;
	WORD    NumberOfModuleForwarderRefs;
} IMAGE_BOUND_IMPORT_DESCRIPTOR, * PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_BOUND_FORWARDER_REF {
	DWORD   TimeDateStamp;
	WORD    OffsetModuleName;
	WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, * PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
	union {
		DWORD AllAttributes;
		struct {
			DWORD RvaBased : 1;
			DWORD ReservedAttributes : 31;
		};
	} Attributes;
	DWORD DllNameRVA;
	DWORD ModuleHandleRVA;
	DWORD ImportAddressTableRVA;
	DWORD ImportNameTableRVA;
	DWORD BoundImportAddressTableRVA;
	DWORD UnloadInformationTableRVA;
	DWORD TimeDateStamp;
} IMAGE_DELAYLOAD_DESCRIPTOR, * PIMAGE_DELAYLOAD_DESCRIPTOR;
typedef const IMAGE_DELAYLOAD_DESCRIPTOR* PCIMAGE_DELAYLOAD_DESCRIPTOR;
typedef struct _IMAGE_RESOURCE_DIRECTORY {
	DWORD   Characteristics;
	DWORD   TimeDateStamp;
	WORD    MajorVersion;
	WORD    MinorVersion;
	WORD    NumberOfNamedEntries;
	WORD    NumberOfIdEntries;
} IMAGE_RESOURCE_DIRECTORY, * PIMAGE_RESOURCE_DIRECTORY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
	union {
		struct {
			DWORD NameOffset : 31;
			DWORD NameIsString : 1;
		};
		DWORD   Name;
		WORD    Id;
	};
	union {
		DWORD   OffsetToData;
		struct {
			DWORD   OffsetToDirectory : 31;
			DWORD   DataIsDirectory : 1;
		};
	};
} IMAGE_RESOURCE_DIRECTORY_ENTRY, * PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
	WORD    Length;
	CHAR    NameString[1];
} IMAGE_RESOURCE_DIRECTORY_STRING, * PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
	WORD    Length;
	WCHAR   NameString[1];
} IMAGE_RESOURCE_DIR_STRING_U, * PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
	DWORD   OffsetToData;
	DWORD   Size;
	DWORD   CodePage;
	DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, * PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_LOAD_CONFIG_CODE_INTEGRITY {
	WORD    Flags;
	WORD    Catalog;
	DWORD   CatalogOffset;
	DWORD   Reserved;
} IMAGE_LOAD_CONFIG_CODE_INTEGRITY, * PIMAGE_LOAD_CONFIG_CODE_INTEGRITY;
typedef struct _IMAGE_DYNAMIC_RELOCATION_TABLE {
	DWORD Version;
	DWORD Size;
} IMAGE_DYNAMIC_RELOCATION_TABLE, * PIMAGE_DYNAMIC_RELOCATION_TABLE;
typedef struct _IMAGE_DYNAMIC_RELOCATION32 {
	DWORD      Symbol;
	DWORD      BaseRelocSize;
} IMAGE_DYNAMIC_RELOCATION32, * PIMAGE_DYNAMIC_RELOCATION32;
typedef struct _IMAGE_DYNAMIC_RELOCATION64 {
	ULONGLONG  Symbol;
	DWORD      BaseRelocSize;
} IMAGE_DYNAMIC_RELOCATION64, * PIMAGE_DYNAMIC_RELOCATION64;
typedef struct _IMAGE_DYNAMIC_RELOCATION32_V2 {
	DWORD      HeaderSize;
	DWORD      FixupInfoSize;
	DWORD      Symbol;
	DWORD      SymbolGroup;
	DWORD      Flags;
} IMAGE_DYNAMIC_RELOCATION32_V2, * PIMAGE_DYNAMIC_RELOCATION32_V2;
typedef struct _IMAGE_DYNAMIC_RELOCATION64_V2 {
	DWORD      HeaderSize;
	DWORD      FixupInfoSize;
	ULONGLONG  Symbol;
	DWORD      SymbolGroup;
	DWORD      Flags;
} IMAGE_DYNAMIC_RELOCATION64_V2, * PIMAGE_DYNAMIC_RELOCATION64_V2;
typedef IMAGE_DYNAMIC_RELOCATION64          IMAGE_DYNAMIC_RELOCATION;
typedef PIMAGE_DYNAMIC_RELOCATION64         PIMAGE_DYNAMIC_RELOCATION;
typedef IMAGE_DYNAMIC_RELOCATION64_V2       IMAGE_DYNAMIC_RELOCATION_V2;
typedef PIMAGE_DYNAMIC_RELOCATION64_V2      PIMAGE_DYNAMIC_RELOCATION_V2;
typedef struct _IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER {
	BYTE       PrologueByteCount;
} IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER __unaligned* PIMAGE_PROLOGUE_DYNAMIC_RELOCATION_HEADER;
typedef struct _IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER {
	DWORD      EpilogueCount;
	BYTE       EpilogueByteCount;
	BYTE       BranchDescriptorElementSize;
	WORD       BranchDescriptorCount;
} IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef IMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER __unaligned* PIMAGE_EPILOGUE_DYNAMIC_RELOCATION_HEADER;
typedef struct _IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
	DWORD       PageRelativeOffset : 12;
	DWORD       IndirectCall : 1;
	DWORD       IATIndex : 19;
} IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef IMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION __unaligned* PIMAGE_IMPORT_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef struct _IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION {
	WORD        PageRelativeOffset : 12;
	WORD        IndirectCall : 1;
	WORD        RexWPrefix : 1;
	WORD        CfgCheck : 1;
	WORD        Reserved : 1;
} IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef IMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION __unaligned* PIMAGE_INDIR_CONTROL_TRANSFER_DYNAMIC_RELOCATION;
typedef struct _IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION {
	WORD        PageRelativeOffset : 12;
	WORD        RegisterNumber : 4;
} IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
typedef IMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION __unaligned* PIMAGE_SWITCHTABLE_BRANCH_DYNAMIC_RELOCATION;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY32 {
	DWORD   Size;
	DWORD   TimeDateStamp;
	WORD    MajorVersion;
	WORD    MinorVersion;
	DWORD   GlobalFlagsClear;
	DWORD   GlobalFlagsSet;
	DWORD   CriticalSectionDefaultTimeout;
	DWORD   DeCommitFreeBlockThreshold;
	DWORD   DeCommitTotalFreeThreshold;
	DWORD   LockPrefixTable;
	DWORD   MaximumAllocationSize;
	DWORD   VirtualMemoryThreshold;
	DWORD   ProcessHeapFlags;
	DWORD   ProcessAffinityMask;
	WORD    CSDVersion;
	WORD    DependentLoadFlags;
	DWORD   EditList;
	DWORD   SecurityCookie;
	DWORD   SEHandlerTable;
	DWORD   SEHandlerCount;
	DWORD   GuardCFCheckFunctionPointer;
	DWORD   GuardCFDispatchFunctionPointer;
	DWORD   GuardCFFunctionTable;
	DWORD   GuardCFFunctionCount;
	DWORD   GuardFlags;
	IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
	DWORD   GuardAddressTakenIatEntryTable;
	DWORD   GuardAddressTakenIatEntryCount;
	DWORD   GuardLongJumpTargetTable;
	DWORD   GuardLongJumpTargetCount;
	DWORD   DynamicValueRelocTable;
	DWORD   CHPEMetadataPointer;
	DWORD   GuardRFFailureRoutine;
	DWORD   GuardRFFailureRoutineFunctionPointer;
	DWORD   DynamicValueRelocTableOffset;
	WORD    DynamicValueRelocTableSection;
	WORD    Reserved2;
	DWORD   GuardRFVerifyStackPointerFunctionPointer;
	DWORD   HotPatchTableOffset;
	DWORD   Reserved3;
	DWORD   EnclaveConfigurationPointer;
	DWORD   VolatileMetadataPointer;
	DWORD   GuardEHContinuationTable;
	DWORD   GuardEHContinuationCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, * PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _IMAGE_LOAD_CONFIG_DIRECTORY64 {
	DWORD      Size;
	DWORD      TimeDateStamp;
	WORD       MajorVersion;
	WORD       MinorVersion;
	DWORD      GlobalFlagsClear;
	DWORD      GlobalFlagsSet;
	DWORD      CriticalSectionDefaultTimeout;
	ULONGLONG  DeCommitFreeBlockThreshold;
	ULONGLONG  DeCommitTotalFreeThreshold;
	ULONGLONG  LockPrefixTable;
	ULONGLONG  MaximumAllocationSize;
	ULONGLONG  VirtualMemoryThreshold;
	ULONGLONG  ProcessAffinityMask;
	DWORD      ProcessHeapFlags;
	WORD       CSDVersion;
	WORD       DependentLoadFlags;
	ULONGLONG  EditList;
	ULONGLONG  SecurityCookie;
	ULONGLONG  SEHandlerTable;
	ULONGLONG  SEHandlerCount;
	ULONGLONG  GuardCFCheckFunctionPointer;
	ULONGLONG  GuardCFDispatchFunctionPointer;
	ULONGLONG  GuardCFFunctionTable;
	ULONGLONG  GuardCFFunctionCount;
	DWORD      GuardFlags;
	IMAGE_LOAD_CONFIG_CODE_INTEGRITY CodeIntegrity;
	ULONGLONG  GuardAddressTakenIatEntryTable;
	ULONGLONG  GuardAddressTakenIatEntryCount;
	ULONGLONG  GuardLongJumpTargetTable;
	ULONGLONG  GuardLongJumpTargetCount;
	ULONGLONG  DynamicValueRelocTable;
	ULONGLONG  CHPEMetadataPointer;
	ULONGLONG  GuardRFFailureRoutine;
	ULONGLONG  GuardRFFailureRoutineFunctionPointer;
	DWORD      DynamicValueRelocTableOffset;
	WORD       DynamicValueRelocTableSection;
	WORD       Reserved2;
	ULONGLONG  GuardRFVerifyStackPointerFunctionPointer;
	DWORD      HotPatchTableOffset;
	DWORD      Reserved3;
	ULONGLONG  EnclaveConfigurationPointer;
	ULONGLONG  VolatileMetadataPointer;
	ULONGLONG  GuardEHContinuationTable;
	ULONGLONG  GuardEHContinuationCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, * PIMAGE_LOAD_CONFIG_DIRECTORY64;
typedef IMAGE_LOAD_CONFIG_DIRECTORY64     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY64    PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef struct _IMAGE_HOT_PATCH_INFO {
	DWORD Version;
	DWORD Size;
	DWORD SequenceNumber;
	DWORD BaseImageList;
	DWORD BaseImageCount;
	DWORD BufferOffset;
	DWORD ExtraPatchSize;
} IMAGE_HOT_PATCH_INFO, * PIMAGE_HOT_PATCH_INFO;
typedef struct _IMAGE_HOT_PATCH_BASE {
	DWORD SequenceNumber;
	DWORD Flags;
	DWORD OriginalTimeDateStamp;
	DWORD OriginalCheckSum;
	DWORD CodeIntegrityInfo;
	DWORD CodeIntegritySize;
	DWORD PatchTable;
	DWORD BufferOffset;
} IMAGE_HOT_PATCH_BASE, * PIMAGE_HOT_PATCH_BASE;
typedef struct _IMAGE_HOT_PATCH_HASHES {
	BYTE  SHA256[32];
	BYTE  SHA1[20];
} IMAGE_HOT_PATCH_HASHES, * PIMAGE_HOT_PATCH_HASHES;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
	DWORD FuncStart;
	DWORD PrologLen : 8;
	DWORD FuncLen : 22;
	DWORD ThirtyTwoBit : 1;
	DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
	DWORD BeginAddress;
	union {
		DWORD UnwindData;
		struct {
			DWORD Flag : 2;
			DWORD FunctionLength : 11;
			DWORD Ret : 2;
			DWORD H : 1;
			DWORD Reg : 3;
			DWORD R : 1;
			DWORD L : 1;
			DWORD C : 1;
			DWORD StackAdjust : 10;
		};
	};
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;
typedef enum ARM64_FNPDATA_FLAGS {
	PdataRefToFullXdata = 0,
	PdataPackedUnwindFunction = 1,
	PdataPackedUnwindFragment = 2,
} ARM64_FNPDATA_FLAGS;
typedef enum ARM64_FNPDATA_CR {
	PdataCrUnchained = 0,
	PdataCrUnchainedSavedLr = 1,
	PdataCrChainedWithPac = 2,
	PdataCrChained = 3,
} ARM64_FNPDATA_CR;
typedef struct _IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY {
	DWORD BeginAddress;
	union {
		DWORD UnwindData;
		struct {
			DWORD Flag : 2;
			DWORD FunctionLength : 11;
			DWORD RegF : 3;
			DWORD RegI : 4;
			DWORD H : 1;
			DWORD CR : 2;
			DWORD FrameSize : 9;
		};
	};
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM64_RUNTIME_FUNCTION_ENTRY;
typedef union IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA {
	DWORD HeaderData;
	struct {
		DWORD FunctionLength : 18;
		DWORD Version : 2;
		DWORD ExceptionDataPresent : 1;
		DWORD EpilogInHeader : 1;
		DWORD EpilogCount : 5;
		DWORD CodeWords : 5;
	};
} IMAGE_ARM64_RUNTIME_FUNCTION_ENTRY_XDATA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
	ULONGLONG BeginAddress;
	ULONGLONG EndAddress;
	ULONGLONG ExceptionHandler;
	ULONGLONG HandlerData;
	ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
	DWORD BeginAddress;
	DWORD EndAddress;
	DWORD ExceptionHandler;
	DWORD HandlerData;
	DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
	DWORD BeginAddress;
	DWORD EndAddress;
	union {
		DWORD UnwindInfoAddress;
		DWORD UnwindData;
	};
} _IMAGE_RUNTIME_FUNCTION_ENTRY, * _PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_ENCLAVE_CONFIG32 {
	DWORD Size;
	DWORD MinimumRequiredConfigSize;
	DWORD PolicyFlags;
	DWORD NumberOfImports;
	DWORD ImportList;
	DWORD ImportEntrySize;
	BYTE  FamilyID[16];
	BYTE  ImageID[16];
	DWORD ImageVersion;
	DWORD SecurityVersion;
	DWORD EnclaveSize;
	DWORD NumberOfThreads;
	DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG32, * PIMAGE_ENCLAVE_CONFIG32;
typedef struct _IMAGE_ENCLAVE_CONFIG64 {
	DWORD Size;
	DWORD MinimumRequiredConfigSize;
	DWORD PolicyFlags;
	DWORD NumberOfImports;
	DWORD ImportList;
	DWORD ImportEntrySize;
	BYTE  FamilyID[16];
	BYTE  ImageID[16];
	DWORD ImageVersion;
	DWORD SecurityVersion;
	ULONGLONG EnclaveSize;
	DWORD NumberOfThreads;
	DWORD EnclaveFlags;
} IMAGE_ENCLAVE_CONFIG64, * PIMAGE_ENCLAVE_CONFIG64;
typedef IMAGE_ENCLAVE_CONFIG64          IMAGE_ENCLAVE_CONFIG;
typedef PIMAGE_ENCLAVE_CONFIG64         PIMAGE_ENCLAVE_CONFIG;
typedef struct _IMAGE_ENCLAVE_IMPORT {
	DWORD MatchType;
	DWORD MinimumSecurityVersion;
	BYTE  UniqueOrAuthorID[32];
	BYTE  FamilyID[16];
	BYTE  ImageID[16];
	DWORD ImportName;
	DWORD Reserved;
} IMAGE_ENCLAVE_IMPORT, * PIMAGE_ENCLAVE_IMPORT;
typedef struct _IMAGE_DEBUG_DIRECTORY {
	DWORD   Characteristics;
	DWORD   TimeDateStamp;
	WORD    MajorVersion;
	WORD    MinorVersion;
	DWORD   Type;
	DWORD   SizeOfData;
	DWORD   AddressOfRawData;
	DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, * PIMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
	DWORD   NumberOfSymbols;
	DWORD   LvaToFirstSymbol;
	DWORD   NumberOfLinenumbers;
	DWORD   LvaToFirstLinenumber;
	DWORD   RvaToFirstByteOfCode;
	DWORD   RvaToLastByteOfCode;
	DWORD   RvaToFirstByteOfData;
	DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, * PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _FPO_DATA {
	DWORD       ulOffStart;
	DWORD       cbProcSize;
	DWORD       cdwLocals;
	WORD        cdwParams;
	WORD        cbProlog : 8;
	WORD        cbRegs : 3;
	WORD        fHasSEH : 1;
	WORD        fUseBP : 1;
	WORD        reserved : 1;
	WORD        cbFrame : 2;
} FPO_DATA, * PFPO_DATA;
typedef struct _IMAGE_DEBUG_MISC {
	DWORD       DataType;
	DWORD       Length;
	BOOLEAN     Unicode;
	BYTE        Reserved[3];
	BYTE        Data[1];
} IMAGE_DEBUG_MISC, * PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_FUNCTION_ENTRY {
	DWORD   StartingAddress;
	DWORD   EndingAddress;
	DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, * PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_FUNCTION_ENTRY64 {
	ULONGLONG   StartingAddress;
	ULONGLONG   EndingAddress;
	union {
		ULONGLONG   EndOfPrologue;
		ULONGLONG   UnwindInfoAddress;
	};
} IMAGE_FUNCTION_ENTRY64, * PIMAGE_FUNCTION_ENTRY64;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
	WORD        Signature;
	WORD        Flags;
	WORD        Machine;
	WORD        Characteristics;
	DWORD       TimeDateStamp;
	DWORD       CheckSum;
	DWORD       ImageBase;
	DWORD       SizeOfImage;
	DWORD       NumberOfSections;
	DWORD       ExportedNamesSize;
	DWORD       DebugDirectorySize;
	DWORD       SectionAlignment;
	DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, * PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _NON_PAGED_DEBUG_INFO {
	WORD        Signature;
	WORD        Flags;
	DWORD       Size;
	WORD        Machine;
	WORD        Characteristics;
	DWORD       TimeDateStamp;
	DWORD       CheckSum;
	DWORD       SizeOfImage;
	ULONGLONG   ImageBase;
} NON_PAGED_DEBUG_INFO, * PNON_PAGED_DEBUG_INFO;
typedef struct _ImageArchitectureHeader {
	unsigned int AmaskValue : 1;
	int : 7;
	unsigned int AmaskShift : 8;
	int : 16;
	DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, * PIMAGE_ARCHITECTURE_HEADER;
typedef struct _ImageArchitectureEntry {
	DWORD FixupInstRVA;
	DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, * PIMAGE_ARCHITECTURE_ENTRY;
typedef struct IMPORT_OBJECT_HEADER {
	WORD    Sig1;
	WORD    Sig2;
	WORD    Version;
	WORD    Machine;
	DWORD   TimeDateStamp;
	DWORD   SizeOfData;
	union {
		WORD    Ordinal;
		WORD    Hint;
	};
	WORD    Type : 2;
	WORD    NameType : 3;
	WORD    Reserved : 11;
} IMPORT_OBJECT_HEADER;
typedef enum IMPORT_OBJECT_TYPE
{
	IMPORT_OBJECT_CODE = 0,
	IMPORT_OBJECT_DATA = 1,
	IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;
typedef enum IMPORT_OBJECT_NAME_TYPE
{
	IMPORT_OBJECT_ORDINAL = 0,
	IMPORT_OBJECT_NAME = 1,
	IMPORT_OBJECT_NAME_NO_PREFIX = 2,
	IMPORT_OBJECT_NAME_UNDECORATE = 3,
	IMPORT_OBJECT_NAME_EXPORTAS = 4,
} IMPORT_OBJECT_NAME_TYPE;
typedef enum ReplacesCorHdrNumericDefines
{
	COMIMAGE_FLAGS_ILONLY = 0x00000001,
	COMIMAGE_FLAGS_32BITREQUIRED = 0x00000002,
	COMIMAGE_FLAGS_IL_LIBRARY = 0x00000004,
	COMIMAGE_FLAGS_STRONGNAMESIGNED = 0x00000008,
	COMIMAGE_FLAGS_NATIVE_ENTRYPOINT = 0x00000010,
	COMIMAGE_FLAGS_TRACKDEBUGDATA = 0x00010000,
	COMIMAGE_FLAGS_32BITPREFERRED = 0x00020000,
	COR_VERSION_MAJOR_V2 = 2,
	COR_VERSION_MAJOR = COR_VERSION_MAJOR_V2,
	COR_VERSION_MINOR = 5,
	COR_DELETED_NAME_LENGTH = 8,
	COR_VTABLEGAP_NAME_LENGTH = 8,
	NATIVE_TYPE_MAX_CB = 1,
	COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE = 0xFF,
	IMAGE_COR_MIH_METHODRVA = 0x01,
	IMAGE_COR_MIH_EHRVA = 0x02,
	IMAGE_COR_MIH_BASICBLOCK = 0x08,
	COR_VTABLE_32BIT = 0x01,
	COR_VTABLE_64BIT = 0x02,
	COR_VTABLE_FROM_UNMANAGED = 0x04,
	COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN = 0x08,
	COR_VTABLE_CALL_MOST_DERIVED = 0x10,
	IMAGE_COR_EATJ_THUNK_SIZE = 32,
	MAX_CLASS_NAME = 1024,
	MAX_PACKAGE_NAME = 1024,
} ReplacesCorHdrNumericDefines;
typedef struct IMAGE_COR20_HEADER
{
	DWORD                   cb;
	WORD                    MajorRuntimeVersion;
	WORD                    MinorRuntimeVersion;
	IMAGE_DATA_DIRECTORY    MetaData;
	DWORD                   Flags;
	union {
		DWORD               EntryPointToken;
		DWORD               EntryPointRVA;
	};
	IMAGE_DATA_DIRECTORY    Resources;
	IMAGE_DATA_DIRECTORY    StrongNameSignature;
	IMAGE_DATA_DIRECTORY    CodeManagerTable;
	IMAGE_DATA_DIRECTORY    VTableFixups;
	IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;
	IMAGE_DATA_DIRECTORY    ManagedNativeHeader;
} IMAGE_COR20_HEADER, * PIMAGE_COR20_HEADER;

WORD
__stdcall
RtlCaptureStackBackTrace(
	DWORD FramesToSkip,
	DWORD FramesToCapture,
	PVOID* BackTrace,
	PDWORD BackTraceHash
);

void
__stdcall
RtlCaptureContext(
	PCONTEXT ContextRecord
);

void
__stdcall
RtlCaptureContext2(
	PCONTEXT ContextRecord
);

void
__stdcall
RtlUnwind(
	PVOID TargetFrame,
	PVOID TargetIp,
	PEXCEPTION_RECORD ExceptionRecord,
	PVOID ReturnValue
);

BOOLEAN
__cdecl
RtlAddFunctionTable(
	PRUNTIME_FUNCTION FunctionTable,
	DWORD EntryCount,
	DWORD64 BaseAddress
);

BOOLEAN
__cdecl
RtlDeleteFunctionTable(
	PRUNTIME_FUNCTION FunctionTable
);

BOOLEAN
__cdecl
RtlInstallFunctionTableCallback(
	DWORD64 TableIdentifier,
	DWORD64 BaseAddress,
	DWORD Length,
	PGET_RUNTIME_FUNCTION_CALLBACK Callback,
	PVOID Context,
	PCWSTR OutOfProcessCallbackDll
);

DWORD
__stdcall
RtlAddGrowableFunctionTable(
	PVOID* DynamicTable,
	PRUNTIME_FUNCTION FunctionTable,
	DWORD EntryCount,
	DWORD MaximumEntryCount,
	ULONG_PTR RangeBase,
	ULONG_PTR RangeEnd
);

void
__stdcall
RtlGrowFunctionTable(
	PVOID DynamicTable,
	DWORD NewEntryCount
);

void
__stdcall
RtlDeleteGrowableFunctionTable(
	PVOID DynamicTable
);

PRUNTIME_FUNCTION
__stdcall
RtlLookupFunctionEntry(
	DWORD64 ControlPc,
	PDWORD64 ImageBase,
	PUNWIND_HISTORY_TABLE HistoryTable
);

void
__cdecl
RtlRestoreContext(
	PCONTEXT ContextRecord,
	struct _EXCEPTION_RECORD* ExceptionRecord
);

void
__stdcall
RtlUnwindEx(
	PVOID TargetFrame,
	PVOID TargetIp,
	PEXCEPTION_RECORD ExceptionRecord,
	PVOID ReturnValue,
	PCONTEXT ContextRecord,
	PUNWIND_HISTORY_TABLE HistoryTable
);

PEXCEPTION_ROUTINE
__stdcall
RtlVirtualUnwind(
	DWORD HandlerType,
	DWORD64 ImageBase,
	DWORD64 ControlPc,
	PRUNTIME_FUNCTION FunctionEntry,
	PCONTEXT ContextRecord,
	PVOID* HandlerData,
	PDWORD64 EstablisherFrame,
	PKNONVOLATILE_CONTEXT_POINTERS ContextPointers
);

void
__stdcall
RtlRaiseException(
	PEXCEPTION_RECORD ExceptionRecord
);

PVOID
__stdcall
RtlPcToFileHeader(
	PVOID PcValue,
	PVOID* BaseOfImage
);

SIZE_T
__stdcall
RtlCompareMemory(
	const void* Source1,
	const void* Source2,
	SIZE_T Length
);
typedef struct  _SLIST_ENTRY {
	struct _SLIST_ENTRY* Next;
} SLIST_ENTRY, * PSLIST_ENTRY;
typedef union  _SLIST_HEADER {
	struct {
		ULONGLONG Alignment;
		ULONGLONG Region;
	};
	struct {
		ULONGLONG Depth : 16;
		ULONGLONG Sequence : 48;
		ULONGLONG Reserved : 4;
		ULONGLONG NextEntry : 60;
	} HeaderX64;
} SLIST_HEADER, * PSLIST_HEADER;

void
__stdcall
RtlInitializeSListHead(
	PSLIST_HEADER ListHead
);

PSLIST_ENTRY
__stdcall
RtlFirstEntrySList(
	const SLIST_HEADER* ListHead
);

PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList(
	PSLIST_HEADER ListHead
);

PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList(
	PSLIST_HEADER ListHead,
	PSLIST_ENTRY ListEntry
);

PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx(
	PSLIST_HEADER ListHead,
	PSLIST_ENTRY List,
	PSLIST_ENTRY ListEnd,
	DWORD Count
);

PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList(
	PSLIST_HEADER ListHead
);

WORD
__stdcall
RtlQueryDepthSList(
	PSLIST_HEADER ListHead
);

ULONG_PTR
__stdcall
RtlGetReturnAddressHijackTarget(
	void
);
typedef union _RTL_RUN_ONCE {
	PVOID Ptr;
} RTL_RUN_ONCE, * PRTL_RUN_ONCE;
typedef struct _RTL_BARRIER {
	DWORD Reserved1;
	DWORD Reserved2;
	ULONG_PTR Reserved3[2];
	DWORD Reserved4;
	DWORD Reserved5;
} RTL_BARRIER, * PRTL_BARRIER;

void
__fastfail(
	unsigned int Code
);

DWORD
HEAP_MAKE_TAG_FLAGS(
	DWORD TagBase,
	DWORD Tag
);

PVOID
RtlSecureZeroMemory(
	PVOID ptr,
	SIZE_T cnt
);
typedef struct _MESSAGE_RESOURCE_ENTRY {
	WORD   Length;
	WORD   Flags;
	BYTE  Text[1];
} MESSAGE_RESOURCE_ENTRY, * PMESSAGE_RESOURCE_ENTRY;
typedef struct _MESSAGE_RESOURCE_BLOCK {
	DWORD LowId;
	DWORD HighId;
	DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, * PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_DATA {
	DWORD NumberOfBlocks;
	MESSAGE_RESOURCE_BLOCK Blocks[1];
} MESSAGE_RESOURCE_DATA, * PMESSAGE_RESOURCE_DATA;
typedef struct _OSVERSIONINFOA {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	CHAR   szCSDVersion[128];
} OSVERSIONINFOA, * POSVERSIONINFOA, * LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	WCHAR  szCSDVersion[128];
} OSVERSIONINFOW, * POSVERSIONINFOW, * LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, * PRTL_OSVERSIONINFOW;
typedef OSVERSIONINFOW OSVERSIONINFO;
typedef POSVERSIONINFOW POSVERSIONINFO;
typedef LPOSVERSIONINFOW LPOSVERSIONINFO;
typedef struct _OSVERSIONINFOEXA {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	CHAR   szCSDVersion[128];
	WORD   wServicePackMajor;
	WORD   wServicePackMinor;
	WORD   wSuiteMask;
	BYTE  wProductType;
	BYTE  wReserved;
} OSVERSIONINFOEXA, * POSVERSIONINFOEXA, * LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
	DWORD dwOSVersionInfoSize;
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
	DWORD dwBuildNumber;
	DWORD dwPlatformId;
	WCHAR  szCSDVersion[128];
	WORD   wServicePackMajor;
	WORD   wServicePackMinor;
	WORD   wSuiteMask;
	BYTE  wProductType;
	BYTE  wReserved;
} OSVERSIONINFOEXW, * POSVERSIONINFOEXW, * LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, * PRTL_OSVERSIONINFOEXW;
typedef OSVERSIONINFOEXW OSVERSIONINFOEX;
typedef POSVERSIONINFOEXW POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXW LPOSVERSIONINFOEX;

ULONGLONG
__stdcall
VerSetConditionMask(
	ULONGLONG ConditionMask,
	DWORD TypeMask,
	BYTE  Condition
);

BOOLEAN
__stdcall
RtlGetProductInfo(
	DWORD  OSMajorVersion,
	DWORD  OSMinorVersion,
	DWORD  SpMajorVersion,
	DWORD  SpMinorVersion,
	PDWORD ReturnedProductType
);
typedef enum _RTL_UMS_THREAD_INFO_CLASS {
	UmsThreadInvalidInfoClass = 0,
	UmsThreadUserContext,
	UmsThreadPriority,
	UmsThreadAffinity,
	UmsThreadTeb,
	UmsThreadIsSuspended,
	UmsThreadIsTerminated,
	UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, * PRTL_UMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON {
	UmsSchedulerStartup = 0,
	UmsSchedulerThreadBlocked,
	UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, * PRTL_UMS_SCHEDULER_REASON;
typedef
void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
	RTL_UMS_SCHEDULER_REASON Reason,
	ULONG_PTR ActivationPayload,
	PVOID SchedulerParam
);
typedef RTL_UMS_SCHEDULER_ENTRY_POINT* PRTL_UMS_SCHEDULER_ENTRY_POINT;

DWORD
__stdcall
RtlCrc32(
	const void* Buffer,
	size_t Size,
	DWORD InitialCrc
);

ULONGLONG
__stdcall
RtlCrc64(
	const void* Buffer,
	size_t Size,
	ULONGLONG InitialCrc
);
typedef enum _OS_DEPLOYEMENT_STATE_VALUES {
	OS_DEPLOYMENT_STANDARD = 1,
	OS_DEPLOYMENT_COMPACT
} OS_DEPLOYEMENT_STATE_VALUES;

OS_DEPLOYEMENT_STATE_VALUES
__stdcall
RtlOsDeploymentState(
	DWORD Flags
);
typedef struct _NV_MEMORY_RANGE {
	void* BaseAddress;
	SIZE_T Length;
} NV_MEMORY_RANGE, * PNV_MEMORY_RANGE;

DWORD
__stdcall
RtlGetNonVolatileToken(
	PVOID NvBuffer,
	SIZE_T Size,
	PVOID* NvToken
);

DWORD
__stdcall
RtlFreeNonVolatileToken(
	PVOID NvToken
);

DWORD
__stdcall
RtlFlushNonVolatileMemory(
	PVOID NvToken,
	PVOID NvBuffer,
	SIZE_T Size,
	DWORD Flags
);

DWORD
__stdcall
RtlDrainNonVolatileFlush(
	PVOID NvToken
);

DWORD
__stdcall
RtlWriteNonVolatileMemory(
	PVOID NvToken,
	void __unaligned* NvDestination,
	const void __unaligned* Source,
	SIZE_T Size,
	DWORD Flags
);

DWORD
__stdcall
RtlFillNonVolatileMemory(
	PVOID NvToken,
	void __unaligned* NvDestination,
	SIZE_T Size,
	const BYTE  Value,
	DWORD Flags
);

DWORD
__stdcall
RtlFlushNonVolatileMemoryRanges(
	PVOID NvToken,
	PNV_MEMORY_RANGE NvRanges,
	SIZE_T NumRanges,
	DWORD Flags
);
typedef struct CORRELATION_VECTOR {
	CHAR Version;
	CHAR Vector[129];
} CORRELATION_VECTOR;
typedef CORRELATION_VECTOR* PCORRELATION_VECTOR;

DWORD
__stdcall
RtlInitializeCorrelationVector(
	PCORRELATION_VECTOR CorrelationVector,
	int Version,
	const GUID* Guid
);

DWORD
__stdcall
RtlIncrementCorrelationVector(
	PCORRELATION_VECTOR CorrelationVector
);

DWORD
__stdcall
RtlExtendCorrelationVector(
	PCORRELATION_VECTOR CorrelationVector
);

DWORD
__stdcall
RtlValidateCorrelationVector(
	PCORRELATION_VECTOR Vector
);
typedef struct _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG {
	DWORD Size;
	PCWSTR TriggerId;
} CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG, * PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG;

void
CUSTOM_SYSTEM_EVENT_TRIGGER_INIT(
	PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG Config,
	PCWSTR TriggerId
);
DWORD
__stdcall
RtlRaiseCustomSystemEventTrigger(
	PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG TriggerConfig
);
typedef enum _IMAGE_POLICY_ENTRY_TYPE {
	ImagePolicyEntryTypeNone = 0,
	ImagePolicyEntryTypeBool,
	ImagePolicyEntryTypeInt8,
	ImagePolicyEntryTypeUInt8,
	ImagePolicyEntryTypeInt16,
	ImagePolicyEntryTypeUInt16,
	ImagePolicyEntryTypeInt32,
	ImagePolicyEntryTypeUInt32,
	ImagePolicyEntryTypeInt64,
	ImagePolicyEntryTypeUInt64,
	ImagePolicyEntryTypeAnsiString,
	ImagePolicyEntryTypeUnicodeString,
	ImagePolicyEntryTypeOverride,
	ImagePolicyEntryTypeMaximum
} IMAGE_POLICY_ENTRY_TYPE;
typedef enum _IMAGE_POLICY_ID {
	ImagePolicyIdNone = 0,
	ImagePolicyIdEtw,
	ImagePolicyIdDebug,
	ImagePolicyIdCrashDump,
	ImagePolicyIdCrashDumpKey,
	ImagePolicyIdCrashDumpKeyGuid,
	ImagePolicyIdParentSd,
	ImagePolicyIdParentSdRev,
	ImagePolicyIdSvn,
	ImagePolicyIdDeviceId,
	ImagePolicyIdCapability,
	ImagePolicyIdScenarioId,
	ImagePolicyIdMaximum
} IMAGE_POLICY_ID;
typedef struct _IMAGE_POLICY_ENTRY {
	IMAGE_POLICY_ENTRY_TYPE Type;
	IMAGE_POLICY_ID PolicyId;
	union {
		const void* None;
		BOOLEAN BoolValue;
		INT8 Int8Value;
		UINT8 UInt8Value;
		INT16 Int16Value;
		UINT16 UInt16Value;
		INT32 Int32Value;
		UINT32 UInt32Value;
		INT64 Int64Value;
		UINT64 UInt64Value;
		PCSTR AnsiStringValue;
		PCWSTR UnicodeStringValue;
	} u;
} IMAGE_POLICY_ENTRY;
typedef const IMAGE_POLICY_ENTRY* PCIMAGE_POLICY_ENTRY;
typedef struct _IMAGE_POLICY_METADATA {
	BYTE  Version;
	BYTE  Reserved0[7];
	ULONGLONG ApplicationId;
	IMAGE_POLICY_ENTRY Policies[];
} IMAGE_POLICY_METADATA;
typedef const IMAGE_POLICY_METADATA* PCIMAGE_POLICY_METADATA;

BOOLEAN
__stdcall
RtlIsZeroMemory(
	PVOID Buffer,
	SIZE_T Length
);

BOOLEAN
__stdcall
RtlNormalizeSecurityDescriptor(
	PSECURITY_DESCRIPTOR* SecurityDescriptor,
	DWORD SecurityDescriptorLength,
	PSECURITY_DESCRIPTOR* NewSecurityDescriptor,
	PDWORD NewSecurityDescriptorLength,
	BOOLEAN CheckOnly
);
typedef struct _RTL_CRITICAL_SECTION_DEBUG {
	WORD   Type;
	WORD   CreatorBackTraceIndex;
	struct _RTL_CRITICAL_SECTION* CriticalSection;
	LIST_ENTRY ProcessLocksList;
	DWORD EntryCount;
	DWORD ContentionCount;
	DWORD Flags;
	WORD   CreatorBackTraceIndexHigh;
	WORD   SpareWORD;
} RTL_CRITICAL_SECTION_DEBUG, * PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, * PRTL_RESOURCE_DEBUG;
typedef struct _RTL_CRITICAL_SECTION {
	PRTL_CRITICAL_SECTION_DEBUG DebugInfo;
	LONG LockCount;
	LONG RecursionCount;
	HANDLE OwningThread;
	HANDLE LockSemaphore;
	ULONG_PTR SpinCount;
} RTL_CRITICAL_SECTION, * PRTL_CRITICAL_SECTION;
typedef struct _RTL_SRWLOCK {
	PVOID Ptr;
} RTL_SRWLOCK, * PRTL_SRWLOCK;
typedef struct _RTL_CONDITION_VARIABLE {
	PVOID Ptr;
} RTL_CONDITION_VARIABLE, * PRTL_CONDITION_VARIABLE;
typedef
void
(__stdcall* PAPCFUNC)(
	ULONG_PTR Parameter
	);
typedef LONG(__stdcall* PVECTORED_EXCEPTION_HANDLER)(
	struct _EXCEPTION_POINTERS* ExceptionInfo
	);
typedef enum _HEAP_INFORMATION_CLASS {
	HeapCompatibilityInformation = 0,
	HeapEnableTerminationOnCorruption = 1
	,
	HeapOptimizeResources = 3
} HEAP_INFORMATION_CLASS;
typedef struct _HEAP_OPTIMIZE_RESOURCES_INFORMATION {
	DWORD Version;
	DWORD Flags;
} HEAP_OPTIMIZE_RESOURCES_INFORMATION, * PHEAP_OPTIMIZE_RESOURCES_INFORMATION;
typedef void(__stdcall* WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN);
typedef void(__stdcall* WORKERCALLBACKFUNC) (PVOID);
typedef void(__stdcall* APC_CALLBACK_FUNCTION) (DWORD, PVOID, PVOID);
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
typedef
void
(__stdcall* PFLS_CALLBACK_FUNCTION) (
	PVOID lpFlsData
	);
typedef
BOOLEAN
(__stdcall* PSECURE_MEMORY_CACHE_CALLBACK) (
	PVOID Addr,
	SIZE_T Range
	);
typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
	ActivationContextBasicInformation = 1,
	ActivationContextDetailedInformation = 2,
	AssemblyDetailedInformationInActivationContext = 3,
	FileInformationInAssemblyOfAssemblyInActivationContext = 4,
	RunlevelInformationInActivationContext = 5,
	CompatibilityInformationInActivationContext = 6,
	ActivationContextManifestResourceName = 7,
	MaxActivationContextInfoClass,
	AssemblyDetailedInformationInActivationContxt = 3,
	FileInformationInAssemblyOfAssemblyInActivationContxt = 4
} ACTIVATION_CONTEXT_INFO_CLASS;
typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
	DWORD ulAssemblyIndex;
	DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;
typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX* PCACTIVATION_CONTEXT_QUERY_INDEX;
typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
	DWORD ulFlags;
	DWORD ulFilenameLength;
	DWORD ulPathLength;
	PCWSTR lpFileName;
	PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, * PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION* PCASSEMBLY_FILE_DETAILED_INFORMATION;
typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
	DWORD ulFlags;
	DWORD ulEncodedAssemblyIdentityLength;
	DWORD ulManifestPathType;
	DWORD ulManifestPathLength;
	LARGE_INTEGER liManifestLastWriteTime;
	DWORD ulPolicyPathType;
	DWORD ulPolicyPathLength;
	LARGE_INTEGER liPolicyLastWriteTime;
	DWORD ulMetadataSatelliteRosterIndex;
	DWORD ulManifestVersionMajor;
	DWORD ulManifestVersionMinor;
	DWORD ulPolicyVersionMajor;
	DWORD ulPolicyVersionMinor;
	DWORD ulAssemblyDirectoryNameLength;
	PCWSTR lpAssemblyEncodedAssemblyIdentity;
	PCWSTR lpAssemblyManifestPath;
	PCWSTR lpAssemblyPolicyPath;
	PCWSTR lpAssemblyDirectoryName;
	DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION* PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;
typedef enum
{
	ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
	ACTCTX_RUN_LEVEL_AS_INVOKER,
	ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
	ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
	ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;
typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
	DWORD ulFlags;
	ACTCTX_REQUESTED_RUN_LEVEL  RunLevel;
	DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION* PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;
typedef enum
{
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION,
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MAXVERSIONTESTED
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;
typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
	GUID Id;
	ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
	ULONGLONG MaxVersionTested;
} COMPATIBILITY_CONTEXT_ELEMENT, * PCOMPATIBILITY_CONTEXT_ELEMENT;
typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT* PCCOMPATIBILITY_CONTEXT_ELEMENT;
typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
	DWORD ElementCount;
	COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION* PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;
typedef struct _SUPPORTED_OS_INFO {
	WORD   MajorVersion;
	WORD   MinorVersion;
} SUPPORTED_OS_INFO, * PSUPPORTED_OS_INFO;
typedef struct _MAXVERSIONTESTED_INFO {
	ULONGLONG MaxVersionTested;
} MAXVERSIONTESTED_INFO, * PMAXVERSIONTESTED_INFO;
typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
	DWORD dwFlags;
	DWORD ulFormatVersion;
	DWORD ulAssemblyCount;
	DWORD ulRootManifestPathType;
	DWORD ulRootManifestPathChars;
	DWORD ulRootConfigurationPathType;
	DWORD ulRootConfigurationPathChars;
	DWORD ulAppDirPathType;
	DWORD ulAppDirPathChars;
	PCWSTR lpRootManifestPath;
	PCWSTR lpRootConfigurationPath;
	PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION* PCACTIVATION_CONTEXT_DETAILED_INFORMATION;
typedef struct _HARDWARE_COUNTER_DATA {
	HARDWARE_COUNTER_TYPE Type;
	DWORD Reserved;
	DWORD64 Value;
} HARDWARE_COUNTER_DATA, * PHARDWARE_COUNTER_DATA;
typedef struct _PERFORMANCE_DATA {
	WORD   Size;
	BYTE  Version;
	BYTE  HwCountersCount;
	DWORD ContextSwitchCount;
	DWORD64 WaitReasonBitMap;
	DWORD64 CycleTime;
	DWORD RetryCount;
	DWORD Reserved;
	HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, * PPERFORMANCE_DATA;
void
__stdcall
RtlGetDeviceFamilyInfoEnum(
	ULONGLONG* pullUAPInfo,
	DWORD* pulDeviceFamily,
	DWORD* pulDeviceForm
);
DWORD
__stdcall
RtlConvertDeviceFamilyInfoToString(
	PDWORD pulDeviceFamilyBufferSize,
	PDWORD pulDeviceFormBufferSize,
	PWSTR DeviceFamily,
	PWSTR DeviceForm
);
DWORD
__stdcall
RtlSwitchedVVI(
	PRTL_OSVERSIONINFOEXW VersionInfo,
	DWORD TypeMask,
	ULONGLONG  ConditionMask
);
typedef struct _EVENTLOGRECORD {
	DWORD  Length;
	DWORD  Reserved;
	DWORD  RecordNumber;
	DWORD  TimeGenerated;
	DWORD  TimeWritten;
	DWORD  EventID;
	WORD   EventType;
	WORD   NumStrings;
	WORD   EventCategory;
	WORD   ReservedFlags;
	DWORD  ClosingRecordNumber;
	DWORD  StringOffset;
	DWORD  UserSidLength;
	DWORD  UserSidOffset;
	DWORD  DataLength;
	DWORD  DataOffset;
} EVENTLOGRECORD, * PEVENTLOGRECORD;
struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, * PEVENTSFORLOGFILE;
struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, * PPACKEDEVENTINFO;
struct _EVENTSFORLOGFILE
{
	DWORD           ulSize;
	WCHAR           szLogicalLogFile[256];
	DWORD           ulNumRecords;
	EVENTLOGRECORD  pEventLogRecords[];
};
struct _PACKEDEVENTINFO
{
	DWORD               ulSize;
	DWORD               ulNumEventsForLogFile;
	DWORD               ulOffsets[];
};
typedef enum _CM_SERVICE_NODE_TYPE {
	DriverType = 0x00000001,
	FileSystemType = 0x00000002,
	Win32ServiceOwnProcess = 0x00000010,
	Win32ServiceShareProcess = 0x00000020,
	AdapterType = 0x00000004,
	RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;
typedef enum _CM_SERVICE_LOAD_TYPE {
	BootLoad = 0x00000000,
	SystemLoad = 0x00000001,
	AutoLoad = 0x00000002,
	DemandLoad = 0x00000003,
	DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;
typedef enum _CM_ERROR_CONTROL_TYPE {
	IgnoreError = 0x00000000,
	NormalError = 0x00000001,
	SevereError = 0x00000002,
	CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
typedef struct _TAPE_ERASE {
	DWORD Type;
	BOOLEAN Immediate;
} TAPE_ERASE, * PTAPE_ERASE;
typedef struct _TAPE_PREPARE {
	DWORD Operation;
	BOOLEAN Immediate;
} TAPE_PREPARE, * PTAPE_PREPARE;
typedef struct _TAPE_WRITE_MARKS {
	DWORD Type;
	DWORD Count;
	BOOLEAN Immediate;
} TAPE_WRITE_MARKS, * PTAPE_WRITE_MARKS;
typedef struct _TAPE_GET_POSITION {
	DWORD Type;
	DWORD Partition;
	LARGE_INTEGER Offset;
} TAPE_GET_POSITION, * PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION {
	DWORD Method;
	DWORD Partition;
	LARGE_INTEGER Offset;
	BOOLEAN Immediate;
} TAPE_SET_POSITION, * PTAPE_SET_POSITION;
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
	BOOLEAN ECC;
	BOOLEAN Compression;
	BOOLEAN DataPadding;
	BOOLEAN ReportSetmarks;
	DWORD DefaultBlockSize;
	DWORD MaximumBlockSize;
	DWORD MinimumBlockSize;
	DWORD MaximumPartitionCount;
	DWORD FeaturesLow;
	DWORD FeaturesHigh;
	DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, * PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS {
	BOOLEAN ECC;
	BOOLEAN Compression;
	BOOLEAN DataPadding;
	BOOLEAN ReportSetmarks;
	DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, * PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS {
	LARGE_INTEGER Capacity;
	LARGE_INTEGER Remaining;
	DWORD BlockSize;
	DWORD PartitionCount;
	BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, * PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS {
	DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, * PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _TAPE_CREATE_PARTITION {
	DWORD Method;
	DWORD Count;
	DWORD Size;
} TAPE_CREATE_PARTITION, * PTAPE_CREATE_PARTITION;
typedef struct _TAPE_WMI_OPERATIONS {
	DWORD Method;
	DWORD DataBufferSize;
	PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, * PTAPE_WMI_OPERATIONS;
typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
	TapeDriveProblemNone, TapeDriveReadWriteWarning,
	TapeDriveReadWriteError, TapeDriveReadWarning,
	TapeDriveWriteWarning, TapeDriveReadError,
	TapeDriveWriteError, TapeDriveHardwareError,
	TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
	TapeDriveTimetoClean, TapeDriveCleanDriveNow,
	TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;
typedef GUID UOW, * PUOW;
typedef GUID CRM_PROTOCOL_ID, * PCRM_PROTOCOL_ID;
typedef ULONG NOTIFICATION_MASK;
typedef struct _TRANSACTION_NOTIFICATION {
	PVOID         TransactionKey;
	ULONG         TransactionNotification;
	LARGE_INTEGER TmVirtualClock;
	ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, * PTRANSACTION_NOTIFICATION;
typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
	GUID   EnlistmentId;
	UOW    UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, * PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
	GUID TmIdentity;
	ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, * PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;
typedef ULONG SAVEPOINT_ID, * PSAVEPOINT_ID;
typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
	SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, * PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
	ULONG PropagationCookie;
	GUID  UOW;
	GUID  TmIdentity;
	ULONG BufferLength;
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, * PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;
typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
	ULONG MarshalCookie;
	GUID  UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, * PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;
typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, * PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;
typedef struct _KCRM_MARSHAL_HEADER {
	ULONG              VersionMajor;
	ULONG              VersionMinor;
	ULONG              NumProtocols;
	ULONG              Unused;
} KCRM_MARSHAL_HEADER, * PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;
typedef struct _KCRM_TRANSACTION_BLOB {
	UOW                UOW;
	GUID               TmIdentity;
	ULONG              IsolationLevel;
	ULONG              IsolationFlags;
	ULONG              Timeout;
	WCHAR              Description[64];
} KCRM_TRANSACTION_BLOB, * PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;
typedef struct _KCRM_PROTOCOL_BLOB {
	CRM_PROTOCOL_ID    ProtocolId;
	ULONG StaticInfoLength;
	ULONG              TransactionIdInfoLength;
	ULONG              Unused1;
	ULONG              Unused2;
} KCRM_PROTOCOL_BLOB, * PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;
typedef enum _TRANSACTION_OUTCOME {
	TransactionOutcomeUndetermined = 1,
	TransactionOutcomeCommitted,
	TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;
typedef enum _TRANSACTION_STATE {
	TransactionStateNormal = 1,
	TransactionStateIndoubt,
	TransactionStateCommittedNotify,
} TRANSACTION_STATE;
typedef struct _TRANSACTION_BASIC_INFORMATION {
	GUID    TransactionId;
	DWORD   State;
	DWORD   Outcome;
} TRANSACTION_BASIC_INFORMATION, * PTRANSACTION_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
	GUID    TmIdentity;
	LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, * PTRANSACTIONMANAGER_BASIC_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
	GUID  LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, * PTRANSACTIONMANAGER_LOG_INFORMATION;
typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
	DWORD LogPathLength;
	WCHAR LogPath[1];
} TRANSACTIONMANAGER_LOGPATH_INFORMATION, * PTRANSACTIONMANAGER_LOGPATH_INFORMATION;
typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
	ULONGLONG  LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, * PTRANSACTIONMANAGER_RECOVERY_INFORMATION;
typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
	GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, * PTRANSACTIONMANAGER_OLDEST_INFORMATION;
typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
	DWORD              IsolationLevel;
	DWORD              IsolationFlags;
	LARGE_INTEGER      Timeout;
	DWORD              Outcome;
	DWORD              DescriptionLength;
	WCHAR              Description[1];
} TRANSACTION_PROPERTIES_INFORMATION, * PTRANSACTION_PROPERTIES_INFORMATION;
typedef struct _TRANSACTION_BIND_INFORMATION {
	HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, * PTRANSACTION_BIND_INFORMATION;
typedef struct _TRANSACTION_ENLISTMENT_PAIR {
	GUID   EnlistmentId;
	GUID   ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, * PTRANSACTION_ENLISTMENT_PAIR;
typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
	DWORD                       NumberOfEnlistments;
	TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1];
} TRANSACTION_ENLISTMENTS_INFORMATION, * PTRANSACTION_ENLISTMENTS_INFORMATION;
typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
	TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, * PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;
typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
	GUID    ResourceManagerId;
	DWORD   DescriptionLength;
	WCHAR   Description[1];
} RESOURCEMANAGER_BASIC_INFORMATION, * PRESOURCEMANAGER_BASIC_INFORMATION;
typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
	HANDLE    IoCompletionPortHandle;
	ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, * PRESOURCEMANAGER_COMPLETION_INFORMATION;
typedef enum _TRANSACTION_INFORMATION_CLASS {
	TransactionBasicInformation,
	TransactionPropertiesInformation,
	TransactionEnlistmentInformation,
	TransactionSuperiorEnlistmentInformation
	,
	TransactionBindInformation,
	TransactionDTCPrivateInformation
	,
} TRANSACTION_INFORMATION_CLASS;
typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
	TransactionManagerBasicInformation,
	TransactionManagerLogInformation,
	TransactionManagerLogPathInformation,
	TransactionManagerRecoveryInformation = 4
	,
	TransactionManagerOnlineProbeInformation = 3,
	TransactionManagerOldestTransactionInformation = 5
} TRANSACTIONMANAGER_INFORMATION_CLASS;
typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
	ResourceManagerBasicInformation,
	ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;
typedef struct _ENLISTMENT_BASIC_INFORMATION {
	GUID    EnlistmentId;
	GUID    TransactionId;
	GUID    ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, * PENLISTMENT_BASIC_INFORMATION;
typedef struct _ENLISTMENT_CRM_INFORMATION {
	GUID   CrmTransactionManagerId;
	GUID   CrmResourceManagerId;
	GUID   CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, * PENLISTMENT_CRM_INFORMATION;
typedef enum _ENLISTMENT_INFORMATION_CLASS {
	EnlistmentBasicInformation,
	EnlistmentRecoveryInformation,
	EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;
typedef struct _TRANSACTION_LIST_ENTRY {
	UOW    UOW;
} TRANSACTION_LIST_ENTRY, * PTRANSACTION_LIST_ENTRY;
typedef struct _TRANSACTION_LIST_INFORMATION {
	DWORD   NumberOfTransactions;
	TRANSACTION_LIST_ENTRY TransactionInformation[1];
} TRANSACTION_LIST_INFORMATION, * PTRANSACTION_LIST_INFORMATION;
typedef enum _KTMOBJECT_TYPE {
	KTMOBJECT_TRANSACTION,
	KTMOBJECT_TRANSACTION_MANAGER,
	KTMOBJECT_RESOURCE_MANAGER,
	KTMOBJECT_ENLISTMENT,
	KTMOBJECT_INVALID
} KTMOBJECT_TYPE, * PKTMOBJECT_TYPE;
typedef struct _KTMOBJECT_CURSOR {
	GUID    LastQuery;
	DWORD   ObjectIdCount;
	GUID    ObjectIds[1];
} KTMOBJECT_CURSOR, * PKTMOBJECT_CURSOR;
typedef DWORD TP_VERSION, * PTP_VERSION;
typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, * PTP_CALLBACK_INSTANCE;
typedef void(__stdcall* PTP_SIMPLE_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID                 Context
	);
typedef struct _TP_POOL TP_POOL, * PTP_POOL;
typedef enum _TP_CALLBACK_PRIORITY {
	TP_CALLBACK_PRIORITY_HIGH,
	TP_CALLBACK_PRIORITY_NORMAL,
	TP_CALLBACK_PRIORITY_LOW,
	TP_CALLBACK_PRIORITY_INVALID,
	TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;
typedef struct _TP_POOL_STACK_INFORMATION {
	SIZE_T StackReserve;
	SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, * PTP_POOL_STACK_INFORMATION;
typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, * PTP_CLEANUP_GROUP;
typedef void(__stdcall* PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
	PVOID ObjectContext,
	PVOID CleanupContext
	);
typedef struct _TP_CALLBACK_ENVIRON_V3 {
	TP_VERSION                         Version;
	PTP_POOL                           Pool;
	PTP_CLEANUP_GROUP                  CleanupGroup;
	PTP_CLEANUP_GROUP_CANCEL_CALLBACK  CleanupGroupCancelCallback;
	PVOID                              RaceDll;
	struct _ACTIVATION_CONTEXT* ActivationContext;
	PTP_SIMPLE_CALLBACK                FinalizationCallback;
	union {
		DWORD                          Flags;
		struct {
			DWORD                      LongFunction : 1;
			DWORD                      Persistent : 1;
			DWORD                      Private : 30;
		} s;
	} u;
	TP_CALLBACK_PRIORITY               CallbackPriority;
	DWORD                              Size;
} TP_CALLBACK_ENVIRON_V3;
typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, * PTP_CALLBACK_ENVIRON;

void
TpInitializeCallbackEnviron(
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
TpSetCallbackThreadpool(
	PTP_CALLBACK_ENVIRON CallbackEnviron,
	PTP_POOL             Pool
);

void
TpSetCallbackCleanupGroup(
	PTP_CALLBACK_ENVIRON              CallbackEnviron,
	PTP_CLEANUP_GROUP                 CleanupGroup,
	PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
);

void
TpSetCallbackActivationContext(
	PTP_CALLBACK_ENVIRON CallbackEnviron,
	struct _ACTIVATION_CONTEXT* ActivationContext
);

void
TpSetCallbackNoActivationContext(
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
TpSetCallbackLongFunction(
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
TpSetCallbackRaceWithDll(
	PTP_CALLBACK_ENVIRON CallbackEnviron,
	PVOID                DllHandle
);

void
TpSetCallbackFinalizationCallback(
	PTP_CALLBACK_ENVIRON CallbackEnviron,
	PTP_SIMPLE_CALLBACK  FinalizationCallback
);

void
TpSetCallbackPriority(
	PTP_CALLBACK_ENVIRON CallbackEnviron,
	TP_CALLBACK_PRIORITY Priority
);

void
TpSetCallbackPersistent(
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
TpDestroyCallbackEnviron(
	PTP_CALLBACK_ENVIRON CallbackEnviron
);
typedef struct _TP_WORK TP_WORK, * PTP_WORK;
typedef void(__stdcall* PTP_WORK_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID                 Context,
	PTP_WORK              Work
	);
typedef struct _TP_TIMER TP_TIMER, * PTP_TIMER;
typedef void(__stdcall* PTP_TIMER_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID                 Context,
	PTP_TIMER             Timer
	);
typedef DWORD    TP_WAIT_RESULT;
typedef struct _TP_WAIT TP_WAIT, * PTP_WAIT;
typedef void(__stdcall* PTP_WAIT_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID                 Context,
	PTP_WAIT              Wait,
	TP_WAIT_RESULT        WaitResult
	);
typedef struct _TP_IO TP_IO, * PTP_IO;

struct _TEB*
	NtCurrentTeb(
		void
	);

PVOID
GetCurrentFiber(
	void
);

PVOID
GetFiberData(
	void
);
typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;
typedef HANDLE* SPHANDLE;
typedef HANDLE* LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;
typedef INT_PTR(__stdcall* FARPROC)();
typedef INT_PTR(__stdcall* NEARPROC)();
typedef INT_PTR(__stdcall* PROC)();
typedef WORD                ATOM;
struct HKEY__ { int unused; }; typedef struct HKEY__* HKEY;
typedef HKEY* PHKEY;
struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__* HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__* HINSTANCE;
typedef HINSTANCE HMODULE;
struct HRGN__ { int unused; }; typedef struct HRGN__* HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__* HRSRC;
struct HSPRITE__ { int unused; }; typedef struct HSPRITE__* HSPRITE;
struct HLSURF__ { int unused; }; typedef struct HLSURF__* HLSURF;
struct HSTR__ { int unused; }; typedef struct HSTR__* HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__* HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__* HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__* HKL;
typedef int HFILE;
typedef struct _FILETIME {
	DWORD dwLowDateTime;
	DWORD dwHighDateTime;
} FILETIME, * PFILETIME, * LPFILETIME;
struct HWND__ { int unused; }; typedef struct HWND__* HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__* HHOOK;
typedef void* HGDIOBJ;
struct HACCEL__ { int unused; }; typedef struct HACCEL__* HACCEL;
struct HBITMAP__ { int unused; }; typedef struct HBITMAP__* HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__* HBRUSH;
struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__* HCOLORSPACE;
struct HDC__ { int unused; }; typedef struct HDC__* HDC;
struct HGLRC__ { int unused; }; typedef struct HGLRC__* HGLRC;
struct HDESK__ { int unused; }; typedef struct HDESK__* HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__* HENHMETAFILE;
struct HFONT__ { int unused; }; typedef struct HFONT__* HFONT;
struct HICON__ { int unused; }; typedef struct HICON__* HICON;
struct HMENU__ { int unused; }; typedef struct HMENU__* HMENU;
struct HPALETTE__ { int unused; }; typedef struct HPALETTE__* HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__* HPEN;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__* HWINEVENTHOOK;
struct HMONITOR__ { int unused; }; typedef struct HMONITOR__* HMONITOR;
struct HUMPD__ { int unused; }; typedef struct HUMPD__* HUMPD;
typedef HICON HCURSOR;
typedef DWORD   COLORREF;
typedef DWORD* LPCOLORREF;
typedef struct tagRECT
{
	LONG    left;
	LONG    top;
	LONG    right;
	LONG    bottom;
} RECT, * PRECT, * NPRECT, * LPRECT;
typedef const RECT* LPCRECT;
typedef struct _RECTL
{
	LONG    left;
	LONG    top;
	LONG    right;
	LONG    bottom;
} RECTL, * PRECTL, * LPRECTL;
typedef const RECTL* LPCRECTL;
typedef struct tagPOINT
{
	LONG  x;
	LONG  y;
} POINT, * PPOINT, * NPPOINT, * LPPOINT;
typedef struct _POINTL
{
	LONG  x;
	LONG  y;
} POINTL, * PPOINTL;
typedef struct tagSIZE
{
	LONG        cx;
	LONG        cy;
} SIZE, * PSIZE, * LPSIZE;
typedef SIZE               SIZEL;
typedef SIZE* PSIZEL, * LPSIZEL;
typedef struct tagPOINTS
{
	SHORT   x;
	SHORT   y;
} POINTS, * PPOINTS, * LPPOINTS;
typedef struct APP_LOCAL_DEVICE_ID
{
	BYTE value[32];
} APP_LOCAL_DEVICE_ID;
struct DPI_AWARENESS_CONTEXT__ { int unused; }; typedef struct DPI_AWARENESS_CONTEXT__* DPI_AWARENESS_CONTEXT;
typedef enum DPI_AWARENESS {
	DPI_AWARENESS_INVALID = -1,
	DPI_AWARENESS_UNAWARE = 0,
	DPI_AWARENESS_SYSTEM_AWARE = 1,
	DPI_AWARENESS_PER_MONITOR_AWARE = 2
} DPI_AWARENESS;
typedef enum DPI_HOSTING_BEHAVIOR {
	DPI_HOSTING_BEHAVIOR_INVALID = -1,
	DPI_HOSTING_BEHAVIOR_DEFAULT = 0,
	DPI_HOSTING_BEHAVIOR_MIXED = 1
} DPI_HOSTING_BEHAVIOR;
typedef struct _SECURITY_ATTRIBUTES {
	DWORD nLength;
	LPVOID lpSecurityDescriptor;
	BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, * PSECURITY_ATTRIBUTES, * LPSECURITY_ATTRIBUTES;
typedef struct _OVERLAPPED {
	ULONG_PTR Internal;
	ULONG_PTR InternalHigh;
	union {
		struct {
			DWORD Offset;
			DWORD OffsetHigh;
		};
		PVOID Pointer;
	};
	HANDLE  hEvent;
} OVERLAPPED, * LPOVERLAPPED;
typedef struct _OVERLAPPED_ENTRY {
	ULONG_PTR lpCompletionKey;
	LPOVERLAPPED lpOverlapped;
	ULONG_PTR Internal;
	DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, * LPOVERLAPPED_ENTRY;
typedef struct _SYSTEMTIME {
	WORD wYear;
	WORD wMonth;
	WORD wDayOfWeek;
	WORD wDay;
	WORD wHour;
	WORD wMinute;
	WORD wSecond;
	WORD wMilliseconds;
} SYSTEMTIME, * PSYSTEMTIME, * LPSYSTEMTIME;
typedef struct _WIN32_FIND_DATAA {
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD dwReserved0;
	DWORD dwReserved1;
	CHAR   cFileName[260];
	CHAR   cAlternateFileName[14];
} WIN32_FIND_DATAA, * PWIN32_FIND_DATAA, * LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD dwReserved0;
	DWORD dwReserved1;
	WCHAR  cFileName[260];
	WCHAR  cAlternateFileName[14];
} WIN32_FIND_DATAW, * PWIN32_FIND_DATAW, * LPWIN32_FIND_DATAW;
typedef WIN32_FIND_DATAW WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAW PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAW LPWIN32_FIND_DATA;
typedef enum _FINDEX_INFO_LEVELS {
	FindExInfoStandard,
	FindExInfoBasic,
	FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;
typedef enum _FINDEX_SEARCH_OPS {
	FindExSearchNameMatch,
	FindExSearchLimitToDirectories,
	FindExSearchLimitToDevices,
	FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
typedef enum _READ_DIRECTORY_NOTIFY_INFORMATION_CLASS {
	ReadDirectoryNotifyInformation = 1,
	ReadDirectoryNotifyExtendedInformation
} READ_DIRECTORY_NOTIFY_INFORMATION_CLASS, * PREAD_DIRECTORY_NOTIFY_INFORMATION_CLASS;
typedef enum _GET_FILEEX_INFO_LEVELS {
	GetFileExInfoStandard,
	GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;
typedef enum _FILE_INFO_BY_HANDLE_CLASS {
	FileBasicInfo,
	FileStandardInfo,
	FileNameInfo,
	FileRenameInfo,
	FileDispositionInfo,
	FileAllocationInfo,
	FileEndOfFileInfo,
	FileStreamInfo,
	FileCompressionInfo,
	FileAttributeTagInfo,
	FileIdBothDirectoryInfo,
	FileIdBothDirectoryRestartInfo,
	FileIoPriorityHintInfo,
	FileRemoteProtocolInfo,
	FileFullDirectoryInfo,
	FileFullDirectoryRestartInfo,
	FileStorageInfo,
	FileAlignmentInfo,
	FileIdInfo,
	FileIdExtdDirectoryInfo,
	FileIdExtdDirectoryRestartInfo,
	FileDispositionInfoEx,
	FileRenameInfoEx,
	FileCaseSensitiveInfo,
	FileNormalizedNameInfo,
	MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, * PFILE_INFO_BY_HANDLE_CLASS;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef
void
(__stdcall* LPOVERLAPPED_COMPLETION_ROUTINE)(
	DWORD dwErrorCode,
	DWORD dwNumberOfBytesTransfered,
	LPOVERLAPPED lpOverlapped
	);
typedef struct _PROCESS_HEAP_ENTRY {
	PVOID lpData;
	DWORD cbData;
	BYTE cbOverhead;
	BYTE iRegionIndex;
	WORD wFlags;
	union {
		struct {
			HANDLE hMem;
			DWORD dwReserved[3];
		} Block;
		struct {
			DWORD dwCommittedSize;
			DWORD dwUnCommittedSize;
			LPVOID lpFirstBlock;
			LPVOID lpLastBlock;
		} Region;
	};
} PROCESS_HEAP_ENTRY, * LPPROCESS_HEAP_ENTRY, * PPROCESS_HEAP_ENTRY;
typedef struct _REASON_CONTEXT {
	ULONG Version;
	DWORD Flags;
	union {
		struct {
			HMODULE LocalizedReasonModule;
			ULONG LocalizedReasonId;
			ULONG ReasonStringCount;
			LPWSTR* ReasonStrings;
		} Detailed;
		LPWSTR SimpleReasonString;
	} Reason;
} REASON_CONTEXT, * PREASON_CONTEXT;
typedef DWORD(__stdcall* PTHREAD_START_ROUTINE)(
	LPVOID lpThreadParameter
	);
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
typedef LPVOID(__stdcall* PENCLAVE_ROUTINE)(
	LPVOID lpThreadParameter
	);
typedef PENCLAVE_ROUTINE LPENCLAVE_ROUTINE;
typedef struct _EXCEPTION_DEBUG_INFO {
	EXCEPTION_RECORD ExceptionRecord;
	DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, * LPEXCEPTION_DEBUG_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO {
	HANDLE hThread;
	LPVOID lpThreadLocalBase;
	LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, * LPCREATE_THREAD_DEBUG_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO {
	HANDLE hFile;
	HANDLE hProcess;
	HANDLE hThread;
	LPVOID lpBaseOfImage;
	DWORD dwDebugInfoFileOffset;
	DWORD nDebugInfoSize;
	LPVOID lpThreadLocalBase;
	LPTHREAD_START_ROUTINE lpStartAddress;
	LPVOID lpImageName;
	WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, * LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _EXIT_THREAD_DEBUG_INFO {
	DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, * LPEXIT_THREAD_DEBUG_INFO;
typedef struct _EXIT_PROCESS_DEBUG_INFO {
	DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, * LPEXIT_PROCESS_DEBUG_INFO;
typedef struct _LOAD_DLL_DEBUG_INFO {
	HANDLE hFile;
	LPVOID lpBaseOfDll;
	DWORD dwDebugInfoFileOffset;
	DWORD nDebugInfoSize;
	LPVOID lpImageName;
	WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, * LPLOAD_DLL_DEBUG_INFO;
typedef struct _UNLOAD_DLL_DEBUG_INFO {
	LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, * LPUNLOAD_DLL_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO {
	LPSTR lpDebugStringData;
	WORD fUnicode;
	WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, * LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _RIP_INFO {
	DWORD dwError;
	DWORD dwType;
} RIP_INFO, * LPRIP_INFO;
typedef struct _DEBUG_EVENT {
	DWORD dwDebugEventCode;
	DWORD dwProcessId;
	DWORD dwThreadId;
	union {
		EXCEPTION_DEBUG_INFO Exception;
		CREATE_THREAD_DEBUG_INFO CreateThread;
		CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
		EXIT_THREAD_DEBUG_INFO ExitThread;
		EXIT_PROCESS_DEBUG_INFO ExitProcess;
		LOAD_DLL_DEBUG_INFO LoadDll;
		UNLOAD_DLL_DEBUG_INFO UnloadDll;
		OUTPUT_DEBUG_STRING_INFO DebugString;
		RIP_INFO RipInfo;
	} u;
} DEBUG_EVENT, * LPDEBUG_EVENT;
typedef PCONTEXT LPCONTEXT;
BOOL
__stdcall
IsApiSetImplemented(
	PCSTR Contract
);

BOOL
__stdcall
SetEnvironmentStringsW(
	LPWCH NewEnvironment
);

HANDLE
__stdcall
GetStdHandle(
	DWORD nStdHandle
);

BOOL
__stdcall
SetStdHandle(
	DWORD nStdHandle,
	HANDLE hHandle
);

BOOL
__stdcall
SetStdHandleEx(
	DWORD nStdHandle,
	HANDLE hHandle,
	PHANDLE phPrevValue
);

LPSTR
__stdcall
GetCommandLineA(
	void
);

LPWSTR
__stdcall
GetCommandLineW(
	void
);

LPCH
__stdcall
GetEnvironmentStrings(
	void
);

LPWCH
__stdcall
GetEnvironmentStringsW(
	void
);

BOOL
__stdcall
FreeEnvironmentStringsA(
	LPCH penv
);

BOOL
__stdcall
FreeEnvironmentStringsW(
	LPWCH penv
);

DWORD
__stdcall
GetEnvironmentVariableA(
	LPCSTR lpName,
	LPSTR lpBuffer,
	DWORD nSize
);

DWORD
__stdcall
GetEnvironmentVariableW(
	LPCWSTR lpName,
	LPWSTR lpBuffer,
	DWORD nSize
);

BOOL
__stdcall
SetEnvironmentVariableA(
	LPCSTR lpName,
	LPCSTR lpValue
);

BOOL
__stdcall
SetEnvironmentVariableW(
	LPCWSTR lpName,
	LPCWSTR lpValue
);

DWORD
__stdcall
ExpandEnvironmentStringsA(
	LPCSTR lpSrc,
	LPSTR lpDst,
	DWORD nSize
);

DWORD
__stdcall
ExpandEnvironmentStringsW(
	LPCWSTR lpSrc,
	LPWSTR lpDst,
	DWORD nSize
);

BOOL
__stdcall
SetCurrentDirectoryA(
	LPCSTR lpPathName
);

BOOL
__stdcall
SetCurrentDirectoryW(
	LPCWSTR lpPathName
);

DWORD
__stdcall
GetCurrentDirectoryA(
	DWORD nBufferLength,
	LPSTR lpBuffer
);

DWORD
__stdcall
GetCurrentDirectoryW(
	DWORD nBufferLength,
	LPWSTR lpBuffer
);

DWORD
__stdcall
SearchPathW(
	LPCWSTR lpPath,
	LPCWSTR lpFileName,
	LPCWSTR lpExtension,
	DWORD nBufferLength,
	LPWSTR lpBuffer,
	LPWSTR* lpFilePart
);

DWORD
__stdcall
SearchPathA(
	LPCSTR lpPath,
	LPCSTR lpFileName,
	LPCSTR lpExtension,
	DWORD nBufferLength,
	LPSTR lpBuffer,
	LPSTR* lpFilePart
);

BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
	LPCSTR ExeName
);

BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
	LPCWSTR ExeName
);

LONG
__stdcall
CompareFileTime(
	const FILETIME* lpFileTime1,
	const FILETIME* lpFileTime2
);

BOOL
__stdcall
CreateDirectoryA(
	LPCSTR lpPathName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
CreateDirectoryW(
	LPCWSTR lpPathName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

HANDLE
__stdcall
CreateFileA(
	LPCSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD dwCreationDisposition,
	DWORD dwFlagsAndAttributes,
	HANDLE hTemplateFile
);

HANDLE
__stdcall
CreateFileW(
	LPCWSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD dwCreationDisposition,
	DWORD dwFlagsAndAttributes,
	HANDLE hTemplateFile
);

BOOL
__stdcall
DefineDosDeviceW(
	DWORD dwFlags,
	LPCWSTR lpDeviceName,
	LPCWSTR lpTargetPath
);

BOOL
__stdcall
DeleteFileA(
	LPCSTR lpFileName
);

BOOL
__stdcall
DeleteFileW(
	LPCWSTR lpFileName
);

BOOL
__stdcall
DeleteVolumeMountPointW(
	LPCWSTR lpszVolumeMountPoint
);

BOOL
__stdcall
FileTimeToLocalFileTime(
	const FILETIME* lpFileTime,
	LPFILETIME lpLocalFileTime
);

BOOL
__stdcall
FindClose(
	HANDLE hFindFile
);

BOOL
__stdcall
FindCloseChangeNotification(
	HANDLE hChangeHandle
);

HANDLE
__stdcall
FindFirstChangeNotificationA(
	LPCSTR lpPathName,
	BOOL bWatchSubtree,
	DWORD dwNotifyFilter
);

HANDLE
__stdcall
FindFirstChangeNotificationW(
	LPCWSTR lpPathName,
	BOOL bWatchSubtree,
	DWORD dwNotifyFilter
);

HANDLE
__stdcall
FindFirstFileA(
	LPCSTR lpFileName,
	LPWIN32_FIND_DATAA lpFindFileData
);

HANDLE
__stdcall
FindFirstFileW(
	LPCWSTR lpFileName,
	LPWIN32_FIND_DATAW lpFindFileData
);

HANDLE
__stdcall
FindFirstFileExA(
	LPCSTR lpFileName,
	FINDEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFindFileData,
	FINDEX_SEARCH_OPS fSearchOp,
	LPVOID lpSearchFilter,
	DWORD dwAdditionalFlags
);

HANDLE
__stdcall
FindFirstFileExW(
	LPCWSTR lpFileName,
	FINDEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFindFileData,
	FINDEX_SEARCH_OPS fSearchOp,
	LPVOID lpSearchFilter,
	DWORD dwAdditionalFlags
);

HANDLE
__stdcall
FindFirstVolumeW(
	LPWSTR lpszVolumeName,
	DWORD cchBufferLength
);

BOOL
__stdcall
FindNextChangeNotification(
	HANDLE hChangeHandle
);

BOOL
__stdcall
FindNextFileA(
	HANDLE hFindFile,
	LPWIN32_FIND_DATAA lpFindFileData
);

BOOL
__stdcall
FindNextFileW(
	HANDLE hFindFile,
	LPWIN32_FIND_DATAW lpFindFileData
);

BOOL
__stdcall
FindNextVolumeW(
	HANDLE hFindVolume,
	LPWSTR lpszVolumeName,
	DWORD cchBufferLength
);

BOOL
__stdcall
FindVolumeClose(
	HANDLE hFindVolume
);

BOOL
__stdcall
FlushFileBuffers(
	HANDLE hFile
);

BOOL
__stdcall
GetDiskFreeSpaceA(
	LPCSTR lpRootPathName,
	LPDWORD lpSectorsPerCluster,
	LPDWORD lpBytesPerSector,
	LPDWORD lpNumberOfFreeClusters,
	LPDWORD lpTotalNumberOfClusters
);

BOOL
__stdcall
GetDiskFreeSpaceW(
	LPCWSTR lpRootPathName,
	LPDWORD lpSectorsPerCluster,
	LPDWORD lpBytesPerSector,
	LPDWORD lpNumberOfFreeClusters,
	LPDWORD lpTotalNumberOfClusters
);

BOOL
__stdcall
GetDiskFreeSpaceExA(
	LPCSTR lpDirectoryName,
	PULARGE_INTEGER lpFreeBytesAvailableToCaller,
	PULARGE_INTEGER lpTotalNumberOfBytes,
	PULARGE_INTEGER lpTotalNumberOfFreeBytes
);

BOOL
__stdcall
GetDiskFreeSpaceExW(
	LPCWSTR lpDirectoryName,
	PULARGE_INTEGER lpFreeBytesAvailableToCaller,
	PULARGE_INTEGER lpTotalNumberOfBytes,
	PULARGE_INTEGER lpTotalNumberOfFreeBytes
);
typedef struct DISK_SPACE_INFORMATION {
	ULONGLONG ActualTotalAllocationUnits;
	ULONGLONG ActualAvailableAllocationUnits;
	ULONGLONG ActualPoolUnavailableAllocationUnits;
	ULONGLONG CallerTotalAllocationUnits;
	ULONGLONG CallerAvailableAllocationUnits;
	ULONGLONG CallerPoolUnavailableAllocationUnits;
	ULONGLONG UsedAllocationUnits;
	ULONGLONG TotalReservedAllocationUnits;
	ULONGLONG VolumeStorageReserveAllocationUnits;
	ULONGLONG AvailableCommittedAllocationUnits;
	ULONGLONG PoolAvailableAllocationUnits;
	DWORD SectorsPerAllocationUnit;
	DWORD BytesPerSector;
} DISK_SPACE_INFORMATION;

HRESULT
__stdcall
GetDiskSpaceInformationA(
	LPCSTR rootPath,
	DISK_SPACE_INFORMATION* diskSpaceInfo
);

HRESULT
__stdcall
GetDiskSpaceInformationW(
	LPCWSTR rootPath,
	DISK_SPACE_INFORMATION* diskSpaceInfo
);

UINT
__stdcall
GetDriveTypeA(
	LPCSTR lpRootPathName
);

UINT
__stdcall
GetDriveTypeW(
	LPCWSTR lpRootPathName
);
typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, * LPWIN32_FILE_ATTRIBUTE_DATA;

DWORD
__stdcall
GetFileAttributesA(
	LPCSTR lpFileName
);

DWORD
__stdcall
GetFileAttributesW(
	LPCWSTR lpFileName
);

BOOL
__stdcall
GetFileAttributesExA(
	LPCSTR lpFileName,
	GET_FILEEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFileInformation
);

BOOL
__stdcall
GetFileAttributesExW(
	LPCWSTR lpFileName,
	GET_FILEEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFileInformation
);
typedef struct _BY_HANDLE_FILE_INFORMATION {
	DWORD dwFileAttributes;
	FILETIME ftCreationTime;
	FILETIME ftLastAccessTime;
	FILETIME ftLastWriteTime;
	DWORD dwVolumeSerialNumber;
	DWORD nFileSizeHigh;
	DWORD nFileSizeLow;
	DWORD nNumberOfLinks;
	DWORD nFileIndexHigh;
	DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, * PBY_HANDLE_FILE_INFORMATION, * LPBY_HANDLE_FILE_INFORMATION;

BOOL
__stdcall
GetFileInformationByHandle(
	HANDLE hFile,
	LPBY_HANDLE_FILE_INFORMATION lpFileInformation
);

DWORD
__stdcall
GetFileSize(
	HANDLE hFile,
	LPDWORD lpFileSizeHigh
);

BOOL
__stdcall
GetFileSizeEx(
	HANDLE hFile,
	PLARGE_INTEGER lpFileSize
);

DWORD
__stdcall
GetFileType(
	HANDLE hFile
);

DWORD
__stdcall
GetFinalPathNameByHandleA(
	HANDLE hFile,
	LPSTR lpszFilePath,
	DWORD cchFilePath,
	DWORD dwFlags
);

DWORD
__stdcall
GetFinalPathNameByHandleW(
	HANDLE hFile,
	LPWSTR lpszFilePath,
	DWORD cchFilePath,
	DWORD dwFlags
);

BOOL
__stdcall
GetFileTime(
	HANDLE hFile,
	LPFILETIME lpCreationTime,
	LPFILETIME lpLastAccessTime,
	LPFILETIME lpLastWriteTime
);

DWORD
__stdcall
GetFullPathNameW(
	LPCWSTR lpFileName,
	DWORD nBufferLength,
	LPWSTR lpBuffer,
	LPWSTR* lpFilePart
);

DWORD
__stdcall
GetFullPathNameA(
	LPCSTR lpFileName,
	DWORD nBufferLength,
	LPSTR lpBuffer,
	LPSTR* lpFilePart
);

DWORD
__stdcall
GetLogicalDrives(
	void
);

DWORD
__stdcall
GetLogicalDriveStringsW(
	DWORD nBufferLength,
	LPWSTR lpBuffer
);

DWORD
__stdcall
GetLongPathNameA(
	LPCSTR lpszShortPath,
	LPSTR lpszLongPath,
	DWORD cchBuffer
);

DWORD
__stdcall
GetLongPathNameW(
	LPCWSTR lpszShortPath,
	LPWSTR lpszLongPath,
	DWORD cchBuffer
);

DWORD
__stdcall
GetShortPathNameW(
	LPCWSTR lpszLongPath,
	LPWSTR lpszShortPath,
	DWORD cchBuffer
);

UINT
__stdcall
GetTempFileNameW(
	LPCWSTR lpPathName,
	LPCWSTR lpPrefixString,
	UINT uUnique,
	LPWSTR lpTempFileName
);

BOOL
__stdcall
GetVolumeInformationByHandleW(
	HANDLE hFile,
	LPWSTR lpVolumeNameBuffer,
	DWORD nVolumeNameSize,
	LPDWORD lpVolumeSerialNumber,
	LPDWORD lpMaximumComponentLength,
	LPDWORD lpFileSystemFlags,
	LPWSTR lpFileSystemNameBuffer,
	DWORD nFileSystemNameSize
);

BOOL
__stdcall
GetVolumeInformationW(
	LPCWSTR lpRootPathName,
	LPWSTR lpVolumeNameBuffer,
	DWORD nVolumeNameSize,
	LPDWORD lpVolumeSerialNumber,
	LPDWORD lpMaximumComponentLength,
	LPDWORD lpFileSystemFlags,
	LPWSTR lpFileSystemNameBuffer,
	DWORD nFileSystemNameSize
);

BOOL
__stdcall
GetVolumePathNameW(
	LPCWSTR lpszFileName,
	LPWSTR lpszVolumePathName,
	DWORD cchBufferLength
);

BOOL
__stdcall
LocalFileTimeToFileTime(
	const FILETIME* lpLocalFileTime,
	LPFILETIME lpFileTime
);

BOOL
__stdcall
LockFile(
	HANDLE hFile,
	DWORD dwFileOffsetLow,
	DWORD dwFileOffsetHigh,
	DWORD nNumberOfBytesToLockLow,
	DWORD nNumberOfBytesToLockHigh
);

BOOL
__stdcall
LockFileEx(
	HANDLE hFile,
	DWORD dwFlags,
	DWORD dwReserved,
	DWORD nNumberOfBytesToLockLow,
	DWORD nNumberOfBytesToLockHigh,
	LPOVERLAPPED lpOverlapped
);

DWORD
__stdcall
QueryDosDeviceW(
	LPCWSTR lpDeviceName,
	LPWSTR lpTargetPath,
	DWORD ucchMax
);

BOOL
__stdcall
ReadFile(
	HANDLE hFile,
	LPVOID lpBuffer,
	DWORD nNumberOfBytesToRead,
	LPDWORD lpNumberOfBytesRead,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
ReadFileEx(
	HANDLE hFile,
	LPVOID lpBuffer,
	DWORD nNumberOfBytesToRead,
	LPOVERLAPPED lpOverlapped,
	LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
);

BOOL
__stdcall
ReadFileScatter(
	HANDLE hFile,
	FILE_SEGMENT_ELEMENT aSegmentArray[],
	DWORD nNumberOfBytesToRead,
	LPDWORD lpReserved,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
RemoveDirectoryA(
	LPCSTR lpPathName
);

BOOL
__stdcall
RemoveDirectoryW(
	LPCWSTR lpPathName
);

BOOL
__stdcall
SetEndOfFile(
	HANDLE hFile
);

BOOL
__stdcall
SetFileAttributesA(
	LPCSTR lpFileName,
	DWORD dwFileAttributes
);

BOOL
__stdcall
SetFileAttributesW(
	LPCWSTR lpFileName,
	DWORD dwFileAttributes
);

BOOL
__stdcall
SetFileInformationByHandle(
	HANDLE hFile,
	FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
	LPVOID lpFileInformation,
	DWORD dwBufferSize
);

DWORD
__stdcall
SetFilePointer(
	HANDLE hFile,
	LONG lDistanceToMove,
	PLONG lpDistanceToMoveHigh,
	DWORD dwMoveMethod
);

BOOL
__stdcall
SetFilePointerEx(
	HANDLE hFile,
	LARGE_INTEGER liDistanceToMove,
	PLARGE_INTEGER lpNewFilePointer,
	DWORD dwMoveMethod
);

BOOL
__stdcall
SetFileTime(
	HANDLE hFile,
	const FILETIME* lpCreationTime,
	const FILETIME* lpLastAccessTime,
	const FILETIME* lpLastWriteTime
);

BOOL
__stdcall
SetFileValidData(
	HANDLE hFile,
	LONGLONG ValidDataLength
);

BOOL
__stdcall
UnlockFile(
	HANDLE hFile,
	DWORD dwFileOffsetLow,
	DWORD dwFileOffsetHigh,
	DWORD nNumberOfBytesToUnlockLow,
	DWORD nNumberOfBytesToUnlockHigh
);

BOOL
__stdcall
UnlockFileEx(
	HANDLE hFile,
	DWORD dwReserved,
	DWORD nNumberOfBytesToUnlockLow,
	DWORD nNumberOfBytesToUnlockHigh,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
WriteFile(
	HANDLE hFile,
	LPCVOID lpBuffer,
	DWORD nNumberOfBytesToWrite,
	LPDWORD lpNumberOfBytesWritten,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
WriteFileEx(
	HANDLE hFile,
	LPCVOID lpBuffer,
	DWORD nNumberOfBytesToWrite,
	LPOVERLAPPED lpOverlapped,
	LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
);

BOOL
__stdcall
WriteFileGather(
	HANDLE hFile,
	FILE_SEGMENT_ELEMENT aSegmentArray[],
	DWORD nNumberOfBytesToWrite,
	LPDWORD lpReserved,
	LPOVERLAPPED lpOverlapped
);

DWORD
__stdcall
GetTempPathW(
	DWORD nBufferLength,
	LPWSTR lpBuffer
);

BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
	LPCWSTR lpszVolumeMountPoint,
	LPWSTR lpszVolumeName,
	DWORD cchBufferLength
);

BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
	LPCWSTR lpszVolumeName,
	LPWCH lpszVolumePathNames,
	DWORD cchBufferLength,
	PDWORD lpcchReturnLength
);
typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
	DWORD dwSize;
	DWORD dwFileAttributes;
	DWORD dwFileFlags;
	DWORD dwSecurityQosFlags;
	LPSECURITY_ATTRIBUTES lpSecurityAttributes;
	HANDLE hTemplateFile;
} CREATEFILE2_EXTENDED_PARAMETERS, * PCREATEFILE2_EXTENDED_PARAMETERS, * LPCREATEFILE2_EXTENDED_PARAMETERS;

HANDLE
__stdcall
CreateFile2(
	LPCWSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	DWORD dwCreationDisposition,
	LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
);

BOOL
__stdcall
SetFileIoOverlappedRange(
	HANDLE FileHandle,
	PUCHAR OverlappedRangeStart,
	ULONG Length
);

DWORD
__stdcall
GetCompressedFileSizeA(
	LPCSTR lpFileName,
	LPDWORD lpFileSizeHigh
);

DWORD
__stdcall
GetCompressedFileSizeW(
	LPCWSTR lpFileName,
	LPDWORD lpFileSizeHigh
);
typedef enum _STREAM_INFO_LEVELS {
	FindStreamInfoStandard,
	FindStreamInfoMaxInfoLevel
} STREAM_INFO_LEVELS;
typedef struct _WIN32_FIND_STREAM_DATA {
	LARGE_INTEGER StreamSize;
	WCHAR cStreamName[260 + 36];
} WIN32_FIND_STREAM_DATA, * PWIN32_FIND_STREAM_DATA;

HANDLE
__stdcall
FindFirstStreamW(
	LPCWSTR lpFileName,
	STREAM_INFO_LEVELS InfoLevel,
	LPVOID lpFindStreamData,
	DWORD dwFlags
);

BOOL
__stdcall
FindNextStreamW(
	HANDLE hFindStream,
	LPVOID lpFindStreamData
);

BOOL
__stdcall
AreFileApisANSI(
	void
);

DWORD
__stdcall
GetTempPathA(
	DWORD nBufferLength,
	LPSTR lpBuffer
);

HANDLE
__stdcall
FindFirstFileNameW(
	LPCWSTR lpFileName,
	DWORD dwFlags,
	LPDWORD StringLength,
	PWSTR LinkName
);

BOOL
__stdcall
FindNextFileNameW(
	HANDLE hFindStream,
	LPDWORD StringLength,
	PWSTR LinkName
);

BOOL
__stdcall
GetVolumeInformationA(
	LPCSTR lpRootPathName,
	LPSTR lpVolumeNameBuffer,
	DWORD nVolumeNameSize,
	LPDWORD lpVolumeSerialNumber,
	LPDWORD lpMaximumComponentLength,
	LPDWORD lpFileSystemFlags,
	LPSTR lpFileSystemNameBuffer,
	DWORD nFileSystemNameSize
);

UINT
__stdcall
GetTempFileNameA(
	LPCSTR lpPathName,
	LPCSTR lpPrefixString,
	UINT uUnique,
	LPSTR lpTempFileName
);

void
__stdcall
SetFileApisToOEM(
	void
);

void
__stdcall
SetFileApisToANSI(
	void
);

BOOL
__stdcall
CopyFileFromAppW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	BOOL bFailIfExists
);

BOOL
__stdcall
CreateDirectoryFromAppW(
	LPCWSTR lpPathName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

HANDLE
__stdcall
CreateFileFromAppW(
	LPCWSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD dwCreationDisposition,
	DWORD dwFlagsAndAttributes,
	HANDLE hTemplateFile
);

HANDLE
__stdcall
CreateFile2FromAppW(
	LPCWSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	DWORD dwCreationDisposition,
	LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
);

BOOL
__stdcall
DeleteFileFromAppW(
	LPCWSTR lpFileName
);

HANDLE
__stdcall
FindFirstFileExFromAppW(
	LPCWSTR lpFileName,
	FINDEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFindFileData,
	FINDEX_SEARCH_OPS fSearchOp,
	LPVOID lpSearchFilter,
	DWORD dwAdditionalFlags
);

BOOL
__stdcall
GetFileAttributesExFromAppW(
	LPCWSTR lpFileName,
	GET_FILEEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFileInformation
);

BOOL
__stdcall
MoveFileFromAppW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName
);

BOOL
__stdcall
RemoveDirectoryFromAppW(
	LPCWSTR lpPathName
);

BOOL
__stdcall
ReplaceFileFromAppW(
	LPCWSTR lpReplacedFileName,
	LPCWSTR lpReplacementFileName,
	LPCWSTR lpBackupFileName,
	DWORD dwReplaceFlags,
	LPVOID lpExclude,
	LPVOID lpReserved
);

BOOL
__stdcall
SetFileAttributesFromAppW(
	LPCWSTR lpFileName,
	DWORD dwFileAttributes
);

BOOL
__stdcall
IsDebuggerPresent(
	void
);

void
__stdcall
DebugBreak(
	void
);

void
__stdcall
OutputDebugStringA(
	LPCSTR lpOutputString
);

void
__stdcall
OutputDebugStringW(
	LPCWSTR lpOutputString
);

BOOL
__stdcall
ContinueDebugEvent(
	DWORD dwProcessId,
	DWORD dwThreadId,
	DWORD dwContinueStatus
);

BOOL
__stdcall
WaitForDebugEvent(
	LPDEBUG_EVENT lpDebugEvent,
	DWORD dwMilliseconds
);

BOOL
__stdcall
DebugActiveProcess(
	DWORD dwProcessId
);

BOOL
__stdcall
DebugActiveProcessStop(
	DWORD dwProcessId
);

BOOL
__stdcall
CheckRemoteDebuggerPresent(
	HANDLE hProcess,
	PBOOL pbDebuggerPresent
);

BOOL
__stdcall
WaitForDebugEventEx(
	LPDEBUG_EVENT lpDebugEvent,
	DWORD dwMilliseconds
);

PVOID
__stdcall
EncodePointer(
	PVOID Ptr
);

PVOID
__stdcall
DecodePointer(
	PVOID Ptr
);

PVOID
__stdcall
EncodeSystemPointer(
	PVOID Ptr
);

PVOID
__stdcall
DecodeSystemPointer(
	PVOID Ptr
);

HRESULT
__stdcall
EncodeRemotePointer(
	HANDLE ProcessHandle,
	PVOID Ptr,
	PVOID* EncodedPtr
);

HRESULT
__stdcall
DecodeRemotePointer(
	HANDLE ProcessHandle,
	PVOID Ptr,
	PVOID* DecodedPtr
);

BOOL
__stdcall
Beep(
	DWORD dwFreq,
	DWORD dwDuration
);

BOOL
__stdcall
CloseHandle(
	HANDLE hObject
);

BOOL
__stdcall
DuplicateHandle(
	HANDLE hSourceProcessHandle,
	HANDLE hSourceHandle,
	HANDLE hTargetProcessHandle,
	LPHANDLE lpTargetHandle,
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	DWORD dwOptions
);

BOOL
__stdcall
CompareObjectHandles(
	HANDLE hFirstObjectHandle,
	HANDLE hSecondObjectHandle
);

BOOL
__stdcall
GetHandleInformation(
	HANDLE hObject,
	LPDWORD lpdwFlags
);

BOOL
__stdcall
SetHandleInformation(
	HANDLE hObject,
	DWORD dwMask,
	DWORD dwFlags
);
typedef LONG(__stdcall* PTOP_LEVEL_EXCEPTION_FILTER)(
	struct _EXCEPTION_POINTERS* ExceptionInfo
	);
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

void
__stdcall
RaiseException(
	DWORD dwExceptionCode,
	DWORD dwExceptionFlags,
	DWORD nNumberOfArguments,
	const ULONG_PTR* lpArguments
);

LONG
__stdcall
UnhandledExceptionFilter(
	struct _EXCEPTION_POINTERS* ExceptionInfo
);

LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
	LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
);

DWORD
__stdcall
GetLastError(
	void
);

void
__stdcall
SetLastError(
	DWORD dwErrCode
);

UINT
__stdcall
GetErrorMode(
	void
);

UINT
__stdcall
SetErrorMode(
	UINT uMode
);

PVOID
__stdcall
AddVectoredExceptionHandler(
	ULONG First,
	PVECTORED_EXCEPTION_HANDLER Handler
);

ULONG
__stdcall
RemoveVectoredExceptionHandler(
	PVOID Handle
);

PVOID
__stdcall
AddVectoredContinueHandler(
	ULONG First,
	PVECTORED_EXCEPTION_HANDLER Handler
);

ULONG
__stdcall
RemoveVectoredContinueHandler(
	PVOID Handle
);

void
__stdcall
RaiseFailFastException(
	PEXCEPTION_RECORD pExceptionRecord,
	PCONTEXT pContextRecord,
	DWORD dwFlags
);

void
__stdcall
FatalAppExitA(
	UINT uAction,
	LPCSTR lpMessageText
);

void
__stdcall
FatalAppExitW(
	UINT uAction,
	LPCWSTR lpMessageText
);

DWORD
__stdcall
GetThreadErrorMode(
	void
);

BOOL
__stdcall
SetThreadErrorMode(
	DWORD dwNewMode,
	LPDWORD lpOldMode
);

void
__stdcall
TerminateProcessOnMemoryExhaustion(
	SIZE_T FailedAllocationSize
);

DWORD
__stdcall
FlsAlloc(
	PFLS_CALLBACK_FUNCTION lpCallback
);

PVOID
__stdcall
FlsGetValue(
	DWORD dwFlsIndex
);

BOOL
__stdcall
FlsSetValue(
	DWORD dwFlsIndex,
	PVOID lpFlsData
);

BOOL
__stdcall
FlsFree(
	DWORD dwFlsIndex
);

BOOL
__stdcall
IsThreadAFiber(
	void
);

BOOL
__stdcall
CreatePipe(
	PHANDLE hReadPipe,
	PHANDLE hWritePipe,
	LPSECURITY_ATTRIBUTES lpPipeAttributes,
	DWORD nSize
);

BOOL
__stdcall
ConnectNamedPipe(
	HANDLE hNamedPipe,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
DisconnectNamedPipe(
	HANDLE hNamedPipe
);

BOOL
__stdcall
SetNamedPipeHandleState(
	HANDLE hNamedPipe,
	LPDWORD lpMode,
	LPDWORD lpMaxCollectionCount,
	LPDWORD lpCollectDataTimeout
);

BOOL
__stdcall
PeekNamedPipe(
	HANDLE hNamedPipe,
	LPVOID lpBuffer,
	DWORD nBufferSize,
	LPDWORD lpBytesRead,
	LPDWORD lpTotalBytesAvail,
	LPDWORD lpBytesLeftThisMessage
);

BOOL
__stdcall
TransactNamedPipe(
	HANDLE hNamedPipe,
	LPVOID lpInBuffer,
	DWORD nInBufferSize,
	LPVOID lpOutBuffer,
	DWORD nOutBufferSize,
	LPDWORD lpBytesRead,
	LPOVERLAPPED lpOverlapped
);

HANDLE
__stdcall
CreateNamedPipeW(
	LPCWSTR lpName,
	DWORD dwOpenMode,
	DWORD dwPipeMode,
	DWORD nMaxInstances,
	DWORD nOutBufferSize,
	DWORD nInBufferSize,
	DWORD nDefaultTimeOut,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
WaitNamedPipeW(
	LPCWSTR lpNamedPipeName,
	DWORD nTimeOut
);

BOOL
__stdcall
GetNamedPipeClientComputerNameW(
	HANDLE Pipe,
	LPWSTR ClientComputerName,
	ULONG ClientComputerNameLength
);

BOOL
__stdcall
ImpersonateNamedPipeClient(
	HANDLE hNamedPipe
);

BOOL
__stdcall
GetNamedPipeInfo(
	HANDLE hNamedPipe,
	LPDWORD lpFlags,
	LPDWORD lpOutBufferSize,
	LPDWORD lpInBufferSize,
	LPDWORD lpMaxInstances
);

BOOL
__stdcall
GetNamedPipeHandleStateW(
	HANDLE hNamedPipe,
	LPDWORD lpState,
	LPDWORD lpCurInstances,
	LPDWORD lpMaxCollectionCount,
	LPDWORD lpCollectDataTimeout,
	LPWSTR lpUserName,
	DWORD nMaxUserNameSize
);

BOOL
__stdcall
CallNamedPipeW(
	LPCWSTR lpNamedPipeName,
	LPVOID lpInBuffer,
	DWORD nInBufferSize,
	LPVOID lpOutBuffer,
	DWORD nOutBufferSize,
	LPDWORD lpBytesRead,
	DWORD nTimeOut
);

BOOL
__stdcall
QueryPerformanceCounter(
	LARGE_INTEGER* lpPerformanceCount
);

BOOL
__stdcall
QueryPerformanceFrequency(
	LARGE_INTEGER* lpFrequency
);
typedef struct _HEAP_SUMMARY {
	DWORD cb;
	SIZE_T cbAllocated;
	SIZE_T cbCommitted;
	SIZE_T cbReserved;
	SIZE_T cbMaxReserve;
} HEAP_SUMMARY, * PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

HANDLE
__stdcall
HeapCreate(
	DWORD flOptions,
	SIZE_T dwInitialSize,
	SIZE_T dwMaximumSize
);

BOOL
__stdcall
HeapDestroy(
	HANDLE hHeap
);


LPVOID
__stdcall
HeapAlloc(
	HANDLE hHeap,
	DWORD dwFlags,
	SIZE_T dwBytes
);


LPVOID
__stdcall
HeapReAlloc(
	HANDLE hHeap,
	DWORD dwFlags,
	LPVOID lpMem,
	SIZE_T dwBytes
);

BOOL
__stdcall
HeapFree(
	HANDLE hHeap,
	DWORD dwFlags,
	LPVOID lpMem
);

SIZE_T
__stdcall
HeapSize(
	HANDLE hHeap,
	DWORD dwFlags,
	LPCVOID lpMem
);

HANDLE
__stdcall
GetProcessHeap(
	void
);

SIZE_T
__stdcall
HeapCompact(
	HANDLE hHeap,
	DWORD dwFlags
);

BOOL
__stdcall
HeapSetInformation(
	HANDLE HeapHandle,
	HEAP_INFORMATION_CLASS HeapInformationClass,
	PVOID HeapInformation,
	SIZE_T HeapInformationLength
);

BOOL
__stdcall
HeapValidate(
	HANDLE hHeap,
	DWORD dwFlags,
	LPCVOID lpMem
);
BOOL
__stdcall
HeapSummary(
	HANDLE hHeap,
	DWORD dwFlags,
	LPHEAP_SUMMARY lpSummary
);

DWORD
__stdcall
GetProcessHeaps(
	DWORD NumberOfHeaps,
	PHANDLE ProcessHeaps
);

BOOL
__stdcall
HeapLock(
	HANDLE hHeap
);

BOOL
__stdcall
HeapUnlock(
	HANDLE hHeap
);

BOOL
__stdcall
HeapWalk(
	HANDLE hHeap,
	LPPROCESS_HEAP_ENTRY lpEntry
);

BOOL
__stdcall
HeapQueryInformation(
	HANDLE HeapHandle,
	HEAP_INFORMATION_CLASS HeapInformationClass,
	PVOID HeapInformation,
	SIZE_T HeapInformationLength,
	PSIZE_T ReturnLength
);

HANDLE
__stdcall
CreateIoCompletionPort(
	HANDLE FileHandle,
	HANDLE ExistingCompletionPort,
	ULONG_PTR CompletionKey,
	DWORD NumberOfConcurrentThreads
);

BOOL
__stdcall
GetQueuedCompletionStatus(
	HANDLE CompletionPort,
	LPDWORD lpNumberOfBytesTransferred,
	PULONG_PTR lpCompletionKey,
	LPOVERLAPPED* lpOverlapped,
	DWORD dwMilliseconds
);

BOOL
__stdcall
GetQueuedCompletionStatusEx(
	HANDLE CompletionPort,
	LPOVERLAPPED_ENTRY lpCompletionPortEntries,
	ULONG ulCount,
	PULONG ulNumEntriesRemoved,
	DWORD dwMilliseconds,
	BOOL fAlertable
);

BOOL
__stdcall
PostQueuedCompletionStatus(
	HANDLE CompletionPort,
	DWORD dwNumberOfBytesTransferred,
	ULONG_PTR dwCompletionKey,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
DeviceIoControl(
	HANDLE hDevice,
	DWORD dwIoControlCode,
	LPVOID lpInBuffer,
	DWORD nInBufferSize,
	LPVOID lpOutBuffer,
	DWORD nOutBufferSize,
	LPDWORD lpBytesReturned,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
GetOverlappedResult(
	HANDLE hFile,
	LPOVERLAPPED lpOverlapped,
	LPDWORD lpNumberOfBytesTransferred,
	BOOL bWait
);

BOOL
__stdcall
CancelIoEx(
	HANDLE hFile,
	LPOVERLAPPED lpOverlapped
);

BOOL
__stdcall
CancelIo(
	HANDLE hFile
);

BOOL
__stdcall
GetOverlappedResultEx(
	HANDLE hFile,
	LPOVERLAPPED lpOverlapped,
	LPDWORD lpNumberOfBytesTransferred,
	DWORD dwMilliseconds,
	BOOL bAlertable
);

BOOL
__stdcall
CancelSynchronousIo(
	HANDLE hThread
);
typedef RTL_SRWLOCK SRWLOCK, * PSRWLOCK;

void
__stdcall
InitializeSRWLock(
	PSRWLOCK SRWLock
);

void
__stdcall
ReleaseSRWLockExclusive(
	PSRWLOCK SRWLock
);

void
__stdcall
ReleaseSRWLockShared(
	PSRWLOCK SRWLock
);

void
__stdcall
AcquireSRWLockExclusive(
	PSRWLOCK SRWLock
);

void
__stdcall
AcquireSRWLockShared(
	PSRWLOCK SRWLock
);

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
	PSRWLOCK SRWLock
);

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
	PSRWLOCK SRWLock
);

void
__stdcall
InitializeCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection
);

void
__stdcall
EnterCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection
);

void
__stdcall
LeaveCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection
);

BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
	LPCRITICAL_SECTION lpCriticalSection,
	DWORD dwSpinCount
);

BOOL
__stdcall
InitializeCriticalSectionEx(
	LPCRITICAL_SECTION lpCriticalSection,
	DWORD dwSpinCount,
	DWORD Flags
);

DWORD
__stdcall
SetCriticalSectionSpinCount(
	LPCRITICAL_SECTION lpCriticalSection,
	DWORD dwSpinCount
);

BOOL
__stdcall
TryEnterCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection
);

void
__stdcall
DeleteCriticalSection(
	LPCRITICAL_SECTION lpCriticalSection
);
typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;
typedef
BOOL
(__stdcall* PINIT_ONCE_FN) (
	PINIT_ONCE InitOnce,
	PVOID Parameter,
	PVOID* Context
	);

void
__stdcall
InitOnceInitialize(
	PINIT_ONCE InitOnce
);

BOOL
__stdcall
InitOnceExecuteOnce(
	PINIT_ONCE InitOnce,
	PINIT_ONCE_FN InitFn,
	PVOID Parameter,
	LPVOID* Context
);

BOOL
__stdcall
InitOnceBeginInitialize(
	LPINIT_ONCE lpInitOnce,
	DWORD dwFlags,
	PBOOL fPending,
	LPVOID* lpContext
);

BOOL
__stdcall
InitOnceComplete(
	LPINIT_ONCE lpInitOnce,
	DWORD dwFlags,
	LPVOID lpContext
);
typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, * PCONDITION_VARIABLE;

void
__stdcall
InitializeConditionVariable(
	PCONDITION_VARIABLE ConditionVariable
);

void
__stdcall
WakeConditionVariable(
	PCONDITION_VARIABLE ConditionVariable
);

void
__stdcall
WakeAllConditionVariable(
	PCONDITION_VARIABLE ConditionVariable
);

BOOL
__stdcall
SleepConditionVariableCS(
	PCONDITION_VARIABLE ConditionVariable,
	PCRITICAL_SECTION CriticalSection,
	DWORD dwMilliseconds
);

BOOL
__stdcall
SleepConditionVariableSRW(
	PCONDITION_VARIABLE ConditionVariable,
	PSRWLOCK SRWLock,
	DWORD dwMilliseconds,
	ULONG Flags
);

BOOL
__stdcall
SetEvent(
	HANDLE hEvent
);

BOOL
__stdcall
ResetEvent(
	HANDLE hEvent
);

BOOL
__stdcall
ReleaseSemaphore(
	HANDLE hSemaphore,
	LONG lReleaseCount,
	LPLONG lpPreviousCount
);

BOOL
__stdcall
ReleaseMutex(
	HANDLE hMutex
);

DWORD
__stdcall
WaitForSingleObject(
	HANDLE hHandle,
	DWORD dwMilliseconds
);

DWORD
__stdcall
SleepEx(
	DWORD dwMilliseconds,
	BOOL bAlertable
);

DWORD
__stdcall
WaitForSingleObjectEx(
	HANDLE hHandle,
	DWORD dwMilliseconds,
	BOOL bAlertable
);

DWORD
__stdcall
WaitForMultipleObjectsEx(
	DWORD nCount,
	const HANDLE* lpHandles,
	BOOL bWaitAll,
	DWORD dwMilliseconds,
	BOOL bAlertable
);

HANDLE
__stdcall
CreateMutexA(
	LPSECURITY_ATTRIBUTES lpMutexAttributes,
	BOOL bInitialOwner,
	LPCSTR lpName
);

HANDLE
__stdcall
CreateMutexW(
	LPSECURITY_ATTRIBUTES lpMutexAttributes,
	BOOL bInitialOwner,
	LPCWSTR lpName
);

HANDLE
__stdcall
OpenMutexW(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCWSTR lpName
);

HANDLE
__stdcall
CreateEventA(
	LPSECURITY_ATTRIBUTES lpEventAttributes,
	BOOL bManualReset,
	BOOL bInitialState,
	LPCSTR lpName
);

HANDLE
__stdcall
CreateEventW(
	LPSECURITY_ATTRIBUTES lpEventAttributes,
	BOOL bManualReset,
	BOOL bInitialState,
	LPCWSTR lpName
);

HANDLE
__stdcall
OpenEventA(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCSTR lpName
);

HANDLE
__stdcall
OpenEventW(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCWSTR lpName
);

HANDLE
__stdcall
OpenSemaphoreW(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCWSTR lpName
);
typedef
void
(__stdcall* PTIMERAPCROUTINE)(
	LPVOID lpArgToCompletionRoutine,
	DWORD dwTimerLowValue,
	DWORD dwTimerHighValue
	);

HANDLE
__stdcall
OpenWaitableTimerW(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCWSTR lpTimerName
);
BOOL
__stdcall
SetWaitableTimerEx(
	HANDLE hTimer,
	const LARGE_INTEGER* lpDueTime,
	LONG lPeriod,
	PTIMERAPCROUTINE pfnCompletionRoutine,
	LPVOID lpArgToCompletionRoutine,
	PREASON_CONTEXT WakeContext,
	ULONG TolerableDelay
);

BOOL
__stdcall
SetWaitableTimer(
	HANDLE hTimer,
	const LARGE_INTEGER* lpDueTime,
	LONG lPeriod,
	PTIMERAPCROUTINE pfnCompletionRoutine,
	LPVOID lpArgToCompletionRoutine,
	BOOL fResume
);

BOOL
__stdcall
CancelWaitableTimer(
	HANDLE hTimer
);

HANDLE
__stdcall
CreateMutexExA(
	LPSECURITY_ATTRIBUTES lpMutexAttributes,
	LPCSTR lpName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateMutexExW(
	LPSECURITY_ATTRIBUTES lpMutexAttributes,
	LPCWSTR lpName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateEventExA(
	LPSECURITY_ATTRIBUTES lpEventAttributes,
	LPCSTR lpName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateEventExW(
	LPSECURITY_ATTRIBUTES lpEventAttributes,
	LPCWSTR lpName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateSemaphoreExW(
	LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
	LONG lInitialCount,
	LONG lMaximumCount,
	LPCWSTR lpName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateWaitableTimerExW(
	LPSECURITY_ATTRIBUTES lpTimerAttributes,
	LPCWSTR lpTimerName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);
typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;
BOOL
__stdcall
EnterSynchronizationBarrier(
	LPSYNCHRONIZATION_BARRIER lpBarrier,
	DWORD dwFlags
);
BOOL
__stdcall
InitializeSynchronizationBarrier(
	LPSYNCHRONIZATION_BARRIER lpBarrier,
	LONG lTotalThreads,
	LONG lSpinCount
);
BOOL
__stdcall
DeleteSynchronizationBarrier(
	LPSYNCHRONIZATION_BARRIER lpBarrier
);

void
__stdcall
Sleep(
	DWORD dwMilliseconds
);
BOOL
__stdcall
WaitOnAddress(
	volatile void* Address,
	PVOID CompareAddress,
	SIZE_T AddressSize,
	DWORD dwMilliseconds
);
void
__stdcall
WakeByAddressSingle(
	PVOID Address
);
void
__stdcall
WakeByAddressAll(
	PVOID Address
);

DWORD
__stdcall
SignalObjectAndWait(
	HANDLE hObjectToSignal,
	HANDLE hObjectToWaitOn,
	DWORD dwMilliseconds,
	BOOL bAlertable
);

DWORD
__stdcall
WaitForMultipleObjects(
	DWORD nCount,
	const HANDLE* lpHandles,
	BOOL bWaitAll,
	DWORD dwMilliseconds
);

HANDLE
__stdcall
CreateSemaphoreW(
	LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
	LONG lInitialCount,
	LONG lMaximumCount,
	LPCWSTR lpName
);

HANDLE
__stdcall
CreateWaitableTimerW(
	LPSECURITY_ATTRIBUTES lpTimerAttributes,
	BOOL bManualReset,
	LPCWSTR lpTimerName
);

void
__stdcall
InitializeSListHead(
	PSLIST_HEADER ListHead
);

PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
	PSLIST_HEADER ListHead
);

PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
	PSLIST_HEADER ListHead,
	PSLIST_ENTRY ListEntry
);

PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
	PSLIST_HEADER ListHead,
	PSLIST_ENTRY List,
	PSLIST_ENTRY ListEnd,
	ULONG Count
);

PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
	PSLIST_HEADER ListHead
);

USHORT
__stdcall
QueryDepthSList(
	PSLIST_HEADER ListHead
);
typedef struct _PROCESS_INFORMATION {
	HANDLE hProcess;
	HANDLE hThread;
	DWORD dwProcessId;
	DWORD dwThreadId;
} PROCESS_INFORMATION, * PPROCESS_INFORMATION, * LPPROCESS_INFORMATION;
typedef struct _STARTUPINFOA {
	DWORD   cb;
	LPSTR   lpReserved;
	LPSTR   lpDesktop;
	LPSTR   lpTitle;
	DWORD   dwX;
	DWORD   dwY;
	DWORD   dwXSize;
	DWORD   dwYSize;
	DWORD   dwXCountChars;
	DWORD   dwYCountChars;
	DWORD   dwFillAttribute;
	DWORD   dwFlags;
	WORD    wShowWindow;
	WORD    cbReserved2;
	LPBYTE  lpReserved2;
	HANDLE  hStdInput;
	HANDLE  hStdOutput;
	HANDLE  hStdError;
} STARTUPINFOA, * LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
	DWORD   cb;
	LPWSTR  lpReserved;
	LPWSTR  lpDesktop;
	LPWSTR  lpTitle;
	DWORD   dwX;
	DWORD   dwY;
	DWORD   dwXSize;
	DWORD   dwYSize;
	DWORD   dwXCountChars;
	DWORD   dwYCountChars;
	DWORD   dwFillAttribute;
	DWORD   dwFlags;
	WORD    wShowWindow;
	WORD    cbReserved2;
	LPBYTE  lpReserved2;
	HANDLE  hStdInput;
	HANDLE  hStdOutput;
	HANDLE  hStdError;
} STARTUPINFOW, * LPSTARTUPINFOW;
typedef STARTUPINFOW STARTUPINFO;
typedef LPSTARTUPINFOW LPSTARTUPINFO;

DWORD
__stdcall
QueueUserAPC(
	PAPCFUNC pfnAPC,
	HANDLE hThread,
	ULONG_PTR dwData
);

BOOL
__stdcall
GetProcessTimes(
	HANDLE hProcess,
	LPFILETIME lpCreationTime,
	LPFILETIME lpExitTime,
	LPFILETIME lpKernelTime,
	LPFILETIME lpUserTime
);

HANDLE
__stdcall
GetCurrentProcess(
	void
);

DWORD
__stdcall
GetCurrentProcessId(
	void
);


void
__stdcall
ExitProcess(
	UINT uExitCode
);

BOOL
__stdcall
TerminateProcess(
	HANDLE hProcess,
	UINT uExitCode
);

BOOL
__stdcall
GetExitCodeProcess(
	HANDLE hProcess,
	LPDWORD lpExitCode
);

BOOL
__stdcall
SwitchToThread(
	void
);

HANDLE
__stdcall
CreateThread(
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	SIZE_T dwStackSize,
	LPTHREAD_START_ROUTINE lpStartAddress,
	LPVOID lpParameter,
	DWORD dwCreationFlags,
	LPDWORD lpThreadId
);

HANDLE
__stdcall
CreateRemoteThread(
	HANDLE hProcess,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	SIZE_T dwStackSize,
	LPTHREAD_START_ROUTINE lpStartAddress,
	LPVOID lpParameter,
	DWORD dwCreationFlags,
	LPDWORD lpThreadId
);

HANDLE
__stdcall
GetCurrentThread(
	void
);

DWORD
__stdcall
GetCurrentThreadId(
	void
);

HANDLE
__stdcall
OpenThread(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	DWORD dwThreadId
);

BOOL
__stdcall
SetThreadPriority(
	HANDLE hThread,
	int nPriority
);

BOOL
__stdcall
SetThreadPriorityBoost(
	HANDLE hThread,
	BOOL bDisablePriorityBoost
);

BOOL
__stdcall
GetThreadPriorityBoost(
	HANDLE hThread,
	PBOOL pDisablePriorityBoost
);

int
__stdcall
GetThreadPriority(
	HANDLE hThread
);


void
__stdcall
ExitThread(
	DWORD dwExitCode
);

BOOL
__stdcall
TerminateThread(
	HANDLE hThread,
	DWORD dwExitCode
);

BOOL
__stdcall
GetExitCodeThread(
	HANDLE hThread,
	LPDWORD lpExitCode
);

DWORD
__stdcall
SuspendThread(
	HANDLE hThread
);

DWORD
__stdcall
ResumeThread(
	HANDLE hThread
);

DWORD
__stdcall
TlsAlloc(
	void
);

LPVOID
__stdcall
TlsGetValue(
	DWORD dwTlsIndex
);

BOOL
__stdcall
TlsSetValue(
	DWORD dwTlsIndex,
	LPVOID lpTlsValue
);

BOOL
__stdcall
TlsFree(
	DWORD dwTlsIndex
);

BOOL
__stdcall
CreateProcessA(
	LPCSTR lpApplicationName,
	LPSTR lpCommandLine,
	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	BOOL bInheritHandles,
	DWORD dwCreationFlags,
	LPVOID lpEnvironment,
	LPCSTR lpCurrentDirectory,
	LPSTARTUPINFOA lpStartupInfo,
	LPPROCESS_INFORMATION lpProcessInformation
);

BOOL
__stdcall
CreateProcessW(
	LPCWSTR lpApplicationName,
	LPWSTR lpCommandLine,
	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	BOOL bInheritHandles,
	DWORD dwCreationFlags,
	LPVOID lpEnvironment,
	LPCWSTR lpCurrentDirectory,
	LPSTARTUPINFOW lpStartupInfo,
	LPPROCESS_INFORMATION lpProcessInformation
);

BOOL
__stdcall
SetProcessShutdownParameters(
	DWORD dwLevel,
	DWORD dwFlags
);

DWORD
__stdcall
GetProcessVersion(
	DWORD ProcessId
);

void
__stdcall
GetStartupInfoW(
	LPSTARTUPINFOW lpStartupInfo
);

BOOL
__stdcall
CreateProcessAsUserW(
	HANDLE hToken,
	LPCWSTR lpApplicationName,
	LPWSTR lpCommandLine,
	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	BOOL bInheritHandles,
	DWORD dwCreationFlags,
	LPVOID lpEnvironment,
	LPCWSTR lpCurrentDirectory,
	LPSTARTUPINFOW lpStartupInfo,
	LPPROCESS_INFORMATION lpProcessInformation
);

HANDLE
GetCurrentProcessToken(
	void
);

HANDLE
GetCurrentThreadToken(
	void
);

HANDLE
GetCurrentThreadEffectiveToken(
	void
);

BOOL
__stdcall
SetThreadToken(
	PHANDLE Thread,
	HANDLE Token
);

BOOL
__stdcall
OpenProcessToken(
	HANDLE ProcessHandle,
	DWORD DesiredAccess,
	PHANDLE TokenHandle
);

BOOL
__stdcall
OpenThreadToken(
	HANDLE ThreadHandle,
	DWORD DesiredAccess,
	BOOL OpenAsSelf,
	PHANDLE TokenHandle
);

BOOL
__stdcall
SetPriorityClass(
	HANDLE hProcess,
	DWORD dwPriorityClass
);

DWORD
__stdcall
GetPriorityClass(
	HANDLE hProcess
);

BOOL
__stdcall
SetThreadStackGuarantee(
	PULONG StackSizeInBytes
);

BOOL
__stdcall
ProcessIdToSessionId(
	DWORD dwProcessId,
	DWORD* pSessionId
);
typedef struct _PROC_THREAD_ATTRIBUTE_LIST* PPROC_THREAD_ATTRIBUTE_LIST, * LPPROC_THREAD_ATTRIBUTE_LIST;

DWORD
__stdcall
GetProcessId(
	HANDLE Process
);

DWORD
__stdcall
GetThreadId(
	HANDLE Thread
);

void
__stdcall
FlushProcessWriteBuffers(
	void
);

DWORD
__stdcall
GetProcessIdOfThread(
	HANDLE Thread
);

BOOL
__stdcall
InitializeProcThreadAttributeList(
	LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
	DWORD dwAttributeCount,
	DWORD dwFlags,
	PSIZE_T lpSize
);

void
__stdcall
DeleteProcThreadAttributeList(
	LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
);

BOOL
__stdcall
UpdateProcThreadAttribute(
	LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
	DWORD dwFlags,
	DWORD_PTR Attribute,
	PVOID lpValue,
	SIZE_T cbSize,
	PVOID lpPreviousValue,
	PSIZE_T lpReturnSize
);

BOOL
__stdcall
SetProcessDynamicEHContinuationTargets(
	HANDLE Process,
	USHORT NumberOfTargets,
	PPROCESS_DYNAMIC_EH_CONTINUATION_TARGET Targets
);

BOOL
__stdcall
SetProcessDynamicEnforcedCetCompatibleRanges(
	HANDLE Process,
	USHORT NumberOfRanges,
	PPROCESS_DYNAMIC_ENFORCED_ADDRESS_RANGE Ranges
);

BOOL
__stdcall
SetProcessAffinityUpdateMode(
	HANDLE hProcess,
	DWORD dwFlags
);

BOOL
__stdcall
QueryProcessAffinityUpdateMode(
	HANDLE hProcess,
	LPDWORD lpdwFlags
);

HANDLE
__stdcall
CreateRemoteThreadEx(
	HANDLE hProcess,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	SIZE_T dwStackSize,
	LPTHREAD_START_ROUTINE lpStartAddress,
	LPVOID lpParameter,
	DWORD dwCreationFlags,
	LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
	LPDWORD lpThreadId
);

void
__stdcall
GetCurrentThreadStackLimits(
	PULONG_PTR LowLimit,
	PULONG_PTR HighLimit
);

BOOL
__stdcall
GetThreadContext(
	HANDLE hThread,
	LPCONTEXT lpContext
);

BOOL
__stdcall
GetProcessMitigationPolicy(
	HANDLE hProcess,
	PROCESS_MITIGATION_POLICY MitigationPolicy,
	PVOID lpBuffer,
	SIZE_T dwLength
);

BOOL
__stdcall
SetThreadContext(
	HANDLE hThread,
	const CONTEXT* lpContext
);

BOOL
__stdcall
SetProcessMitigationPolicy(
	PROCESS_MITIGATION_POLICY MitigationPolicy,
	PVOID lpBuffer,
	SIZE_T dwLength
);

BOOL
__stdcall
FlushInstructionCache(
	HANDLE hProcess,
	LPCVOID lpBaseAddress,
	SIZE_T dwSize
);

BOOL
__stdcall
GetThreadTimes(
	HANDLE hThread,
	LPFILETIME lpCreationTime,
	LPFILETIME lpExitTime,
	LPFILETIME lpKernelTime,
	LPFILETIME lpUserTime
);

HANDLE
__stdcall
OpenProcess(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	DWORD dwProcessId
);

BOOL
__stdcall
IsProcessorFeaturePresent(
	DWORD ProcessorFeature
);

BOOL
__stdcall
GetProcessHandleCount(
	HANDLE hProcess,
	PDWORD pdwHandleCount
);

DWORD
__stdcall
GetCurrentProcessorNumber(
	void
);

BOOL
__stdcall
SetThreadIdealProcessorEx(
	HANDLE hThread,
	PPROCESSOR_NUMBER lpIdealProcessor,
	PPROCESSOR_NUMBER lpPreviousIdealProcessor
);

BOOL
__stdcall
GetThreadIdealProcessorEx(
	HANDLE hThread,
	PPROCESSOR_NUMBER lpIdealProcessor
);

void
__stdcall
GetCurrentProcessorNumberEx(
	PPROCESSOR_NUMBER ProcNumber
);

BOOL
__stdcall
GetProcessPriorityBoost(
	HANDLE hProcess,
	PBOOL pDisablePriorityBoost
);

BOOL
__stdcall
SetProcessPriorityBoost(
	HANDLE hProcess,
	BOOL bDisablePriorityBoost
);

BOOL
__stdcall
GetThreadIOPendingFlag(
	HANDLE hThread,
	PBOOL lpIOIsPending
);

BOOL
__stdcall
GetSystemTimes(
	PFILETIME lpIdleTime,
	PFILETIME lpKernelTime,
	PFILETIME lpUserTime
);
typedef enum _THREAD_INFORMATION_CLASS {
	ThreadMemoryPriority,
	ThreadAbsoluteCpuPriority,
	ThreadDynamicCodePolicy,
	ThreadPowerThrottling,
	ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;
typedef struct _MEMORY_PRIORITY_INFORMATION {
	ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, * PMEMORY_PRIORITY_INFORMATION;

BOOL
__stdcall
GetThreadInformation(
	HANDLE hThread,
	THREAD_INFORMATION_CLASS ThreadInformationClass,
	LPVOID ThreadInformation,
	DWORD ThreadInformationSize
);

BOOL
__stdcall
SetThreadInformation(
	HANDLE hThread,
	THREAD_INFORMATION_CLASS ThreadInformationClass,
	LPVOID ThreadInformation,
	DWORD ThreadInformationSize
);
typedef struct _THREAD_POWER_THROTTLING_STATE {
	ULONG Version;
	ULONG ControlMask;
	ULONG StateMask;
} THREAD_POWER_THROTTLING_STATE;

BOOL
__stdcall
IsProcessCritical(
	HANDLE hProcess,
	PBOOL Critical
);

BOOL
__stdcall
SetProtectedPolicy(
	LPCGUID PolicyGuid,
	ULONG_PTR PolicyValue,
	PULONG_PTR OldPolicyValue
);

BOOL
__stdcall
QueryProtectedPolicy(
	LPCGUID PolicyGuid,
	PULONG_PTR PolicyValue
);

DWORD
__stdcall
SetThreadIdealProcessor(
	HANDLE hThread,
	DWORD dwIdealProcessor
);
typedef enum _PROCESS_INFORMATION_CLASS {
	ProcessMemoryPriority,
	ProcessMemoryExhaustionInfo,
	ProcessAppMemoryInfo,
	ProcessInPrivateInfo,
	ProcessPowerThrottling,
	ProcessReservedValue1,
	ProcessTelemetryCoverageInfo,
	ProcessProtectionLevelInfo,
	ProcessLeapSecondInfo,
	ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;
typedef struct _APP_MEMORY_INFORMATION {
	ULONG64 AvailableCommit;
	ULONG64 PrivateCommitUsage;
	ULONG64 PeakPrivateCommitUsage;
	ULONG64 TotalCommitUsage;
} APP_MEMORY_INFORMATION, * PAPP_MEMORY_INFORMATION;
typedef enum _PROCESS_MEMORY_EXHAUSTION_TYPE {
	PMETypeFailFastOnCommitFailure,
	PMETypeMax
} PROCESS_MEMORY_EXHAUSTION_TYPE, * PPROCESS_MEMORY_EXHAUSTION_TYPE;
typedef struct _PROCESS_MEMORY_EXHAUSTION_INFO {
	USHORT Version;
	USHORT Reserved;
	PROCESS_MEMORY_EXHAUSTION_TYPE Type;
	ULONG_PTR Value;
} PROCESS_MEMORY_EXHAUSTION_INFO, * PPROCESS_MEMORY_EXHAUSTION_INFO;
typedef struct _PROCESS_POWER_THROTTLING_STATE {
	ULONG Version;
	ULONG ControlMask;
	ULONG StateMask;
} PROCESS_POWER_THROTTLING_STATE, * PPROCESS_POWER_THROTTLING_STATE;
typedef struct PROCESS_PROTECTION_LEVEL_INFORMATION {
	DWORD ProtectionLevel;
} PROCESS_PROTECTION_LEVEL_INFORMATION;
typedef struct _PROCESS_LEAP_SECOND_INFO {
	ULONG Flags;
	ULONG Reserved;
} PROCESS_LEAP_SECOND_INFO, * PPROCESS_LEAP_SECOND_INFO;

BOOL
__stdcall
SetProcessInformation(
	HANDLE hProcess,
	PROCESS_INFORMATION_CLASS ProcessInformationClass,
	LPVOID ProcessInformation,
	DWORD ProcessInformationSize
);

BOOL
__stdcall
GetProcessInformation(
	HANDLE hProcess,
	PROCESS_INFORMATION_CLASS ProcessInformationClass,
	LPVOID ProcessInformation,
	DWORD ProcessInformationSize
);
BOOL
__stdcall
GetSystemCpuSetInformation(
	PSYSTEM_CPU_SET_INFORMATION Information,
	ULONG BufferLength,
	PULONG ReturnedLength,
	HANDLE Process,
	ULONG Flags
);
BOOL
__stdcall
GetProcessDefaultCpuSets(
	HANDLE Process,
	PULONG CpuSetIds,
	ULONG CpuSetIdCount,
	PULONG RequiredIdCount
);
BOOL
__stdcall
SetProcessDefaultCpuSets(
	HANDLE Process,
	const ULONG* CpuSetIds,
	ULONG CpuSetIdCount
);
BOOL
__stdcall
GetThreadSelectedCpuSets(
	HANDLE Thread,
	PULONG CpuSetIds,
	ULONG CpuSetIdCount,
	PULONG RequiredIdCount
);
BOOL
__stdcall
SetThreadSelectedCpuSets(
	HANDLE Thread,
	const ULONG* CpuSetIds,
	ULONG CpuSetIdCount
);

BOOL
__stdcall
CreateProcessAsUserA(
	HANDLE hToken,
	LPCSTR lpApplicationName,
	LPSTR lpCommandLine,
	LPSECURITY_ATTRIBUTES lpProcessAttributes,
	LPSECURITY_ATTRIBUTES lpThreadAttributes,
	BOOL bInheritHandles,
	DWORD dwCreationFlags,
	LPVOID lpEnvironment,
	LPCSTR lpCurrentDirectory,
	LPSTARTUPINFOA lpStartupInfo,
	LPPROCESS_INFORMATION lpProcessInformation
);

BOOL
__stdcall
GetProcessShutdownParameters(
	LPDWORD lpdwLevel,
	LPDWORD lpdwFlags
);

HRESULT
__stdcall
SetThreadDescription(
	HANDLE hThread,
	PCWSTR lpThreadDescription
);

HRESULT
__stdcall
GetThreadDescription(
	HANDLE hThread,
	PWSTR* ppszThreadDescription
);
typedef struct _SYSTEM_INFO {
	union {
		DWORD dwOemId;
		struct {
			WORD wProcessorArchitecture;
			WORD wReserved;
		};
	};
	DWORD dwPageSize;
	LPVOID lpMinimumApplicationAddress;
	LPVOID lpMaximumApplicationAddress;
	DWORD_PTR dwActiveProcessorMask;
	DWORD dwNumberOfProcessors;
	DWORD dwProcessorType;
	DWORD dwAllocationGranularity;
	WORD wProcessorLevel;
	WORD wProcessorRevision;
} SYSTEM_INFO, * LPSYSTEM_INFO;
typedef struct _MEMORYSTATUSEX {
	DWORD dwLength;
	DWORD dwMemoryLoad;
	DWORDLONG ullTotalPhys;
	DWORDLONG ullAvailPhys;
	DWORDLONG ullTotalPageFile;
	DWORDLONG ullAvailPageFile;
	DWORDLONG ullTotalVirtual;
	DWORDLONG ullAvailVirtual;
	DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, * LPMEMORYSTATUSEX;

BOOL
__stdcall
GlobalMemoryStatusEx(
	LPMEMORYSTATUSEX lpBuffer
);

void
__stdcall
GetSystemInfo(
	LPSYSTEM_INFO lpSystemInfo
);

void
__stdcall
GetSystemTime(
	LPSYSTEMTIME lpSystemTime
);

void
__stdcall
GetSystemTimeAsFileTime(
	LPFILETIME lpSystemTimeAsFileTime
);

void
__stdcall
GetLocalTime(
	LPSYSTEMTIME lpSystemTime
);

BOOL
__stdcall
IsUserCetAvailableInEnvironment(
	DWORD UserCetEnvironment
);

BOOL
__stdcall
GetSystemLeapSecondInformation(
	PBOOL Enabled,
	PDWORD Flags
);


DWORD
__stdcall
GetVersion(
	void
);

BOOL
__stdcall
SetLocalTime(
	const SYSTEMTIME* lpSystemTime
);

DWORD
__stdcall
GetTickCount(
	void
);

ULONGLONG
__stdcall
GetTickCount64(
	void
);

BOOL
__stdcall
GetSystemTimeAdjustment(
	PDWORD lpTimeAdjustment,
	PDWORD lpTimeIncrement,
	PBOOL lpTimeAdjustmentDisabled
);

BOOL
__stdcall
GetSystemTimeAdjustmentPrecise(
	PDWORD64 lpTimeAdjustment,
	PDWORD64 lpTimeIncrement,
	PBOOL lpTimeAdjustmentDisabled
);

UINT
__stdcall
GetSystemDirectoryA(
	LPSTR lpBuffer,
	UINT uSize
);

UINT
__stdcall
GetSystemDirectoryW(
	LPWSTR lpBuffer,
	UINT uSize
);

UINT
__stdcall
GetWindowsDirectoryA(
	LPSTR lpBuffer,
	UINT uSize
);

UINT
__stdcall
GetWindowsDirectoryW(
	LPWSTR lpBuffer,
	UINT uSize
);

UINT
__stdcall
GetSystemWindowsDirectoryA(
	LPSTR lpBuffer,
	UINT uSize
);

UINT
__stdcall
GetSystemWindowsDirectoryW(
	LPWSTR lpBuffer,
	UINT uSize
);
typedef enum _COMPUTER_NAME_FORMAT {
	ComputerNameNetBIOS,
	ComputerNameDnsHostname,
	ComputerNameDnsDomain,
	ComputerNameDnsFullyQualified,
	ComputerNamePhysicalNetBIOS,
	ComputerNamePhysicalDnsHostname,
	ComputerNamePhysicalDnsDomain,
	ComputerNamePhysicalDnsFullyQualified,
	ComputerNameMax
} COMPUTER_NAME_FORMAT;

BOOL
__stdcall
GetComputerNameExA(
	COMPUTER_NAME_FORMAT NameType,
	LPSTR lpBuffer,
	LPDWORD nSize
);

BOOL
__stdcall
GetComputerNameExW(
	COMPUTER_NAME_FORMAT NameType,
	LPWSTR lpBuffer,
	LPDWORD nSize
);

BOOL
__stdcall
SetComputerNameExW(
	COMPUTER_NAME_FORMAT NameType,
	LPCWSTR lpBuffer
);

BOOL
__stdcall
SetSystemTime(
	const SYSTEMTIME* lpSystemTime
);


BOOL
__stdcall
GetVersionExA(
	LPOSVERSIONINFOA lpVersionInformation
);


BOOL
__stdcall
GetVersionExW(
	LPOSVERSIONINFOW lpVersionInformation
);

BOOL
__stdcall
GetLogicalProcessorInformation(
	PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
	PDWORD ReturnedLength
);

BOOL
__stdcall
GetLogicalProcessorInformationEx(
	LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
	PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
	PDWORD ReturnedLength
);

void
__stdcall
GetNativeSystemInfo(
	LPSYSTEM_INFO lpSystemInfo
);

void
__stdcall
GetSystemTimePreciseAsFileTime(
	LPFILETIME lpSystemTimeAsFileTime
);

BOOL
__stdcall
GetProductInfo(
	DWORD dwOSMajorVersion,
	DWORD dwOSMinorVersion,
	DWORD dwSpMajorVersion,
	DWORD dwSpMinorVersion,
	PDWORD pdwReturnedProductType
);

ULONGLONG
__stdcall
VerSetConditionMask(
	ULONGLONG ConditionMask,
	ULONG TypeMask,
	UCHAR Condition
);

BOOL
__stdcall
GetOsSafeBootMode(
	PDWORD Flags
);

UINT
__stdcall
EnumSystemFirmwareTables(
	DWORD FirmwareTableProviderSignature,
	PVOID pFirmwareTableEnumBuffer,
	DWORD BufferSize
);

UINT
__stdcall
GetSystemFirmwareTable(
	DWORD FirmwareTableProviderSignature,
	DWORD FirmwareTableID,
	PVOID pFirmwareTableBuffer,
	DWORD BufferSize
);

BOOL
__stdcall
DnsHostnameToComputerNameExW(
	LPCWSTR Hostname,
	LPWSTR ComputerName,
	LPDWORD nSize
);

BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
	PULONGLONG TotalMemoryInKilobytes
);

BOOL
__stdcall
SetComputerNameEx2W(
	COMPUTER_NAME_FORMAT NameType,
	DWORD Flags,
	LPCWSTR lpBuffer
);

BOOL
__stdcall
SetSystemTimeAdjustment(
	DWORD dwTimeAdjustment,
	BOOL bTimeAdjustmentDisabled
);

BOOL
__stdcall
SetSystemTimeAdjustmentPrecise(
	DWORD64 dwTimeAdjustment,
	BOOL bTimeAdjustmentDisabled
);

BOOL
__stdcall
InstallELAMCertificateInfo(
	HANDLE ELAMFile
);

BOOL
__stdcall
GetProcessorSystemCycleTime(
	USHORT Group,
	PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
	PDWORD ReturnedLength
);

BOOL
__stdcall
GetOsManufacturingMode(
	PBOOL pbEnabled
);

HRESULT
__stdcall
GetIntegratedDisplaySize(
	double* sizeInInches
);

BOOL
__stdcall
SetComputerNameA(
	LPCSTR lpComputerName
);

BOOL
__stdcall
SetComputerNameW(
	LPCWSTR lpComputerName
);

BOOL
__stdcall
SetComputerNameExA(
	COMPUTER_NAME_FORMAT NameType,
	LPCSTR lpBuffer
);

LPVOID
__stdcall
VirtualAlloc(
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flAllocationType,
	DWORD flProtect
);

BOOL
__stdcall
VirtualProtect(
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flNewProtect,
	PDWORD lpflOldProtect
);

BOOL
__stdcall
VirtualFree(
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD dwFreeType
);

SIZE_T
__stdcall
VirtualQuery(
	LPCVOID lpAddress,
	PMEMORY_BASIC_INFORMATION lpBuffer,
	SIZE_T dwLength
);

LPVOID
__stdcall
VirtualAllocEx(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flAllocationType,
	DWORD flProtect
);

BOOL
__stdcall
VirtualProtectEx(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flNewProtect,
	PDWORD lpflOldProtect
);

SIZE_T
__stdcall
VirtualQueryEx(
	HANDLE hProcess,
	LPCVOID lpAddress,
	PMEMORY_BASIC_INFORMATION lpBuffer,
	SIZE_T dwLength
);

BOOL
__stdcall
ReadProcessMemory(
	HANDLE hProcess,
	LPCVOID lpBaseAddress,
	LPVOID lpBuffer,
	SIZE_T nSize,
	SIZE_T* lpNumberOfBytesRead
);

BOOL
__stdcall
WriteProcessMemory(
	HANDLE hProcess,
	LPVOID lpBaseAddress,
	LPCVOID lpBuffer,
	SIZE_T nSize,
	SIZE_T* lpNumberOfBytesWritten
);

HANDLE
__stdcall
CreateFileMappingW(
	HANDLE hFile,
	LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
	DWORD flProtect,
	DWORD dwMaximumSizeHigh,
	DWORD dwMaximumSizeLow,
	LPCWSTR lpName
);

HANDLE
__stdcall
OpenFileMappingW(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCWSTR lpName
);

LPVOID
__stdcall
MapViewOfFile(
	HANDLE hFileMappingObject,
	DWORD dwDesiredAccess,
	DWORD dwFileOffsetHigh,
	DWORD dwFileOffsetLow,
	SIZE_T dwNumberOfBytesToMap
);

LPVOID
__stdcall
MapViewOfFileEx(
	HANDLE hFileMappingObject,
	DWORD dwDesiredAccess,
	DWORD dwFileOffsetHigh,
	DWORD dwFileOffsetLow,
	SIZE_T dwNumberOfBytesToMap,
	LPVOID lpBaseAddress
);

BOOL
__stdcall
VirtualFreeEx(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD dwFreeType
);

BOOL
__stdcall
FlushViewOfFile(
	LPCVOID lpBaseAddress,
	SIZE_T dwNumberOfBytesToFlush
);

BOOL
__stdcall
UnmapViewOfFile(
	LPCVOID lpBaseAddress
);

SIZE_T
__stdcall
GetLargePageMinimum(
	void
);

BOOL
__stdcall
GetProcessWorkingSetSizeEx(
	HANDLE hProcess,
	PSIZE_T lpMinimumWorkingSetSize,
	PSIZE_T lpMaximumWorkingSetSize,
	PDWORD Flags
);

BOOL
__stdcall
SetProcessWorkingSetSizeEx(
	HANDLE hProcess,
	SIZE_T dwMinimumWorkingSetSize,
	SIZE_T dwMaximumWorkingSetSize,
	DWORD Flags
);

BOOL
__stdcall
VirtualLock(
	LPVOID lpAddress,
	SIZE_T dwSize
);

BOOL
__stdcall
VirtualUnlock(
	LPVOID lpAddress,
	SIZE_T dwSize
);

UINT
__stdcall
GetWriteWatch(
	DWORD dwFlags,
	PVOID lpBaseAddress,
	SIZE_T dwRegionSize,
	PVOID* lpAddresses,
	ULONG_PTR* lpdwCount,
	LPDWORD lpdwGranularity
);

UINT
__stdcall
ResetWriteWatch(
	LPVOID lpBaseAddress,
	SIZE_T dwRegionSize
);
typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
	LowMemoryResourceNotification,
	HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

HANDLE
__stdcall
CreateMemoryResourceNotification(
	MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
);

BOOL
__stdcall
QueryMemoryResourceNotification(
	HANDLE ResourceNotificationHandle,
	PBOOL ResourceState
);

BOOL
__stdcall
GetSystemFileCacheSize(
	PSIZE_T lpMinimumFileCacheSize,
	PSIZE_T lpMaximumFileCacheSize,
	PDWORD lpFlags
);

BOOL
__stdcall
SetSystemFileCacheSize(
	SIZE_T MinimumFileCacheSize,
	SIZE_T MaximumFileCacheSize,
	DWORD Flags
);

HANDLE
__stdcall
CreateFileMappingNumaW(
	HANDLE hFile,
	LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
	DWORD flProtect,
	DWORD dwMaximumSizeHigh,
	DWORD dwMaximumSizeLow,
	LPCWSTR lpName,
	DWORD nndPreferred
);
typedef struct _WIN32_MEMORY_RANGE_ENTRY {
	PVOID VirtualAddress;
	SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, * PWIN32_MEMORY_RANGE_ENTRY;

BOOL
__stdcall
PrefetchVirtualMemory(
	HANDLE hProcess,
	ULONG_PTR NumberOfEntries,
	PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
	ULONG Flags
);

HANDLE
__stdcall
CreateFileMappingFromApp(
	HANDLE hFile,
	PSECURITY_ATTRIBUTES SecurityAttributes,
	ULONG PageProtection,
	ULONG64 MaximumSize,
	PCWSTR Name
);

PVOID
__stdcall
MapViewOfFileFromApp(
	HANDLE hFileMappingObject,
	ULONG DesiredAccess,
	ULONG64 FileOffset,
	SIZE_T NumberOfBytesToMap
);

BOOL
__stdcall
UnmapViewOfFileEx(
	PVOID BaseAddress,
	ULONG UnmapFlags
);

BOOL
__stdcall
AllocateUserPhysicalPages(
	HANDLE hProcess,
	PULONG_PTR NumberOfPages,
	PULONG_PTR PageArray
);

BOOL
__stdcall
FreeUserPhysicalPages(
	HANDLE hProcess,
	PULONG_PTR NumberOfPages,
	PULONG_PTR PageArray
);

BOOL
__stdcall
MapUserPhysicalPages(
	PVOID VirtualAddress,
	ULONG_PTR NumberOfPages,
	PULONG_PTR PageArray
);

BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
	HANDLE hProcess,
	PULONG_PTR NumberOfPages,
	PULONG_PTR PageArray,
	DWORD nndPreferred
);

LPVOID
__stdcall
VirtualAllocExNuma(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	DWORD flAllocationType,
	DWORD flProtect,
	DWORD nndPreferred
);

BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
	PULONG Capabilities
);
typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
	void
);
typedef BAD_MEMORY_CALLBACK_ROUTINE* PBAD_MEMORY_CALLBACK_ROUTINE;

PVOID
__stdcall
RegisterBadMemoryNotification(
	PBAD_MEMORY_CALLBACK_ROUTINE Callback
);

BOOL
__stdcall
UnregisterBadMemoryNotification(
	PVOID RegistrationHandle
);
typedef enum OFFER_PRIORITY {
	VmOfferPriorityVeryLow = 1,
	VmOfferPriorityLow,
	VmOfferPriorityBelowNormal,
	VmOfferPriorityNormal
} OFFER_PRIORITY;
DWORD
__stdcall
OfferVirtualMemory(
	PVOID VirtualAddress,
	SIZE_T Size,
	OFFER_PRIORITY Priority
);
DWORD
__stdcall
ReclaimVirtualMemory(
	void const* VirtualAddress,
	SIZE_T Size
);
DWORD
__stdcall
DiscardVirtualMemory(
	PVOID VirtualAddress,
	SIZE_T Size
);

BOOL
__stdcall
SetProcessValidCallTargets(
	HANDLE hProcess,
	PVOID VirtualAddress,
	SIZE_T RegionSize,
	ULONG NumberOfOffsets,
	PCFG_CALL_TARGET_INFO OffsetInformation
);

BOOL
__stdcall
SetProcessValidCallTargetsForMappedView(
	HANDLE Process,
	PVOID VirtualAddress,
	SIZE_T RegionSize,
	ULONG NumberOfOffsets,
	PCFG_CALL_TARGET_INFO OffsetInformation,
	HANDLE Section,
	ULONG64 ExpectedFileOffset
);

PVOID
__stdcall
VirtualAllocFromApp(
	PVOID BaseAddress,
	SIZE_T Size,
	ULONG AllocationType,
	ULONG Protection
);

BOOL
__stdcall
VirtualProtectFromApp(
	PVOID Address,
	SIZE_T Size,
	ULONG NewProtection,
	PULONG OldProtection
);

HANDLE
__stdcall
OpenFileMappingFromApp(
	ULONG DesiredAccess,
	BOOL InheritHandle,
	PCWSTR Name
);
typedef enum WIN32_MEMORY_INFORMATION_CLASS {
	MemoryRegionInfo
} WIN32_MEMORY_INFORMATION_CLASS;
typedef struct WIN32_MEMORY_REGION_INFORMATION {
	PVOID AllocationBase;
	ULONG AllocationProtect;
	union {
		ULONG Flags;
		struct {
			ULONG Private : 1;
			ULONG MappedDataFile : 1;
			ULONG MappedImage : 1;
			ULONG MappedPageFile : 1;
			ULONG MappedPhysical : 1;
			ULONG DirectMapped : 1;
			ULONG Reserved : 26;
		};
	};
	SIZE_T RegionSize;
	SIZE_T CommitSize;
} WIN32_MEMORY_REGION_INFORMATION;

BOOL
__stdcall
QueryVirtualMemoryInformation(
	HANDLE Process,
	const void* VirtualAddress,
	WIN32_MEMORY_INFORMATION_CLASS MemoryInformationClass,
	PVOID MemoryInformation,
	SIZE_T MemoryInformationSize,
	PSIZE_T ReturnSize
);

PVOID
__stdcall
MapViewOfFileNuma2(
	HANDLE FileMappingHandle,
	HANDLE ProcessHandle,
	ULONG64 Offset,
	PVOID BaseAddress,
	SIZE_T ViewSize,
	ULONG AllocationType,
	ULONG PageProtection,
	ULONG PreferredNode
);

PVOID
MapViewOfFile2(
	HANDLE FileMappingHandle,
	HANDLE ProcessHandle,
	ULONG64 Offset,
	PVOID BaseAddress,
	SIZE_T ViewSize,
	ULONG AllocationType,
	ULONG PageProtection
);

BOOL
__stdcall
UnmapViewOfFile2(
	HANDLE Process,
	PVOID BaseAddress,
	ULONG UnmapFlags
);

BOOL
__stdcall
VirtualUnlockEx(
	HANDLE Process,
	LPVOID Address,
	SIZE_T Size
);

PVOID
__stdcall
VirtualAlloc2(
	HANDLE Process,
	PVOID BaseAddress,
	SIZE_T Size,
	ULONG AllocationType,
	ULONG PageProtection,
	MEM_EXTENDED_PARAMETER* ExtendedParameters,
	ULONG ParameterCount
);

PVOID
__stdcall
MapViewOfFile3(
	HANDLE FileMapping,
	HANDLE Process,
	PVOID BaseAddress,
	ULONG64 Offset,
	SIZE_T ViewSize,
	ULONG AllocationType,
	ULONG PageProtection,
	MEM_EXTENDED_PARAMETER* ExtendedParameters,
	ULONG ParameterCount
);

PVOID
__stdcall
VirtualAlloc2FromApp(
	HANDLE Process,
	PVOID BaseAddress,
	SIZE_T Size,
	ULONG AllocationType,
	ULONG PageProtection,
	MEM_EXTENDED_PARAMETER* ExtendedParameters,
	ULONG ParameterCount
);

PVOID
__stdcall
MapViewOfFile3FromApp(
	HANDLE FileMapping,
	HANDLE Process,
	PVOID BaseAddress,
	ULONG64 Offset,
	SIZE_T ViewSize,
	ULONG AllocationType,
	ULONG PageProtection,
	MEM_EXTENDED_PARAMETER* ExtendedParameters,
	ULONG ParameterCount
);

HANDLE
__stdcall
CreateFileMapping2(
	HANDLE File,
	SECURITY_ATTRIBUTES* SecurityAttributes,
	ULONG DesiredAccess,
	ULONG PageProtection,
	ULONG AllocationAttributes,
	ULONG64 MaximumSize,
	PCWSTR Name,
	MEM_EXTENDED_PARAMETER* ExtendedParameters,
	ULONG ParameterCount
);

BOOL
__stdcall
IsEnclaveTypeSupported(
	DWORD flEnclaveType
);

LPVOID
__stdcall
CreateEnclave(
	HANDLE hProcess,
	LPVOID lpAddress,
	SIZE_T dwSize,
	SIZE_T dwInitialCommitment,
	DWORD flEnclaveType,
	LPCVOID lpEnclaveInformation,
	DWORD dwInfoLength,
	LPDWORD lpEnclaveError
);

BOOL
__stdcall
LoadEnclaveData(
	HANDLE hProcess,
	LPVOID lpAddress,
	LPCVOID lpBuffer,
	SIZE_T nSize,
	DWORD flProtect,
	LPCVOID lpPageInformation,
	DWORD dwInfoLength,
	PSIZE_T lpNumberOfBytesWritten,
	LPDWORD lpEnclaveError
);

BOOL
__stdcall
InitializeEnclave(
	HANDLE hProcess,
	LPVOID lpAddress,
	LPCVOID lpEnclaveInformation,
	DWORD dwInfoLength,
	LPDWORD lpEnclaveError
);

BOOL
__stdcall
LoadEnclaveImageA(
	LPVOID lpEnclaveAddress,
	LPCSTR lpImageName
);

BOOL
__stdcall
LoadEnclaveImageW(
	LPVOID lpEnclaveAddress,
	LPCWSTR lpImageName
);

BOOL
__stdcall
CallEnclave(
	LPENCLAVE_ROUTINE lpRoutine,
	LPVOID lpParameter,
	BOOL fWaitForThread,
	LPVOID* lpReturnValue
);

BOOL
__stdcall
TerminateEnclave(
	LPVOID lpAddress,
	BOOL fWait
);

BOOL
__stdcall
DeleteEnclave(
	LPVOID lpAddress
);

BOOL
__stdcall
QueueUserWorkItem(
	LPTHREAD_START_ROUTINE Function,
	PVOID Context,
	ULONG Flags
);

BOOL
__stdcall
UnregisterWaitEx(
	HANDLE WaitHandle,
	HANDLE CompletionEvent
);

HANDLE
__stdcall
CreateTimerQueue(
	void
);

BOOL
__stdcall
CreateTimerQueueTimer(
	PHANDLE phNewTimer,
	HANDLE TimerQueue,
	WAITORTIMERCALLBACK Callback,
	PVOID Parameter,
	DWORD DueTime,
	DWORD Period,
	ULONG Flags
);

BOOL
__stdcall
ChangeTimerQueueTimer(
	HANDLE TimerQueue,
	HANDLE Timer,
	ULONG DueTime,
	ULONG Period
);

BOOL
__stdcall
DeleteTimerQueueTimer(
	HANDLE TimerQueue,
	HANDLE Timer,
	HANDLE CompletionEvent
);

BOOL
__stdcall
DeleteTimerQueueEx(
	HANDLE TimerQueue,
	HANDLE CompletionEvent
);
typedef
void
(__stdcall* PTP_WIN32_IO_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID                 Context,
	PVOID                 Overlapped,
	ULONG                 IoResult,
	ULONG_PTR             NumberOfBytesTransferred,
	PTP_IO                Io
	);

PTP_POOL
__stdcall
CreateThreadpool(
	PVOID reserved
);

void
__stdcall
SetThreadpoolThreadMaximum(
	PTP_POOL ptpp,
	DWORD cthrdMost
);

BOOL
__stdcall
SetThreadpoolThreadMinimum(
	PTP_POOL ptpp,
	DWORD cthrdMic
);

BOOL
__stdcall
SetThreadpoolStackInformation(
	PTP_POOL ptpp,
	PTP_POOL_STACK_INFORMATION ptpsi
);

BOOL
__stdcall
QueryThreadpoolStackInformation(
	PTP_POOL ptpp,
	PTP_POOL_STACK_INFORMATION ptpsi
);

void
__stdcall
CloseThreadpool(
	PTP_POOL ptpp
);

PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
	void
);

void
__stdcall
CloseThreadpoolCleanupGroupMembers(
	PTP_CLEANUP_GROUP ptpcg,
	BOOL fCancelPendingCallbacks,
	PVOID pvCleanupContext
);

void
__stdcall
CloseThreadpoolCleanupGroup(
	PTP_CLEANUP_GROUP ptpcg
);

void
__stdcall
SetEventWhenCallbackReturns(
	PTP_CALLBACK_INSTANCE pci,
	HANDLE evt
);

void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
	PTP_CALLBACK_INSTANCE pci,
	HANDLE sem,
	DWORD crel
);

void
__stdcall
ReleaseMutexWhenCallbackReturns(
	PTP_CALLBACK_INSTANCE pci,
	HANDLE mut
);

void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
	PTP_CALLBACK_INSTANCE pci,
	PCRITICAL_SECTION pcs
);

void
__stdcall
FreeLibraryWhenCallbackReturns(
	PTP_CALLBACK_INSTANCE pci,
	HMODULE mod
);

BOOL
__stdcall
CallbackMayRunLong(
	PTP_CALLBACK_INSTANCE pci
);

void
__stdcall
DisassociateCurrentThreadFromCallback(
	PTP_CALLBACK_INSTANCE pci
);

BOOL
__stdcall
TrySubmitThreadpoolCallback(
	PTP_SIMPLE_CALLBACK pfns,
	PVOID pv,
	PTP_CALLBACK_ENVIRON pcbe
);

PTP_WORK
__stdcall
CreateThreadpoolWork(
	PTP_WORK_CALLBACK pfnwk,
	PVOID pv,
	PTP_CALLBACK_ENVIRON pcbe
);

void
__stdcall
SubmitThreadpoolWork(
	PTP_WORK pwk
);

void
__stdcall
WaitForThreadpoolWorkCallbacks(
	PTP_WORK pwk,
	BOOL fCancelPendingCallbacks
);

void
__stdcall
CloseThreadpoolWork(
	PTP_WORK pwk
);

PTP_TIMER
__stdcall
CreateThreadpoolTimer(
	PTP_TIMER_CALLBACK pfnti,
	PVOID pv,
	PTP_CALLBACK_ENVIRON pcbe
);

void
__stdcall
SetThreadpoolTimer(
	PTP_TIMER pti,
	PFILETIME pftDueTime,
	DWORD msPeriod,
	DWORD msWindowLength
);

BOOL
__stdcall
IsThreadpoolTimerSet(
	PTP_TIMER pti
);

void
__stdcall
WaitForThreadpoolTimerCallbacks(
	PTP_TIMER pti,
	BOOL fCancelPendingCallbacks
);

void
__stdcall
CloseThreadpoolTimer(
	PTP_TIMER pti
);

PTP_WAIT
__stdcall
CreateThreadpoolWait(
	PTP_WAIT_CALLBACK pfnwa,
	PVOID pv,
	PTP_CALLBACK_ENVIRON pcbe
);

void
__stdcall
SetThreadpoolWait(
	PTP_WAIT pwa,
	HANDLE h,
	PFILETIME pftTimeout
);

void
__stdcall
WaitForThreadpoolWaitCallbacks(
	PTP_WAIT pwa,
	BOOL fCancelPendingCallbacks
);

void
__stdcall
CloseThreadpoolWait(
	PTP_WAIT pwa
);

PTP_IO
__stdcall
CreateThreadpoolIo(
	HANDLE fl,
	PTP_WIN32_IO_CALLBACK pfnio,
	PVOID pv,
	PTP_CALLBACK_ENVIRON pcbe
);

void
__stdcall
StartThreadpoolIo(
	PTP_IO pio
);

void
__stdcall
CancelThreadpoolIo(
	PTP_IO pio
);

void
__stdcall
WaitForThreadpoolIoCallbacks(
	PTP_IO pio,
	BOOL fCancelPendingCallbacks
);

void
__stdcall
CloseThreadpoolIo(
	PTP_IO pio
);

BOOL
__stdcall
SetThreadpoolTimerEx(
	PTP_TIMER pti,
	PFILETIME pftDueTime,
	DWORD msPeriod,
	DWORD msWindowLength
);

BOOL
__stdcall
SetThreadpoolWaitEx(
	PTP_WAIT pwa,
	HANDLE h,
	PFILETIME pftTimeout,
	PVOID Reserved
);

BOOL
__stdcall
IsProcessInJob(
	HANDLE ProcessHandle,
	HANDLE JobHandle,
	PBOOL Result
);
typedef struct JOBOBJECT_IO_RATE_CONTROL_INFORMATION {
	LONG64 MaxIops;
	LONG64 MaxBandwidth;
	LONG64 ReservationIops;
	PCWSTR VolumeName;
	ULONG BaseIoSize;
	ULONG ControlFlags;
} JOBOBJECT_IO_RATE_CONTROL_INFORMATION;

HANDLE
__stdcall
CreateJobObjectW(
	LPSECURITY_ATTRIBUTES lpJobAttributes,
	LPCWSTR lpName
);

void
__stdcall
FreeMemoryJobObject(
	void* Buffer
);

HANDLE
__stdcall
OpenJobObjectW(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCWSTR lpName
);

BOOL
__stdcall
AssignProcessToJobObject(
	HANDLE hJob,
	HANDLE hProcess
);

BOOL
__stdcall
TerminateJobObject(
	HANDLE hJob,
	UINT uExitCode
);

BOOL
__stdcall
SetInformationJobObject(
	HANDLE hJob,
	JOBOBJECTINFOCLASS JobObjectInformationClass,
	LPVOID lpJobObjectInformation,
	DWORD cbJobObjectInformationLength
);

DWORD
__stdcall
SetIoRateControlInformationJobObject(
	HANDLE hJob,
	JOBOBJECT_IO_RATE_CONTROL_INFORMATION* IoRateControlInfo
);

BOOL
__stdcall
QueryInformationJobObject(
	HANDLE hJob,
	JOBOBJECTINFOCLASS JobObjectInformationClass,
	LPVOID lpJobObjectInformation,
	DWORD cbJobObjectInformationLength,
	LPDWORD lpReturnLength
);

DWORD
__stdcall
QueryIoRateControlInformationJobObject(
	HANDLE hJob,
	PCWSTR VolumeName,
	JOBOBJECT_IO_RATE_CONTROL_INFORMATION** InfoBlocks,
	ULONG* InfoBlockCount
);

BOOL
__stdcall
Wow64DisableWow64FsRedirection(
	PVOID* OldValue
);

BOOL
__stdcall
Wow64RevertWow64FsRedirection(
	PVOID OlValue
);

BOOL
__stdcall
IsWow64Process(
	HANDLE hProcess,
	PBOOL Wow64Process
);

UINT
__stdcall
GetSystemWow64DirectoryA(
	LPSTR lpBuffer,
	UINT uSize
);

UINT
__stdcall
GetSystemWow64DirectoryW(
	LPWSTR lpBuffer,
	UINT uSize
);

USHORT
__stdcall
Wow64SetThreadDefaultGuestMachine(
	USHORT Machine
);

BOOL
__stdcall
IsWow64Process2(
	HANDLE hProcess,
	USHORT* pProcessMachine,
	USHORT* pNativeMachine
);

UINT
__stdcall
GetSystemWow64Directory2A(
	LPSTR lpBuffer,
	UINT uSize,
	WORD ImageFileMachineType
);

UINT
__stdcall
GetSystemWow64Directory2W(
	LPWSTR lpBuffer,
	UINT uSize,
	WORD ImageFileMachineType
);

HRESULT
__stdcall
IsWow64GuestMachineSupported(
	USHORT WowGuestMachine,
	BOOL* MachineIsSupported
);

BOOL
__stdcall
Wow64GetThreadContext(
	HANDLE hThread,
	PWOW64_CONTEXT lpContext
);

BOOL
__stdcall
Wow64SetThreadContext(
	HANDLE hThread,
	const WOW64_CONTEXT* lpContext
);

DWORD
__stdcall
Wow64SuspendThread(
	HANDLE hThread
);
typedef struct tagENUMUILANG {
	ULONG  NumOfEnumUILang;
	ULONG  SizeOfEnumUIBuffer;
	LANGID* pEnumUIBuffer;
} ENUMUILANG, * PENUMUILANG;
typedef BOOL(__stdcall* ENUMRESLANGPROCA)(
	HMODULE hModule,
	LPCSTR lpType,
	LPCSTR lpName,
	WORD wLanguage,
	LONG_PTR lParam);
typedef BOOL(__stdcall* ENUMRESLANGPROCW)(
	HMODULE hModule,
	LPCWSTR lpType,
	LPCWSTR lpName,
	WORD wLanguage,
	LONG_PTR lParam);
typedef BOOL(__stdcall* ENUMRESNAMEPROCA)(
	HMODULE hModule,
	LPCSTR lpType,
	LPSTR lpName,
	LONG_PTR lParam);
typedef BOOL(__stdcall* ENUMRESNAMEPROCW)(
	HMODULE hModule,
	LPCWSTR lpType,
	LPWSTR lpName,
	LONG_PTR lParam);
typedef BOOL(__stdcall* ENUMRESTYPEPROCA)(
	HMODULE hModule,
	LPSTR lpType,
	LONG_PTR lParam
	);
typedef BOOL(__stdcall* ENUMRESTYPEPROCW)(
	HMODULE hModule,
	LPWSTR lpType,
	LONG_PTR lParam
	);

BOOL
__stdcall
DisableThreadLibraryCalls(
	HMODULE hLibModule
);

HRSRC
__stdcall
FindResourceExW(
	HMODULE hModule,
	LPCWSTR lpType,
	LPCWSTR lpName,
	WORD wLanguage
);

int
__stdcall
FindStringOrdinal(
	DWORD dwFindStringOrdinalFlags,
	LPCWSTR lpStringSource,
	int cchSource,
	LPCWSTR lpStringValue,
	int cchValue,
	BOOL bIgnoreCase
);

BOOL
__stdcall
FreeLibrary(
	HMODULE hLibModule
);


void
__stdcall
FreeLibraryAndExitThread(
	HMODULE hLibModule,
	DWORD dwExitCode
);

BOOL
__stdcall
FreeResource(
	HGLOBAL hResData
);

DWORD
__stdcall
GetModuleFileNameA(
	HMODULE hModule,
	LPSTR lpFilename,
	DWORD nSize
);

DWORD
__stdcall
GetModuleFileNameW(
	HMODULE hModule,
	LPWSTR lpFilename,
	DWORD nSize
);

HMODULE
__stdcall
GetModuleHandleA(
	LPCSTR lpModuleName
);

HMODULE
__stdcall
GetModuleHandleW(
	LPCWSTR lpModuleName
);
typedef
BOOL
(__stdcall*
	PGET_MODULE_HANDLE_EXA)(
		DWORD        dwFlags,
		LPCSTR     lpModuleName,
		HMODULE* phModule
		);
typedef
BOOL
(__stdcall*
	PGET_MODULE_HANDLE_EXW)(
		DWORD        dwFlags,
		LPCWSTR     lpModuleName,
		HMODULE* phModule
		);

BOOL
__stdcall
GetModuleHandleExA(
	DWORD dwFlags,
	LPCSTR lpModuleName,
	HMODULE* phModule
);

BOOL
__stdcall
GetModuleHandleExW(
	DWORD dwFlags,
	LPCWSTR lpModuleName,
	HMODULE* phModule
);

FARPROC
__stdcall
GetProcAddress(
	HMODULE hModule,
	LPCSTR lpProcName
);
typedef struct _REDIRECTION_FUNCTION_DESCRIPTOR {
	PCSTR DllName;
	PCSTR FunctionName;
	PVOID RedirectionTarget;
} REDIRECTION_FUNCTION_DESCRIPTOR, * PREDIRECTION_FUNCTION_DESCRIPTOR;
typedef const REDIRECTION_FUNCTION_DESCRIPTOR* PCREDIRECTION_FUNCTION_DESCRIPTOR;
typedef struct _REDIRECTION_DESCRIPTOR {
	ULONG Version;
	ULONG FunctionCount;
	PCREDIRECTION_FUNCTION_DESCRIPTOR Redirections;
} REDIRECTION_DESCRIPTOR, * PREDIRECTION_DESCRIPTOR;
typedef const REDIRECTION_DESCRIPTOR* PCREDIRECTION_DESCRIPTOR;

HMODULE
__stdcall
LoadLibraryExA(
	LPCSTR lpLibFileName,
	HANDLE hFile,
	DWORD dwFlags
);

HMODULE
__stdcall
LoadLibraryExW(
	LPCWSTR lpLibFileName,
	HANDLE hFile,
	DWORD dwFlags
);

HGLOBAL
__stdcall
LoadResource(
	HMODULE hModule,
	HRSRC hResInfo
);

int
__stdcall
LoadStringA(
	HINSTANCE hInstance,
	UINT uID,
	LPSTR lpBuffer,
	int cchBufferMax
);

int
__stdcall
LoadStringW(
	HINSTANCE hInstance,
	UINT uID,
	LPWSTR lpBuffer,
	int cchBufferMax
);

LPVOID
__stdcall
LockResource(
	HGLOBAL hResData
);

DWORD
__stdcall
SizeofResource(
	HMODULE hModule,
	HRSRC hResInfo
);
typedef PVOID DLL_DIRECTORY_COOKIE, * PDLL_DIRECTORY_COOKIE;

DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
	PCWSTR NewDirectory
);

BOOL
__stdcall
RemoveDllDirectory(
	DLL_DIRECTORY_COOKIE Cookie
);

BOOL
__stdcall
SetDefaultDllDirectories(
	DWORD DirectoryFlags
);

BOOL
__stdcall
EnumResourceLanguagesExA(
	HMODULE hModule,
	LPCSTR lpType,
	LPCSTR lpName,
	ENUMRESLANGPROCA lpEnumFunc,
	LONG_PTR lParam,
	DWORD dwFlags,
	LANGID LangId
);

BOOL
__stdcall
EnumResourceLanguagesExW(
	HMODULE hModule,
	LPCWSTR lpType,
	LPCWSTR lpName,
	ENUMRESLANGPROCW lpEnumFunc,
	LONG_PTR lParam,
	DWORD dwFlags,
	LANGID LangId
);

BOOL
__stdcall
EnumResourceNamesExA(
	HMODULE hModule,
	LPCSTR lpType,
	ENUMRESNAMEPROCA lpEnumFunc,
	LONG_PTR lParam,
	DWORD dwFlags,
	LANGID LangId
);

BOOL
__stdcall
EnumResourceNamesExW(
	HMODULE hModule,
	LPCWSTR lpType,
	ENUMRESNAMEPROCW lpEnumFunc,
	LONG_PTR lParam,
	DWORD dwFlags,
	LANGID LangId
);

BOOL
__stdcall
EnumResourceTypesExA(
	HMODULE hModule,
	ENUMRESTYPEPROCA lpEnumFunc,
	LONG_PTR lParam,
	DWORD dwFlags,
	LANGID LangId
);

BOOL
__stdcall
EnumResourceTypesExW(
	HMODULE hModule,
	ENUMRESTYPEPROCW lpEnumFunc,
	LONG_PTR lParam,
	DWORD dwFlags,
	LANGID LangId
);

HRSRC
__stdcall
FindResourceW(
	HMODULE hModule,
	LPCWSTR lpName,
	LPCWSTR lpType
);

HMODULE
__stdcall
LoadLibraryA(
	LPCSTR lpLibFileName
);

HMODULE
__stdcall
LoadLibraryW(
	LPCWSTR lpLibFileName
);

BOOL
__stdcall
EnumResourceNamesW(
	HMODULE hModule,
	LPCWSTR lpType,
	ENUMRESNAMEPROCW lpEnumFunc,
	LONG_PTR lParam
);

BOOL
__stdcall
AccessCheck(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	LPDWORD PrivilegeSetLength,
	LPDWORD GrantedAccess,
	LPBOOL AccessStatus
);

BOOL
__stdcall
AccessCheckAndAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	LPWSTR ObjectTypeName,
	LPWSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	DWORD DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccess,
	LPBOOL AccessStatus,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AccessCheckByType(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSID PrincipalSelfSid,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	LPDWORD PrivilegeSetLength,
	LPDWORD GrantedAccess,
	LPBOOL AccessStatus
);

BOOL
__stdcall
AccessCheckByTypeResultList(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSID PrincipalSelfSid,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	LPDWORD PrivilegeSetLength,
	LPDWORD GrantedAccessList,
	LPDWORD AccessStatusList
);

BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	LPCWSTR ObjectTypeName,
	LPCWSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	DWORD DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	DWORD Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccess,
	LPBOOL AccessStatus,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	LPCWSTR ObjectTypeName,
	LPCWSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	DWORD DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	DWORD Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccessList,
	LPDWORD AccessStatusList,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	HANDLE ClientToken,
	LPCWSTR ObjectTypeName,
	LPCWSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	DWORD DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	DWORD Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccessList,
	LPDWORD AccessStatusList,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AddAccessAllowedAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AccessMask,
	PSID pSid
);

BOOL
__stdcall
AddAccessAllowedAceEx(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	PSID pSid
);

BOOL
__stdcall
AddAccessAllowedObjectAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	GUID* ObjectTypeGuid,
	GUID* InheritedObjectTypeGuid,
	PSID pSid
);

BOOL
__stdcall
AddAccessDeniedAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AccessMask,
	PSID pSid
);

BOOL
__stdcall
AddAccessDeniedAceEx(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	PSID pSid
);

BOOL
__stdcall
AddAccessDeniedObjectAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	GUID* ObjectTypeGuid,
	GUID* InheritedObjectTypeGuid,
	PSID pSid
);

BOOL
__stdcall
AddAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD dwStartingAceIndex,
	LPVOID pAceList,
	DWORD nAceListLength
);

BOOL
__stdcall
AddAuditAccessAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD dwAccessMask,
	PSID pSid,
	BOOL bAuditSuccess,
	BOOL bAuditFailure
);

BOOL
__stdcall
AddAuditAccessAceEx(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD dwAccessMask,
	PSID pSid,
	BOOL bAuditSuccess,
	BOOL bAuditFailure
);

BOOL
__stdcall
AddAuditAccessObjectAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	GUID* ObjectTypeGuid,
	GUID* InheritedObjectTypeGuid,
	PSID pSid,
	BOOL bAuditSuccess,
	BOOL bAuditFailure
);

BOOL
__stdcall
AddMandatoryAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD MandatoryPolicy,
	PSID pLabelSid
);

BOOL
__stdcall
AddResourceAttributeAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	PSID pSid,
	PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
	PDWORD pReturnLength
);

BOOL
__stdcall
AddScopedPolicyIDAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	DWORD AccessMask,
	PSID pSid
);

BOOL
__stdcall
AdjustTokenGroups(
	HANDLE TokenHandle,
	BOOL ResetToDefault,
	PTOKEN_GROUPS NewState,
	DWORD BufferLength,
	PTOKEN_GROUPS PreviousState,
	PDWORD ReturnLength
);

BOOL
__stdcall
AdjustTokenPrivileges(
	HANDLE TokenHandle,
	BOOL DisableAllPrivileges,
	PTOKEN_PRIVILEGES NewState,
	DWORD BufferLength,
	PTOKEN_PRIVILEGES PreviousState,
	PDWORD ReturnLength
);

BOOL
__stdcall
AllocateAndInitializeSid(
	PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
	BYTE nSubAuthorityCount,
	DWORD nSubAuthority0,
	DWORD nSubAuthority1,
	DWORD nSubAuthority2,
	DWORD nSubAuthority3,
	DWORD nSubAuthority4,
	DWORD nSubAuthority5,
	DWORD nSubAuthority6,
	DWORD nSubAuthority7,
	PSID* pSid
);

BOOL
__stdcall
AllocateLocallyUniqueId(
	PLUID Luid
);

BOOL
__stdcall
AreAllAccessesGranted(
	DWORD GrantedAccess,
	DWORD DesiredAccess
);

BOOL
__stdcall
AreAnyAccessesGranted(
	DWORD GrantedAccess,
	DWORD DesiredAccess
);

BOOL
__stdcall
CheckTokenMembership(
	HANDLE TokenHandle,
	PSID SidToCheck,
	PBOOL IsMember
);

BOOL
__stdcall
CheckTokenCapability(
	HANDLE TokenHandle,
	PSID CapabilitySidToCheck,
	PBOOL HasCapability
);

BOOL
__stdcall
GetAppContainerAce(
	PACL Acl,
	DWORD StartingAceIndex,
	PVOID* AppContainerAce,
	DWORD* AppContainerAceIndex
);

BOOL
__stdcall
CheckTokenMembershipEx(
	HANDLE TokenHandle,
	PSID SidToCheck,
	DWORD Flags,
	PBOOL IsMember
);

BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
	PSECURITY_DESCRIPTOR* NewSecurityDescriptor,
	GUID* ObjectType,
	BOOLEAN IsDirectoryObject,
	PGENERIC_MAPPING GenericMapping
);

BOOL
__stdcall
CopySid(
	DWORD nDestinationSidLength,
	PSID pDestinationSid,
	PSID pSourceSid
);

BOOL
__stdcall
CreatePrivateObjectSecurity(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	BOOL IsDirectoryObject,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

BOOL
__stdcall
CreatePrivateObjectSecurityEx(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	GUID* ObjectType,
	BOOL IsContainerObject,
	ULONG AutoInheritFlags,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	GUID** ObjectTypes,
	ULONG GuidCount,
	BOOL IsContainerObject,
	ULONG AutoInheritFlags,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

BOOL
__stdcall
CreateRestrictedToken(
	HANDLE ExistingTokenHandle,
	DWORD Flags,
	DWORD DisableSidCount,
	PSID_AND_ATTRIBUTES SidsToDisable,
	DWORD DeletePrivilegeCount,
	PLUID_AND_ATTRIBUTES PrivilegesToDelete,
	DWORD RestrictedSidCount,
	PSID_AND_ATTRIBUTES SidsToRestrict,
	PHANDLE NewTokenHandle
);

BOOL
__stdcall
CreateWellKnownSid(
	WELL_KNOWN_SID_TYPE WellKnownSidType,
	PSID DomainSid,
	PSID pSid,
	DWORD* cbSid
);

BOOL
__stdcall
EqualDomainSid(
	PSID pSid1,
	PSID pSid2,
	BOOL* pfEqual
);

BOOL
__stdcall
DeleteAce(
	PACL pAcl,
	DWORD dwAceIndex
);

BOOL
__stdcall
DestroyPrivateObjectSecurity(
	PSECURITY_DESCRIPTOR* ObjectDescriptor
);

BOOL
__stdcall
DuplicateToken(
	HANDLE ExistingTokenHandle,
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
	PHANDLE DuplicateTokenHandle
);

BOOL
__stdcall
DuplicateTokenEx(
	HANDLE hExistingToken,
	DWORD dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpTokenAttributes,
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
	TOKEN_TYPE TokenType,
	PHANDLE phNewToken
);

BOOL
__stdcall
EqualPrefixSid(
	PSID pSid1,
	PSID pSid2
);

BOOL
__stdcall
EqualSid(
	PSID pSid1,
	PSID pSid2
);

BOOL
__stdcall
FindFirstFreeAce(
	PACL pAcl,
	LPVOID* pAce
);

PVOID
__stdcall
FreeSid(
	PSID pSid
);

BOOL
__stdcall
GetAce(
	PACL pAcl,
	DWORD dwAceIndex,
	LPVOID* pAce
);

BOOL
__stdcall
GetAclInformation(
	PACL pAcl,
	LPVOID pAclInformation,
	DWORD nAclInformationLength,
	ACL_INFORMATION_CLASS dwAclInformationClass
);

BOOL
__stdcall
GetFileSecurityW(
	LPCWSTR lpFileName,
	SECURITY_INFORMATION RequestedInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	DWORD nLength,
	LPDWORD lpnLengthNeeded
);

BOOL
__stdcall
GetKernelObjectSecurity(
	HANDLE Handle,
	SECURITY_INFORMATION RequestedInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	DWORD nLength,
	LPDWORD lpnLengthNeeded
);

DWORD
__stdcall
GetLengthSid(
	PSID pSid
);

BOOL
__stdcall
GetPrivateObjectSecurity(
	PSECURITY_DESCRIPTOR ObjectDescriptor,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR ResultantDescriptor,
	DWORD DescriptorLength,
	PDWORD ReturnLength
);

BOOL
__stdcall
GetSecurityDescriptorControl(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSECURITY_DESCRIPTOR_CONTROL pControl,
	LPDWORD lpdwRevision
);

BOOL
__stdcall
GetSecurityDescriptorDacl(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	LPBOOL lpbDaclPresent,
	PACL* pDacl,
	LPBOOL lpbDaclDefaulted
);

BOOL
__stdcall
GetSecurityDescriptorGroup(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSID* pGroup,
	LPBOOL lpbGroupDefaulted
);

DWORD
__stdcall
GetSecurityDescriptorLength(
	PSECURITY_DESCRIPTOR pSecurityDescriptor
);

BOOL
__stdcall
GetSecurityDescriptorOwner(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSID* pOwner,
	LPBOOL lpbOwnerDefaulted
);

DWORD
__stdcall
GetSecurityDescriptorRMControl(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PUCHAR RMControl
);

BOOL
__stdcall
GetSecurityDescriptorSacl(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	LPBOOL lpbSaclPresent,
	PACL* pSacl,
	LPBOOL lpbSaclDefaulted
);

PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
	PSID pSid
);

DWORD
__stdcall
GetSidLengthRequired(
	UCHAR nSubAuthorityCount
);

PDWORD
__stdcall
GetSidSubAuthority(
	PSID pSid,
	DWORD nSubAuthority
);

PUCHAR
__stdcall
GetSidSubAuthorityCount(
	PSID pSid
);

BOOL
__stdcall
GetTokenInformation(
	HANDLE TokenHandle,
	TOKEN_INFORMATION_CLASS TokenInformationClass,
	LPVOID TokenInformation,
	DWORD TokenInformationLength,
	PDWORD ReturnLength
);

BOOL
__stdcall
GetWindowsAccountDomainSid(
	PSID pSid,
	PSID pDomainSid,
	DWORD* cbDomainSid
);

BOOL
__stdcall
ImpersonateAnonymousToken(
	HANDLE ThreadHandle
);

BOOL
__stdcall
ImpersonateLoggedOnUser(
	HANDLE hToken
);

BOOL
__stdcall
ImpersonateSelf(
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
);

BOOL
__stdcall
InitializeAcl(
	PACL pAcl,
	DWORD nAclLength,
	DWORD dwAclRevision
);

BOOL
__stdcall
InitializeSecurityDescriptor(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	DWORD dwRevision
);

BOOL
__stdcall
InitializeSid(
	PSID Sid,
	PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
	BYTE nSubAuthorityCount
);

BOOL
__stdcall
IsTokenRestricted(
	HANDLE TokenHandle
);

BOOL
__stdcall
IsValidAcl(
	PACL pAcl
);

BOOL
__stdcall
IsValidSecurityDescriptor(
	PSECURITY_DESCRIPTOR pSecurityDescriptor
);

BOOL
__stdcall
IsValidSid(
	PSID pSid
);

BOOL
__stdcall
IsWellKnownSid(
	PSID pSid,
	WELL_KNOWN_SID_TYPE WellKnownSidType
);

BOOL
__stdcall
MakeAbsoluteSD(
	PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
	PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
	LPDWORD lpdwAbsoluteSecurityDescriptorSize,
	PACL pDacl,
	LPDWORD lpdwDaclSize,
	PACL pSacl,
	LPDWORD lpdwSaclSize,
	PSID pOwner,
	LPDWORD lpdwOwnerSize,
	PSID pPrimaryGroup,
	LPDWORD lpdwPrimaryGroupSize
);

BOOL
__stdcall
MakeSelfRelativeSD(
	PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
	PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
	LPDWORD lpdwBufferLength
);

void
__stdcall
MapGenericMask(
	PDWORD AccessMask,
	PGENERIC_MAPPING GenericMapping
);

BOOL
__stdcall
ObjectCloseAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	BOOL GenerateOnClose
);

BOOL
__stdcall
ObjectDeleteAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	BOOL GenerateOnClose
);

BOOL
__stdcall
ObjectOpenAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	LPWSTR ObjectTypeName,
	LPWSTR ObjectName,
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	DWORD GrantedAccess,
	PPRIVILEGE_SET Privileges,
	BOOL ObjectCreation,
	BOOL AccessGranted,
	LPBOOL GenerateOnClose
);

BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
	LPCWSTR SubsystemName,
	LPVOID HandleId,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	PPRIVILEGE_SET Privileges,
	BOOL AccessGranted
);

BOOL
__stdcall
PrivilegeCheck(
	HANDLE ClientToken,
	PPRIVILEGE_SET RequiredPrivileges,
	LPBOOL pfResult
);

BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
	LPCWSTR SubsystemName,
	LPCWSTR ServiceName,
	HANDLE ClientToken,
	PPRIVILEGE_SET Privileges,
	BOOL AccessGranted
);

void
__stdcall
QuerySecurityAccessMask(
	SECURITY_INFORMATION SecurityInformation,
	LPDWORD DesiredAccess
);

BOOL
__stdcall
RevertToSelf(
	void
);

BOOL
__stdcall
SetAclInformation(
	PACL pAcl,
	LPVOID pAclInformation,
	DWORD nAclInformationLength,
	ACL_INFORMATION_CLASS dwAclInformationClass
);

BOOL
__stdcall
SetFileSecurityW(
	LPCWSTR lpFileName,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor
);

BOOL
__stdcall
SetKernelObjectSecurity(
	HANDLE Handle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor
);

BOOL
__stdcall
SetPrivateObjectSecurity(
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR ModificationDescriptor,
	PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,
	PGENERIC_MAPPING GenericMapping,
	HANDLE Token
);

BOOL
__stdcall
SetPrivateObjectSecurityEx(
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR ModificationDescriptor,
	PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,
	ULONG AutoInheritFlags,
	PGENERIC_MAPPING GenericMapping,
	HANDLE Token
);

void
__stdcall
SetSecurityAccessMask(
	SECURITY_INFORMATION SecurityInformation,
	LPDWORD DesiredAccess
);

BOOL
__stdcall
SetSecurityDescriptorControl(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
	SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
);

BOOL
__stdcall
SetSecurityDescriptorDacl(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	BOOL bDaclPresent,
	PACL pDacl,
	BOOL bDaclDefaulted
);

BOOL
__stdcall
SetSecurityDescriptorGroup(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSID pGroup,
	BOOL bGroupDefaulted
);

BOOL
__stdcall
SetSecurityDescriptorOwner(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	PSID pOwner,
	BOOL bOwnerDefaulted
);

DWORD
__stdcall
SetSecurityDescriptorRMControl(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PUCHAR RMControl
);

BOOL
__stdcall
SetSecurityDescriptorSacl(
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	BOOL bSaclPresent,
	PACL pSacl,
	BOOL bSaclDefaulted
);

BOOL
__stdcall
SetTokenInformation(
	HANDLE TokenHandle,
	TOKEN_INFORMATION_CLASS TokenInformationClass,
	LPVOID TokenInformation,
	DWORD TokenInformationLength
);

BOOL
__stdcall
SetCachedSigningLevel(
	PHANDLE SourceFiles,
	ULONG SourceFileCount,
	ULONG Flags,
	HANDLE TargetFile
);

BOOL
__stdcall
GetCachedSigningLevel(
	HANDLE File,
	PULONG Flags,
	PULONG SigningLevel,
	PUCHAR Thumbprint,
	PULONG ThumbprintSize,
	PULONG ThumbprintAlgorithm
);

LONG
__stdcall
CveEventWrite(
	PCWSTR CveId,
	PCWSTR AdditionalDetails
);

BOOL
__stdcall
DeriveCapabilitySidsFromName(
	LPCWSTR CapName,
	PSID** CapabilityGroupSids,
	DWORD* CapabilityGroupSidCount,
	PSID** CapabilitySids,
	DWORD* CapabilitySidCount
);

HANDLE
__stdcall
CreatePrivateNamespaceW(
	LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
	LPVOID lpBoundaryDescriptor,
	LPCWSTR lpAliasPrefix
);

HANDLE
__stdcall
OpenPrivateNamespaceW(
	LPVOID lpBoundaryDescriptor,
	LPCWSTR lpAliasPrefix
);

BOOLEAN
__stdcall
ClosePrivateNamespace(
	HANDLE Handle,
	ULONG Flags
);

HANDLE
__stdcall
CreateBoundaryDescriptorW(
	LPCWSTR Name,
	ULONG Flags
);

BOOL
__stdcall
AddSIDToBoundaryDescriptor(
	HANDLE* BoundaryDescriptor,
	PSID RequiredSid
);

void
__stdcall
DeleteBoundaryDescriptor(
	HANDLE BoundaryDescriptor
);

BOOL
__stdcall
GetNumaHighestNodeNumber(
	PULONG HighestNodeNumber
);

BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
	USHORT Node,
	PGROUP_AFFINITY ProcessorMask
);

BOOL
__stdcall
GetNumaProximityNodeEx(
	ULONG ProximityId,
	PUSHORT NodeNumber
);

BOOL
__stdcall
GetProcessGroupAffinity(
	HANDLE hProcess,
	PUSHORT GroupCount,
	PUSHORT GroupArray
);

BOOL
__stdcall
GetThreadGroupAffinity(
	HANDLE hThread,
	PGROUP_AFFINITY GroupAffinity
);

BOOL
__stdcall
SetThreadGroupAffinity(
	HANDLE hThread,
	const GROUP_AFFINITY* GroupAffinity,
	PGROUP_AFFINITY PreviousGroupAffinity
);
BOOL
__stdcall
GetAppContainerNamedObjectPath(
	HANDLE Token,
	PSID AppContainerSid,
	ULONG ObjectPathLength,
	LPWSTR ObjectPath,
	PULONG ReturnLength
);

BOOL
__stdcall
QueryThreadCycleTime(
	HANDLE ThreadHandle,
	PULONG64 CycleTime
);

BOOL
__stdcall
QueryProcessCycleTime(
	HANDLE ProcessHandle,
	PULONG64 CycleTime
);

BOOL
__stdcall
QueryIdleProcessorCycleTime(
	PULONG BufferLength,
	PULONG64 ProcessorIdleCycleTime
);

BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
	USHORT Group,
	PULONG BufferLength,
	PULONG64 ProcessorIdleCycleTime
);

void
__stdcall
QueryInterruptTimePrecise(
	PULONGLONG lpInterruptTimePrecise
);

void
__stdcall
QueryUnbiasedInterruptTimePrecise(
	PULONGLONG lpUnbiasedInterruptTimePrecise
);

void
__stdcall
QueryInterruptTime(
	PULONGLONG lpInterruptTime
);

BOOL
__stdcall
QueryUnbiasedInterruptTime(
	PULONGLONG UnbiasedTime
);

HRESULT
__stdcall
QueryAuxiliaryCounterFrequency(
	PULONGLONG lpAuxiliaryCounterFrequency
);

HRESULT
__stdcall
ConvertAuxiliaryCounterToPerformanceCounter(
	ULONGLONG ullAuxiliaryCounterValue,
	PULONGLONG lpPerformanceCounterValue,
	PULONGLONG lpConversionError
);

HRESULT
__stdcall
ConvertPerformanceCounterToAuxiliaryCounter(
	ULONGLONG ullPerformanceCounterValue,
	PULONGLONG lpAuxiliaryCounterValue,
	PULONGLONG lpConversionError
);
typedef void(__stdcall* PFIBER_START_ROUTINE)(
	LPVOID lpFiberParameter
	);
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
typedef LPVOID(__stdcall* PFIBER_CALLOUT_ROUTINE)(
	LPVOID lpParameter
	);
typedef LPVOID LPLDT_ENTRY;
typedef struct _COMMPROP {
	WORD wPacketLength;
	WORD wPacketVersion;
	DWORD dwServiceMask;
	DWORD dwReserved1;
	DWORD dwMaxTxQueue;
	DWORD dwMaxRxQueue;
	DWORD dwMaxBaud;
	DWORD dwProvSubType;
	DWORD dwProvCapabilities;
	DWORD dwSettableParams;
	DWORD dwSettableBaud;
	WORD wSettableData;
	WORD wSettableStopParity;
	DWORD dwCurrentTxQueue;
	DWORD dwCurrentRxQueue;
	DWORD dwProvSpec1;
	DWORD dwProvSpec2;
	WCHAR wcProvChar[1];
} COMMPROP, * LPCOMMPROP;
typedef struct _COMSTAT {
	DWORD fCtsHold : 1;
	DWORD fDsrHold : 1;
	DWORD fRlsdHold : 1;
	DWORD fXoffHold : 1;
	DWORD fXoffSent : 1;
	DWORD fEof : 1;
	DWORD fTxim : 1;
	DWORD fReserved : 25;
	DWORD cbInQue;
	DWORD cbOutQue;
} COMSTAT, * LPCOMSTAT;
typedef struct _DCB {
	DWORD DCBlength;
	DWORD BaudRate;
	DWORD fBinary : 1;
	DWORD fParity : 1;
	DWORD fOutxCtsFlow : 1;
	DWORD fOutxDsrFlow : 1;
	DWORD fDtrControl : 2;
	DWORD fDsrSensitivity : 1;
	DWORD fTXContinueOnXoff : 1;
	DWORD fOutX : 1;
	DWORD fInX : 1;
	DWORD fErrorChar : 1;
	DWORD fNull : 1;
	DWORD fRtsControl : 2;
	DWORD fAbortOnError : 1;
	DWORD fDummy2 : 17;
	WORD wReserved;
	WORD XonLim;
	WORD XoffLim;
	BYTE ByteSize;
	BYTE Parity;
	BYTE StopBits;
	char XonChar;
	char XoffChar;
	char ErrorChar;
	char EofChar;
	char EvtChar;
	WORD wReserved1;
} DCB, * LPDCB;
typedef struct _COMMTIMEOUTS {
	DWORD ReadIntervalTimeout;
	DWORD ReadTotalTimeoutMultiplier;
	DWORD ReadTotalTimeoutConstant;
	DWORD WriteTotalTimeoutMultiplier;
	DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS, * LPCOMMTIMEOUTS;
typedef struct _COMMCONFIG {
	DWORD dwSize;
	WORD wVersion;
	WORD wReserved;
	DCB dcb;
	DWORD dwProviderSubType;
	DWORD dwProviderOffset;
	DWORD dwProviderSize;
	WCHAR wcProviderData[1];
} COMMCONFIG, * LPCOMMCONFIG;
typedef struct _MEMORYSTATUS {
	DWORD dwLength;
	DWORD dwMemoryLoad;
	SIZE_T dwTotalPhys;
	SIZE_T dwAvailPhys;
	SIZE_T dwTotalPageFile;
	SIZE_T dwAvailPageFile;
	SIZE_T dwTotalVirtual;
	SIZE_T dwAvailVirtual;
} MEMORYSTATUS, * LPMEMORYSTATUS;
typedef struct _JIT_DEBUG_INFO {
	DWORD dwSize;
	DWORD dwProcessorArchitecture;
	DWORD dwThreadID;
	DWORD dwReserved0;
	ULONG64 lpExceptionAddress;
	ULONG64 lpExceptionRecord;
	ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, * LPJIT_DEBUG_INFO;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, * LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, * LPJIT_DEBUG_INFO64;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef struct _OFSTRUCT {
	BYTE cBytes;
	BYTE fFixedDisk;
	WORD nErrCode;
	WORD Reserved1;
	WORD Reserved2;
	CHAR szPathName[128];
} OFSTRUCT, * LPOFSTRUCT, * POFSTRUCT;
int
__stdcall
WinMain(
	HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	LPSTR lpCmdLine,
	int nShowCmd
);
int
__stdcall
wWinMain(
	HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	LPWSTR lpCmdLine,
	int nShowCmd
);


HGLOBAL
__stdcall
GlobalAlloc(
	UINT uFlags,
	SIZE_T dwBytes
);


HGLOBAL
__stdcall
GlobalReAlloc(
	HGLOBAL hMem,
	SIZE_T dwBytes,
	UINT uFlags
);

SIZE_T
__stdcall
GlobalSize(
	HGLOBAL hMem
);

BOOL
__stdcall
GlobalUnlock(
	HGLOBAL hMem
);

LPVOID
__stdcall
GlobalLock(
	HGLOBAL hMem
);

UINT
__stdcall
GlobalFlags(
	HGLOBAL hMem
);

HGLOBAL
__stdcall
GlobalHandle(
	LPCVOID pMem
);

HGLOBAL
__stdcall
GlobalFree(
	HGLOBAL hMem
);

SIZE_T
__stdcall
GlobalCompact(
	DWORD dwMinFree
);

void
__stdcall
GlobalFix(
	HGLOBAL hMem
);

void
__stdcall
GlobalUnfix(
	HGLOBAL hMem
);

LPVOID
__stdcall
GlobalWire(
	HGLOBAL hMem
);

BOOL
__stdcall
GlobalUnWire(
	HGLOBAL hMem
);

void
__stdcall
GlobalMemoryStatus(
	LPMEMORYSTATUS lpBuffer
);


HLOCAL
__stdcall
LocalAlloc(
	UINT uFlags,
	SIZE_T uBytes
);


HLOCAL
__stdcall
LocalReAlloc(
	HLOCAL hMem,
	SIZE_T uBytes,
	UINT uFlags
);

LPVOID
__stdcall
LocalLock(
	HLOCAL hMem
);

HLOCAL
__stdcall
LocalHandle(
	LPCVOID pMem
);

BOOL
__stdcall
LocalUnlock(
	HLOCAL hMem
);

SIZE_T
__stdcall
LocalSize(
	HLOCAL hMem
);

UINT
__stdcall
LocalFlags(
	HLOCAL hMem
);

HLOCAL
__stdcall
LocalFree(
	HLOCAL hMem
);

SIZE_T
__stdcall
LocalShrink(
	HLOCAL hMem,
	UINT cbNewSize
);

SIZE_T
__stdcall
LocalCompact(
	UINT uMinFree
);

BOOL
__stdcall
GetBinaryTypeA(
	LPCSTR lpApplicationName,
	LPDWORD  lpBinaryType
);

BOOL
__stdcall
GetBinaryTypeW(
	LPCWSTR lpApplicationName,
	LPDWORD  lpBinaryType
);

DWORD
__stdcall
GetShortPathNameA(
	LPCSTR lpszLongPath,
	LPSTR  lpszShortPath,
	DWORD cchBuffer
);

DWORD
__stdcall
GetLongPathNameTransactedA(
	LPCSTR lpszShortPath,
	LPSTR  lpszLongPath,
	DWORD cchBuffer,
	HANDLE hTransaction
);

DWORD
__stdcall
GetLongPathNameTransactedW(
	LPCWSTR lpszShortPath,
	LPWSTR  lpszLongPath,
	DWORD cchBuffer,
	HANDLE hTransaction
);

BOOL
__stdcall
GetProcessAffinityMask(
	HANDLE hProcess,
	PDWORD_PTR lpProcessAffinityMask,
	PDWORD_PTR lpSystemAffinityMask
);

BOOL
__stdcall
SetProcessAffinityMask(
	HANDLE hProcess,
	DWORD_PTR dwProcessAffinityMask
);

BOOL
__stdcall
GetProcessIoCounters(
	HANDLE hProcess,
	PIO_COUNTERS lpIoCounters
);

BOOL
__stdcall
GetProcessWorkingSetSize(
	HANDLE hProcess,
	PSIZE_T lpMinimumWorkingSetSize,
	PSIZE_T lpMaximumWorkingSetSize
);

BOOL
__stdcall
SetProcessWorkingSetSize(
	HANDLE hProcess,
	SIZE_T dwMinimumWorkingSetSize,
	SIZE_T dwMaximumWorkingSetSize
);

void
__stdcall
FatalExit(
	int ExitCode
);

BOOL
__stdcall
SetEnvironmentStringsA(
	LPCH NewEnvironment
);

void
__stdcall
SwitchToFiber(
	LPVOID lpFiber
);

void
__stdcall
DeleteFiber(
	LPVOID lpFiber
);

BOOL
__stdcall
ConvertFiberToThread(
	void
);

LPVOID
__stdcall
CreateFiberEx(
	SIZE_T dwStackCommitSize,
	SIZE_T dwStackReserveSize,
	DWORD dwFlags,
	LPFIBER_START_ROUTINE lpStartAddress,
	LPVOID lpParameter
);

LPVOID
__stdcall
ConvertThreadToFiberEx(
	LPVOID lpParameter,
	DWORD dwFlags
);

LPVOID
__stdcall
CreateFiber(
	SIZE_T dwStackSize,
	LPFIBER_START_ROUTINE lpStartAddress,
	LPVOID lpParameter
);

LPVOID
__stdcall
ConvertThreadToFiber(
	LPVOID lpParameter
);
typedef void* PUMS_CONTEXT;
typedef void* PUMS_COMPLETION_LIST;
typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, * PUMS_THREAD_INFO_CLASS;
typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;
typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;
typedef struct _UMS_SCHEDULER_STARTUP_INFO {
	ULONG UmsVersion;
	PUMS_COMPLETION_LIST CompletionList;
	PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;
	PVOID SchedulerParam;
} UMS_SCHEDULER_STARTUP_INFO, * PUMS_SCHEDULER_STARTUP_INFO;
typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
	ULONG UmsVersion;
	union {
		struct {
			ULONG IsUmsSchedulerThread : 1;
			ULONG IsUmsWorkerThread : 1;
		};
		ULONG ThreadUmsFlags;
	};
} UMS_SYSTEM_THREAD_INFORMATION, * PUMS_SYSTEM_THREAD_INFORMATION;

BOOL
__stdcall
CreateUmsCompletionList(
	PUMS_COMPLETION_LIST* UmsCompletionList
);

BOOL
__stdcall
DequeueUmsCompletionListItems(
	PUMS_COMPLETION_LIST UmsCompletionList,
	DWORD WaitTimeOut,
	PUMS_CONTEXT* UmsThreadList
);

BOOL
__stdcall
GetUmsCompletionListEvent(
	PUMS_COMPLETION_LIST UmsCompletionList,
	PHANDLE UmsCompletionEvent
);

BOOL
__stdcall
ExecuteUmsThread(
	PUMS_CONTEXT UmsThread
);

BOOL
__stdcall
UmsThreadYield(
	PVOID SchedulerParam
);

BOOL
__stdcall
DeleteUmsCompletionList(
	PUMS_COMPLETION_LIST UmsCompletionList
);

PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
	void
);

PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
	PUMS_CONTEXT UmsContext
);

BOOL
__stdcall
QueryUmsThreadInformation(
	PUMS_CONTEXT UmsThread,
	UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
	PVOID UmsThreadInformation,
	ULONG UmsThreadInformationLength,
	PULONG ReturnLength
);

BOOL
__stdcall
SetUmsThreadInformation(
	PUMS_CONTEXT UmsThread,
	UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
	PVOID UmsThreadInformation,
	ULONG UmsThreadInformationLength
);

BOOL
__stdcall
DeleteUmsThreadContext(
	PUMS_CONTEXT UmsThread
);

BOOL
__stdcall
CreateUmsThreadContext(
	PUMS_CONTEXT* lpUmsThread
);

BOOL
__stdcall
EnterUmsSchedulingMode(
	PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
);

BOOL
__stdcall
GetUmsSystemThreadInformation(
	HANDLE ThreadHandle,
	PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
);

DWORD_PTR
__stdcall
SetThreadAffinityMask(
	HANDLE hThread,
	DWORD_PTR dwThreadAffinityMask
);

BOOL
__stdcall
SetProcessDEPPolicy(
	DWORD dwFlags
);

BOOL
__stdcall
GetProcessDEPPolicy(
	HANDLE hProcess,
	LPDWORD lpFlags,
	PBOOL lpPermanent
);

BOOL
__stdcall
RequestWakeupLatency(
	LATENCY_TIME latency
);

BOOL
__stdcall
IsSystemResumeAutomatic(
	void
);

BOOL
__stdcall
GetThreadSelectorEntry(
	HANDLE hThread,
	DWORD dwSelector,
	LPLDT_ENTRY lpSelectorEntry
);

EXECUTION_STATE
__stdcall
SetThreadExecutionState(
	EXECUTION_STATE esFlags
);
typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, * PPOWER_REQUEST_CONTEXT, * LPPOWER_REQUEST_CONTEXT;

HANDLE
__stdcall
PowerCreateRequest(
	PREASON_CONTEXT Context
);

BOOL
__stdcall
PowerSetRequest(
	HANDLE PowerRequest,
	POWER_REQUEST_TYPE RequestType
);

BOOL
__stdcall
PowerClearRequest(
	HANDLE PowerRequest,
	POWER_REQUEST_TYPE RequestType
);

BOOL
__stdcall
SetFileCompletionNotificationModes(
	HANDLE FileHandle,
	UCHAR Flags
);

BOOL
__stdcall
Wow64GetThreadSelectorEntry(
	HANDLE hThread,
	DWORD dwSelector,
	PWOW64_LDT_ENTRY lpSelectorEntry
);

BOOL
__stdcall
DebugSetProcessKillOnExit(
	BOOL KillOnExit
);

BOOL
__stdcall
DebugBreakProcess(
	HANDLE Process
);

BOOL
__stdcall
PulseEvent(
	HANDLE hEvent
);

ATOM
__stdcall
GlobalDeleteAtom(
	ATOM nAtom
);

BOOL
__stdcall
InitAtomTable(
	DWORD nSize
);

ATOM
__stdcall
DeleteAtom(
	ATOM nAtom
);

UINT
__stdcall
SetHandleCount(
	UINT uNumber
);

BOOL
__stdcall
RequestDeviceWakeup(
	HANDLE hDevice
);

BOOL
__stdcall
CancelDeviceWakeupRequest(
	HANDLE hDevice
);

BOOL
__stdcall
GetDevicePowerState(
	HANDLE hDevice,
	BOOL* pfOn
);

BOOL
__stdcall
SetMessageWaitingIndicator(
	HANDLE hMsgIndicator,
	ULONG ulMsgCount
);

BOOL
__stdcall
SetFileShortNameA(
	HANDLE hFile,
	LPCSTR lpShortName
);

BOOL
__stdcall
SetFileShortNameW(
	HANDLE hFile,
	LPCWSTR lpShortName
);

DWORD
__stdcall
LoadModule(
	LPCSTR lpModuleName,
	LPVOID lpParameterBlock
);

UINT
__stdcall
WinExec(
	LPCSTR lpCmdLine,
	UINT uCmdShow
);

BOOL
__stdcall
ClearCommBreak(
	HANDLE hFile
);

BOOL
__stdcall
ClearCommError(
	HANDLE hFile,
	LPDWORD lpErrors,
	LPCOMSTAT lpStat
);

BOOL
__stdcall
SetupComm(
	HANDLE hFile,
	DWORD dwInQueue,
	DWORD dwOutQueue
);

BOOL
__stdcall
EscapeCommFunction(
	HANDLE hFile,
	DWORD dwFunc
);

BOOL
__stdcall
GetCommConfig(
	HANDLE hCommDev,
	LPCOMMCONFIG lpCC,
	LPDWORD lpdwSize
);

BOOL
__stdcall
GetCommMask(
	HANDLE hFile,
	LPDWORD lpEvtMask
);

BOOL
__stdcall
GetCommProperties(
	HANDLE hFile,
	LPCOMMPROP lpCommProp
);

BOOL
__stdcall
GetCommModemStatus(
	HANDLE hFile,
	LPDWORD lpModemStat
);

BOOL
__stdcall
GetCommState(
	HANDLE hFile,
	LPDCB lpDCB
);

BOOL
__stdcall
GetCommTimeouts(
	HANDLE hFile,
	LPCOMMTIMEOUTS lpCommTimeouts
);

BOOL
__stdcall
PurgeComm(
	HANDLE hFile,
	DWORD dwFlags
);

BOOL
__stdcall
SetCommBreak(
	HANDLE hFile
);

BOOL
__stdcall
SetCommConfig(
	HANDLE hCommDev,
	LPCOMMCONFIG lpCC,
	DWORD dwSize
);

BOOL
__stdcall
SetCommMask(
	HANDLE hFile,
	DWORD dwEvtMask
);

BOOL
__stdcall
SetCommState(
	HANDLE hFile,
	LPDCB lpDCB
);

BOOL
__stdcall
SetCommTimeouts(
	HANDLE hFile,
	LPCOMMTIMEOUTS lpCommTimeouts
);

BOOL
__stdcall
TransmitCommChar(
	HANDLE hFile,
	char cChar
);

BOOL
__stdcall
WaitCommEvent(
	HANDLE hFile,
	LPDWORD lpEvtMask,
	LPOVERLAPPED lpOverlapped
);

HANDLE
__stdcall
OpenCommPort(
	ULONG uPortNumber,
	DWORD dwDesiredAccess,
	DWORD dwFlagsAndAttributes
);

ULONG
__stdcall
GetCommPorts(
	PULONG lpPortNumbers,
	ULONG uPortNumbersCount,
	PULONG puPortNumbersFound
);

DWORD
__stdcall
SetTapePosition(
	HANDLE hDevice,
	DWORD dwPositionMethod,
	DWORD dwPartition,
	DWORD dwOffsetLow,
	DWORD dwOffsetHigh,
	BOOL bImmediate
);

DWORD
__stdcall
GetTapePosition(
	HANDLE hDevice,
	DWORD dwPositionType,
	LPDWORD lpdwPartition,
	LPDWORD lpdwOffsetLow,
	LPDWORD lpdwOffsetHigh
);

DWORD
__stdcall
PrepareTape(
	HANDLE hDevice,
	DWORD dwOperation,
	BOOL bImmediate
);

DWORD
__stdcall
EraseTape(
	HANDLE hDevice,
	DWORD dwEraseType,
	BOOL bImmediate
);

DWORD
__stdcall
CreateTapePartition(
	HANDLE hDevice,
	DWORD dwPartitionMethod,
	DWORD dwCount,
	DWORD dwSize
);

DWORD
__stdcall
WriteTapemark(
	HANDLE hDevice,
	DWORD dwTapemarkType,
	DWORD dwTapemarkCount,
	BOOL bImmediate
);

DWORD
__stdcall
GetTapeStatus(
	HANDLE hDevice
);

DWORD
__stdcall
GetTapeParameters(
	HANDLE hDevice,
	DWORD dwOperation,
	LPDWORD lpdwSize,
	LPVOID lpTapeInformation
);

DWORD
__stdcall
SetTapeParameters(
	HANDLE hDevice,
	DWORD dwOperation,
	LPVOID lpTapeInformation
);

int
__stdcall
MulDiv(
	int nNumber,
	int nNumerator,
	int nDenominator
);
typedef enum _DEP_SYSTEM_POLICY_TYPE {
	DEPPolicyAlwaysOff = 0,
	DEPPolicyAlwaysOn,
	DEPPolicyOptIn,
	DEPPolicyOptOut,
	DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;

DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
	void
);

BOOL
__stdcall
GetSystemRegistryQuota(
	PDWORD pdwQuotaAllowed,
	PDWORD pdwQuotaUsed
);

BOOL
__stdcall
FileTimeToDosDateTime(
	const FILETIME* lpFileTime,
	LPWORD lpFatDate,
	LPWORD lpFatTime
);

BOOL
__stdcall
DosDateTimeToFileTime(
	WORD wFatDate,
	WORD wFatTime,
	LPFILETIME lpFileTime
);

DWORD
__stdcall
FormatMessageA(
	DWORD dwFlags,
	LPCVOID lpSource,
	DWORD dwMessageId,
	DWORD dwLanguageId,
	LPSTR lpBuffer,
	DWORD nSize,
	va_list* Arguments
);

DWORD
__stdcall
FormatMessageW(
	DWORD dwFlags,
	LPCVOID lpSource,
	DWORD dwMessageId,
	DWORD dwLanguageId,
	LPWSTR lpBuffer,
	DWORD nSize,
	va_list* Arguments
);

HANDLE
__stdcall
CreateMailslotA(
	LPCSTR lpName,
	DWORD nMaxMessageSize,
	DWORD lReadTimeout,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

HANDLE
__stdcall
CreateMailslotW(
	LPCWSTR lpName,
	DWORD nMaxMessageSize,
	DWORD lReadTimeout,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
GetMailslotInfo(
	HANDLE hMailslot,
	LPDWORD lpMaxMessageSize,
	LPDWORD lpNextSize,
	LPDWORD lpMessageCount,
	LPDWORD lpReadTimeout
);

BOOL
__stdcall
SetMailslotInfo(
	HANDLE hMailslot,
	DWORD lReadTimeout
);

BOOL
__stdcall
EncryptFileA(
	LPCSTR lpFileName
);

BOOL
__stdcall
EncryptFileW(
	LPCWSTR lpFileName
);

BOOL
__stdcall
DecryptFileA(
	LPCSTR lpFileName,
	DWORD dwReserved
);

BOOL
__stdcall
DecryptFileW(
	LPCWSTR lpFileName,
	DWORD dwReserved
);

BOOL
__stdcall
FileEncryptionStatusA(
	LPCSTR lpFileName,
	LPDWORD  lpStatus
);

BOOL
__stdcall
FileEncryptionStatusW(
	LPCWSTR lpFileName,
	LPDWORD  lpStatus
);
typedef
DWORD
(__stdcall* PFE_EXPORT_FUNC)(
	PBYTE pbData,
	PVOID pvCallbackContext,
	ULONG ulLength
	);
typedef
DWORD
(__stdcall* PFE_IMPORT_FUNC)(
	PBYTE pbData,
	PVOID pvCallbackContext,
	PULONG ulLength
	);

DWORD
__stdcall
OpenEncryptedFileRawA(
	LPCSTR lpFileName,
	ULONG    ulFlags,
	PVOID* pvContext
);

DWORD
__stdcall
OpenEncryptedFileRawW(
	LPCWSTR lpFileName,
	ULONG    ulFlags,
	PVOID* pvContext
);

DWORD
__stdcall
ReadEncryptedFileRaw(
	PFE_EXPORT_FUNC pfExportCallback,
	PVOID           pvCallbackContext,
	PVOID           pvContext
);

DWORD
__stdcall
WriteEncryptedFileRaw(
	PFE_IMPORT_FUNC pfImportCallback,
	PVOID           pvCallbackContext,
	PVOID           pvContext
);

void
__stdcall
CloseEncryptedFileRaw(
	PVOID           pvContext
);

int
__stdcall
lstrcmpA(
	LPCSTR lpString1,
	LPCSTR lpString2
);

int
__stdcall
lstrcmpW(
	LPCWSTR lpString1,
	LPCWSTR lpString2
);

int
__stdcall
lstrcmpiA(
	LPCSTR lpString1,
	LPCSTR lpString2
);

int
__stdcall
lstrcmpiW(
	LPCWSTR lpString1,
	LPCWSTR lpString2
);

LPSTR
__stdcall
lstrcpynA(
	LPSTR lpString1,
	LPCSTR lpString2,
	int iMaxLength
);

LPWSTR
__stdcall
lstrcpynW(
	LPWSTR lpString1,
	LPCWSTR lpString2,
	int iMaxLength
);

LPSTR
__stdcall
lstrcpyA(
	LPSTR lpString1,
	LPCSTR lpString2
);

LPWSTR
__stdcall
lstrcpyW(
	LPWSTR lpString1,
	LPCWSTR lpString2
);

LPSTR
__stdcall
lstrcatA(
	LPSTR lpString1,
	LPCSTR lpString2
);

LPWSTR
__stdcall
lstrcatW(
	LPWSTR lpString1,
	LPCWSTR lpString2
);

int
__stdcall
lstrlenA(
	LPCSTR lpString
);

int
__stdcall
lstrlenW(
	LPCWSTR lpString
);

HFILE
__stdcall
OpenFile(
	LPCSTR lpFileName,
	LPOFSTRUCT lpReOpenBuff,
	UINT uStyle
);

HFILE
__stdcall
_lopen(
	LPCSTR lpPathName,
	int iReadWrite
);

HFILE
__stdcall
_lcreat(
	LPCSTR lpPathName,
	int  iAttribute
);

UINT
__stdcall
_lread(
	HFILE hFile,
	LPVOID lpBuffer,
	UINT uBytes
);

UINT
__stdcall
_lwrite(
	HFILE hFile,
	LPCCH lpBuffer,
	UINT uBytes
);

long
__stdcall
_hread(
	HFILE hFile,
	LPVOID lpBuffer,
	long lBytes
);

long
__stdcall
_hwrite(
	HFILE hFile,
	LPCCH lpBuffer,
	long lBytes
);

HFILE
__stdcall
_lclose(
	HFILE hFile
);

LONG
__stdcall
_llseek(
	HFILE hFile,
	LONG lOffset,
	int iOrigin
);

BOOL
__stdcall
IsTextUnicode(
	const void* lpv,
	int iSize,
	LPINT lpiResult
);

DWORD
__stdcall
SignalObjectAndWait(
	HANDLE hObjectToSignal,
	HANDLE hObjectToWaitOn,
	DWORD dwMilliseconds,
	BOOL bAlertable
);

BOOL
__stdcall
BackupRead(
	HANDLE hFile,
	LPBYTE lpBuffer,
	DWORD nNumberOfBytesToRead,
	LPDWORD lpNumberOfBytesRead,
	BOOL bAbort,
	BOOL bProcessSecurity,
	LPVOID* lpContext
);

BOOL
__stdcall
BackupSeek(
	HANDLE hFile,
	DWORD  dwLowBytesToSeek,
	DWORD  dwHighBytesToSeek,
	LPDWORD lpdwLowByteSeeked,
	LPDWORD lpdwHighByteSeeked,
	LPVOID* lpContext
);

BOOL
__stdcall
BackupWrite(
	HANDLE hFile,
	LPBYTE lpBuffer,
	DWORD nNumberOfBytesToWrite,
	LPDWORD lpNumberOfBytesWritten,
	BOOL bAbort,
	BOOL bProcessSecurity,
	LPVOID* lpContext
);
typedef struct _WIN32_STREAM_ID {
	DWORD          dwStreamId;
	DWORD          dwStreamAttributes;
	LARGE_INTEGER  Size;
	DWORD          dwStreamNameSize;
	WCHAR          cStreamName[1];
} WIN32_STREAM_ID, * LPWIN32_STREAM_ID;
typedef struct _STARTUPINFOEXA {
	STARTUPINFOA StartupInfo;
	LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, * LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
	STARTUPINFOW StartupInfo;
	LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, * LPSTARTUPINFOEXW;
typedef STARTUPINFOEXW STARTUPINFOEX;
typedef LPSTARTUPINFOEXW LPSTARTUPINFOEX;

HANDLE
__stdcall
OpenMutexA(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCSTR lpName
);

HANDLE
__stdcall
CreateSemaphoreA(
	LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
	LONG lInitialCount,
	LONG lMaximumCount,
	LPCSTR lpName
);

HANDLE
__stdcall
OpenSemaphoreA(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCSTR lpName
);

HANDLE
__stdcall
CreateWaitableTimerA(
	LPSECURITY_ATTRIBUTES lpTimerAttributes,
	BOOL bManualReset,
	LPCSTR lpTimerName
);

HANDLE
__stdcall
OpenWaitableTimerA(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCSTR lpTimerName
);

HANDLE
__stdcall
CreateSemaphoreExA(
	LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
	LONG lInitialCount,
	LONG lMaximumCount,
	LPCSTR lpName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateWaitableTimerExA(
	LPSECURITY_ATTRIBUTES lpTimerAttributes,
	LPCSTR lpTimerName,
	DWORD dwFlags,
	DWORD dwDesiredAccess
);

HANDLE
__stdcall
CreateFileMappingA(
	HANDLE hFile,
	LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
	DWORD flProtect,
	DWORD dwMaximumSizeHigh,
	DWORD dwMaximumSizeLow,
	LPCSTR lpName
);

HANDLE
__stdcall
CreateFileMappingNumaA(
	HANDLE hFile,
	LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
	DWORD flProtect,
	DWORD dwMaximumSizeHigh,
	DWORD dwMaximumSizeLow,
	LPCSTR lpName,
	DWORD nndPreferred
);

HANDLE
__stdcall
OpenFileMappingA(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCSTR lpName
);

DWORD
__stdcall
GetLogicalDriveStringsA(
	DWORD nBufferLength,
	LPSTR lpBuffer
);

HMODULE
__stdcall
LoadPackagedLibrary(
	LPCWSTR lpwLibFileName,
	DWORD Reserved
);

BOOL
__stdcall
QueryFullProcessImageNameA(
	HANDLE hProcess,
	DWORD dwFlags,
	LPSTR lpExeName,
	PDWORD lpdwSize
);

BOOL
__stdcall
QueryFullProcessImageNameW(
	HANDLE hProcess,
	DWORD dwFlags,
	LPWSTR lpExeName,
	PDWORD lpdwSize
);
typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
	ProcThreadAttributeParentProcess = 0,
	ProcThreadAttributeHandleList = 2,
	ProcThreadAttributeGroupAffinity = 3,
	ProcThreadAttributePreferredNode = 4,
	ProcThreadAttributeIdealProcessor = 5,
	ProcThreadAttributeUmsThread = 6,
	ProcThreadAttributeMitigationPolicy = 7,
	ProcThreadAttributeSecurityCapabilities = 9,
	ProcThreadAttributeProtectionLevel = 11,
	ProcThreadAttributeJobList = 13,
	ProcThreadAttributeChildProcessPolicy = 14,
	ProcThreadAttributeAllApplicationPackagesPolicy = 15,
	ProcThreadAttributeWin32kFilter = 16,
	ProcThreadAttributeSafeOpenPromptOriginClaim = 17,
	ProcThreadAttributeDesktopAppPolicy = 18,
	ProcThreadAttributePseudoConsole = 22,
	ProcThreadAttributeMitigationAuditPolicy = 24,
} PROC_THREAD_ATTRIBUTE_NUM;

void
__stdcall
GetStartupInfoA(
	LPSTARTUPINFOA lpStartupInfo
);

DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
	LPCSTR lpName,
	LPCSTR lpGuid,
	PVOID pBuffer,
	DWORD    nSize
);

DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
	LPCWSTR lpName,
	LPCWSTR lpGuid,
	PVOID pBuffer,
	DWORD    nSize
);

DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
	LPCSTR lpName,
	LPCSTR lpGuid,
	PVOID pBuffer,
	DWORD    nSize,
	PDWORD pdwAttribubutes
);

DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
	LPCWSTR lpName,
	LPCWSTR lpGuid,
	PVOID pBuffer,
	DWORD    nSize,
	PDWORD pdwAttribubutes
);

BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
	LPCSTR lpName,
	LPCSTR lpGuid,
	PVOID pValue,
	DWORD    nSize
);

BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
	LPCWSTR lpName,
	LPCWSTR lpGuid,
	PVOID pValue,
	DWORD    nSize
);

BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
	LPCSTR lpName,
	LPCSTR lpGuid,
	PVOID pValue,
	DWORD    nSize,
	DWORD    dwAttributes
);

BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
	LPCWSTR lpName,
	LPCWSTR lpGuid,
	PVOID pValue,
	DWORD    nSize,
	DWORD    dwAttributes
);

BOOL
__stdcall
GetFirmwareType(
	PFIRMWARE_TYPE FirmwareType
);

BOOL
__stdcall
IsNativeVhdBoot(
	PBOOL NativeVhdBoot
);

HRSRC
__stdcall
FindResourceA(
	HMODULE hModule,
	LPCSTR lpName,
	LPCSTR lpType
);

HRSRC
__stdcall
FindResourceExA(
	HMODULE hModule,
	LPCSTR lpType,
	LPCSTR lpName,
	WORD    wLanguage
);

BOOL
__stdcall
EnumResourceTypesA(
	HMODULE hModule,
	ENUMRESTYPEPROCA lpEnumFunc,
	LONG_PTR lParam
);

BOOL
__stdcall
EnumResourceTypesW(
	HMODULE hModule,
	ENUMRESTYPEPROCW lpEnumFunc,
	LONG_PTR lParam
);

BOOL
__stdcall
EnumResourceNamesA(
	HMODULE hModule,
	LPCSTR lpType,
	ENUMRESNAMEPROCA lpEnumFunc,
	LONG_PTR lParam
);

BOOL
__stdcall
EnumResourceLanguagesA(
	HMODULE hModule,
	LPCSTR lpType,
	LPCSTR lpName,
	ENUMRESLANGPROCA lpEnumFunc,
	LONG_PTR lParam
);

BOOL
__stdcall
EnumResourceLanguagesW(
	HMODULE hModule,
	LPCWSTR lpType,
	LPCWSTR lpName,
	ENUMRESLANGPROCW lpEnumFunc,
	LONG_PTR lParam
);

HANDLE
__stdcall
BeginUpdateResourceA(
	LPCSTR pFileName,
	BOOL bDeleteExistingResources
);

HANDLE
__stdcall
BeginUpdateResourceW(
	LPCWSTR pFileName,
	BOOL bDeleteExistingResources
);

BOOL
__stdcall
UpdateResourceA(
	HANDLE hUpdate,
	LPCSTR lpType,
	LPCSTR lpName,
	WORD wLanguage,
	LPVOID lpData,
	DWORD cb
);

BOOL
__stdcall
UpdateResourceW(
	HANDLE hUpdate,
	LPCWSTR lpType,
	LPCWSTR lpName,
	WORD wLanguage,
	LPVOID lpData,
	DWORD cb
);

BOOL
__stdcall
EndUpdateResourceA(
	HANDLE hUpdate,
	BOOL   fDiscard
);

BOOL
__stdcall
EndUpdateResourceW(
	HANDLE hUpdate,
	BOOL   fDiscard
);

ATOM
__stdcall
GlobalAddAtomA(
	LPCSTR lpString
);

ATOM
__stdcall
GlobalAddAtomW(
	LPCWSTR lpString
);

ATOM
__stdcall
GlobalAddAtomExA(
	LPCSTR lpString,
	DWORD Flags
);

ATOM
__stdcall
GlobalAddAtomExW(
	LPCWSTR lpString,
	DWORD Flags
);

ATOM
__stdcall
GlobalFindAtomA(
	LPCSTR lpString
);

ATOM
__stdcall
GlobalFindAtomW(
	LPCWSTR lpString
);

UINT
__stdcall
GlobalGetAtomNameA(
	ATOM nAtom,
	LPSTR lpBuffer,
	int nSize
);

UINT
__stdcall
GlobalGetAtomNameW(
	ATOM nAtom,
	LPWSTR lpBuffer,
	int nSize
);

ATOM
__stdcall
AddAtomA(
	LPCSTR lpString
);

ATOM
__stdcall
AddAtomW(
	LPCWSTR lpString
);

ATOM
__stdcall
FindAtomA(
	LPCSTR lpString
);

ATOM
__stdcall
FindAtomW(
	LPCWSTR lpString
);

UINT
__stdcall
GetAtomNameA(
	ATOM nAtom,
	LPSTR lpBuffer,
	int nSize
);

UINT
__stdcall
GetAtomNameW(
	ATOM nAtom,
	LPWSTR lpBuffer,
	int nSize
);

UINT
__stdcall
GetProfileIntA(
	LPCSTR lpAppName,
	LPCSTR lpKeyName,
	INT nDefault
);

UINT
__stdcall
GetProfileIntW(
	LPCWSTR lpAppName,
	LPCWSTR lpKeyName,
	INT nDefault
);

DWORD
__stdcall
GetProfileStringA(
	LPCSTR lpAppName,
	LPCSTR lpKeyName,
	LPCSTR lpDefault,
	LPSTR lpReturnedString,
	DWORD nSize
);

DWORD
__stdcall
GetProfileStringW(
	LPCWSTR lpAppName,
	LPCWSTR lpKeyName,
	LPCWSTR lpDefault,
	LPWSTR lpReturnedString,
	DWORD nSize
);

BOOL
__stdcall
WriteProfileStringA(
	LPCSTR lpAppName,
	LPCSTR lpKeyName,
	LPCSTR lpString
);

BOOL
__stdcall
WriteProfileStringW(
	LPCWSTR lpAppName,
	LPCWSTR lpKeyName,
	LPCWSTR lpString
);

DWORD
__stdcall
GetProfileSectionA(
	LPCSTR lpAppName,
	LPSTR lpReturnedString,
	DWORD nSize
);

DWORD
__stdcall
GetProfileSectionW(
	LPCWSTR lpAppName,
	LPWSTR lpReturnedString,
	DWORD nSize
);

BOOL
__stdcall
WriteProfileSectionA(
	LPCSTR lpAppName,
	LPCSTR lpString
);

BOOL
__stdcall
WriteProfileSectionW(
	LPCWSTR lpAppName,
	LPCWSTR lpString
);

UINT
__stdcall
GetPrivateProfileIntA(
	LPCSTR lpAppName,
	LPCSTR lpKeyName,
	INT nDefault,
	LPCSTR lpFileName
);

UINT
__stdcall
GetPrivateProfileIntW(
	LPCWSTR lpAppName,
	LPCWSTR lpKeyName,
	INT nDefault,
	LPCWSTR lpFileName
);

DWORD
__stdcall
GetPrivateProfileStringA(
	LPCSTR lpAppName,
	LPCSTR lpKeyName,
	LPCSTR lpDefault,
	LPSTR lpReturnedString,
	DWORD nSize,
	LPCSTR lpFileName
);

DWORD
__stdcall
GetPrivateProfileStringW(
	LPCWSTR lpAppName,
	LPCWSTR lpKeyName,
	LPCWSTR lpDefault,
	LPWSTR lpReturnedString,
	DWORD nSize,
	LPCWSTR lpFileName
);

BOOL
__stdcall
WritePrivateProfileStringA(
	LPCSTR lpAppName,
	LPCSTR lpKeyName,
	LPCSTR lpString,
	LPCSTR lpFileName
);

BOOL
__stdcall
WritePrivateProfileStringW(
	LPCWSTR lpAppName,
	LPCWSTR lpKeyName,
	LPCWSTR lpString,
	LPCWSTR lpFileName
);

DWORD
__stdcall
GetPrivateProfileSectionA(
	LPCSTR lpAppName,
	LPSTR lpReturnedString,
	DWORD nSize,
	LPCSTR lpFileName
);

DWORD
__stdcall
GetPrivateProfileSectionW(
	LPCWSTR lpAppName,
	LPWSTR lpReturnedString,
	DWORD nSize,
	LPCWSTR lpFileName
);

BOOL
__stdcall
WritePrivateProfileSectionA(
	LPCSTR lpAppName,
	LPCSTR lpString,
	LPCSTR lpFileName
);

BOOL
__stdcall
WritePrivateProfileSectionW(
	LPCWSTR lpAppName,
	LPCWSTR lpString,
	LPCWSTR lpFileName
);

DWORD
__stdcall
GetPrivateProfileSectionNamesA(
	LPSTR lpszReturnBuffer,
	DWORD nSize,
	LPCSTR lpFileName
);

DWORD
__stdcall
GetPrivateProfileSectionNamesW(
	LPWSTR lpszReturnBuffer,
	DWORD nSize,
	LPCWSTR lpFileName
);

BOOL
__stdcall
GetPrivateProfileStructA(
	LPCSTR lpszSection,
	LPCSTR lpszKey,
	LPVOID   lpStruct,
	UINT     uSizeStruct,
	LPCSTR szFile
);

BOOL
__stdcall
GetPrivateProfileStructW(
	LPCWSTR lpszSection,
	LPCWSTR lpszKey,
	LPVOID   lpStruct,
	UINT     uSizeStruct,
	LPCWSTR szFile
);

BOOL
__stdcall
WritePrivateProfileStructA(
	LPCSTR lpszSection,
	LPCSTR lpszKey,
	LPVOID lpStruct,
	UINT     uSizeStruct,
	LPCSTR szFile
);

BOOL
__stdcall
WritePrivateProfileStructW(
	LPCWSTR lpszSection,
	LPCWSTR lpszKey,
	LPVOID lpStruct,
	UINT     uSizeStruct,
	LPCWSTR szFile
);

BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection(
	BOOLEAN Wow64FsEnableRedirection
);
typedef UINT(__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)(LPSTR lpBuffer, UINT uSize);
typedef UINT(__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)(LPWSTR lpBuffer, UINT uSize);

BOOL
__stdcall
SetDllDirectoryA(
	LPCSTR lpPathName
);

BOOL
__stdcall
SetDllDirectoryW(
	LPCWSTR lpPathName
);

DWORD
__stdcall
GetDllDirectoryA(
	DWORD nBufferLength,
	LPSTR lpBuffer
);

DWORD
__stdcall
GetDllDirectoryW(
	DWORD nBufferLength,
	LPWSTR lpBuffer
);

BOOL
__stdcall
SetSearchPathMode(
	DWORD Flags
);

BOOL
__stdcall
CreateDirectoryExA(
	LPCSTR lpTemplateDirectory,
	LPCSTR lpNewDirectory,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
CreateDirectoryExW(
	LPCWSTR lpTemplateDirectory,
	LPCWSTR lpNewDirectory,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
CreateDirectoryTransactedA(
	LPCSTR lpTemplateDirectory,
	LPCSTR lpNewDirectory,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	HANDLE hTransaction
);

BOOL
__stdcall
CreateDirectoryTransactedW(
	LPCWSTR lpTemplateDirectory,
	LPCWSTR lpNewDirectory,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	HANDLE hTransaction
);

BOOL
__stdcall
RemoveDirectoryTransactedA(
	LPCSTR lpPathName,
	HANDLE hTransaction
);

BOOL
__stdcall
RemoveDirectoryTransactedW(
	LPCWSTR lpPathName,
	HANDLE hTransaction
);

DWORD
__stdcall
GetFullPathNameTransactedA(
	LPCSTR lpFileName,
	DWORD nBufferLength,
	LPSTR lpBuffer,
	LPSTR* lpFilePart,
	HANDLE hTransaction
);

DWORD
__stdcall
GetFullPathNameTransactedW(
	LPCWSTR lpFileName,
	DWORD nBufferLength,
	LPWSTR lpBuffer,
	LPWSTR* lpFilePart,
	HANDLE hTransaction
);

BOOL
__stdcall
DefineDosDeviceA(
	DWORD dwFlags,
	LPCSTR lpDeviceName,
	LPCSTR lpTargetPath
);

DWORD
__stdcall
QueryDosDeviceA(
	LPCSTR lpDeviceName,
	LPSTR lpTargetPath,
	DWORD ucchMax
);

HANDLE
__stdcall
CreateFileTransactedA(
	LPCSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD dwCreationDisposition,
	DWORD dwFlagsAndAttributes,
	HANDLE hTemplateFile,
	HANDLE hTransaction,
	PUSHORT pusMiniVersion,
	PVOID  lpExtendedParameter
);

HANDLE
__stdcall
CreateFileTransactedW(
	LPCWSTR lpFileName,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD dwCreationDisposition,
	DWORD dwFlagsAndAttributes,
	HANDLE hTemplateFile,
	HANDLE hTransaction,
	PUSHORT pusMiniVersion,
	PVOID  lpExtendedParameter
);

HANDLE
__stdcall
ReOpenFile(
	HANDLE  hOriginalFile,
	DWORD   dwDesiredAccess,
	DWORD   dwShareMode,
	DWORD   dwFlagsAndAttributes
);

BOOL
__stdcall
SetFileAttributesTransactedA(
	LPCSTR lpFileName,
	DWORD dwFileAttributes,
	HANDLE hTransaction
);

BOOL
__stdcall
SetFileAttributesTransactedW(
	LPCWSTR lpFileName,
	DWORD dwFileAttributes,
	HANDLE hTransaction
);

BOOL
__stdcall
GetFileAttributesTransactedA(
	LPCSTR lpFileName,
	GET_FILEEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFileInformation,
	HANDLE hTransaction
);

BOOL
__stdcall
GetFileAttributesTransactedW(
	LPCWSTR lpFileName,
	GET_FILEEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFileInformation,
	HANDLE hTransaction
);

DWORD
__stdcall
GetCompressedFileSizeTransactedA(
	LPCSTR lpFileName,
	LPDWORD  lpFileSizeHigh,
	HANDLE hTransaction
);

DWORD
__stdcall
GetCompressedFileSizeTransactedW(
	LPCWSTR lpFileName,
	LPDWORD  lpFileSizeHigh,
	HANDLE hTransaction
);

BOOL
__stdcall
DeleteFileTransactedA(
	LPCSTR lpFileName,
	HANDLE hTransaction
);

BOOL
__stdcall
DeleteFileTransactedW(
	LPCWSTR lpFileName,
	HANDLE hTransaction
);

BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
	LPCSTR lpName,
	LPSTR lpOemName,
	DWORD OemNameSize,
	PBOOL pbNameContainsSpaces,
	PBOOL pbNameLegal
);

BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
	LPCWSTR lpName,
	LPSTR lpOemName,
	DWORD OemNameSize,
	PBOOL pbNameContainsSpaces,
	PBOOL pbNameLegal
);

HANDLE
__stdcall
FindFirstFileTransactedA(
	LPCSTR lpFileName,
	FINDEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFindFileData,
	FINDEX_SEARCH_OPS fSearchOp,
	LPVOID lpSearchFilter,
	DWORD dwAdditionalFlags,
	HANDLE hTransaction
);

HANDLE
__stdcall
FindFirstFileTransactedW(
	LPCWSTR lpFileName,
	FINDEX_INFO_LEVELS fInfoLevelId,
	LPVOID lpFindFileData,
	FINDEX_SEARCH_OPS fSearchOp,
	LPVOID lpSearchFilter,
	DWORD dwAdditionalFlags,
	HANDLE hTransaction
);

BOOL
__stdcall
CopyFileA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName,
	BOOL bFailIfExists
);

BOOL
__stdcall
CopyFileW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	BOOL bFailIfExists
);
typedef
DWORD
(__stdcall* LPPROGRESS_ROUTINE)(
	LARGE_INTEGER TotalFileSize,
	LARGE_INTEGER TotalBytesTransferred,
	LARGE_INTEGER StreamSize,
	LARGE_INTEGER StreamBytesTransferred,
	DWORD dwStreamNumber,
	DWORD dwCallbackReason,
	HANDLE hSourceFile,
	HANDLE hDestinationFile,
	LPVOID lpData
	);

BOOL
__stdcall
CopyFileExA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	LPBOOL pbCancel,
	DWORD dwCopyFlags
);

BOOL
__stdcall
CopyFileExW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	LPBOOL pbCancel,
	DWORD dwCopyFlags
);

BOOL
__stdcall
CopyFileTransactedA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	LPBOOL pbCancel,
	DWORD dwCopyFlags,
	HANDLE hTransaction
);

BOOL
__stdcall
CopyFileTransactedW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	LPBOOL pbCancel,
	DWORD dwCopyFlags,
	HANDLE hTransaction
);
typedef enum _COPYFILE2_MESSAGE_TYPE {
	COPYFILE2_CALLBACK_NONE = 0,
	COPYFILE2_CALLBACK_CHUNK_STARTED,
	COPYFILE2_CALLBACK_CHUNK_FINISHED,
	COPYFILE2_CALLBACK_STREAM_STARTED,
	COPYFILE2_CALLBACK_STREAM_FINISHED,
	COPYFILE2_CALLBACK_POLL_CONTINUE,
	COPYFILE2_CALLBACK_ERROR,
	COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;
typedef enum _COPYFILE2_MESSAGE_ACTION {
	COPYFILE2_PROGRESS_CONTINUE = 0,
	COPYFILE2_PROGRESS_CANCEL,
	COPYFILE2_PROGRESS_STOP,
	COPYFILE2_PROGRESS_QUIET,
	COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;
typedef enum _COPYFILE2_COPY_PHASE {
	COPYFILE2_PHASE_NONE = 0,
	COPYFILE2_PHASE_PREPARE_SOURCE,
	COPYFILE2_PHASE_PREPARE_DEST,
	COPYFILE2_PHASE_READ_SOURCE,
	COPYFILE2_PHASE_WRITE_DESTINATION,
	COPYFILE2_PHASE_SERVER_COPY,
	COPYFILE2_PHASE_NAMEGRAFT_COPY,
	COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;
typedef struct COPYFILE2_MESSAGE {
	COPYFILE2_MESSAGE_TYPE  Type;
	DWORD                   dwPadding;
	union {
		struct {
			DWORD           dwStreamNumber;
			DWORD           dwReserved;
			HANDLE           hSourceFile;
			HANDLE           hDestinationFile;
			ULARGE_INTEGER  uliChunkNumber;
			ULARGE_INTEGER  uliChunkSize;
			ULARGE_INTEGER  uliStreamSize;
			ULARGE_INTEGER  uliTotalFileSize;
		} ChunkStarted;
		struct {
			DWORD           dwStreamNumber;
			DWORD           dwFlags;
			HANDLE           hSourceFile;
			HANDLE           hDestinationFile;
			ULARGE_INTEGER  uliChunkNumber;
			ULARGE_INTEGER  uliChunkSize;
			ULARGE_INTEGER  uliStreamSize;
			ULARGE_INTEGER  uliStreamBytesTransferred;
			ULARGE_INTEGER  uliTotalFileSize;
			ULARGE_INTEGER  uliTotalBytesTransferred;
		} ChunkFinished;
		struct {
			DWORD           dwStreamNumber;
			DWORD           dwReserved;
			HANDLE           hSourceFile;
			HANDLE           hDestinationFile;
			ULARGE_INTEGER  uliStreamSize;
			ULARGE_INTEGER  uliTotalFileSize;
		} StreamStarted;
		struct {
			DWORD           dwStreamNumber;
			DWORD           dwReserved;
			HANDLE           hSourceFile;
			HANDLE           hDestinationFile;
			ULARGE_INTEGER  uliStreamSize;
			ULARGE_INTEGER  uliStreamBytesTransferred;
			ULARGE_INTEGER  uliTotalFileSize;
			ULARGE_INTEGER  uliTotalBytesTransferred;
		} StreamFinished;
		struct {
			DWORD           dwReserved;
		} PollContinue;
		struct {
			COPYFILE2_COPY_PHASE    CopyPhase;
			DWORD                   dwStreamNumber;
			HRESULT                 hrFailure;
			DWORD                   dwReserved;
			ULARGE_INTEGER          uliChunkNumber;
			ULARGE_INTEGER          uliStreamSize;
			ULARGE_INTEGER          uliStreamBytesTransferred;
			ULARGE_INTEGER          uliTotalFileSize;
			ULARGE_INTEGER          uliTotalBytesTransferred;
		} Error;
	} Info;
} COPYFILE2_MESSAGE;
typedef
COPYFILE2_MESSAGE_ACTION(__stdcall* PCOPYFILE2_PROGRESS_ROUTINE)(
	const COPYFILE2_MESSAGE* pMessage,
	PVOID                       pvCallbackContext
	);
typedef struct COPYFILE2_EXTENDED_PARAMETERS {
	DWORD                         dwSize;
	DWORD                         dwCopyFlags;
	BOOL* pfCancel;
	PCOPYFILE2_PROGRESS_ROUTINE   pProgressRoutine;
	PVOID                         pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

HRESULT
__stdcall
CopyFile2(
	PCWSTR                          pwszExistingFileName,
	PCWSTR                          pwszNewFileName,
	COPYFILE2_EXTENDED_PARAMETERS* pExtendedParameters
);

BOOL
__stdcall
MoveFileA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName
);

BOOL
__stdcall
MoveFileW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName
);

BOOL
__stdcall
MoveFileExA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName,
	DWORD    dwFlags
);

BOOL
__stdcall
MoveFileExW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	DWORD    dwFlags
);

BOOL
__stdcall
MoveFileWithProgressA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	DWORD dwFlags
);

BOOL
__stdcall
MoveFileWithProgressW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	DWORD dwFlags
);

BOOL
__stdcall
MoveFileTransactedA(
	LPCSTR lpExistingFileName,
	LPCSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	DWORD dwFlags,
	HANDLE hTransaction
);

BOOL
__stdcall
MoveFileTransactedW(
	LPCWSTR lpExistingFileName,
	LPCWSTR lpNewFileName,
	LPPROGRESS_ROUTINE lpProgressRoutine,
	LPVOID lpData,
	DWORD dwFlags,
	HANDLE hTransaction
);

BOOL
__stdcall
ReplaceFileA(
	LPCSTR lpReplacedFileName,
	LPCSTR lpReplacementFileName,
	LPCSTR lpBackupFileName,
	DWORD    dwReplaceFlags,
	LPVOID   lpExclude,
	LPVOID  lpReserved
);

BOOL
__stdcall
ReplaceFileW(
	LPCWSTR lpReplacedFileName,
	LPCWSTR lpReplacementFileName,
	LPCWSTR lpBackupFileName,
	DWORD    dwReplaceFlags,
	LPVOID   lpExclude,
	LPVOID  lpReserved
);

BOOL
__stdcall
CreateHardLinkA(
	LPCSTR lpFileName,
	LPCSTR lpExistingFileName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
CreateHardLinkW(
	LPCWSTR lpFileName,
	LPCWSTR lpExistingFileName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
CreateHardLinkTransactedA(
	LPCSTR lpFileName,
	LPCSTR lpExistingFileName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	HANDLE hTransaction
);

BOOL
__stdcall
CreateHardLinkTransactedW(
	LPCWSTR lpFileName,
	LPCWSTR lpExistingFileName,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	HANDLE hTransaction
);

HANDLE
__stdcall
FindFirstStreamTransactedW(
	LPCWSTR lpFileName,
	STREAM_INFO_LEVELS InfoLevel,
	LPVOID lpFindStreamData,
	DWORD dwFlags,
	HANDLE hTransaction
);

HANDLE
__stdcall
FindFirstFileNameTransactedW(
	LPCWSTR lpFileName,
	DWORD dwFlags,
	LPDWORD StringLength,
	PWSTR LinkName,
	HANDLE hTransaction
);

HANDLE
__stdcall
CreateNamedPipeA(
	LPCSTR lpName,
	DWORD dwOpenMode,
	DWORD dwPipeMode,
	DWORD nMaxInstances,
	DWORD nOutBufferSize,
	DWORD nInBufferSize,
	DWORD nDefaultTimeOut,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

BOOL
__stdcall
GetNamedPipeHandleStateA(
	HANDLE hNamedPipe,
	LPDWORD lpState,
	LPDWORD lpCurInstances,
	LPDWORD lpMaxCollectionCount,
	LPDWORD lpCollectDataTimeout,
	LPSTR lpUserName,
	DWORD nMaxUserNameSize
);

BOOL
__stdcall
CallNamedPipeA(
	LPCSTR lpNamedPipeName,
	LPVOID lpInBuffer,
	DWORD nInBufferSize,
	LPVOID lpOutBuffer,
	DWORD nOutBufferSize,
	LPDWORD lpBytesRead,
	DWORD nTimeOut
);

BOOL
__stdcall
WaitNamedPipeA(
	LPCSTR lpNamedPipeName,
	DWORD nTimeOut
);

BOOL
__stdcall
GetNamedPipeClientComputerNameA(
	HANDLE Pipe,
	LPSTR ClientComputerName,
	ULONG ClientComputerNameLength
);

BOOL
__stdcall
GetNamedPipeClientProcessId(
	HANDLE Pipe,
	PULONG ClientProcessId
);

BOOL
__stdcall
GetNamedPipeClientSessionId(
	HANDLE Pipe,
	PULONG ClientSessionId
);

BOOL
__stdcall
GetNamedPipeServerProcessId(
	HANDLE Pipe,
	PULONG ServerProcessId
);

BOOL
__stdcall
GetNamedPipeServerSessionId(
	HANDLE Pipe,
	PULONG ServerSessionId
);

BOOL
__stdcall
SetVolumeLabelA(
	LPCSTR lpRootPathName,
	LPCSTR lpVolumeName
);

BOOL
__stdcall
SetVolumeLabelW(
	LPCWSTR lpRootPathName,
	LPCWSTR lpVolumeName
);

BOOL
__stdcall
SetFileBandwidthReservation(
	HANDLE  hFile,
	DWORD   nPeriodMilliseconds,
	DWORD   nBytesPerPeriod,
	BOOL    bDiscardable,
	LPDWORD lpTransferSize,
	LPDWORD lpNumOutstandingRequests
);

BOOL
__stdcall
GetFileBandwidthReservation(
	HANDLE  hFile,
	LPDWORD lpPeriodMilliseconds,
	LPDWORD lpBytesPerPeriod,
	LPBOOL  pDiscardable,
	LPDWORD lpTransferSize,
	LPDWORD lpNumOutstandingRequests
);

BOOL
__stdcall
ClearEventLogA(
	HANDLE hEventLog,
	LPCSTR lpBackupFileName
);

BOOL
__stdcall
ClearEventLogW(
	HANDLE hEventLog,
	LPCWSTR lpBackupFileName
);

BOOL
__stdcall
BackupEventLogA(
	HANDLE hEventLog,
	LPCSTR lpBackupFileName
);

BOOL
__stdcall
BackupEventLogW(
	HANDLE hEventLog,
	LPCWSTR lpBackupFileName
);

BOOL
__stdcall
CloseEventLog(
	HANDLE hEventLog
);

BOOL
__stdcall
DeregisterEventSource(
	HANDLE hEventLog
);

BOOL
__stdcall
NotifyChangeEventLog(
	HANDLE  hEventLog,
	HANDLE  hEvent
);

BOOL
__stdcall
GetNumberOfEventLogRecords(
	HANDLE hEventLog,
	PDWORD NumberOfRecords
);

BOOL
__stdcall
GetOldestEventLogRecord(
	HANDLE hEventLog,
	PDWORD OldestRecord
);

HANDLE
__stdcall
OpenEventLogA(
	LPCSTR lpUNCServerName,
	LPCSTR lpSourceName
);

HANDLE
__stdcall
OpenEventLogW(
	LPCWSTR lpUNCServerName,
	LPCWSTR lpSourceName
);

HANDLE
__stdcall
RegisterEventSourceA(
	LPCSTR lpUNCServerName,
	LPCSTR lpSourceName
);

HANDLE
__stdcall
RegisterEventSourceW(
	LPCWSTR lpUNCServerName,
	LPCWSTR lpSourceName
);

HANDLE
__stdcall
OpenBackupEventLogA(
	LPCSTR lpUNCServerName,
	LPCSTR lpFileName
);

HANDLE
__stdcall
OpenBackupEventLogW(
	LPCWSTR lpUNCServerName,
	LPCWSTR lpFileName
);

BOOL
__stdcall
ReadEventLogA(
	HANDLE     hEventLog,
	DWORD      dwReadFlags,
	DWORD      dwRecordOffset,
	LPVOID     lpBuffer,
	DWORD      nNumberOfBytesToRead,
	DWORD* pnBytesRead,
	DWORD* pnMinNumberOfBytesNeeded
);

BOOL
__stdcall
ReadEventLogW(
	HANDLE     hEventLog,
	DWORD      dwReadFlags,
	DWORD      dwRecordOffset,
	LPVOID     lpBuffer,
	DWORD      nNumberOfBytesToRead,
	DWORD* pnBytesRead,
	DWORD* pnMinNumberOfBytesNeeded
);

BOOL
__stdcall
ReportEventA(
	HANDLE     hEventLog,
	WORD       wType,
	WORD       wCategory,
	DWORD      dwEventID,
	PSID       lpUserSid,
	WORD       wNumStrings,
	DWORD      dwDataSize,
	LPCSTR* lpStrings,
	LPVOID lpRawData
);

BOOL
__stdcall
ReportEventW(
	HANDLE     hEventLog,
	WORD       wType,
	WORD       wCategory,
	DWORD      dwEventID,
	PSID       lpUserSid,
	WORD       wNumStrings,
	DWORD      dwDataSize,
	LPCWSTR* lpStrings,
	LPVOID lpRawData
);
typedef struct _EVENTLOG_FULL_INFORMATION
{
	DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, * LPEVENTLOG_FULL_INFORMATION;

BOOL
__stdcall
GetEventLogInformation(
	HANDLE     hEventLog,
	DWORD      dwInfoLevel,
	LPVOID lpBuffer,
	DWORD      cbBufSize,
	LPDWORD    pcbBytesNeeded
);
typedef ULONG OPERATION_ID;
typedef struct _OPERATION_START_PARAMETERS {
	ULONG Version;
	OPERATION_ID OperationId;
	ULONG Flags;
} OPERATION_START_PARAMETERS, * POPERATION_START_PARAMETERS;
typedef struct _OPERATION_END_PARAMETERS {
	ULONG Version;
	OPERATION_ID OperationId;
	ULONG Flags;
} OPERATION_END_PARAMETERS, * POPERATION_END_PARAMETERS;

BOOL
__stdcall
OperationStart(
	OPERATION_START_PARAMETERS* OperationStartParams
);

BOOL
__stdcall
OperationEnd(
	OPERATION_END_PARAMETERS* OperationEndParams
);

BOOL
__stdcall
AccessCheckAndAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	LPSTR ObjectTypeName,
	LPSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	DWORD DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccess,
	LPBOOL AccessStatus,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	LPCSTR ObjectTypeName,
	LPCSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	DWORD DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	DWORD Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccess,
	LPBOOL AccessStatus,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	LPCSTR ObjectTypeName,
	LPCSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	DWORD DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	DWORD Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccess,
	LPDWORD AccessStatusList,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	HANDLE ClientToken,
	LPCSTR ObjectTypeName,
	LPCSTR ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	DWORD DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	DWORD Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	DWORD ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOL ObjectCreation,
	LPDWORD GrantedAccess,
	LPDWORD AccessStatusList,
	LPBOOL pfGenerateOnClose
);

BOOL
__stdcall
ObjectOpenAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	LPSTR ObjectTypeName,
	LPSTR ObjectName,
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	DWORD GrantedAccess,
	PPRIVILEGE_SET Privileges,
	BOOL ObjectCreation,
	BOOL AccessGranted,
	LPBOOL GenerateOnClose
);

BOOL
__stdcall
ObjectPrivilegeAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	HANDLE ClientToken,
	DWORD DesiredAccess,
	PPRIVILEGE_SET Privileges,
	BOOL AccessGranted
);

BOOL
__stdcall
ObjectCloseAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	BOOL GenerateOnClose
);

BOOL
__stdcall
ObjectDeleteAuditAlarmA(
	LPCSTR SubsystemName,
	LPVOID HandleId,
	BOOL GenerateOnClose
);

BOOL
__stdcall
PrivilegedServiceAuditAlarmA(
	LPCSTR SubsystemName,
	LPCSTR ServiceName,
	HANDLE ClientToken,
	PPRIVILEGE_SET Privileges,
	BOOL AccessGranted
);

BOOL
__stdcall
AddConditionalAce(
	PACL pAcl,
	DWORD dwAceRevision,
	DWORD AceFlags,
	UCHAR AceType,
	DWORD AccessMask,
	PSID pSid,
	PWCHAR ConditionStr,
	DWORD* ReturnLength
);

BOOL
__stdcall
SetFileSecurityA(
	LPCSTR lpFileName,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor
);

BOOL
__stdcall
GetFileSecurityA(
	LPCSTR lpFileName,
	SECURITY_INFORMATION RequestedInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	DWORD nLength,
	LPDWORD lpnLengthNeeded
);

BOOL
__stdcall
ReadDirectoryChangesW(
	HANDLE hDirectory,
	LPVOID lpBuffer,
	DWORD nBufferLength,
	BOOL bWatchSubtree,
	DWORD dwNotifyFilter,
	LPDWORD lpBytesReturned,
	LPOVERLAPPED lpOverlapped,
	LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
);

BOOL
__stdcall
ReadDirectoryChangesExW(
	HANDLE hDirectory,
	LPVOID lpBuffer,
	DWORD nBufferLength,
	BOOL bWatchSubtree,
	DWORD dwNotifyFilter,
	LPDWORD lpBytesReturned,
	LPOVERLAPPED lpOverlapped,
	LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine,
	READ_DIRECTORY_NOTIFY_INFORMATION_CLASS ReadDirectoryNotifyInformationClass
);

LPVOID
__stdcall
MapViewOfFileExNuma(
	HANDLE hFileMappingObject,
	DWORD dwDesiredAccess,
	DWORD dwFileOffsetHigh,
	DWORD dwFileOffsetLow,
	SIZE_T dwNumberOfBytesToMap,
	LPVOID lpBaseAddress,
	DWORD nndPreferred
);

BOOL
__stdcall
IsBadReadPtr(
	const void* lp,
	UINT_PTR ucb
);

BOOL
__stdcall
IsBadWritePtr(
	LPVOID lp,
	UINT_PTR ucb
);

BOOL
__stdcall
IsBadHugeReadPtr(
	const void* lp,
	UINT_PTR ucb
);

BOOL
__stdcall
IsBadHugeWritePtr(
	LPVOID lp,
	UINT_PTR ucb
);

BOOL
__stdcall
IsBadCodePtr(
	FARPROC lpfn
);

BOOL
__stdcall
IsBadStringPtrA(
	LPCSTR lpsz,
	UINT_PTR ucchMax
);

BOOL
__stdcall
IsBadStringPtrW(
	LPCWSTR lpsz,
	UINT_PTR ucchMax
);

BOOL
__stdcall
LookupAccountSidA(
	LPCSTR lpSystemName,
	PSID Sid,
	LPSTR Name,
	LPDWORD cchName,
	LPSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountSidW(
	LPCWSTR lpSystemName,
	PSID Sid,
	LPWSTR Name,
	LPDWORD cchName,
	LPWSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountNameA(
	LPCSTR lpSystemName,
	LPCSTR lpAccountName,
	PSID Sid,
	LPDWORD cbSid,
	LPSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountNameW(
	LPCWSTR lpSystemName,
	LPCWSTR lpAccountName,
	PSID Sid,
	LPDWORD cbSid,
	LPWSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountNameLocalA(
	LPCSTR lpAccountName,
	PSID Sid,
	LPDWORD cbSid,
	LPSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountNameLocalW(
	LPCWSTR lpAccountName,
	PSID Sid,
	LPDWORD cbSid,
	LPWSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountSidLocalA(
	PSID Sid,
	LPSTR Name,
	LPDWORD cchName,
	LPSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupAccountSidLocalW(
	PSID Sid,
	LPWSTR Name,
	LPDWORD cchName,
	LPWSTR ReferencedDomainName,
	LPDWORD cchReferencedDomainName,
	PSID_NAME_USE peUse
);

BOOL
__stdcall
LookupPrivilegeValueA(
	LPCSTR lpSystemName,
	LPCSTR lpName,
	PLUID   lpLuid
);

BOOL
__stdcall
LookupPrivilegeValueW(
	LPCWSTR lpSystemName,
	LPCWSTR lpName,
	PLUID   lpLuid
);

BOOL
__stdcall
LookupPrivilegeNameA(
	LPCSTR lpSystemName,
	PLUID   lpLuid,
	LPSTR lpName,
	LPDWORD cchName
);

BOOL
__stdcall
LookupPrivilegeNameW(
	LPCWSTR lpSystemName,
	PLUID   lpLuid,
	LPWSTR lpName,
	LPDWORD cchName
);

BOOL
__stdcall
LookupPrivilegeDisplayNameA(
	LPCSTR lpSystemName,
	LPCSTR lpName,
	LPSTR lpDisplayName,
	LPDWORD cchDisplayName,
	LPDWORD lpLanguageId
);

BOOL
__stdcall
LookupPrivilegeDisplayNameW(
	LPCWSTR lpSystemName,
	LPCWSTR lpName,
	LPWSTR lpDisplayName,
	LPDWORD cchDisplayName,
	LPDWORD lpLanguageId
);

BOOL
__stdcall
BuildCommDCBA(
	LPCSTR lpDef,
	LPDCB lpDCB
);

BOOL
__stdcall
BuildCommDCBW(
	LPCWSTR lpDef,
	LPDCB lpDCB
);

BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
	LPCSTR lpDef,
	LPDCB lpDCB,
	LPCOMMTIMEOUTS lpCommTimeouts
);

BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
	LPCWSTR lpDef,
	LPDCB lpDCB,
	LPCOMMTIMEOUTS lpCommTimeouts
);

BOOL
__stdcall
CommConfigDialogA(
	LPCSTR lpszName,
	HWND hWnd,
	LPCOMMCONFIG lpCC
);

BOOL
__stdcall
CommConfigDialogW(
	LPCWSTR lpszName,
	HWND hWnd,
	LPCOMMCONFIG lpCC
);

BOOL
__stdcall
GetDefaultCommConfigA(
	LPCSTR lpszName,
	LPCOMMCONFIG lpCC,
	LPDWORD lpdwSize
);

BOOL
__stdcall
GetDefaultCommConfigW(
	LPCWSTR lpszName,
	LPCOMMCONFIG lpCC,
	LPDWORD lpdwSize
);

BOOL
__stdcall
SetDefaultCommConfigA(
	LPCSTR lpszName,
	LPCOMMCONFIG lpCC,
	DWORD dwSize
);

BOOL
__stdcall
SetDefaultCommConfigW(
	LPCWSTR lpszName,
	LPCOMMCONFIG lpCC,
	DWORD dwSize
);

BOOL
__stdcall
GetComputerNameA(
	LPSTR lpBuffer,
	LPDWORD nSize
);

BOOL
__stdcall
GetComputerNameW(
	LPWSTR lpBuffer,
	LPDWORD nSize
);

BOOL
__stdcall
DnsHostnameToComputerNameA(
	LPCSTR Hostname,
	LPSTR ComputerName,
	LPDWORD nSize
);

BOOL
__stdcall
DnsHostnameToComputerNameW(
	LPCWSTR Hostname,
	LPWSTR ComputerName,
	LPDWORD nSize
);

BOOL
__stdcall
GetUserNameA(
	LPSTR lpBuffer,
	LPDWORD pcbBuffer
);

BOOL
__stdcall
GetUserNameW(
	LPWSTR lpBuffer,
	LPDWORD pcbBuffer
);

BOOL
__stdcall
LogonUserA(
	LPCSTR lpszUsername,
	LPCSTR lpszDomain,
	LPCSTR lpszPassword,
	DWORD dwLogonType,
	DWORD dwLogonProvider,
	PHANDLE phToken
);

BOOL
__stdcall
LogonUserW(
	LPCWSTR lpszUsername,
	LPCWSTR lpszDomain,
	LPCWSTR lpszPassword,
	DWORD dwLogonType,
	DWORD dwLogonProvider,
	PHANDLE phToken
);

BOOL
__stdcall
LogonUserExA(
	LPCSTR lpszUsername,
	LPCSTR lpszDomain,
	LPCSTR lpszPassword,
	DWORD dwLogonType,
	DWORD dwLogonProvider,
	PHANDLE phToken,
	PSID* ppLogonSid,
	PVOID* ppProfileBuffer,
	LPDWORD pdwProfileLength,
	PQUOTA_LIMITS pQuotaLimits
);

BOOL
__stdcall
LogonUserExW(
	LPCWSTR lpszUsername,
	LPCWSTR lpszDomain,
	LPCWSTR lpszPassword,
	DWORD dwLogonType,
	DWORD dwLogonProvider,
	PHANDLE phToken,
	PSID* ppLogonSid,
	PVOID* ppProfileBuffer,
	LPDWORD pdwProfileLength,
	PQUOTA_LIMITS pQuotaLimits
);

BOOL
__stdcall
CreateProcessWithLogonW(
	LPCWSTR lpUsername,
	LPCWSTR lpDomain,
	LPCWSTR lpPassword,
	DWORD dwLogonFlags,
	LPCWSTR lpApplicationName,
	LPWSTR lpCommandLine,
	DWORD dwCreationFlags,
	LPVOID lpEnvironment,
	LPCWSTR lpCurrentDirectory,
	LPSTARTUPINFOW lpStartupInfo,
	LPPROCESS_INFORMATION lpProcessInformation
);

BOOL
__stdcall
CreateProcessWithTokenW(
	HANDLE hToken,
	DWORD dwLogonFlags,
	LPCWSTR lpApplicationName,
	LPWSTR lpCommandLine,
	DWORD dwCreationFlags,
	LPVOID lpEnvironment,
	LPCWSTR lpCurrentDirectory,
	LPSTARTUPINFOW lpStartupInfo,
	LPPROCESS_INFORMATION lpProcessInformation
);

BOOL
__stdcall
IsTokenUntrusted(
	HANDLE TokenHandle
);

BOOL
__stdcall
RegisterWaitForSingleObject(
	PHANDLE phNewWaitObject,
	HANDLE hObject,
	WAITORTIMERCALLBACK Callback,
	PVOID Context,
	ULONG dwMilliseconds,
	ULONG dwFlags
);

BOOL
__stdcall
UnregisterWait(
	HANDLE WaitHandle
);

BOOL
__stdcall
BindIoCompletionCallback(
	HANDLE FileHandle,
	LPOVERLAPPED_COMPLETION_ROUTINE Function,
	ULONG Flags
);

HANDLE
__stdcall
SetTimerQueueTimer(
	HANDLE TimerQueue,
	WAITORTIMERCALLBACK Callback,
	PVOID Parameter,
	DWORD DueTime,
	DWORD Period,
	BOOL PreferIo
);

BOOL
__stdcall
CancelTimerQueueTimer(
	HANDLE TimerQueue,
	HANDLE Timer
);

BOOL
__stdcall
DeleteTimerQueue(
	HANDLE TimerQueue
);

void
InitializeThreadpoolEnvironment(
	PTP_CALLBACK_ENVIRON pcbe
);

void
SetThreadpoolCallbackPool(
	PTP_CALLBACK_ENVIRON pcbe,
	PTP_POOL             ptpp
);

void
SetThreadpoolCallbackCleanupGroup(
	PTP_CALLBACK_ENVIRON              pcbe,
	PTP_CLEANUP_GROUP                 ptpcg,
	PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
);

void
SetThreadpoolCallbackRunsLong(
	PTP_CALLBACK_ENVIRON pcbe
);

void
SetThreadpoolCallbackLibrary(
	PTP_CALLBACK_ENVIRON pcbe,
	PVOID                mod
);

void
SetThreadpoolCallbackPriority(
	PTP_CALLBACK_ENVIRON pcbe,
	TP_CALLBACK_PRIORITY Priority
);

void
DestroyThreadpoolEnvironment(
	PTP_CALLBACK_ENVIRON pcbe
);

void
SetThreadpoolCallbackPersistent(
	PTP_CALLBACK_ENVIRON pcbe
);

HANDLE
__stdcall
CreatePrivateNamespaceA(
	LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
	LPVOID lpBoundaryDescriptor,
	LPCSTR lpAliasPrefix
);

HANDLE
__stdcall
OpenPrivateNamespaceA(
	LPVOID lpBoundaryDescriptor,
	LPCSTR lpAliasPrefix
);

HANDLE
__stdcall
CreateBoundaryDescriptorA(
	LPCSTR Name,
	ULONG Flags
);

BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
	HANDLE* BoundaryDescriptor,
	PSID IntegrityLabel
);
typedef struct tagHW_PROFILE_INFOA {
	DWORD  dwDockInfo;
	CHAR   szHwProfileGuid[39];
	CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, * LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
	DWORD  dwDockInfo;
	WCHAR  szHwProfileGuid[39];
	WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, * LPHW_PROFILE_INFOW;
typedef HW_PROFILE_INFOW HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOW LPHW_PROFILE_INFO;

BOOL
__stdcall
GetCurrentHwProfileA(
	LPHW_PROFILE_INFOA  lpHwProfileInfo
);

BOOL
__stdcall
GetCurrentHwProfileW(
	LPHW_PROFILE_INFOW  lpHwProfileInfo
);

BOOL
__stdcall
VerifyVersionInfoA(
	LPOSVERSIONINFOEXA lpVersionInformation,
	DWORD dwTypeMask,
	DWORDLONG dwlConditionMask
);

BOOL
__stdcall
VerifyVersionInfoW(
	LPOSVERSIONINFOEXW lpVersionInformation,
	DWORD dwTypeMask,
	DWORDLONG dwlConditionMask
);
__forceinline   HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT)(((x) & 0x0000FFFF) | (7 << 16) | 0x80000000); }
typedef struct _TIME_ZONE_INFORMATION {
	LONG Bias;
	WCHAR StandardName[32];
	SYSTEMTIME StandardDate;
	LONG StandardBias;
	WCHAR DaylightName[32];
	SYSTEMTIME DaylightDate;
	LONG DaylightBias;
} TIME_ZONE_INFORMATION, * PTIME_ZONE_INFORMATION, * LPTIME_ZONE_INFORMATION;
typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
	LONG Bias;
	WCHAR StandardName[32];
	SYSTEMTIME StandardDate;
	LONG StandardBias;
	WCHAR DaylightName[32];
	SYSTEMTIME DaylightDate;
	LONG DaylightBias;
	WCHAR TimeZoneKeyName[128];
	BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, * PDYNAMIC_TIME_ZONE_INFORMATION;

BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
	const TIME_ZONE_INFORMATION* lpTimeZoneInformation,
	const SYSTEMTIME* lpUniversalTime,
	LPSYSTEMTIME lpLocalTime
);

BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
	const TIME_ZONE_INFORMATION* lpTimeZoneInformation,
	const SYSTEMTIME* lpLocalTime,
	LPSYSTEMTIME lpUniversalTime
);

BOOL
__stdcall
FileTimeToSystemTime(
	const FILETIME* lpFileTime,
	LPSYSTEMTIME lpSystemTime
);

BOOL
__stdcall
SystemTimeToFileTime(
	const SYSTEMTIME* lpSystemTime,
	LPFILETIME lpFileTime
);

DWORD
__stdcall
GetTimeZoneInformation(
	LPTIME_ZONE_INFORMATION lpTimeZoneInformation
);

BOOL
__stdcall
SetTimeZoneInformation(
	const TIME_ZONE_INFORMATION* lpTimeZoneInformation
);

BOOL
__stdcall
SetDynamicTimeZoneInformation(
	const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation
);

DWORD
__stdcall
GetDynamicTimeZoneInformation(
	PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
);
BOOL
__stdcall
GetTimeZoneInformationForYear(
	USHORT wYear,
	PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
	LPTIME_ZONE_INFORMATION ptzi
);

DWORD
__stdcall
EnumDynamicTimeZoneInformation(
	const DWORD dwIndex,
	PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
);

DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
	const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
	LPDWORD FirstYear,
	LPDWORD LastYear
);

BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
	const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation,
	const SYSTEMTIME* lpUniversalTime,
	LPSYSTEMTIME lpLocalTime
);

BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
	const DYNAMIC_TIME_ZONE_INFORMATION* lpTimeZoneInformation,
	const SYSTEMTIME* lpLocalTime,
	LPSYSTEMTIME lpUniversalTime
);

BOOL
__stdcall
LocalFileTimeToLocalSystemTime(
	const TIME_ZONE_INFORMATION* timeZoneInformation,
	const FILETIME* localFileTime,
	SYSTEMTIME* localSystemTime
);

BOOL
__stdcall
LocalSystemTimeToLocalFileTime(
	const TIME_ZONE_INFORMATION* timeZoneInformation,
	const SYSTEMTIME* localSystemTime,
	FILETIME* localFileTime
);

BOOL
__stdcall
SetSystemPowerState(
	BOOL fSuspend,
	BOOL fForce
);
typedef struct _SYSTEM_POWER_STATUS {
	BYTE ACLineStatus;
	BYTE BatteryFlag;
	BYTE BatteryLifePercent;
	BYTE SystemStatusFlag;
	DWORD BatteryLifeTime;
	DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, * LPSYSTEM_POWER_STATUS;

BOOL
__stdcall
GetSystemPowerStatus(
	LPSYSTEM_POWER_STATUS lpSystemPowerStatus
);

BOOL
__stdcall
MapUserPhysicalPagesScatter(
	PVOID* VirtualAddresses,
	ULONG_PTR NumberOfPages,
	PULONG_PTR PageArray
);

HANDLE
__stdcall
CreateJobObjectA(
	LPSECURITY_ATTRIBUTES lpJobAttributes,
	LPCSTR lpName
);

HANDLE
__stdcall
OpenJobObjectA(
	DWORD dwDesiredAccess,
	BOOL bInheritHandle,
	LPCSTR lpName
);

BOOL
__stdcall
CreateJobSet(
	ULONG NumJob,
	PJOB_SET_ARRAY UserJobSet,
	ULONG Flags);

HANDLE
__stdcall
FindFirstVolumeA(
	LPSTR lpszVolumeName,
	DWORD cchBufferLength
);

BOOL
__stdcall
FindNextVolumeA(
	HANDLE hFindVolume,
	LPSTR lpszVolumeName,
	DWORD cchBufferLength
);

HANDLE
__stdcall
FindFirstVolumeMountPointA(
	LPCSTR lpszRootPathName,
	LPSTR lpszVolumeMountPoint,
	DWORD cchBufferLength
);

HANDLE
__stdcall
FindFirstVolumeMountPointW(
	LPCWSTR lpszRootPathName,
	LPWSTR lpszVolumeMountPoint,
	DWORD cchBufferLength
);

BOOL
__stdcall
FindNextVolumeMountPointA(
	HANDLE hFindVolumeMountPoint,
	LPSTR lpszVolumeMountPoint,
	DWORD cchBufferLength
);

BOOL
__stdcall
FindNextVolumeMountPointW(
	HANDLE hFindVolumeMountPoint,
	LPWSTR lpszVolumeMountPoint,
	DWORD cchBufferLength
);

BOOL
__stdcall
FindVolumeMountPointClose(
	HANDLE hFindVolumeMountPoint
);

BOOL
__stdcall
SetVolumeMountPointA(
	LPCSTR lpszVolumeMountPoint,
	LPCSTR lpszVolumeName
);

BOOL
__stdcall
SetVolumeMountPointW(
	LPCWSTR lpszVolumeMountPoint,
	LPCWSTR lpszVolumeName
);

BOOL
__stdcall
DeleteVolumeMountPointA(
	LPCSTR lpszVolumeMountPoint
);

BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
	LPCSTR lpszVolumeMountPoint,
	LPSTR lpszVolumeName,
	DWORD cchBufferLength
);

BOOL
__stdcall
GetVolumePathNameA(
	LPCSTR lpszFileName,
	LPSTR lpszVolumePathName,
	DWORD cchBufferLength
);

BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
	LPCSTR lpszVolumeName,
	LPCH lpszVolumePathNames,
	DWORD cchBufferLength,
	PDWORD lpcchReturnLength
);
typedef struct tagACTCTXA {
	ULONG       cbSize;
	DWORD       dwFlags;
	LPCSTR      lpSource;
	USHORT      wProcessorArchitecture;
	LANGID      wLangId;
	LPCSTR      lpAssemblyDirectory;
	LPCSTR      lpResourceName;
	LPCSTR      lpApplicationName;
	HMODULE     hModule;
} ACTCTXA, * PACTCTXA;
typedef struct tagACTCTXW {
	ULONG       cbSize;
	DWORD       dwFlags;
	LPCWSTR     lpSource;
	USHORT      wProcessorArchitecture;
	LANGID      wLangId;
	LPCWSTR     lpAssemblyDirectory;
	LPCWSTR     lpResourceName;
	LPCWSTR     lpApplicationName;
	HMODULE     hModule;
} ACTCTXW, * PACTCTXW;
typedef ACTCTXW ACTCTX;
typedef PACTCTXW PACTCTX;
typedef const ACTCTXA* PCACTCTXA;
typedef const ACTCTXW* PCACTCTXW;
typedef PCACTCTXW PCACTCTX;

HANDLE
__stdcall
CreateActCtxA(
	PCACTCTXA pActCtx
);

HANDLE
__stdcall
CreateActCtxW(
	PCACTCTXW pActCtx
);

void
__stdcall
AddRefActCtx(
	HANDLE hActCtx
);

void
__stdcall
ReleaseActCtx(
	HANDLE hActCtx
);

BOOL
__stdcall
ZombifyActCtx(
	HANDLE hActCtx
);

BOOL
__stdcall
ActivateActCtx(
	HANDLE hActCtx,
	ULONG_PTR* lpCookie
);

BOOL
__stdcall
DeactivateActCtx(
	DWORD dwFlags,
	ULONG_PTR ulCookie
);

BOOL
__stdcall
GetCurrentActCtx(
	HANDLE* lphActCtx);
typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
	ULONG cbSize;
	ULONG ulDataFormatVersion;
	PVOID lpData;
	ULONG ulLength;
	PVOID lpSectionGlobalData;
	ULONG ulSectionGlobalDataLength;
	PVOID lpSectionBase;
	ULONG ulSectionTotalLength;
	HANDLE hActCtx;
	ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, * PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600* PCACTCTX_SECTION_KEYED_DATA_2600;
typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
	PVOID lpInformation;
	PVOID lpSectionBase;
	ULONG ulSectionLength;
	PVOID lpSectionGlobalDataBase;
	ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, * PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA* PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef struct tagACTCTX_SECTION_KEYED_DATA {
	ULONG cbSize;
	ULONG ulDataFormatVersion;
	PVOID lpData;
	ULONG ulLength;
	PVOID lpSectionGlobalData;
	ULONG ulSectionGlobalDataLength;
	PVOID lpSectionBase;
	ULONG ulSectionTotalLength;
	HANDLE hActCtx;
	ULONG ulAssemblyRosterIndex;
	ULONG ulFlags;
	ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, * PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA* PCACTCTX_SECTION_KEYED_DATA;

BOOL
__stdcall
FindActCtxSectionStringA(
	DWORD dwFlags,
	const GUID* lpExtensionGuid,
	ULONG ulSectionId,
	LPCSTR lpStringToFind,
	PACTCTX_SECTION_KEYED_DATA ReturnedData
);

BOOL
__stdcall
FindActCtxSectionStringW(
	DWORD dwFlags,
	const GUID* lpExtensionGuid,
	ULONG ulSectionId,
	LPCWSTR lpStringToFind,
	PACTCTX_SECTION_KEYED_DATA ReturnedData
);

BOOL
__stdcall
FindActCtxSectionGuid(
	DWORD dwFlags,
	const GUID* lpExtensionGuid,
	ULONG ulSectionId,
	const GUID* lpGuidToFind,
	PACTCTX_SECTION_KEYED_DATA ReturnedData
);
typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
	HANDLE  hActCtx;
	DWORD   dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, * PACTIVATION_CONTEXT_BASIC_INFORMATION;
typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION* PCACTIVATION_CONTEXT_BASIC_INFORMATION;

BOOL
__stdcall
QueryActCtxW(
	DWORD dwFlags,
	HANDLE hActCtx,
	PVOID pvSubInstance,
	ULONG ulInfoClass,
	PVOID pvBuffer,
	SIZE_T cbBuffer,
	SIZE_T* pcbWrittenOrRequired
);
typedef   BOOL(__stdcall* PQUERYACTCTXW_FUNC)(
	DWORD dwFlags,
	HANDLE hActCtx,
	PVOID pvSubInstance,
	ULONG ulInfoClass,
	PVOID pvBuffer,
	SIZE_T cbBuffer,
	SIZE_T* pcbWrittenOrRequired
	);

DWORD
__stdcall
WTSGetActiveConsoleSessionId(
	void
);

DWORD
__stdcall
WTSGetServiceSessionId(
	void
);

BOOLEAN
__stdcall
WTSIsServerContainer(
	void
);

WORD
__stdcall
GetActiveProcessorGroupCount(
	void
);

WORD
__stdcall
GetMaximumProcessorGroupCount(
	void
);

DWORD
__stdcall
GetActiveProcessorCount(
	WORD GroupNumber
);

DWORD
__stdcall
GetMaximumProcessorCount(
	WORD GroupNumber
);

BOOL
__stdcall
GetNumaProcessorNode(
	UCHAR Processor,
	PUCHAR NodeNumber
);

BOOL
__stdcall
GetNumaNodeNumberFromHandle(
	HANDLE hFile,
	PUSHORT NodeNumber
);

BOOL
__stdcall
GetNumaProcessorNodeEx(
	PPROCESSOR_NUMBER Processor,
	PUSHORT NodeNumber
);

BOOL
__stdcall
GetNumaNodeProcessorMask(
	UCHAR Node,
	PULONGLONG ProcessorMask
);

BOOL
__stdcall
GetNumaAvailableMemoryNode(
	UCHAR Node,
	PULONGLONG AvailableBytes
);

BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
	USHORT Node,
	PULONGLONG AvailableBytes
);

BOOL
__stdcall
GetNumaProximityNode(
	ULONG ProximityId,
	PUCHAR NodeNumber
);
typedef DWORD(__stdcall* APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);

HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
	APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
	PVOID pvParameter,
	DWORD dwPingInterval,
	DWORD dwFlags
);

HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

HRESULT
__stdcall
RegisterApplicationRestart(
	PCWSTR pwzCommandline,
	DWORD dwFlags
);

HRESULT
__stdcall
UnregisterApplicationRestart(void);

HRESULT
__stdcall
GetApplicationRecoveryCallback(
	HANDLE hProcess,
	APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
	PVOID* ppvParameter,
	PDWORD pdwPingInterval,
	PDWORD pdwFlags
);

HRESULT
__stdcall
GetApplicationRestartSettings(
	HANDLE hProcess,
	PWSTR pwzCommandline,
	PDWORD pcchSize,
	PDWORD pdwFlags
);

HRESULT
__stdcall
ApplicationRecoveryInProgress(
	PBOOL pbCancelled
);

void
__stdcall
ApplicationRecoveryFinished(
	BOOL bSuccess
);
typedef struct _FILE_BASIC_INFO {
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	DWORD FileAttributes;
} FILE_BASIC_INFO, * PFILE_BASIC_INFO;
typedef struct _FILE_STANDARD_INFO {
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	DWORD NumberOfLinks;
	BOOLEAN DeletePending;
	BOOLEAN Directory;
} FILE_STANDARD_INFO, * PFILE_STANDARD_INFO;
typedef struct _FILE_NAME_INFO {
	DWORD FileNameLength;
	WCHAR FileName[1];
} FILE_NAME_INFO, * PFILE_NAME_INFO;
typedef struct _FILE_CASE_SENSITIVE_INFO {
	ULONG Flags;
} FILE_CASE_SENSITIVE_INFO, * PFILE_CASE_SENSITIVE_INFO;
typedef struct _FILE_RENAME_INFO {
	union {
		BOOLEAN ReplaceIfExists;
		DWORD Flags;
	};
	HANDLE RootDirectory;
	DWORD FileNameLength;
	WCHAR FileName[1];
} FILE_RENAME_INFO, * PFILE_RENAME_INFO;
typedef struct _FILE_ALLOCATION_INFO {
	LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, * PFILE_ALLOCATION_INFO;
typedef struct _FILE_END_OF_FILE_INFO {
	LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, * PFILE_END_OF_FILE_INFO;
typedef struct _FILE_STREAM_INFO {
	DWORD NextEntryOffset;
	DWORD StreamNameLength;
	LARGE_INTEGER StreamSize;
	LARGE_INTEGER StreamAllocationSize;
	WCHAR StreamName[1];
} FILE_STREAM_INFO, * PFILE_STREAM_INFO;
typedef struct _FILE_COMPRESSION_INFO {
	LARGE_INTEGER CompressedFileSize;
	WORD CompressionFormat;
	UCHAR CompressionUnitShift;
	UCHAR ChunkShift;
	UCHAR ClusterShift;
	UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, * PFILE_COMPRESSION_INFO;
typedef struct _FILE_ATTRIBUTE_TAG_INFO {
	DWORD FileAttributes;
	DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, * PFILE_ATTRIBUTE_TAG_INFO;
typedef struct _FILE_DISPOSITION_INFO {
	BOOLEAN DeleteFileW;
} FILE_DISPOSITION_INFO, * PFILE_DISPOSITION_INFO;
typedef struct _FILE_DISPOSITION_INFO_EX {
	DWORD Flags;
} FILE_DISPOSITION_INFO_EX, * PFILE_DISPOSITION_INFO_EX;
typedef struct _FILE_ID_BOTH_DIR_INFO {
	DWORD NextEntryOffset;
	DWORD FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	DWORD FileAttributes;
	DWORD FileNameLength;
	DWORD EaSize;
	CCHAR ShortNameLength;
	WCHAR ShortName[12];
	LARGE_INTEGER FileId;
	WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, * PFILE_ID_BOTH_DIR_INFO;
typedef struct _FILE_FULL_DIR_INFO {
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	WCHAR FileName[1];
} FILE_FULL_DIR_INFO, * PFILE_FULL_DIR_INFO;
typedef enum _PRIORITY_HINT {
	IoPriorityHintVeryLow = 0,
	IoPriorityHintLow,
	IoPriorityHintNormal,
	MaximumIoPriorityHintType
} PRIORITY_HINT;
typedef struct _FILE_IO_PRIORITY_HINT_INFO {
	PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, * PFILE_IO_PRIORITY_HINT_INFO;
typedef struct _FILE_ALIGNMENT_INFO {
	ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, * PFILE_ALIGNMENT_INFO;
typedef struct _FILE_STORAGE_INFO {
	ULONG LogicalBytesPerSector;
	ULONG PhysicalBytesPerSectorForAtomicity;
	ULONG PhysicalBytesPerSectorForPerformance;
	ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
	ULONG Flags;
	ULONG ByteOffsetForSectorAlignment;
	ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, * PFILE_STORAGE_INFO;
typedef struct _FILE_ID_INFO {
	ULONGLONG VolumeSerialNumber;
	FILE_ID_128 FileId;
} FILE_ID_INFO, * PFILE_ID_INFO;
typedef struct _FILE_ID_EXTD_DIR_INFO {
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	ULONG ReparsePointTag;
	FILE_ID_128 FileId;
	WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, * PFILE_ID_EXTD_DIR_INFO;
typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
	USHORT StructureVersion;
	USHORT StructureSize;
	ULONG  Protocol;
	USHORT ProtocolMajorVersion;
	USHORT ProtocolMinorVersion;
	USHORT ProtocolRevision;
	USHORT Reserved;
	ULONG  Flags;
	struct {
		ULONG Reserved[8];
	} GenericReserved;
	union {
		struct {
			struct {
				ULONG Capabilities;
			} Server;
			struct {
				ULONG Capabilities;
				ULONG CachingFlags;
			} Share;
		} Smb2;
		ULONG Reserved[16];
	} ProtocolSpecific;
} FILE_REMOTE_PROTOCOL_INFO, * PFILE_REMOTE_PROTOCOL_INFO;

BOOL
__stdcall
GetFileInformationByHandleEx(
	HANDLE hFile,
	FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
	LPVOID lpFileInformation,
	DWORD dwBufferSize
);
typedef enum _FILE_ID_TYPE {
	FileIdType,
	ObjectIdType,
	ExtendedFileIdType,
	MaximumFileIdType
} FILE_ID_TYPE, * PFILE_ID_TYPE;
typedef struct FILE_ID_DESCRIPTOR {
	DWORD dwSize;
	FILE_ID_TYPE Type;
	union {
		LARGE_INTEGER FileId;
		GUID ObjectId;
		FILE_ID_128 ExtendedFileId;
	};
} FILE_ID_DESCRIPTOR, * LPFILE_ID_DESCRIPTOR;

HANDLE
__stdcall
OpenFileById(
	HANDLE hVolumeHint,
	LPFILE_ID_DESCRIPTOR lpFileId,
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD dwFlagsAndAttributes
);

BOOLEAN
__stdcall
CreateSymbolicLinkA(
	LPCSTR lpSymlinkFileName,
	LPCSTR lpTargetFileName,
	DWORD dwFlags
);

BOOLEAN
__stdcall
CreateSymbolicLinkW(
	LPCWSTR lpSymlinkFileName,
	LPCWSTR lpTargetFileName,
	DWORD dwFlags
);

BOOL
__stdcall
QueryActCtxSettingsW(
	DWORD dwFlags,
	HANDLE hActCtx,
	PCWSTR settingsNameSpace,
	PCWSTR settingName,
	PWSTR pvBuffer,
	SIZE_T dwBuffer,
	SIZE_T* pdwWrittenOrRequired
);

BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA(
	LPCSTR lpSymlinkFileName,
	LPCSTR lpTargetFileName,
	DWORD dwFlags,
	HANDLE hTransaction
);

BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW(
	LPCWSTR lpSymlinkFileName,
	LPCWSTR lpTargetFileName,
	DWORD dwFlags,
	HANDLE hTransaction
);

BOOL
__stdcall
ReplacePartitionUnit(
	PWSTR TargetPartition,
	PWSTR SparePartition,
	ULONG Flags
);

BOOL
__stdcall
AddSecureMemoryCacheCallback(
	PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
);

BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
	PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
);

BOOL
__stdcall
CopyContext(
	PCONTEXT Destination,
	DWORD ContextFlags,
	PCONTEXT Source
);

BOOL
__stdcall
InitializeContext(
	PVOID Buffer,
	DWORD ContextFlags,
	PCONTEXT* Context,
	PDWORD ContextLength
);

BOOL
__stdcall
InitializeContext2(
	PVOID Buffer,
	DWORD ContextFlags,
	PCONTEXT* Context,
	PDWORD ContextLength,
	ULONG64 XStateCompactionMask
);

DWORD64
__stdcall
GetEnabledXStateFeatures(
	void
);

BOOL
__stdcall
GetXStateFeaturesMask(
	PCONTEXT Context,
	PDWORD64 FeatureMask
);

PVOID
__stdcall
LocateXStateFeature(
	PCONTEXT Context,
	DWORD FeatureId,
	PDWORD Length
);

BOOL
__stdcall
SetXStateFeaturesMask(
	PCONTEXT Context,
	DWORD64 FeatureMask
);

DWORD
__stdcall
EnableThreadProfiling(
	HANDLE ThreadHandle,
	DWORD Flags,
	DWORD64 HardwareCounters,
	HANDLE* PerformanceDataHandle
);

DWORD
__stdcall
DisableThreadProfiling(
	HANDLE PerformanceDataHandle
);

DWORD
__stdcall
QueryThreadProfiling(
	HANDLE ThreadHandle,
	PBOOLEAN Enabled
);

DWORD
__stdcall
ReadThreadProfilingData(
	HANDLE PerformanceDataHandle,
	DWORD Flags,
	PPERFORMANCE_DATA PerformanceData
);

DWORD
__stdcall
RaiseCustomSystemEventTrigger(
	PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG CustomSystemEventTriggerConfig
);
typedef struct _DRAWPATRECT {
	POINT ptPosition;
	POINT ptSize;
	WORD wStyle;
	WORD wPattern;
} DRAWPATRECT, * PDRAWPATRECT;
typedef struct _PSINJECTDATA {
	DWORD   DataBytes;
	WORD    InjectionPoint;
	WORD    PageNumber;
} PSINJECTDATA, * PPSINJECTDATA;
typedef struct _PSFEATURE_OUTPUT {
	BOOL bPageIndependent;
	BOOL bSetPageDevice;
} PSFEATURE_OUTPUT, * PPSFEATURE_OUTPUT;
typedef struct _PSFEATURE_CUSTPAPER {
	LONG lOrientation;
	LONG lWidth;
	LONG lHeight;
	LONG lWidthOffset;
	LONG lHeightOffset;
} PSFEATURE_CUSTPAPER, * PPSFEATURE_CUSTPAPER;
typedef struct  tagXFORM
{
	FLOAT   eM11;
	FLOAT   eM12;
	FLOAT   eM21;
	FLOAT   eM22;
	FLOAT   eDx;
	FLOAT   eDy;
} XFORM, * PXFORM, * LPXFORM;
typedef struct tagBITMAP
{
	LONG        bmType;
	LONG        bmWidth;
	LONG        bmHeight;
	LONG        bmWidthBytes;
	WORD        bmPlanes;
	WORD        bmBitsPixel;
	LPVOID      bmBits;
} BITMAP, * PBITMAP, * NPBITMAP, * LPBITMAP;
typedef struct tagRGBTRIPLE {
	BYTE    rgbtBlue;
	BYTE    rgbtGreen;
	BYTE    rgbtRed;
} RGBTRIPLE, * PRGBTRIPLE, * NPRGBTRIPLE, * LPRGBTRIPLE;
typedef struct tagRGBQUAD {
	BYTE    rgbBlue;
	BYTE    rgbGreen;
	BYTE    rgbRed;
	BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD* LPRGBQUAD;
typedef LONG   LCSCSTYPE;
typedef LONG    LCSGAMUTMATCH;
typedef long            FXPT16DOT16, * LPFXPT16DOT16;
typedef long            FXPT2DOT30, * LPFXPT2DOT30;
typedef struct tagCIEXYZ
{
	FXPT2DOT30 ciexyzX;
	FXPT2DOT30 ciexyzY;
	FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ* LPCIEXYZ;
typedef struct tagICEXYZTRIPLE
{
	CIEXYZ  ciexyzRed;
	CIEXYZ  ciexyzGreen;
	CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE* LPCIEXYZTRIPLE;
typedef struct tagLOGCOLORSPACEA {
	DWORD lcsSignature;
	DWORD lcsVersion;
	DWORD lcsSize;
	LCSCSTYPE lcsCSType;
	LCSGAMUTMATCH lcsIntent;
	CIEXYZTRIPLE lcsEndpoints;
	DWORD lcsGammaRed;
	DWORD lcsGammaGreen;
	DWORD lcsGammaBlue;
	CHAR   lcsFilename[260];
} LOGCOLORSPACEA, * LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
	DWORD lcsSignature;
	DWORD lcsVersion;
	DWORD lcsSize;
	LCSCSTYPE lcsCSType;
	LCSGAMUTMATCH lcsIntent;
	CIEXYZTRIPLE lcsEndpoints;
	DWORD lcsGammaRed;
	DWORD lcsGammaGreen;
	DWORD lcsGammaBlue;
	WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, * LPLOGCOLORSPACEW;
typedef LOGCOLORSPACEW LOGCOLORSPACE;
typedef LPLOGCOLORSPACEW LPLOGCOLORSPACE;
typedef struct tagBITMAPCOREHEADER {
	DWORD   bcSize;
	WORD    bcWidth;
	WORD    bcHeight;
	WORD    bcPlanes;
	WORD    bcBitCount;
} BITMAPCOREHEADER, * LPBITMAPCOREHEADER, * PBITMAPCOREHEADER;
typedef struct tagBITMAPINFOHEADER {
	DWORD      biSize;
	LONG       biWidth;
	LONG       biHeight;
	WORD       biPlanes;
	WORD       biBitCount;
	DWORD      biCompression;
	DWORD      biSizeImage;
	LONG       biXPelsPerMeter;
	LONG       biYPelsPerMeter;
	DWORD      biClrUsed;
	DWORD      biClrImportant;
} BITMAPINFOHEADER, * LPBITMAPINFOHEADER, * PBITMAPINFOHEADER;
typedef struct {
	DWORD        bV4Size;
	LONG         bV4Width;
	LONG         bV4Height;
	WORD         bV4Planes;
	WORD         bV4BitCount;
	DWORD        bV4V4Compression;
	DWORD        bV4SizeImage;
	LONG         bV4XPelsPerMeter;
	LONG         bV4YPelsPerMeter;
	DWORD        bV4ClrUsed;
	DWORD        bV4ClrImportant;
	DWORD        bV4RedMask;
	DWORD        bV4GreenMask;
	DWORD        bV4BlueMask;
	DWORD        bV4AlphaMask;
	DWORD        bV4CSType;
	CIEXYZTRIPLE bV4Endpoints;
	DWORD        bV4GammaRed;
	DWORD        bV4GammaGreen;
	DWORD        bV4GammaBlue;
} BITMAPV4HEADER, * LPBITMAPV4HEADER, * PBITMAPV4HEADER;
typedef struct {
	DWORD        bV5Size;
	LONG         bV5Width;
	LONG         bV5Height;
	WORD         bV5Planes;
	WORD         bV5BitCount;
	DWORD        bV5Compression;
	DWORD        bV5SizeImage;
	LONG         bV5XPelsPerMeter;
	LONG         bV5YPelsPerMeter;
	DWORD        bV5ClrUsed;
	DWORD        bV5ClrImportant;
	DWORD        bV5RedMask;
	DWORD        bV5GreenMask;
	DWORD        bV5BlueMask;
	DWORD        bV5AlphaMask;
	DWORD        bV5CSType;
	CIEXYZTRIPLE bV5Endpoints;
	DWORD        bV5GammaRed;
	DWORD        bV5GammaGreen;
	DWORD        bV5GammaBlue;
	DWORD        bV5Intent;
	DWORD        bV5ProfileData;
	DWORD        bV5ProfileSize;
	DWORD        bV5Reserved;
} BITMAPV5HEADER, * LPBITMAPV5HEADER, * PBITMAPV5HEADER;
typedef struct tagBITMAPINFO {
	BITMAPINFOHEADER    bmiHeader;
	RGBQUAD             bmiColors[1];
} BITMAPINFO, * LPBITMAPINFO, * PBITMAPINFO;
typedef struct tagBITMAPCOREINFO {
	BITMAPCOREHEADER    bmciHeader;
	RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO, * LPBITMAPCOREINFO, * PBITMAPCOREINFO;
typedef struct tagBITMAPFILEHEADER {
	WORD    bfType;
	DWORD   bfSize;
	WORD    bfReserved1;
	WORD    bfReserved2;
	DWORD   bfOffBits;
} BITMAPFILEHEADER, * LPBITMAPFILEHEADER, * PBITMAPFILEHEADER;
typedef struct tagFONTSIGNATURE
{
	DWORD fsUsb[4];
	DWORD fsCsb[2];
} FONTSIGNATURE, * PFONTSIGNATURE, * LPFONTSIGNATURE;
typedef struct tagCHARSETINFO
{
	UINT ciCharset;
	UINT ciACP;
	FONTSIGNATURE fs;
} CHARSETINFO, * PCHARSETINFO, * NPCHARSETINFO, * LPCHARSETINFO;
typedef struct tagLOCALESIGNATURE
{
	DWORD lsUsb[4];
	DWORD lsCsbDefault[2];
	DWORD lsCsbSupported[2];
} LOCALESIGNATURE, * PLOCALESIGNATURE, * LPLOCALESIGNATURE;
typedef struct tagHANDLETABLE
{
	HGDIOBJ     objectHandle[1];
} HANDLETABLE, * PHANDLETABLE, * LPHANDLETABLE;
typedef struct tagMETARECORD
{
	DWORD       rdSize;
	WORD        rdFunction;
	WORD        rdParm[1];
} METARECORD;
typedef struct tagMETARECORD __unaligned* PMETARECORD;
typedef struct tagMETARECORD __unaligned* LPMETARECORD;
typedef struct tagMETAFILEPICT
{
	LONG        mm;
	LONG        xExt;
	LONG        yExt;
	HMETAFILE   hMF;
} METAFILEPICT, * LPMETAFILEPICT;
typedef struct tagMETAHEADER
{
	WORD        mtType;
	WORD        mtHeaderSize;
	WORD        mtVersion;
	DWORD       mtSize;
	WORD        mtNoObjects;
	DWORD       mtMaxRecord;
	WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER __unaligned* PMETAHEADER;
typedef struct tagMETAHEADER __unaligned* LPMETAHEADER;
typedef struct tagENHMETARECORD
{
	DWORD   iType;
	DWORD   nSize;
	DWORD   dParm[1];
} ENHMETARECORD, * PENHMETARECORD, * LPENHMETARECORD;
typedef struct tagENHMETAHEADER
{
	DWORD   iType;
	DWORD   nSize;
	RECTL   rclBounds;
	RECTL   rclFrame;
	DWORD   dSignature;
	DWORD   nVersion;
	DWORD   nBytes;
	DWORD   nRecords;
	WORD    nHandles;
	WORD    sReserved;
	DWORD   nDescription;
	DWORD   offDescription;
	DWORD   nPalEntries;
	SIZEL   szlDevice;
	SIZEL   szlMillimeters;
	DWORD   cbPixelFormat;
	DWORD   offPixelFormat;
	DWORD   bOpenGL;
	SIZEL   szlMicrometers;
} ENHMETAHEADER, * PENHMETAHEADER, * LPENHMETAHEADER;
typedef WCHAR BCHAR;
typedef struct tagTEXTMETRICA
{
	LONG        tmHeight;
	LONG        tmAscent;
	LONG        tmDescent;
	LONG        tmInternalLeading;
	LONG        tmExternalLeading;
	LONG        tmAveCharWidth;
	LONG        tmMaxCharWidth;
	LONG        tmWeight;
	LONG        tmOverhang;
	LONG        tmDigitizedAspectX;
	LONG        tmDigitizedAspectY;
	BYTE        tmFirstChar;
	BYTE        tmLastChar;
	BYTE        tmDefaultChar;
	BYTE        tmBreakChar;
	BYTE        tmItalic;
	BYTE        tmUnderlined;
	BYTE        tmStruckOut;
	BYTE        tmPitchAndFamily;
	BYTE        tmCharSet;
} TEXTMETRICA, * PTEXTMETRICA, * NPTEXTMETRICA, * LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
	LONG        tmHeight;
	LONG        tmAscent;
	LONG        tmDescent;
	LONG        tmInternalLeading;
	LONG        tmExternalLeading;
	LONG        tmAveCharWidth;
	LONG        tmMaxCharWidth;
	LONG        tmWeight;
	LONG        tmOverhang;
	LONG        tmDigitizedAspectX;
	LONG        tmDigitizedAspectY;
	WCHAR       tmFirstChar;
	WCHAR       tmLastChar;
	WCHAR       tmDefaultChar;
	WCHAR       tmBreakChar;
	BYTE        tmItalic;
	BYTE        tmUnderlined;
	BYTE        tmStruckOut;
	BYTE        tmPitchAndFamily;
	BYTE        tmCharSet;
} TEXTMETRICW, * PTEXTMETRICW, * NPTEXTMETRICW, * LPTEXTMETRICW;
typedef TEXTMETRICW TEXTMETRIC;
typedef PTEXTMETRICW PTEXTMETRIC;
typedef NPTEXTMETRICW NPTEXTMETRIC;
typedef LPTEXTMETRICW LPTEXTMETRIC;
typedef struct tagNEWTEXTMETRICA
{
	LONG        tmHeight;
	LONG        tmAscent;
	LONG        tmDescent;
	LONG        tmInternalLeading;
	LONG        tmExternalLeading;
	LONG        tmAveCharWidth;
	LONG        tmMaxCharWidth;
	LONG        tmWeight;
	LONG        tmOverhang;
	LONG        tmDigitizedAspectX;
	LONG        tmDigitizedAspectY;
	BYTE        tmFirstChar;
	BYTE        tmLastChar;
	BYTE        tmDefaultChar;
	BYTE        tmBreakChar;
	BYTE        tmItalic;
	BYTE        tmUnderlined;
	BYTE        tmStruckOut;
	BYTE        tmPitchAndFamily;
	BYTE        tmCharSet;
	DWORD   ntmFlags;
	UINT    ntmSizeEM;
	UINT    ntmCellHeight;
	UINT    ntmAvgWidth;
} NEWTEXTMETRICA, * PNEWTEXTMETRICA, * NPNEWTEXTMETRICA, * LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
	LONG        tmHeight;
	LONG        tmAscent;
	LONG        tmDescent;
	LONG        tmInternalLeading;
	LONG        tmExternalLeading;
	LONG        tmAveCharWidth;
	LONG        tmMaxCharWidth;
	LONG        tmWeight;
	LONG        tmOverhang;
	LONG        tmDigitizedAspectX;
	LONG        tmDigitizedAspectY;
	WCHAR       tmFirstChar;
	WCHAR       tmLastChar;
	WCHAR       tmDefaultChar;
	WCHAR       tmBreakChar;
	BYTE        tmItalic;
	BYTE        tmUnderlined;
	BYTE        tmStruckOut;
	BYTE        tmPitchAndFamily;
	BYTE        tmCharSet;
	DWORD   ntmFlags;
	UINT    ntmSizeEM;
	UINT    ntmCellHeight;
	UINT    ntmAvgWidth;
} NEWTEXTMETRICW, * PNEWTEXTMETRICW, * NPNEWTEXTMETRICW, * LPNEWTEXTMETRICW;
typedef NEWTEXTMETRICW NEWTEXTMETRIC;
typedef PNEWTEXTMETRICW PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICW NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICW LPNEWTEXTMETRIC;
typedef struct tagNEWTEXTMETRICEXA
{
	NEWTEXTMETRICA  ntmTm;
	FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
	NEWTEXTMETRICW  ntmTm;
	FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;
typedef NEWTEXTMETRICEXW NEWTEXTMETRICEX;
typedef struct tagPELARRAY
{
	LONG        paXCount;
	LONG        paYCount;
	LONG        paXExt;
	LONG        paYExt;
	BYTE        paRGBs;
} PELARRAY, * PPELARRAY, * NPPELARRAY, * LPPELARRAY;
typedef struct tagLOGBRUSH
{
	UINT        lbStyle;
	COLORREF    lbColor;
	ULONG_PTR   lbHatch;
} LOGBRUSH, * PLOGBRUSH, * NPLOGBRUSH, * LPLOGBRUSH;
typedef struct tagLOGBRUSH32
{
	UINT        lbStyle;
	COLORREF    lbColor;
	ULONG       lbHatch;
} LOGBRUSH32, * PLOGBRUSH32, * NPLOGBRUSH32, * LPLOGBRUSH32;
typedef LOGBRUSH            PATTERN;
typedef PATTERN* PPATTERN;
typedef PATTERN* NPPATTERN;
typedef PATTERN* LPPATTERN;
typedef struct tagLOGPEN
{
	UINT        lopnStyle;
	POINT       lopnWidth;
	COLORREF    lopnColor;
} LOGPEN, * PLOGPEN, * NPLOGPEN, * LPLOGPEN;
typedef struct tagEXTLOGPEN {
	DWORD       elpPenStyle;
	DWORD       elpWidth;
	UINT        elpBrushStyle;
	COLORREF    elpColor;
	ULONG_PTR   elpHatch;
	DWORD       elpNumEntries;
	DWORD       elpStyleEntry[1];
} EXTLOGPEN, * PEXTLOGPEN, * NPEXTLOGPEN, * LPEXTLOGPEN;
typedef struct tagEXTLOGPEN32 {
	DWORD       elpPenStyle;
	DWORD       elpWidth;
	UINT        elpBrushStyle;
	COLORREF    elpColor;
	ULONG       elpHatch;
	DWORD       elpNumEntries;
	DWORD       elpStyleEntry[1];
} EXTLOGPEN32, * PEXTLOGPEN32, * NPEXTLOGPEN32, * LPEXTLOGPEN32;
typedef struct tagPALETTEENTRY {
	BYTE        peRed;
	BYTE        peGreen;
	BYTE        peBlue;
	BYTE        peFlags;
} PALETTEENTRY, * PPALETTEENTRY, * LPPALETTEENTRY;
typedef struct tagLOGPALETTE {
	WORD        palVersion;
	WORD        palNumEntries;
	PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, * PLOGPALETTE, * NPLOGPALETTE, * LPLOGPALETTE;
typedef struct tagLOGFONTA
{
	LONG      lfHeight;
	LONG      lfWidth;
	LONG      lfEscapement;
	LONG      lfOrientation;
	LONG      lfWeight;
	BYTE      lfItalic;
	BYTE      lfUnderline;
	BYTE      lfStrikeOut;
	BYTE      lfCharSet;
	BYTE      lfOutPrecision;
	BYTE      lfClipPrecision;
	BYTE      lfQuality;
	BYTE      lfPitchAndFamily;
	CHAR      lfFaceName[32];
} LOGFONTA, * PLOGFONTA, * NPLOGFONTA, * LPLOGFONTA;
typedef struct tagLOGFONTW
{
	LONG      lfHeight;
	LONG      lfWidth;
	LONG      lfEscapement;
	LONG      lfOrientation;
	LONG      lfWeight;
	BYTE      lfItalic;
	BYTE      lfUnderline;
	BYTE      lfStrikeOut;
	BYTE      lfCharSet;
	BYTE      lfOutPrecision;
	BYTE      lfClipPrecision;
	BYTE      lfQuality;
	BYTE      lfPitchAndFamily;
	WCHAR     lfFaceName[32];
} LOGFONTW, * PLOGFONTW, * NPLOGFONTW, * LPLOGFONTW;
typedef LOGFONTW LOGFONT;
typedef PLOGFONTW PLOGFONT;
typedef NPLOGFONTW NPLOGFONT;
typedef LPLOGFONTW LPLOGFONT;
typedef struct tagENUMLOGFONTA
{
	LOGFONTA elfLogFont;
	BYTE     elfFullName[64];
	BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW
{
	LOGFONTW elfLogFont;
	WCHAR    elfFullName[64];
	WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;
typedef ENUMLOGFONTW ENUMLOGFONT;
typedef LPENUMLOGFONTW LPENUMLOGFONT;
typedef struct tagENUMLOGFONTEXA
{
	LOGFONTA    elfLogFont;
	BYTE        elfFullName[64];
	BYTE        elfStyle[32];
	BYTE        elfScript[32];
} ENUMLOGFONTEXA, * LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
	LOGFONTW    elfLogFont;
	WCHAR       elfFullName[64];
	WCHAR       elfStyle[32];
	WCHAR       elfScript[32];
} ENUMLOGFONTEXW, * LPENUMLOGFONTEXW;
typedef ENUMLOGFONTEXW ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXW LPENUMLOGFONTEX;
typedef struct tagPANOSE
{
	BYTE    bFamilyType;
	BYTE    bSerifStyle;
	BYTE    bWeight;
	BYTE    bProportion;
	BYTE    bContrast;
	BYTE    bStrokeVariation;
	BYTE    bArmStyle;
	BYTE    bLetterform;
	BYTE    bMidline;
	BYTE    bXHeight;
} PANOSE, * LPPANOSE;
typedef struct tagEXTLOGFONTA {
	LOGFONTA    elfLogFont;
	BYTE        elfFullName[64];
	BYTE        elfStyle[32];
	DWORD       elfVersion;
	DWORD       elfStyleSize;
	DWORD       elfMatch;
	DWORD       elfReserved;
	BYTE        elfVendorId[4];
	DWORD       elfCulture;
	PANOSE      elfPanose;
} EXTLOGFONTA, * PEXTLOGFONTA, * NPEXTLOGFONTA, * LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
	LOGFONTW    elfLogFont;
	WCHAR       elfFullName[64];
	WCHAR       elfStyle[32];
	DWORD       elfVersion;
	DWORD       elfStyleSize;
	DWORD       elfMatch;
	DWORD       elfReserved;
	BYTE        elfVendorId[4];
	DWORD       elfCulture;
	PANOSE      elfPanose;
} EXTLOGFONTW, * PEXTLOGFONTW, * NPEXTLOGFONTW, * LPEXTLOGFONTW;
typedef EXTLOGFONTW EXTLOGFONT;
typedef PEXTLOGFONTW PEXTLOGFONT;
typedef NPEXTLOGFONTW NPEXTLOGFONT;
typedef LPEXTLOGFONTW LPEXTLOGFONT;
typedef struct _devicemodeA {
	BYTE   dmDeviceName[32];
	WORD dmSpecVersion;
	WORD dmDriverVersion;
	WORD dmSize;
	WORD dmDriverExtra;
	DWORD dmFields;
	union {
		struct {
			short dmOrientation;
			short dmPaperSize;
			short dmPaperLength;
			short dmPaperWidth;
			short dmScale;
			short dmCopies;
			short dmDefaultSource;
			short dmPrintQuality;
		};
		struct {
			POINTL dmPosition;
			DWORD  dmDisplayOrientation;
			DWORD  dmDisplayFixedOutput;
		};
	};
	short dmColor;
	short dmDuplex;
	short dmYResolution;
	short dmTTOption;
	short dmCollate;
	BYTE   dmFormName[32];
	WORD   dmLogPixels;
	DWORD  dmBitsPerPel;
	DWORD  dmPelsWidth;
	DWORD  dmPelsHeight;
	union {
		DWORD  dmDisplayFlags;
		DWORD  dmNup;
	};
	DWORD  dmDisplayFrequency;
	DWORD  dmICMMethod;
	DWORD  dmICMIntent;
	DWORD  dmMediaType;
	DWORD  dmDitherType;
	DWORD  dmReserved1;
	DWORD  dmReserved2;
	DWORD  dmPanningWidth;
	DWORD  dmPanningHeight;
} DEVMODEA, * PDEVMODEA, * NPDEVMODEA, * LPDEVMODEA;
typedef struct _devicemodeW {
	WCHAR  dmDeviceName[32];
	WORD dmSpecVersion;
	WORD dmDriverVersion;
	WORD dmSize;
	WORD dmDriverExtra;
	DWORD dmFields;
	union {
		struct {
			short dmOrientation;
			short dmPaperSize;
			short dmPaperLength;
			short dmPaperWidth;
			short dmScale;
			short dmCopies;
			short dmDefaultSource;
			short dmPrintQuality;
		};
		struct {
			POINTL dmPosition;
			DWORD  dmDisplayOrientation;
			DWORD  dmDisplayFixedOutput;
		};
	};
	short dmColor;
	short dmDuplex;
	short dmYResolution;
	short dmTTOption;
	short dmCollate;
	WCHAR  dmFormName[32];
	WORD   dmLogPixels;
	DWORD  dmBitsPerPel;
	DWORD  dmPelsWidth;
	DWORD  dmPelsHeight;
	union {
		DWORD  dmDisplayFlags;
		DWORD  dmNup;
	};
	DWORD  dmDisplayFrequency;
	DWORD  dmICMMethod;
	DWORD  dmICMIntent;
	DWORD  dmMediaType;
	DWORD  dmDitherType;
	DWORD  dmReserved1;
	DWORD  dmReserved2;
	DWORD  dmPanningWidth;
	DWORD  dmPanningHeight;
} DEVMODEW, * PDEVMODEW, * NPDEVMODEW, * LPDEVMODEW;
typedef DEVMODEW DEVMODE;
typedef PDEVMODEW PDEVMODE;
typedef NPDEVMODEW NPDEVMODE;
typedef LPDEVMODEW LPDEVMODE;
typedef struct _DISPLAY_DEVICEA {
	DWORD  cb;
	CHAR   DeviceName[32];
	CHAR   DeviceString[128];
	DWORD  StateFlags;
	CHAR   DeviceID[128];
	CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, * PDISPLAY_DEVICEA, * LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
	DWORD  cb;
	WCHAR  DeviceName[32];
	WCHAR  DeviceString[128];
	DWORD  StateFlags;
	WCHAR  DeviceID[128];
	WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, * PDISPLAY_DEVICEW, * LPDISPLAY_DEVICEW;
typedef DISPLAY_DEVICEW DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEW PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEW LPDISPLAY_DEVICE;
typedef struct DISPLAYCONFIG_RATIONAL
{
	UINT32    Numerator;
	UINT32    Denominator;
} DISPLAYCONFIG_RATIONAL;
typedef enum
{
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER = -1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15 = 0,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO = 1,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO = 2,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO = 3,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI = 4,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI = 5,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS = 6,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN = 8,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI = 9,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL = 10,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED = 11,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL = 12,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED = 13,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE = 14,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_MIRACAST = 15,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_WIRED = 16,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INDIRECT_VIRTUAL = 17,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL = 0x80000000,
	DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;
typedef enum
{
	DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED = 0,
	DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE = 1,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED = 2,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
	DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST = 3,
	DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;
typedef struct DISPLAYCONFIG_2DREGION
{
	UINT32 cx;
	UINT32 cy;
} DISPLAYCONFIG_2DREGION;
typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
	UINT64                          pixelRate;
	DISPLAYCONFIG_RATIONAL          hSyncFreq;
	DISPLAYCONFIG_RATIONAL          vSyncFreq;
	DISPLAYCONFIG_2DREGION          activeSize;
	DISPLAYCONFIG_2DREGION          totalSize;
	union
	{
		struct
		{
			UINT32 videoStandard : 16;
			UINT32 vSyncFreqDivider : 6;
			UINT32 reserved : 10;
		} AdditionalSignalInfo;
		UINT32 videoStandard;
	};
	DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;
typedef enum
{
	DISPLAYCONFIG_SCALING_IDENTITY = 1,
	DISPLAYCONFIG_SCALING_CENTERED = 2,
	DISPLAYCONFIG_SCALING_STRETCHED = 3,
	DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX = 4,
	DISPLAYCONFIG_SCALING_CUSTOM = 5,
	DISPLAYCONFIG_SCALING_PREFERRED = 128,
	DISPLAYCONFIG_SCALING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;
typedef enum
{
	DISPLAYCONFIG_ROTATION_IDENTITY = 1,
	DISPLAYCONFIG_ROTATION_ROTATE90 = 2,
	DISPLAYCONFIG_ROTATION_ROTATE180 = 3,
	DISPLAYCONFIG_ROTATION_ROTATE270 = 4,
	DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;
typedef enum
{
	DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
	DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
	DISPLAYCONFIG_MODE_INFO_TYPE_DESKTOP_IMAGE = 3,
	DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;
typedef enum
{
	DISPLAYCONFIG_PIXELFORMAT_8BPP = 1,
	DISPLAYCONFIG_PIXELFORMAT_16BPP = 2,
	DISPLAYCONFIG_PIXELFORMAT_24BPP = 3,
	DISPLAYCONFIG_PIXELFORMAT_32BPP = 4,
	DISPLAYCONFIG_PIXELFORMAT_NONGDI = 5,
	DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32 = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;
typedef struct DISPLAYCONFIG_SOURCE_MODE
{
	UINT32                      width;
	UINT32                      height;
	DISPLAYCONFIG_PIXELFORMAT   pixelFormat;
	POINTL                      position;
} DISPLAYCONFIG_SOURCE_MODE;
typedef struct DISPLAYCONFIG_TARGET_MODE
{
	DISPLAYCONFIG_VIDEO_SIGNAL_INFO   targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;
typedef struct DISPLAYCONFIG_DESKTOP_IMAGE_INFO
{
	POINTL PathSourceSize;
	RECTL DesktopImageRegion;
	RECTL DesktopImageClip;
} DISPLAYCONFIG_DESKTOP_IMAGE_INFO;
typedef struct DISPLAYCONFIG_MODE_INFO
{
	DISPLAYCONFIG_MODE_INFO_TYPE    infoType;
	UINT32                          id;
	LUID                            adapterId;
	union
	{
		DISPLAYCONFIG_TARGET_MODE   targetMode;
		DISPLAYCONFIG_SOURCE_MODE   sourceMode;
		DISPLAYCONFIG_DESKTOP_IMAGE_INFO    desktopImageInfo;
	};
} DISPLAYCONFIG_MODE_INFO;
typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
	LUID    adapterId;
	UINT32  id;
	union
	{
		UINT32 modeInfoIdx;
		struct
		{
			UINT32 cloneGroupId : 16;
			UINT32 sourceModeInfoIdx : 16;
		};
	};
	UINT32  statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;
typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
	LUID                                    adapterId;
	UINT32                                  id;
	union
	{
		UINT32                                  modeInfoIdx;
		struct
		{
			UINT32 desktopModeInfoIdx : 16;
			UINT32 targetModeInfoIdx : 16;
		};
	};
	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY   outputTechnology;
	DISPLAYCONFIG_ROTATION                  rotation;
	DISPLAYCONFIG_SCALING                   scaling;
	DISPLAYCONFIG_RATIONAL                  refreshRate;
	DISPLAYCONFIG_SCANLINE_ORDERING         scanLineOrdering;
	BOOL                                    targetAvailable;
	UINT32                                  statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;
typedef struct DISPLAYCONFIG_PATH_INFO
{
	DISPLAYCONFIG_PATH_SOURCE_INFO  sourceInfo;
	DISPLAYCONFIG_PATH_TARGET_INFO  targetInfo;
	UINT32                          flags;
} DISPLAYCONFIG_PATH_INFO;
typedef enum DISPLAYCONFIG_TOPOLOGY_ID
{
	DISPLAYCONFIG_TOPOLOGY_INTERNAL = 0x00000001,
	DISPLAYCONFIG_TOPOLOGY_CLONE = 0x00000002,
	DISPLAYCONFIG_TOPOLOGY_EXTEND = 0x00000004,
	DISPLAYCONFIG_TOPOLOGY_EXTERNAL = 0x00000008,
	DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;
typedef enum
{
	DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME = 1,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME = 2,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE = 3,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME = 4,
	DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE = 5,
	DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_BASE_TYPE = 6,
	DISPLAYCONFIG_DEVICE_INFO_GET_SUPPORT_VIRTUAL_RESOLUTION = 7,
	DISPLAYCONFIG_DEVICE_INFO_SET_SUPPORT_VIRTUAL_RESOLUTION = 8,
	DISPLAYCONFIG_DEVICE_INFO_GET_ADVANCED_COLOR_INFO = 9,
	DISPLAYCONFIG_DEVICE_INFO_SET_ADVANCED_COLOR_STATE = 10,
	DISPLAYCONFIG_DEVICE_INFO_GET_SDR_WHITE_LEVEL = 11,
	DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;
typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
	DISPLAYCONFIG_DEVICE_INFO_TYPE  type;
	UINT32                          size;
	LUID                            adapterId;
	UINT32                          id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;
typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
	WCHAR                                       viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
	union
	{
		struct
		{
			UINT32  friendlyNameFromEdid : 1;
			UINT32  friendlyNameForced : 1;
			UINT32  edidIdsValid : 1;
			UINT32  reserved : 29;
		};
		UINT32  value;
	};
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;
typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
	DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS      flags;
	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY       outputTechnology;
	UINT16                                      edidManufactureId;
	UINT16                                      edidProductCodeId;
	UINT32                                      connectorInstance;
	WCHAR                                       monitorFriendlyDeviceName[64];
	WCHAR                                       monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;
typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
	UINT32                              width;
	UINT32                              height;
	DISPLAYCONFIG_TARGET_MODE           targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;
typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
	WCHAR                               adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;
typedef struct DISPLAYCONFIG_TARGET_BASE_TYPE {
	DISPLAYCONFIG_DEVICE_INFO_HEADER      header;
	DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY baseOutputTechnology;
} DISPLAYCONFIG_TARGET_BASE_TYPE;
typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
	union
	{
		struct
		{
			UINT32 bootPersistenceOn : 1;
			UINT32 reserved : 31;
		};
		UINT32 value;
	};
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;
typedef struct DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
	union
	{
		struct
		{
			UINT32 disableMonitorVirtualResolution : 1;
			UINT32 reserved : 31;
		};
		UINT32 value;
	};
} DISPLAYCONFIG_SUPPORT_VIRTUAL_RESOLUTION;
typedef enum _DISPLAYCONFIG_COLOR_ENCODING
{
	DISPLAYCONFIG_COLOR_ENCODING_RGB = 0,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR444 = 1,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR422 = 2,
	DISPLAYCONFIG_COLOR_ENCODING_YCBCR420 = 3,
	DISPLAYCONFIG_COLOR_ENCODING_INTENSITY = 4,
	DISPLAYCONFIG_COLOR_ENCODING_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_COLOR_ENCODING;
typedef struct _DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	union
	{
		struct
		{
			UINT32 advancedColorSupported : 1;
			UINT32 advancedColorEnabled : 1;
			UINT32 wideColorEnforced : 1;
			UINT32 advancedColorForceDisabled : 1;
			UINT32 reserved : 28;
		};
		UINT32 value;
	};
	DISPLAYCONFIG_COLOR_ENCODING colorEncoding;
	UINT32 bitsPerColorChannel;
} DISPLAYCONFIG_GET_ADVANCED_COLOR_INFO;
typedef struct _DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	union
	{
		struct
		{
			UINT32 enableAdvancedColor : 1;
			UINT32 reserved : 31;
		};
		UINT32 value;
	};
} DISPLAYCONFIG_SET_ADVANCED_COLOR_STATE;
typedef struct _DISPLAYCONFIG_SDR_WHITE_LEVEL
{
	DISPLAYCONFIG_DEVICE_INFO_HEADER header;
	ULONG SDRWhiteLevel;
} DISPLAYCONFIG_SDR_WHITE_LEVEL;
typedef struct _RGNDATAHEADER {
	DWORD   dwSize;
	DWORD   iType;
	DWORD   nCount;
	DWORD   nRgnSize;
	RECT    rcBound;
} RGNDATAHEADER, * PRGNDATAHEADER;
typedef struct _RGNDATA {
	RGNDATAHEADER   rdh;
	char            Buffer[1];
} RGNDATA, * PRGNDATA, * NPRGNDATA, * LPRGNDATA;
typedef struct _ABC {
	int     abcA;
	UINT    abcB;
	int     abcC;
} ABC, * PABC, * NPABC, * LPABC;
typedef struct _ABCFLOAT {
	FLOAT   abcfA;
	FLOAT   abcfB;
	FLOAT   abcfC;
} ABCFLOAT, * PABCFLOAT, * NPABCFLOAT, * LPABCFLOAT;
typedef struct _OUTLINETEXTMETRICA {
	UINT    otmSize;
	TEXTMETRICA otmTextMetrics;
	BYTE    otmFiller;
	PANOSE  otmPanoseNumber;
	UINT    otmfsSelection;
	UINT    otmfsType;
	int    otmsCharSlopeRise;
	int    otmsCharSlopeRun;
	int    otmItalicAngle;
	UINT    otmEMSquare;
	int    otmAscent;
	int    otmDescent;
	UINT    otmLineGap;
	UINT    otmsCapEmHeight;
	UINT    otmsXHeight;
	RECT    otmrcFontBox;
	int    otmMacAscent;
	int    otmMacDescent;
	UINT    otmMacLineGap;
	UINT    otmusMinimumPPEM;
	POINT   otmptSubscriptSize;
	POINT   otmptSubscriptOffset;
	POINT   otmptSuperscriptSize;
	POINT   otmptSuperscriptOffset;
	UINT    otmsStrikeoutSize;
	int    otmsStrikeoutPosition;
	int    otmsUnderscoreSize;
	int    otmsUnderscorePosition;
	PSTR    otmpFamilyName;
	PSTR    otmpFaceName;
	PSTR    otmpStyleName;
	PSTR    otmpFullName;
} OUTLINETEXTMETRICA, * POUTLINETEXTMETRICA, * NPOUTLINETEXTMETRICA, * LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
	UINT    otmSize;
	TEXTMETRICW otmTextMetrics;
	BYTE    otmFiller;
	PANOSE  otmPanoseNumber;
	UINT    otmfsSelection;
	UINT    otmfsType;
	int    otmsCharSlopeRise;
	int    otmsCharSlopeRun;
	int    otmItalicAngle;
	UINT    otmEMSquare;
	int    otmAscent;
	int    otmDescent;
	UINT    otmLineGap;
	UINT    otmsCapEmHeight;
	UINT    otmsXHeight;
	RECT    otmrcFontBox;
	int    otmMacAscent;
	int    otmMacDescent;
	UINT    otmMacLineGap;
	UINT    otmusMinimumPPEM;
	POINT   otmptSubscriptSize;
	POINT   otmptSubscriptOffset;
	POINT   otmptSuperscriptSize;
	POINT   otmptSuperscriptOffset;
	UINT    otmsStrikeoutSize;
	int    otmsStrikeoutPosition;
	int    otmsUnderscoreSize;
	int    otmsUnderscorePosition;
	PSTR    otmpFamilyName;
	PSTR    otmpFaceName;
	PSTR    otmpStyleName;
	PSTR    otmpFullName;
} OUTLINETEXTMETRICW, * POUTLINETEXTMETRICW, * NPOUTLINETEXTMETRICW, * LPOUTLINETEXTMETRICW;
typedef OUTLINETEXTMETRICW OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICW POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICW NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICW LPOUTLINETEXTMETRIC;
typedef struct tagPOLYTEXTA
{
	int       x;
	int       y;
	UINT      n;
	LPCSTR    lpstr;
	UINT      uiFlags;
	RECT      rcl;
	int* pdx;
} POLYTEXTA, * PPOLYTEXTA, * NPPOLYTEXTA, * LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
	int       x;
	int       y;
	UINT      n;
	LPCWSTR   lpstr;
	UINT      uiFlags;
	RECT      rcl;
	int* pdx;
} POLYTEXTW, * PPOLYTEXTW, * NPPOLYTEXTW, * LPPOLYTEXTW;
typedef POLYTEXTW POLYTEXT;
typedef PPOLYTEXTW PPOLYTEXT;
typedef NPPOLYTEXTW NPPOLYTEXT;
typedef LPPOLYTEXTW LPPOLYTEXT;
typedef struct _FIXED {
	WORD    fract;
	short   value;
} FIXED;
typedef struct _MAT2 {
	FIXED  eM11;
	FIXED  eM12;
	FIXED  eM21;
	FIXED  eM22;
} MAT2, * LPMAT2;
typedef struct _GLYPHMETRICS {
	UINT    gmBlackBoxX;
	UINT    gmBlackBoxY;
	POINT   gmptGlyphOrigin;
	short   gmCellIncX;
	short   gmCellIncY;
} GLYPHMETRICS, * LPGLYPHMETRICS;
typedef struct tagPOINTFX
{
	FIXED x;
	FIXED y;
} POINTFX, * LPPOINTFX;
typedef struct tagTTPOLYCURVE
{
	WORD    wType;
	WORD    cpfx;
	POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;
typedef struct tagTTPOLYGONHEADER
{
	DWORD   cb;
	DWORD   dwType;
	POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;
typedef struct tagGCP_RESULTSA
{
	DWORD   lStructSize;
	LPSTR     lpOutString;
	UINT* lpOrder;
	int* lpDx;
	int* lpCaretPos;
	LPSTR   lpClass;
	LPWSTR  lpGlyphs;
	UINT    nGlyphs;
	int     nMaxFit;
} GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
{
	DWORD   lStructSize;
	LPWSTR    lpOutString;
	UINT* lpOrder;
	int* lpDx;
	int* lpCaretPos;
	LPSTR   lpClass;
	LPWSTR  lpGlyphs;
	UINT    nGlyphs;
	int     nMaxFit;
} GCP_RESULTSW, * LPGCP_RESULTSW;
typedef GCP_RESULTSW GCP_RESULTS;
typedef LPGCP_RESULTSW LPGCP_RESULTS;
typedef struct _RASTERIZER_STATUS {
	short   nSize;
	short   wFlags;
	short   nLanguageID;
} RASTERIZER_STATUS, * LPRASTERIZER_STATUS;
typedef struct tagPIXELFORMATDESCRIPTOR
{
	WORD  nSize;
	WORD  nVersion;
	DWORD dwFlags;
	BYTE  iPixelType;
	BYTE  cColorBits;
	BYTE  cRedBits;
	BYTE  cRedShift;
	BYTE  cGreenBits;
	BYTE  cGreenShift;
	BYTE  cBlueBits;
	BYTE  cBlueShift;
	BYTE  cAlphaBits;
	BYTE  cAlphaShift;
	BYTE  cAccumBits;
	BYTE  cAccumRedBits;
	BYTE  cAccumGreenBits;
	BYTE  cAccumBlueBits;
	BYTE  cAccumAlphaBits;
	BYTE  cDepthBits;
	BYTE  cStencilBits;
	BYTE  cAuxBuffers;
	BYTE  iLayerType;
	BYTE  bReserved;
	DWORD dwLayerMask;
	DWORD dwVisibleMask;
	DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, * PPIXELFORMATDESCRIPTOR, * LPPIXELFORMATDESCRIPTOR;
typedef int(__stdcall* OLDFONTENUMPROCA)(const LOGFONTA*, const TEXTMETRICA*, DWORD, LPARAM);
typedef int(__stdcall* OLDFONTENUMPROCW)(const LOGFONTW*, const TEXTMETRICW*, DWORD, LPARAM);
typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;
typedef FONTENUMPROCW FONTENUMPROC;
typedef int(__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void(__stdcall* LINEDDAPROC)(int, int, LPARAM);
int __stdcall AddFontResourceA(LPCSTR);
int __stdcall AddFontResourceW(LPCWSTR);
BOOL  __stdcall AnimatePalette(HPALETTE hPal, UINT iStartIndex, UINT cEntries, const PALETTEENTRY* ppe);
BOOL  __stdcall Arc(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
BOOL  __stdcall BitBlt(HDC hdc, int x, int y, int cx, int cy, HDC hdcSrc, int x1, int y1, DWORD rop);
BOOL  __stdcall CancelDC(HDC hdc);
BOOL  __stdcall Chord(HDC hdc, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4);
int   __stdcall ChoosePixelFormat(HDC hdc, const PIXELFORMATDESCRIPTOR* ppfd);
HMETAFILE  __stdcall CloseMetaFile(HDC hdc);
int     __stdcall CombineRgn(HRGN hrgnDst, HRGN hrgnSrc1, HRGN hrgnSrc2, int iMode);
HMETAFILE __stdcall CopyMetaFileA(HMETAFILE, LPCSTR);
HMETAFILE __stdcall CopyMetaFileW(HMETAFILE, LPCWSTR);
HBITMAP __stdcall CreateBitmap(int nWidth, int nHeight, UINT nPlanes, UINT nBitCount, const void* lpBits);
HBITMAP __stdcall CreateBitmapIndirect(const BITMAP* pbm);
HBRUSH  __stdcall CreateBrushIndirect(const LOGBRUSH* plbrush);
HBITMAP __stdcall CreateCompatibleBitmap(HDC hdc, int cx, int cy);
HBITMAP __stdcall CreateDiscardableBitmap(HDC hdc, int cx, int cy);
HDC     __stdcall CreateCompatibleDC(HDC hdc);
HDC     __stdcall CreateDCA(LPCSTR pwszDriver, LPCSTR pwszDevice, LPCSTR pszPort, const DEVMODEA* pdm);
HDC     __stdcall CreateDCW(LPCWSTR pwszDriver, LPCWSTR pwszDevice, LPCWSTR pszPort, const DEVMODEW* pdm);
HBITMAP __stdcall CreateDIBitmap(HDC hdc, const BITMAPINFOHEADER* pbmih, DWORD flInit, const void* pjBits, const BITMAPINFO* pbmi, UINT iUsage);
HBRUSH  __stdcall CreateDIBPatternBrush(HGLOBAL h, UINT iUsage);
HBRUSH  __stdcall CreateDIBPatternBrushPt(const void* lpPackedDIB, UINT iUsage);
HRGN    __stdcall CreateEllipticRgn(int x1, int y1, int x2, int y2);
HRGN    __stdcall CreateEllipticRgnIndirect(const RECT* lprect);
HFONT   __stdcall CreateFontIndirectA(const LOGFONTA* lplf);
HFONT   __stdcall CreateFontIndirectW(const LOGFONTW* lplf);
HFONT   __stdcall CreateFontA(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
	DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
	DWORD iQuality, DWORD iPitchAndFamily, LPCSTR pszFaceName);
HFONT   __stdcall CreateFontW(int cHeight, int cWidth, int cEscapement, int cOrientation, int cWeight, DWORD bItalic,
	DWORD bUnderline, DWORD bStrikeOut, DWORD iCharSet, DWORD iOutPrecision, DWORD iClipPrecision,
	DWORD iQuality, DWORD iPitchAndFamily, LPCWSTR pszFaceName);
HBRUSH  __stdcall CreateHatchBrush(int iHatch, COLORREF color);
HDC     __stdcall CreateICA(LPCSTR pszDriver, LPCSTR pszDevice, LPCSTR pszPort, const DEVMODEA* pdm);
HDC     __stdcall CreateICW(LPCWSTR pszDriver, LPCWSTR pszDevice, LPCWSTR pszPort, const DEVMODEW* pdm);
HDC     __stdcall CreateMetaFileA(LPCSTR pszFile);
HDC     __stdcall CreateMetaFileW(LPCWSTR pszFile);
HPALETTE __stdcall CreatePalette(const LOGPALETTE* plpal);
HPEN    __stdcall CreatePen(int iStyle, int cWidth, COLORREF color);
HPEN    __stdcall CreatePenIndirect(const LOGPEN* plpen);
HRGN    __stdcall CreatePolyPolygonRgn(const POINT* pptl,
	const INT* pc,
	int cPoly,
	int iMode);
HBRUSH  __stdcall CreatePatternBrush(HBITMAP hbm);
HRGN    __stdcall CreateRectRgn(int x1, int y1, int x2, int y2);
HRGN    __stdcall CreateRectRgnIndirect(const RECT* lprect);
HRGN    __stdcall CreateRoundRectRgn(int x1, int y1, int x2, int y2, int w, int h);
BOOL    __stdcall CreateScalableFontResourceA(DWORD fdwHidden, LPCSTR lpszFont, LPCSTR lpszFile, LPCSTR lpszPath);
BOOL    __stdcall CreateScalableFontResourceW(DWORD fdwHidden, LPCWSTR lpszFont, LPCWSTR lpszFile, LPCWSTR lpszPath);
HBRUSH  __stdcall CreateSolidBrush(COLORREF color);
BOOL __stdcall DeleteDC(HDC hdc);
BOOL __stdcall DeleteMetaFile(HMETAFILE hmf);
BOOL __stdcall DeleteObject(HGDIOBJ ho);
int  __stdcall DescribePixelFormat(HDC hdc,
	int iPixelFormat,
	UINT nBytes,
	LPPIXELFORMATDESCRIPTOR ppfd);
typedef UINT(__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef DWORD(__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

int
__stdcall
DeviceCapabilitiesA(
	LPCSTR         pDevice,
	LPCSTR         pPort,
	WORD             fwCapability,
	LPSTR          pOutput,
	const DEVMODEA* pDevMode
);

int
__stdcall
DeviceCapabilitiesW(
	LPCWSTR         pDevice,
	LPCWSTR         pPort,
	WORD             fwCapability,
	LPWSTR          pOutput,
	const DEVMODEW* pDevMode
);
int  __stdcall DrawEscape(HDC    hdc,
	int    iEscape,
	int    cjIn,
	LPCSTR lpIn);
BOOL __stdcall Ellipse(HDC hdc, int left, int top, int right, int bottom);
int  __stdcall EnumFontFamiliesExA(HDC hdc, LPLOGFONTA lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam, DWORD dwFlags);
int  __stdcall EnumFontFamiliesExW(HDC hdc, LPLOGFONTW lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam, DWORD dwFlags);
int  __stdcall EnumFontFamiliesA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int  __stdcall EnumFontFamiliesW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
int  __stdcall EnumFontsA(HDC hdc, LPCSTR lpLogfont, FONTENUMPROCA lpProc, LPARAM lParam);
int  __stdcall EnumFontsW(HDC hdc, LPCWSTR lpLogfont, FONTENUMPROCW lpProc, LPARAM lParam);
int  __stdcall EnumObjects(HDC hdc, int nType, GOBJENUMPROC lpFunc, LPARAM lParam);
BOOL __stdcall EqualRgn(HRGN hrgn1, HRGN hrgn2);
int  __stdcall Escape(HDC hdc,
	int iEscape,
	int cjIn,
	LPCSTR pvIn,
	LPVOID pvOut);
int  __stdcall ExtEscape(HDC hdc,
	int iEscape,
	int cjInput,
	LPCSTR lpInData,
	int cjOutput,
	LPSTR lpOutData);
int  __stdcall ExcludeClipRect(HDC hdc, int left, int top, int right, int bottom);
HRGN __stdcall ExtCreateRegion(const XFORM* lpx, DWORD nCount, const RGNDATA* lpData);
BOOL __stdcall ExtFloodFill(HDC hdc, int x, int y, COLORREF color, UINT type);
BOOL __stdcall FillRgn(HDC hdc, HRGN hrgn, HBRUSH hbr);
BOOL __stdcall FloodFill(HDC hdc, int x, int y, COLORREF color);
BOOL __stdcall FrameRgn(HDC hdc, HRGN hrgn, HBRUSH hbr, int w, int h);
int  __stdcall GetROP2(HDC hdc);
BOOL __stdcall GetAspectRatioFilterEx(HDC hdc, LPSIZE lpsize);
COLORREF __stdcall GetBkColor(HDC hdc);
COLORREF __stdcall GetDCBrushColor(HDC hdc);
COLORREF __stdcall GetDCPenColor(HDC hdc);

int
__stdcall
GetBkMode(
	HDC hdc
);

LONG
__stdcall
GetBitmapBits(
	HBITMAP hbit,
	LONG cb,
	LPVOID lpvBits
);
BOOL  __stdcall GetBitmapDimensionEx(HBITMAP hbit, LPSIZE lpsize);
UINT  __stdcall GetBoundsRect(HDC hdc, LPRECT lprect, UINT flags);
BOOL  __stdcall GetBrushOrgEx(HDC hdc, LPPOINT lppt);
BOOL  __stdcall GetCharWidthA(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL  __stdcall GetCharWidthW(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL  __stdcall GetCharWidth32A(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL  __stdcall GetCharWidth32W(HDC hdc, UINT iFirst, UINT iLast, LPINT lpBuffer);
BOOL  __stdcall GetCharWidthFloatA(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
BOOL  __stdcall GetCharWidthFloatW(HDC hdc, UINT iFirst, UINT iLast, PFLOAT lpBuffer);
BOOL  __stdcall GetCharABCWidthsA(HDC hdc,
	UINT wFirst,
	UINT wLast,
	LPABC lpABC);
BOOL  __stdcall GetCharABCWidthsW(HDC hdc,
	UINT wFirst,
	UINT wLast,
	LPABC lpABC);
BOOL  __stdcall GetCharABCWidthsFloatA(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
BOOL  __stdcall GetCharABCWidthsFloatW(HDC hdc, UINT iFirst, UINT iLast, LPABCFLOAT lpABC);
int   __stdcall GetClipBox(HDC hdc, LPRECT lprect);
int   __stdcall GetClipRgn(HDC hdc, HRGN hrgn);
int   __stdcall GetMetaRgn(HDC hdc, HRGN hrgn);
HGDIOBJ __stdcall GetCurrentObject(HDC hdc, UINT type);
BOOL  __stdcall GetCurrentPositionEx(HDC hdc, LPPOINT lppt);
int   __stdcall GetDeviceCaps(HDC hdc, int index);
int   __stdcall GetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines,
	LPVOID lpvBits, LPBITMAPINFO lpbmi, UINT usage);
DWORD __stdcall GetFontData(HDC     hdc,
	DWORD   dwTable,
	DWORD   dwOffset,
	PVOID pvBuffer,
	DWORD   cjBuffer
);
DWORD __stdcall GetGlyphOutlineA(HDC hdc,
	UINT uChar,
	UINT fuFormat,
	LPGLYPHMETRICS lpgm,
	DWORD cjBuffer,
	LPVOID pvBuffer,
	const MAT2* lpmat2
);
DWORD __stdcall GetGlyphOutlineW(HDC hdc,
	UINT uChar,
	UINT fuFormat,
	LPGLYPHMETRICS lpgm,
	DWORD cjBuffer,
	LPVOID pvBuffer,
	const MAT2* lpmat2
);
int   __stdcall GetGraphicsMode(HDC hdc);
int   __stdcall GetMapMode(HDC hdc);
UINT  __stdcall GetMetaFileBitsEx(HMETAFILE hMF, UINT cbBuffer, LPVOID lpData);
HMETAFILE   __stdcall GetMetaFileA(LPCSTR lpName);
HMETAFILE   __stdcall GetMetaFileW(LPCWSTR lpName);
COLORREF __stdcall GetNearestColor(HDC hdc, COLORREF color);
UINT  __stdcall GetNearestPaletteIndex(HPALETTE h, COLORREF color);
DWORD __stdcall GetObjectType(HGDIOBJ h);
UINT __stdcall GetOutlineTextMetricsA(HDC hdc,
	UINT cjCopy,
	LPOUTLINETEXTMETRICA potm);
UINT __stdcall GetOutlineTextMetricsW(HDC hdc,
	UINT cjCopy,
	LPOUTLINETEXTMETRICW potm);
UINT  __stdcall GetPaletteEntries(HPALETTE hpal,
	UINT iStart,
	UINT cEntries,
	LPPALETTEENTRY pPalEntries);
COLORREF __stdcall GetPixel(HDC hdc, int x, int y);
int   __stdcall GetPixelFormat(HDC hdc);
int   __stdcall GetPolyFillMode(HDC hdc);
BOOL  __stdcall GetRasterizerCaps(LPRASTERIZER_STATUS lpraststat,
	UINT cjBytes);
int   __stdcall GetRandomRgn(HDC hdc, HRGN hrgn, INT i);
DWORD __stdcall GetRegionData(HRGN hrgn,
	DWORD nCount,
	LPRGNDATA lpRgnData);
int   __stdcall GetRgnBox(HRGN hrgn, LPRECT lprc);
HGDIOBJ __stdcall GetStockObject(int i);
int   __stdcall GetStretchBltMode(HDC hdc);

UINT
__stdcall
GetSystemPaletteEntries(
	HDC  hdc,
	UINT iStart,
	UINT cEntries,
	LPPALETTEENTRY pPalEntries
);
UINT  __stdcall GetSystemPaletteUse(HDC hdc);
int   __stdcall GetTextCharacterExtra(HDC hdc);
UINT  __stdcall GetTextAlign(HDC hdc);
COLORREF __stdcall GetTextColor(HDC hdc);

BOOL
__stdcall
GetTextExtentPointA(
	HDC hdc,
	LPCSTR lpString,
	int c,
	LPSIZE lpsz
);

BOOL
__stdcall
GetTextExtentPointW(
	HDC hdc,
	LPCWSTR lpString,
	int c,
	LPSIZE lpsz
);

BOOL
__stdcall
GetTextExtentPoint32A(
	HDC hdc,
	LPCSTR lpString,
	int c,
	LPSIZE psizl
);

BOOL
__stdcall
GetTextExtentPoint32W(
	HDC hdc,
	LPCWSTR lpString,
	int c,
	LPSIZE psizl
);

BOOL
__stdcall
GetTextExtentExPointA(
	HDC hdc,
	LPCSTR lpszString,
	int cchString,
	int nMaxExtent,
	LPINT lpnFit,
	LPINT lpnDx,
	LPSIZE lpSize
);

BOOL
__stdcall
GetTextExtentExPointW(
	HDC hdc,
	LPCWSTR lpszString,
	int cchString,
	int nMaxExtent,
	LPINT lpnFit,
	LPINT lpnDx,
	LPSIZE lpSize
);
int __stdcall GetTextCharset(HDC hdc);
int __stdcall GetTextCharsetInfo(HDC hdc, LPFONTSIGNATURE lpSig, DWORD dwFlags);
BOOL __stdcall TranslateCharsetInfo(DWORD* lpSrc, LPCHARSETINFO lpCs, DWORD dwFlags);
DWORD __stdcall GetFontLanguageInfo(HDC hdc);
DWORD __stdcall GetCharacterPlacementA(HDC hdc, LPCSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSA lpResults, DWORD dwFlags);
DWORD __stdcall GetCharacterPlacementW(HDC hdc, LPCWSTR lpString, int nCount, int nMexExtent, LPGCP_RESULTSW lpResults, DWORD dwFlags);
typedef struct tagWCRANGE
{
	WCHAR  wcLow;
	USHORT cGlyphs;
} WCRANGE, * PWCRANGE, * LPWCRANGE;
typedef struct tagGLYPHSET
{
	DWORD    cbThis;
	DWORD    flAccel;
	DWORD    cGlyphsSupported;
	DWORD    cRanges;
	WCRANGE  ranges[1];
} GLYPHSET, * PGLYPHSET, * LPGLYPHSET;
DWORD __stdcall GetFontUnicodeRanges(HDC hdc, LPGLYPHSET lpgs);
DWORD __stdcall GetGlyphIndicesA(HDC hdc, LPCSTR lpstr, int c, LPWORD pgi, DWORD fl);
DWORD __stdcall GetGlyphIndicesW(HDC hdc, LPCWSTR lpstr, int c, LPWORD pgi, DWORD fl);
BOOL  __stdcall GetTextExtentPointI(HDC hdc, LPWORD pgiIn, int cgi, LPSIZE psize);
BOOL  __stdcall GetTextExtentExPointI(HDC hdc,
	LPWORD lpwszString,
	int cwchString,
	int nMaxExtent,
	LPINT lpnFit,
	LPINT lpnDx,
	LPSIZE lpSize
);
BOOL  __stdcall GetCharWidthI(HDC hdc,
	UINT giFirst,
	UINT cgi,
	LPWORD pgi,
	LPINT piWidths
);
BOOL  __stdcall GetCharABCWidthsI(HDC    hdc,
	UINT   giFirst,
	UINT   cgi,
	LPWORD pgi,
	LPABC  pabc
);
typedef struct tagDESIGNVECTOR
{
	DWORD  dvReserved;
	DWORD  dvNumAxes;
	LONG   dvValues[16];
} DESIGNVECTOR, * PDESIGNVECTOR, * LPDESIGNVECTOR;
int  __stdcall AddFontResourceExA(LPCSTR name, DWORD fl, PVOID res);
int  __stdcall AddFontResourceExW(LPCWSTR name, DWORD fl, PVOID res);
BOOL __stdcall RemoveFontResourceExA(LPCSTR name, DWORD fl, PVOID pdv);
BOOL __stdcall RemoveFontResourceExW(LPCWSTR name, DWORD fl, PVOID pdv);
HANDLE __stdcall AddFontMemResourceEx(PVOID pFileView,
	DWORD cjSize,
	PVOID pvResrved,
	DWORD* pNumFonts);
BOOL __stdcall RemoveFontMemResourceEx(HANDLE h);
typedef struct tagAXISINFOA
{
	LONG   axMinValue;
	LONG   axMaxValue;
	BYTE   axAxisName[16];
} AXISINFOA, * PAXISINFOA, * LPAXISINFOA;
typedef struct tagAXISINFOW
{
	LONG   axMinValue;
	LONG   axMaxValue;
	WCHAR  axAxisName[16];
} AXISINFOW, * PAXISINFOW, * LPAXISINFOW;
typedef AXISINFOW AXISINFO;
typedef PAXISINFOW PAXISINFO;
typedef LPAXISINFOW LPAXISINFO;
typedef struct tagAXESLISTA
{
	DWORD     axlReserved;
	DWORD     axlNumAxes;
	AXISINFOA axlAxisInfo[16];
} AXESLISTA, * PAXESLISTA, * LPAXESLISTA;
typedef struct tagAXESLISTW
{
	DWORD     axlReserved;
	DWORD     axlNumAxes;
	AXISINFOW axlAxisInfo[16];
} AXESLISTW, * PAXESLISTW, * LPAXESLISTW;
typedef AXESLISTW AXESLIST;
typedef PAXESLISTW PAXESLIST;
typedef LPAXESLISTW LPAXESLIST;
typedef struct tagENUMLOGFONTEXDVA
{
	ENUMLOGFONTEXA elfEnumLogfontEx;
	DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVA, * PENUMLOGFONTEXDVA, * LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
	ENUMLOGFONTEXW elfEnumLogfontEx;
	DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVW, * PENUMLOGFONTEXDVW, * LPENUMLOGFONTEXDVW;
typedef ENUMLOGFONTEXDVW ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVW PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVW LPENUMLOGFONTEXDV;
HFONT  __stdcall CreateFontIndirectExA(const ENUMLOGFONTEXDVA*);
HFONT  __stdcall CreateFontIndirectExW(const ENUMLOGFONTEXDVW*);
typedef struct tagENUMTEXTMETRICA
{
	NEWTEXTMETRICEXA etmNewTextMetricEx;
	AXESLISTA        etmAxesList;
} ENUMTEXTMETRICA, * PENUMTEXTMETRICA, * LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
	NEWTEXTMETRICEXW etmNewTextMetricEx;
	AXESLISTW        etmAxesList;
} ENUMTEXTMETRICW, * PENUMTEXTMETRICW, * LPENUMTEXTMETRICW;
typedef ENUMTEXTMETRICW ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICW PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICW LPENUMTEXTMETRIC;
BOOL  __stdcall GetViewportExtEx(HDC hdc, LPSIZE lpsize);
BOOL  __stdcall GetViewportOrgEx(HDC hdc, LPPOINT lppoint);
BOOL  __stdcall GetWindowExtEx(HDC hdc, LPSIZE lpsize);
BOOL  __stdcall GetWindowOrgEx(HDC hdc, LPPOINT lppoint);
int  __stdcall IntersectClipRect(HDC hdc, int left, int top, int right, int bottom);
BOOL __stdcall InvertRgn(HDC hdc, HRGN hrgn);
BOOL __stdcall LineDDA(int xStart, int yStart, int xEnd, int yEnd, LINEDDAPROC lpProc, LPARAM data);
BOOL __stdcall LineTo(HDC hdc, int x, int y);
BOOL __stdcall MaskBlt(HDC hdcDest, int xDest, int yDest, int width, int height,
	HDC hdcSrc, int xSrc, int ySrc, HBITMAP hbmMask, int xMask, int yMask, DWORD rop);
BOOL __stdcall PlgBlt(HDC hdcDest, const POINT* lpPoint, HDC hdcSrc, int xSrc, int ySrc, int width,
	int height, HBITMAP hbmMask, int xMask, int yMask);
int  __stdcall OffsetClipRgn(HDC hdc, int x, int y);
int  __stdcall OffsetRgn(HRGN hrgn, int x, int y);
BOOL __stdcall PatBlt(HDC hdc, int x, int y, int w, int h, DWORD rop);
BOOL __stdcall Pie(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
BOOL __stdcall PlayMetaFile(HDC hdc, HMETAFILE hmf);
BOOL __stdcall PaintRgn(HDC hdc, HRGN hrgn);
BOOL __stdcall PolyPolygon(HDC hdc, const POINT* apt, const INT* asz, int csz);
BOOL __stdcall PtInRegion(HRGN hrgn, int x, int y);
BOOL __stdcall PtVisible(HDC hdc, int x, int y);
BOOL __stdcall RectInRegion(HRGN hrgn, const RECT* lprect);
BOOL __stdcall RectVisible(HDC hdc, const RECT* lprect);
BOOL __stdcall Rectangle(HDC hdc, int left, int top, int right, int bottom);
BOOL __stdcall RestoreDC(HDC hdc, int nSavedDC);
HDC  __stdcall ResetDCA(HDC hdc, const DEVMODEA* lpdm);
HDC  __stdcall ResetDCW(HDC hdc, const DEVMODEW* lpdm);
UINT __stdcall RealizePalette(HDC hdc);
BOOL __stdcall RemoveFontResourceA(LPCSTR lpFileName);
BOOL __stdcall RemoveFontResourceW(LPCWSTR lpFileName);
BOOL  __stdcall RoundRect(HDC hdc, int left, int top, int right, int bottom, int width, int height);
BOOL __stdcall ResizePalette(HPALETTE hpal, UINT n);
int  __stdcall SaveDC(HDC hdc);
int  __stdcall SelectClipRgn(HDC hdc, HRGN hrgn);
int  __stdcall ExtSelectClipRgn(HDC hdc, HRGN hrgn, int mode);
int  __stdcall SetMetaRgn(HDC hdc);
HGDIOBJ __stdcall SelectObject(HDC hdc, HGDIOBJ h);
HPALETTE __stdcall SelectPalette(HDC hdc, HPALETTE hPal, BOOL bForceBkgd);
COLORREF __stdcall SetBkColor(HDC hdc, COLORREF color);
COLORREF __stdcall SetDCBrushColor(HDC hdc, COLORREF color);
COLORREF __stdcall SetDCPenColor(HDC hdc, COLORREF color);
int   __stdcall SetBkMode(HDC hdc, int mode);

LONG __stdcall
SetBitmapBits(
	HBITMAP hbm,
	DWORD cb,
	const void* pvBits);
UINT  __stdcall SetBoundsRect(HDC hdc, const RECT* lprect, UINT flags);
int   __stdcall SetDIBits(HDC hdc, HBITMAP hbm, UINT start, UINT cLines, const void* lpBits, const BITMAPINFO* lpbmi, UINT ColorUse);
int   __stdcall SetDIBitsToDevice(HDC hdc, int xDest, int yDest, DWORD w, DWORD h, int xSrc,
	int ySrc, UINT StartScan, UINT cLines, const void* lpvBits, const BITMAPINFO* lpbmi, UINT ColorUse);
DWORD __stdcall SetMapperFlags(HDC hdc, DWORD flags);
int   __stdcall SetGraphicsMode(HDC hdc, int iMode);
int   __stdcall SetMapMode(HDC hdc, int iMode);
DWORD __stdcall SetLayout(HDC hdc, DWORD l);
DWORD __stdcall GetLayout(HDC hdc);
HMETAFILE   __stdcall SetMetaFileBitsEx(UINT cbBuffer, const BYTE* lpData);
UINT  __stdcall SetPaletteEntries(HPALETTE hpal,
	UINT iStart,
	UINT cEntries,
	const PALETTEENTRY* pPalEntries);
COLORREF __stdcall SetPixel(HDC hdc, int x, int y, COLORREF color);
BOOL   __stdcall SetPixelV(HDC hdc, int x, int y, COLORREF color);
BOOL  __stdcall SetPixelFormat(HDC hdc, int format, const PIXELFORMATDESCRIPTOR* ppfd);
int   __stdcall SetPolyFillMode(HDC hdc, int mode);
BOOL  __stdcall StretchBlt(HDC hdcDest, int xDest, int yDest, int wDest, int hDest, HDC hdcSrc, int xSrc, int ySrc, int wSrc, int hSrc, DWORD rop);
BOOL   __stdcall SetRectRgn(HRGN hrgn, int left, int top, int right, int bottom);
int   __stdcall StretchDIBits(HDC hdc, int xDest, int yDest, int DestWidth, int DestHeight, int xSrc, int ySrc, int SrcWidth, int SrcHeight,
	const void* lpBits, const BITMAPINFO* lpbmi, UINT iUsage, DWORD rop);
int   __stdcall SetROP2(HDC hdc, int rop2);
int   __stdcall SetStretchBltMode(HDC hdc, int mode);
UINT  __stdcall SetSystemPaletteUse(HDC hdc, UINT use);
int   __stdcall SetTextCharacterExtra(HDC hdc, int extra);
COLORREF __stdcall SetTextColor(HDC hdc, COLORREF color);
UINT  __stdcall SetTextAlign(HDC hdc, UINT align);
BOOL  __stdcall SetTextJustification(HDC hdc, int extra, int count);
BOOL  __stdcall UpdateColors(HDC hdc);
typedef USHORT COLOR16;
typedef struct _TRIVERTEX
{
	LONG    x;
	LONG    y;
	COLOR16 Red;
	COLOR16 Green;
	COLOR16 Blue;
	COLOR16 Alpha;
}TRIVERTEX, * PTRIVERTEX, * LPTRIVERTEX;
typedef struct _GRADIENT_TRIANGLE
{
	ULONG Vertex1;
	ULONG Vertex2;
	ULONG Vertex3;
} GRADIENT_TRIANGLE, * PGRADIENT_TRIANGLE, * LPGRADIENT_TRIANGLE;
typedef struct _GRADIENT_RECT
{
	ULONG UpperLeft;
	ULONG LowerRight;
}GRADIENT_RECT, * PGRADIENT_RECT, * LPGRADIENT_RECT;
typedef struct _BLENDFUNCTION
{
	BYTE   BlendOp;
	BYTE   BlendFlags;
	BYTE   SourceConstantAlpha;
	BYTE   AlphaFormat;
}BLENDFUNCTION, * PBLENDFUNCTION;
BOOL __stdcall AlphaBlend(
	HDC hdcDest,
	int xoriginDest,
	int yoriginDest,
	int wDest,
	int hDest,
	HDC hdcSrc,
	int xoriginSrc,
	int yoriginSrc,
	int wSrc,
	int hSrc,
	BLENDFUNCTION ftn);
BOOL __stdcall TransparentBlt(
	HDC hdcDest,
	int xoriginDest,
	int yoriginDest,
	int wDest,
	int hDest,
	HDC hdcSrc,
	int xoriginSrc,
	int yoriginSrc,
	int wSrc,
	int hSrc,
	UINT crTransparent);

BOOL
__stdcall
GradientFill(
	HDC hdc,
	PTRIVERTEX pVertex,
	ULONG nVertex,
	PVOID pMesh,
	ULONG nMesh,
	ULONG ulMode
);
BOOL  __stdcall GdiAlphaBlend(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc, int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, BLENDFUNCTION ftn);
BOOL  __stdcall GdiTransparentBlt(HDC hdcDest, int xoriginDest, int yoriginDest, int wDest, int hDest, HDC hdcSrc,
	int xoriginSrc, int yoriginSrc, int wSrc, int hSrc, UINT crTransparent);
BOOL  __stdcall GdiGradientFill(HDC hdc,
	PTRIVERTEX pVertex,
	ULONG nVertex,
	PVOID pMesh,
	ULONG nCount,
	ULONG ulMode);
BOOL  __stdcall PlayMetaFileRecord(HDC hdc,
	LPHANDLETABLE lpHandleTable,
	LPMETARECORD lpMR,
	UINT noObjs);
typedef int(__stdcall* MFENUMPROC)(HDC hdc, HANDLETABLE* lpht, METARECORD* lpMR, int nObj, LPARAM param);
BOOL  __stdcall EnumMetaFile(HDC hdc, HMETAFILE hmf, MFENUMPROC proc, LPARAM param);
typedef int(__stdcall* ENHMFENUMPROC)(HDC hdc, HANDLETABLE* lpht, const ENHMETARECORD* lpmr, int nHandles, LPARAM data);
HENHMETAFILE __stdcall CloseEnhMetaFile(HDC hdc);
HENHMETAFILE __stdcall CopyEnhMetaFileA(HENHMETAFILE hEnh, LPCSTR lpFileName);
HENHMETAFILE __stdcall CopyEnhMetaFileW(HENHMETAFILE hEnh, LPCWSTR lpFileName);
HDC   __stdcall CreateEnhMetaFileA(HDC hdc, LPCSTR lpFilename, const RECT* lprc, LPCSTR lpDesc);
HDC   __stdcall CreateEnhMetaFileW(HDC hdc, LPCWSTR lpFilename, const RECT* lprc, LPCWSTR lpDesc);
BOOL  __stdcall DeleteEnhMetaFile(HENHMETAFILE hmf);
BOOL  __stdcall EnumEnhMetaFile(HDC hdc, HENHMETAFILE hmf, ENHMFENUMPROC proc,
	LPVOID param, const RECT* lpRect);
HENHMETAFILE  __stdcall GetEnhMetaFileA(LPCSTR lpName);
HENHMETAFILE  __stdcall GetEnhMetaFileW(LPCWSTR lpName);
UINT  __stdcall GetEnhMetaFileBits(HENHMETAFILE hEMF,
	UINT nSize,
	LPBYTE lpData);
UINT  __stdcall GetEnhMetaFileDescriptionA(HENHMETAFILE hemf,
	UINT cchBuffer,
	LPSTR lpDescription);
UINT  __stdcall GetEnhMetaFileDescriptionW(HENHMETAFILE hemf,
	UINT cchBuffer,
	LPWSTR lpDescription);
UINT  __stdcall GetEnhMetaFileHeader(HENHMETAFILE hemf,
	UINT nSize,
	LPENHMETAHEADER lpEnhMetaHeader);
UINT  __stdcall GetEnhMetaFilePaletteEntries(HENHMETAFILE hemf,
	UINT nNumEntries,
	LPPALETTEENTRY lpPaletteEntries);
UINT  __stdcall GetEnhMetaFilePixelFormat(HENHMETAFILE hemf,
	UINT cbBuffer,
	PIXELFORMATDESCRIPTOR* ppfd);
UINT  __stdcall GetWinMetaFileBits(HENHMETAFILE hemf,
	UINT cbData16,
	LPBYTE pData16,
	INT iMapMode,
	HDC hdcRef);
BOOL  __stdcall PlayEnhMetaFile(HDC hdc, HENHMETAFILE hmf, const RECT* lprect);
BOOL  __stdcall PlayEnhMetaFileRecord(HDC hdc,
	LPHANDLETABLE pht,
	const ENHMETARECORD* pmr,
	UINT cht);
HENHMETAFILE  __stdcall SetEnhMetaFileBits(UINT nSize,
	const BYTE* pb);
HENHMETAFILE  __stdcall SetWinMetaFileBits(UINT nSize,
	const BYTE* lpMeta16Data,
	HDC hdcRef,
	const METAFILEPICT* lpMFP);
BOOL  __stdcall GdiComment(HDC hdc, UINT nSize, const BYTE* lpData);
BOOL __stdcall GetTextMetricsA(HDC hdc, LPTEXTMETRICA lptm);
BOOL __stdcall GetTextMetricsW(HDC hdc, LPTEXTMETRICW lptm);
typedef struct tagDIBSECTION {
	BITMAP       dsBm;
	BITMAPINFOHEADER    dsBmih;
	DWORD               dsBitfields[3];
	HANDLE              dshSection;
	DWORD               dsOffset;
} DIBSECTION, * LPDIBSECTION, * PDIBSECTION;
BOOL __stdcall AngleArc(HDC hdc, int x, int y, DWORD r, FLOAT StartAngle, FLOAT SweepAngle);
BOOL __stdcall PolyPolyline(HDC hdc, const POINT* apt, const DWORD* asz, DWORD csz);
BOOL __stdcall GetWorldTransform(HDC hdc, LPXFORM lpxf);
BOOL __stdcall SetWorldTransform(HDC hdc, const XFORM* lpxf);
BOOL __stdcall ModifyWorldTransform(HDC hdc, const XFORM* lpxf, DWORD mode);
BOOL __stdcall CombineTransform(LPXFORM lpxfOut, const XFORM* lpxf1, const XFORM* lpxf2);
HBITMAP __stdcall CreateDIBSection(
	HDC               hdc,
	const BITMAPINFO* pbmi,
	UINT              usage,
	void** ppvBits,
	HANDLE            hSection,
	DWORD             offset);
UINT __stdcall GetDIBColorTable(HDC  hdc,
	UINT iStart,
	UINT cEntries,
	RGBQUAD* prgbq);
UINT __stdcall SetDIBColorTable(HDC  hdc,
	UINT iStart,
	UINT cEntries,
	const RGBQUAD* prgbq);
typedef struct  tagCOLORADJUSTMENT {
	WORD   caSize;
	WORD   caFlags;
	WORD   caIlluminantIndex;
	WORD   caRedGamma;
	WORD   caGreenGamma;
	WORD   caBlueGamma;
	WORD   caReferenceBlack;
	WORD   caReferenceWhite;
	SHORT  caContrast;
	SHORT  caBrightness;
	SHORT  caColorfulness;
	SHORT  caRedGreenTint;
} COLORADJUSTMENT, * PCOLORADJUSTMENT, * LPCOLORADJUSTMENT;
BOOL __stdcall SetColorAdjustment(HDC hdc, const COLORADJUSTMENT* lpca);
BOOL __stdcall GetColorAdjustment(HDC hdc, LPCOLORADJUSTMENT lpca);
HPALETTE __stdcall CreateHalftonePalette(HDC hdc);
typedef BOOL(__stdcall* ABORTPROC)(HDC, int);
typedef struct _DOCINFOA {
	int     cbSize;
	LPCSTR   lpszDocName;
	LPCSTR   lpszOutput;
	LPCSTR   lpszDatatype;
	DWORD    fwType;
} DOCINFOA, * LPDOCINFOA;
typedef struct _DOCINFOW {
	int     cbSize;
	LPCWSTR  lpszDocName;
	LPCWSTR  lpszOutput;
	LPCWSTR  lpszDatatype;
	DWORD    fwType;
} DOCINFOW, * LPDOCINFOW;
typedef DOCINFOW DOCINFO;
typedef LPDOCINFOW LPDOCINFO;
int __stdcall StartDocA(HDC hdc, const DOCINFOA* lpdi);
int __stdcall StartDocW(HDC hdc, const DOCINFOW* lpdi);
int __stdcall EndDoc(HDC hdc);
int __stdcall StartPage(HDC hdc);
int __stdcall EndPage(HDC hdc);
int __stdcall AbortDoc(HDC hdc);
int __stdcall SetAbortProc(HDC hdc, ABORTPROC proc);
BOOL __stdcall AbortPath(HDC hdc);
BOOL __stdcall ArcTo(HDC hdc, int left, int top, int right, int bottom, int xr1, int yr1, int xr2, int yr2);
BOOL __stdcall BeginPath(HDC hdc);
BOOL __stdcall CloseFigure(HDC hdc);
BOOL __stdcall EndPath(HDC hdc);
BOOL __stdcall FillPath(HDC hdc);
BOOL __stdcall FlattenPath(HDC hdc);
int  __stdcall GetPath(HDC hdc, LPPOINT apt, LPBYTE aj, int cpt);
HRGN __stdcall PathToRegion(HDC hdc);
BOOL __stdcall PolyDraw(HDC hdc, const POINT* apt, const BYTE* aj, int cpt);
BOOL __stdcall SelectClipPath(HDC hdc, int mode);
int  __stdcall SetArcDirection(HDC hdc, int dir);
BOOL __stdcall SetMiterLimit(HDC hdc, FLOAT limit, PFLOAT old);
BOOL __stdcall StrokeAndFillPath(HDC hdc);
BOOL __stdcall StrokePath(HDC hdc);
BOOL __stdcall WidenPath(HDC hdc);
HPEN __stdcall ExtCreatePen(DWORD iPenStyle,
	DWORD cWidth,
	const LOGBRUSH* plbrush,
	DWORD cStyle,
	const DWORD* pstyle);
BOOL __stdcall GetMiterLimit(HDC hdc, PFLOAT plimit);
int  __stdcall GetArcDirection(HDC hdc);
int   __stdcall GetObjectA(HANDLE h, int c, LPVOID pv);
int   __stdcall GetObjectW(HANDLE h, int c, LPVOID pv);
BOOL  __stdcall MoveToEx(HDC hdc, int x, int y, LPPOINT lppt);
BOOL  __stdcall TextOutA(HDC hdc, int x, int y, LPCSTR lpString, int c);
BOOL  __stdcall TextOutW(HDC hdc, int x, int y, LPCWSTR lpString, int c);
BOOL  __stdcall ExtTextOutA(HDC hdc, int x, int y, UINT options, const RECT* lprect, LPCSTR lpString, UINT c, const INT* lpDx);
BOOL  __stdcall ExtTextOutW(HDC hdc, int x, int y, UINT options, const RECT* lprect, LPCWSTR lpString, UINT c, const INT* lpDx);
BOOL  __stdcall PolyTextOutA(HDC hdc, const POLYTEXTA* ppt, int nstrings);
BOOL  __stdcall PolyTextOutW(HDC hdc, const POLYTEXTW* ppt, int nstrings);
HRGN  __stdcall CreatePolygonRgn(const POINT* pptl,
	int cPoint,
	int iMode);
BOOL  __stdcall DPtoLP(HDC hdc, LPPOINT lppt, int c);
BOOL  __stdcall LPtoDP(HDC hdc, LPPOINT lppt, int c);
BOOL  __stdcall Polygon(HDC hdc, const POINT* apt, int cpt);
BOOL  __stdcall Polyline(HDC hdc, const POINT* apt, int cpt);
BOOL  __stdcall PolyBezier(HDC hdc, const POINT* apt, DWORD cpt);
BOOL  __stdcall PolyBezierTo(HDC hdc, const POINT* apt, DWORD cpt);
BOOL  __stdcall PolylineTo(HDC hdc, const POINT* apt, DWORD cpt);
BOOL  __stdcall SetViewportExtEx(HDC hdc, int x, int y, LPSIZE lpsz);
BOOL  __stdcall SetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
BOOL  __stdcall SetWindowExtEx(HDC hdc, int x, int y, LPSIZE lpsz);
BOOL  __stdcall SetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
BOOL  __stdcall OffsetViewportOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
BOOL  __stdcall OffsetWindowOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
BOOL  __stdcall ScaleViewportExtEx(HDC hdc, int xn, int dx, int yn, int yd, LPSIZE lpsz);
BOOL  __stdcall ScaleWindowExtEx(HDC hdc, int xn, int xd, int yn, int yd, LPSIZE lpsz);
BOOL  __stdcall SetBitmapDimensionEx(HBITMAP hbm, int w, int h, LPSIZE lpsz);
BOOL  __stdcall SetBrushOrgEx(HDC hdc, int x, int y, LPPOINT lppt);
int   __stdcall GetTextFaceA(HDC hdc, int c, LPSTR lpName);
int   __stdcall GetTextFaceW(HDC hdc, int c, LPWSTR lpName);
typedef struct tagKERNINGPAIR {
	WORD wFirst;
	WORD wSecond;
	int  iKernAmount;
} KERNINGPAIR, * LPKERNINGPAIR;
DWORD __stdcall GetKerningPairsA(HDC hdc,
	DWORD nPairs,
	LPKERNINGPAIR   lpKernPair);
DWORD __stdcall GetKerningPairsW(HDC hdc,
	DWORD nPairs,
	LPKERNINGPAIR   lpKernPair);
BOOL  __stdcall GetDCOrgEx(HDC hdc, LPPOINT lppt);
BOOL  __stdcall FixBrushOrgEx(HDC hdc, int x, int y, LPPOINT ptl);
BOOL  __stdcall UnrealizeObject(HGDIOBJ h);
BOOL  __stdcall GdiFlush(void);
DWORD __stdcall GdiSetBatchLimit(DWORD dw);
DWORD __stdcall GdiGetBatchLimit(void);
typedef int(__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int(__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);
int         __stdcall SetICMMode(HDC hdc, int mode);
BOOL        __stdcall CheckColorsInGamut(HDC hdc,
	LPRGBTRIPLE lpRGBTriple,
	LPVOID dlpBuffer,
	DWORD nCount);
HCOLORSPACE __stdcall GetColorSpace(HDC hdc);
BOOL        __stdcall GetLogColorSpaceA(HCOLORSPACE hColorSpace,
	LPLOGCOLORSPACEA lpBuffer,
	DWORD nSize);
BOOL        __stdcall GetLogColorSpaceW(HCOLORSPACE hColorSpace,
	LPLOGCOLORSPACEW lpBuffer,
	DWORD nSize);
HCOLORSPACE __stdcall CreateColorSpaceA(LPLOGCOLORSPACEA lplcs);
HCOLORSPACE __stdcall CreateColorSpaceW(LPLOGCOLORSPACEW lplcs);
HCOLORSPACE __stdcall SetColorSpace(HDC hdc, HCOLORSPACE hcs);
BOOL        __stdcall DeleteColorSpace(HCOLORSPACE hcs);
BOOL        __stdcall GetICMProfileA(HDC hdc,
	LPDWORD pBufSize,
	LPSTR pszFilename);
BOOL        __stdcall GetICMProfileW(HDC hdc,
	LPDWORD pBufSize,
	LPWSTR pszFilename);
BOOL        __stdcall SetICMProfileA(HDC hdc, LPSTR lpFileName);
BOOL        __stdcall SetICMProfileW(HDC hdc, LPWSTR lpFileName);
BOOL        __stdcall GetDeviceGammaRamp(HDC hdc, LPVOID lpRamp);
BOOL        __stdcall SetDeviceGammaRamp(HDC hdc, LPVOID lpRamp);
BOOL        __stdcall ColorMatchToTarget(HDC hdc, HDC hdcTarget, DWORD action);
int         __stdcall EnumICMProfilesA(HDC hdc, ICMENUMPROCA proc, LPARAM param);
int         __stdcall EnumICMProfilesW(HDC hdc, ICMENUMPROCW proc, LPARAM param);
BOOL        __stdcall UpdateICMRegKeyA(DWORD reserved, LPSTR lpszCMID, LPSTR lpszFileName, UINT command);
BOOL        __stdcall UpdateICMRegKeyW(DWORD reserved, LPWSTR lpszCMID, LPWSTR lpszFileName, UINT command);
BOOL        __stdcall ColorCorrectPalette(HDC hdc, HPALETTE hPal, DWORD deFirst, DWORD num);
typedef struct tagEMR
{
	DWORD   iType;
	DWORD   nSize;
} EMR, * PEMR;
typedef struct tagEMRTEXT
{
	POINTL  ptlReference;
	DWORD   nChars;
	DWORD   offString;
	DWORD   fOptions;
	RECTL   rcl;
	DWORD   offDx;
} EMRTEXT, * PEMRTEXT;
typedef struct tagABORTPATH
{
	EMR     emr;
} EMRABORTPATH, * PEMRABORTPATH,
EMRBEGINPATH, * PEMRBEGINPATH,
EMRENDPATH, * PEMRENDPATH,
EMRCLOSEFIGURE, * PEMRCLOSEFIGURE,
EMRFLATTENPATH, * PEMRFLATTENPATH,
EMRWIDENPATH, * PEMRWIDENPATH,
EMRSETMETARGN, * PEMRSETMETARGN,
EMRSAVEDC, * PEMRSAVEDC,
EMRREALIZEPALETTE, * PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH
{
	EMR     emr;
	DWORD   iMode;
} EMRSELECTCLIPPATH, * PEMRSELECTCLIPPATH,
EMRSETBKMODE, * PEMRSETBKMODE,
EMRSETMAPMODE, * PEMRSETMAPMODE,
EMRSETLAYOUT, * PEMRSETLAYOUT,
EMRSETPOLYFILLMODE, * PEMRSETPOLYFILLMODE,
EMRSETROP2, * PEMRSETROP2,
EMRSETSTRETCHBLTMODE, * PEMRSETSTRETCHBLTMODE,
EMRSETICMMODE, * PEMRSETICMMODE,
EMRSETTEXTALIGN, * PEMRSETTEXTALIGN;
typedef struct tagEMRSETMITERLIMIT
{
	EMR     emr;
	FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, * PEMRSETMITERLIMIT;
typedef struct tagEMRRESTOREDC
{
	EMR     emr;
	LONG    iRelative;
} EMRRESTOREDC, * PEMRRESTOREDC;
typedef struct tagEMRSETARCDIRECTION
{
	EMR     emr;
	DWORD   iArcDirection;
} EMRSETARCDIRECTION, * PEMRSETARCDIRECTION;
typedef struct tagEMRSETMAPPERFLAGS
{
	EMR     emr;
	DWORD   dwFlags;
} EMRSETMAPPERFLAGS, * PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETTEXTCOLOR
{
	EMR     emr;
	COLORREF crColor;
} EMRSETBKCOLOR, * PEMRSETBKCOLOR,
EMRSETTEXTCOLOR, * PEMRSETTEXTCOLOR;
typedef struct tagEMRSELECTOBJECT
{
	EMR     emr;
	DWORD   ihObject;
} EMRSELECTOBJECT, * PEMRSELECTOBJECT,
EMRDELETEOBJECT, * PEMRDELETEOBJECT;
typedef struct tagEMRSELECTPALETTE
{
	EMR     emr;
	DWORD   ihPal;
} EMRSELECTPALETTE, * PEMRSELECTPALETTE;
typedef struct tagEMRRESIZEPALETTE
{
	EMR     emr;
	DWORD   ihPal;
	DWORD   cEntries;
} EMRRESIZEPALETTE, * PEMRRESIZEPALETTE;
typedef struct tagEMRSETPALETTEENTRIES
{
	EMR     emr;
	DWORD   ihPal;
	DWORD   iStart;
	DWORD   cEntries;
	PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, * PEMRSETPALETTEENTRIES;
typedef struct tagEMRSETCOLORADJUSTMENT
{
	EMR     emr;
	COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, * PEMRSETCOLORADJUSTMENT;
typedef struct tagEMRGDICOMMENT
{
	EMR     emr;
	DWORD   cbData;
	BYTE    Data[1];
} EMRGDICOMMENT, * PEMRGDICOMMENT;
typedef struct tagEMREOF
{
	EMR     emr;
	DWORD   nPalEntries;
	DWORD   offPalEntries;
	DWORD   nSizeLast;
} EMREOF, * PEMREOF;
typedef struct tagEMRLINETO
{
	EMR     emr;
	POINTL  ptl;
} EMRLINETO, * PEMRLINETO,
EMRMOVETOEX, * PEMRMOVETOEX;
typedef struct tagEMROFFSETCLIPRGN
{
	EMR     emr;
	POINTL  ptlOffset;
} EMROFFSETCLIPRGN, * PEMROFFSETCLIPRGN;
typedef struct tagEMRFILLPATH
{
	EMR     emr;
	RECTL   rclBounds;
} EMRFILLPATH, * PEMRFILLPATH,
EMRSTROKEANDFILLPATH, * PEMRSTROKEANDFILLPATH,
EMRSTROKEPATH, * PEMRSTROKEPATH;
typedef struct tagEMREXCLUDECLIPRECT
{
	EMR     emr;
	RECTL   rclClip;
} EMREXCLUDECLIPRECT, * PEMREXCLUDECLIPRECT,
EMRINTERSECTCLIPRECT, * PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETVIEWPORTORGEX
{
	EMR     emr;
	POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, * PEMRSETVIEWPORTORGEX,
EMRSETWINDOWORGEX, * PEMRSETWINDOWORGEX,
EMRSETBRUSHORGEX, * PEMRSETBRUSHORGEX;
typedef struct tagEMRSETVIEWPORTEXTEX
{
	EMR     emr;
	SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, * PEMRSETVIEWPORTEXTEX,
EMRSETWINDOWEXTEX, * PEMRSETWINDOWEXTEX;
typedef struct tagEMRSCALEVIEWPORTEXTEX
{
	EMR     emr;
	LONG    xNum;
	LONG    xDenom;
	LONG    yNum;
	LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, * PEMRSCALEVIEWPORTEXTEX,
EMRSCALEWINDOWEXTEX, * PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETWORLDTRANSFORM
{
	EMR     emr;
	XFORM   xform;
} EMRSETWORLDTRANSFORM, * PEMRSETWORLDTRANSFORM;
typedef struct tagEMRMODIFYWORLDTRANSFORM
{
	EMR     emr;
	XFORM   xform;
	DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, * PEMRMODIFYWORLDTRANSFORM;
typedef struct tagEMRSETPIXELV
{
	EMR     emr;
	POINTL  ptlPixel;
	COLORREF crColor;
} EMRSETPIXELV, * PEMRSETPIXELV;
typedef struct tagEMREXTFLOODFILL
{
	EMR     emr;
	POINTL  ptlStart;
	COLORREF crColor;
	DWORD   iMode;
} EMREXTFLOODFILL, * PEMREXTFLOODFILL;
typedef struct tagEMRELLIPSE
{
	EMR     emr;
	RECTL   rclBox;
} EMRELLIPSE, * PEMRELLIPSE,
EMRRECTANGLE, * PEMRRECTANGLE;
typedef struct tagEMRROUNDRECT
{
	EMR     emr;
	RECTL   rclBox;
	SIZEL   szlCorner;
} EMRROUNDRECT, * PEMRROUNDRECT;
typedef struct tagEMRARC
{
	EMR     emr;
	RECTL   rclBox;
	POINTL  ptlStart;
	POINTL  ptlEnd;
} EMRARC, * PEMRARC,
EMRARCTO, * PEMRARCTO,
EMRCHORD, * PEMRCHORD,
EMRPIE, * PEMRPIE;
typedef struct tagEMRANGLEARC
{
	EMR     emr;
	POINTL  ptlCenter;
	DWORD   nRadius;
	FLOAT   eStartAngle;
	FLOAT   eSweepAngle;
} EMRANGLEARC, * PEMRANGLEARC;
typedef struct tagEMRPOLYLINE
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cptl;
	POINTL  aptl[1];
} EMRPOLYLINE, * PEMRPOLYLINE,
EMRPOLYBEZIER, * PEMRPOLYBEZIER,
EMRPOLYGON, * PEMRPOLYGON,
EMRPOLYBEZIERTO, * PEMRPOLYBEZIERTO,
EMRPOLYLINETO, * PEMRPOLYLINETO;
typedef struct tagEMRPOLYLINE16
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cpts;
	POINTS  apts[1];
} EMRPOLYLINE16, * PEMRPOLYLINE16,
EMRPOLYBEZIER16, * PEMRPOLYBEZIER16,
EMRPOLYGON16, * PEMRPOLYGON16,
EMRPOLYBEZIERTO16, * PEMRPOLYBEZIERTO16,
EMRPOLYLINETO16, * PEMRPOLYLINETO16;
typedef struct tagEMRPOLYDRAW
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cptl;
	POINTL  aptl[1];
	BYTE    abTypes[1];
} EMRPOLYDRAW, * PEMRPOLYDRAW;
typedef struct tagEMRPOLYDRAW16
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cpts;
	POINTS  apts[1];
	BYTE    abTypes[1];
} EMRPOLYDRAW16, * PEMRPOLYDRAW16;
typedef struct tagEMRPOLYPOLYLINE
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   nPolys;
	DWORD   cptl;
	DWORD   aPolyCounts[1];
	POINTL  aptl[1];
} EMRPOLYPOLYLINE, * PEMRPOLYPOLYLINE,
EMRPOLYPOLYGON, * PEMRPOLYPOLYGON;
typedef struct tagEMRPOLYPOLYLINE16
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   nPolys;
	DWORD   cpts;
	DWORD   aPolyCounts[1];
	POINTS  apts[1];
} EMRPOLYPOLYLINE16, * PEMRPOLYPOLYLINE16,
EMRPOLYPOLYGON16, * PEMRPOLYPOLYGON16;
typedef struct tagEMRINVERTRGN
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cbRgnData;
	BYTE    RgnData[1];
} EMRINVERTRGN, * PEMRINVERTRGN,
EMRPAINTRGN, * PEMRPAINTRGN;
typedef struct tagEMRFILLRGN
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cbRgnData;
	DWORD   ihBrush;
	BYTE    RgnData[1];
} EMRFILLRGN, * PEMRFILLRGN;
typedef struct tagEMRFRAMERGN
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cbRgnData;
	DWORD   ihBrush;
	SIZEL   szlStroke;
	BYTE    RgnData[1];
} EMRFRAMERGN, * PEMRFRAMERGN;
typedef struct tagEMREXTSELECTCLIPRGN
{
	EMR     emr;
	DWORD   cbRgnData;
	DWORD   iMode;
	BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, * PEMREXTSELECTCLIPRGN;
typedef struct tagEMREXTTEXTOUTA
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   iGraphicsMode;
	FLOAT   exScale;
	FLOAT   eyScale;
	EMRTEXT emrtext;
} EMREXTTEXTOUTA, * PEMREXTTEXTOUTA,
EMREXTTEXTOUTW, * PEMREXTTEXTOUTW;
typedef struct tagEMRPOLYTEXTOUTA
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   iGraphicsMode;
	FLOAT   exScale;
	FLOAT   eyScale;
	LONG    cStrings;
	EMRTEXT aemrtext[1];
} EMRPOLYTEXTOUTA, * PEMRPOLYTEXTOUTA,
EMRPOLYTEXTOUTW, * PEMRPOLYTEXTOUTW;
typedef struct tagEMRBITBLT
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    cxDest;
	LONG    cyDest;
	DWORD   dwRop;
	LONG    xSrc;
	LONG    ySrc;
	XFORM   xformSrc;
	COLORREF crBkColorSrc;
	DWORD   iUsageSrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
} EMRBITBLT, * PEMRBITBLT;
typedef struct tagEMRSTRETCHBLT
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    cxDest;
	LONG    cyDest;
	DWORD   dwRop;
	LONG    xSrc;
	LONG    ySrc;
	XFORM   xformSrc;
	COLORREF crBkColorSrc;
	DWORD   iUsageSrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	LONG    cxSrc;
	LONG    cySrc;
} EMRSTRETCHBLT, * PEMRSTRETCHBLT;
typedef struct tagEMRMASKBLT
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    cxDest;
	LONG    cyDest;
	DWORD   dwRop;
	LONG    xSrc;
	LONG    ySrc;
	XFORM   xformSrc;
	COLORREF crBkColorSrc;
	DWORD   iUsageSrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	LONG    xMask;
	LONG    yMask;
	DWORD   iUsageMask;
	DWORD   offBmiMask;
	DWORD   cbBmiMask;
	DWORD   offBitsMask;
	DWORD   cbBitsMask;
} EMRMASKBLT, * PEMRMASKBLT;
typedef struct tagEMRPLGBLT
{
	EMR     emr;
	RECTL   rclBounds;
	POINTL  aptlDest[3];
	LONG    xSrc;
	LONG    ySrc;
	LONG    cxSrc;
	LONG    cySrc;
	XFORM   xformSrc;
	COLORREF crBkColorSrc;
	DWORD   iUsageSrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	LONG    xMask;
	LONG    yMask;
	DWORD   iUsageMask;
	DWORD   offBmiMask;
	DWORD   cbBmiMask;
	DWORD   offBitsMask;
	DWORD   cbBitsMask;
} EMRPLGBLT, * PEMRPLGBLT;
typedef struct tagEMRSETDIBITSTODEVICE
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    xSrc;
	LONG    ySrc;
	LONG    cxSrc;
	LONG    cySrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	DWORD   iUsageSrc;
	DWORD   iStartScan;
	DWORD   cScans;
} EMRSETDIBITSTODEVICE, * PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSTRETCHDIBITS
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    xSrc;
	LONG    ySrc;
	LONG    cxSrc;
	LONG    cySrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	DWORD   iUsageSrc;
	DWORD   dwRop;
	LONG    cxDest;
	LONG    cyDest;
} EMRSTRETCHDIBITS, * PEMRSTRETCHDIBITS;
typedef struct tagEMREXTCREATEFONTINDIRECTW
{
	EMR     emr;
	DWORD   ihFont;
	EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, * PEMREXTCREATEFONTINDIRECTW;
typedef struct tagEMRCREATEPALETTE
{
	EMR     emr;
	DWORD   ihPal;
	LOGPALETTE lgpl;
} EMRCREATEPALETTE, * PEMRCREATEPALETTE;
typedef struct tagEMRCREATEPEN
{
	EMR     emr;
	DWORD   ihPen;
	LOGPEN  lopn;
} EMRCREATEPEN, * PEMRCREATEPEN;
typedef struct tagEMREXTCREATEPEN
{
	EMR     emr;
	DWORD   ihPen;
	DWORD   offBmi;
	DWORD   cbBmi;
	DWORD   offBits;
	DWORD   cbBits;
	EXTLOGPEN32 elp;
} EMREXTCREATEPEN, * PEMREXTCREATEPEN;
typedef struct tagEMRCREATEBRUSHINDIRECT
{
	EMR        emr;
	DWORD      ihBrush;
	LOGBRUSH32 lb;
} EMRCREATEBRUSHINDIRECT, * PEMRCREATEBRUSHINDIRECT;
typedef struct tagEMRCREATEMONOBRUSH
{
	EMR     emr;
	DWORD   ihBrush;
	DWORD   iUsage;
	DWORD   offBmi;
	DWORD   cbBmi;
	DWORD   offBits;
	DWORD   cbBits;
} EMRCREATEMONOBRUSH, * PEMRCREATEMONOBRUSH;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
	EMR     emr;
	DWORD   ihBrush;
	DWORD   iUsage;
	DWORD   offBmi;
	DWORD   cbBmi;
	DWORD   offBits;
	DWORD   cbBits;
} EMRCREATEDIBPATTERNBRUSHPT, * PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct tagEMRFORMAT
{
	DWORD   dSignature;
	DWORD   nVersion;
	DWORD   cbData;
	DWORD   offData;
} EMRFORMAT, * PEMRFORMAT;
typedef struct tagEMRGLSRECORD
{
	EMR     emr;
	DWORD   cbData;
	BYTE    Data[1];
} EMRGLSRECORD, * PEMRGLSRECORD;
typedef struct tagEMRGLSBOUNDEDRECORD
{
	EMR     emr;
	RECTL   rclBounds;
	DWORD   cbData;
	BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, * PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRPIXELFORMAT
{
	EMR     emr;
	PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, * PEMRPIXELFORMAT;
typedef struct tagEMRCREATECOLORSPACE
{
	EMR             emr;
	DWORD           ihCS;
	LOGCOLORSPACEA  lcs;
} EMRCREATECOLORSPACE, * PEMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE
{
	EMR     emr;
	DWORD   ihCS;
} EMRSETCOLORSPACE, * PEMRSETCOLORSPACE,
EMRSELECTCOLORSPACE, * PEMRSELECTCOLORSPACE,
EMRDELETECOLORSPACE, * PEMRDELETECOLORSPACE;
typedef struct tagEMREXTESCAPE
{
	EMR     emr;
	INT     iEscape;
	INT     cbEscData;
	BYTE    EscData[1];
} EMREXTESCAPE, * PEMREXTESCAPE,
EMRDRAWESCAPE, * PEMRDRAWESCAPE;
typedef struct tagEMRNAMEDESCAPE
{
	EMR     emr;
	INT     iEscape;
	INT     cbDriver;
	INT     cbEscData;
	BYTE    EscData[1];
} EMRNAMEDESCAPE, * PEMRNAMEDESCAPE;
typedef struct tagEMRSETICMPROFILE
{
	EMR     emr;
	DWORD   dwFlags;
	DWORD   cbName;
	DWORD   cbData;
	BYTE    Data[1];
} EMRSETICMPROFILE, * PEMRSETICMPROFILE,
EMRSETICMPROFILEA, * PEMRSETICMPROFILEA,
EMRSETICMPROFILEW, * PEMRSETICMPROFILEW;
typedef struct tagEMRCREATECOLORSPACEW
{
	EMR             emr;
	DWORD           ihCS;
	LOGCOLORSPACEW  lcs;
	DWORD           dwFlags;
	DWORD           cbData;
	BYTE            Data[1];
} EMRCREATECOLORSPACEW, * PEMRCREATECOLORSPACEW;
typedef struct tagCOLORMATCHTOTARGET
{
	EMR     emr;
	DWORD   dwAction;
	DWORD   dwFlags;
	DWORD   cbName;
	DWORD   cbData;
	BYTE    Data[1];
} EMRCOLORMATCHTOTARGET, * PEMRCOLORMATCHTOTARGET;
typedef struct tagCOLORCORRECTPALETTE
{
	EMR     emr;
	DWORD   ihPalette;
	DWORD   nFirstEntry;
	DWORD   nPalEntries;
	DWORD   nReserved;
} EMRCOLORCORRECTPALETTE, * PEMRCOLORCORRECTPALETTE;
typedef struct tagEMRALPHABLEND
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    cxDest;
	LONG    cyDest;
	DWORD   dwRop;
	LONG    xSrc;
	LONG    ySrc;
	XFORM   xformSrc;
	COLORREF crBkColorSrc;
	DWORD   iUsageSrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	LONG    cxSrc;
	LONG    cySrc;
} EMRALPHABLEND, * PEMRALPHABLEND;
typedef struct tagEMRGRADIENTFILL
{
	EMR       emr;
	RECTL     rclBounds;
	DWORD     nVer;
	DWORD     nTri;
	ULONG     ulMode;
	TRIVERTEX Ver[1];
}EMRGRADIENTFILL, * PEMRGRADIENTFILL;
typedef struct tagEMRTRANSPARENTBLT
{
	EMR     emr;
	RECTL   rclBounds;
	LONG    xDest;
	LONG    yDest;
	LONG    cxDest;
	LONG    cyDest;
	DWORD   dwRop;
	LONG    xSrc;
	LONG    ySrc;
	XFORM   xformSrc;
	COLORREF crBkColorSrc;
	DWORD   iUsageSrc;
	DWORD   offBmiSrc;
	DWORD   cbBmiSrc;
	DWORD   offBitsSrc;
	DWORD   cbBitsSrc;
	LONG    cxSrc;
	LONG    cySrc;
} EMRTRANSPARENTBLT, * PEMRTRANSPARENTBLT;
BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
HGLRC __stdcall wglCreateContext(HDC);
HGLRC __stdcall wglCreateLayerContext(HDC, int);
BOOL  __stdcall wglDeleteContext(HGLRC);
HGLRC __stdcall wglGetCurrentContext(void);
HDC   __stdcall wglGetCurrentDC(void);
PROC  __stdcall wglGetProcAddress(LPCSTR);
BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);
BOOL  __stdcall SwapBuffers(HDC);
typedef struct _POINTFLOAT {
	FLOAT   x;
	FLOAT   y;
} POINTFLOAT, * PPOINTFLOAT;
typedef struct _GLYPHMETRICSFLOAT {
	FLOAT       gmfBlackBoxX;
	FLOAT       gmfBlackBoxY;
	POINTFLOAT  gmfptGlyphOrigin;
	FLOAT       gmfCellIncX;
	FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, * PGLYPHMETRICSFLOAT, * LPGLYPHMETRICSFLOAT;
BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
	FLOAT, int, LPGLYPHMETRICSFLOAT);
BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
	FLOAT, int, LPGLYPHMETRICSFLOAT);
typedef struct tagLAYERPLANEDESCRIPTOR {
	WORD  nSize;
	WORD  nVersion;
	DWORD dwFlags;
	BYTE  iPixelType;
	BYTE  cColorBits;
	BYTE  cRedBits;
	BYTE  cRedShift;
	BYTE  cGreenBits;
	BYTE  cGreenShift;
	BYTE  cBlueBits;
	BYTE  cBlueShift;
	BYTE  cAlphaBits;
	BYTE  cAlphaShift;
	BYTE  cAccumBits;
	BYTE  cAccumRedBits;
	BYTE  cAccumGreenBits;
	BYTE  cAccumBlueBits;
	BYTE  cAccumAlphaBits;
	BYTE  cDepthBits;
	BYTE  cStencilBits;
	BYTE  cAuxBuffers;
	BYTE  iLayerPlane;
	BYTE  bReserved;
	COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, * PLAYERPLANEDESCRIPTOR, * LPLAYERPLANEDESCRIPTOR;
BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
	LPLAYERPLANEDESCRIPTOR);
int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
	const COLORREF*);
int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
	COLORREF*);
BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);
typedef struct _WGLSWAP
{
	HDC hdc;
	UINT uiFlags;
} WGLSWAP, * PWGLSWAP, * LPWGLSWAP;
DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP*);
typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;
typedef MENUTEMPLATEW MENUTEMPLATE;
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
typedef LPMENUTEMPLATEW LPMENUTEMPLATE;
typedef LRESULT(__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);
typedef INT_PTR(__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void(__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL(__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL(__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT(__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void(__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);
typedef BOOL(__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL(__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
typedef BOOL(__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL(__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);
typedef int(__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int(__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
typedef BOOL(__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
typedef PROPENUMPROCW        PROPENUMPROC;
typedef PROPENUMPROCEXW      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCW   EDITWORDBREAKPROC;
typedef BOOL(__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL(__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);
typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;
typedef WINSTAENUMPROCW     WINSTAENUMPROC;
typedef DESKTOPENUMPROCW    DESKTOPENUMPROC;

int
__stdcall
wvsprintfA(
	LPSTR,
	LPCSTR,
	va_list arglist);

int
__stdcall
wvsprintfW(
	LPWSTR,
	LPCWSTR,
	va_list arglist);

int
__cdecl
wsprintfA(
	LPSTR,
	LPCSTR,
	...);

int
__cdecl
wsprintfW(
	LPWSTR,
	LPCWSTR,
	...);
typedef struct tagCBT_CREATEWNDA
{
	struct tagCREATESTRUCTA* lpcs;
	HWND           hwndInsertAfter;
} CBT_CREATEWNDA, * LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW
{
	struct tagCREATESTRUCTW* lpcs;
	HWND           hwndInsertAfter;
} CBT_CREATEWNDW, * LPCBT_CREATEWNDW;
typedef CBT_CREATEWNDW CBT_CREATEWND;
typedef LPCBT_CREATEWNDW LPCBT_CREATEWND;
typedef struct tagCBTACTIVATESTRUCT
{
	BOOL    fMouse;
	HWND    hWndActive;
} CBTACTIVATESTRUCT, * LPCBTACTIVATESTRUCT;
typedef struct tagWTSSESSION_NOTIFICATION
{
	DWORD cbSize;
	DWORD dwSessionId;
} WTSSESSION_NOTIFICATION, * PWTSSESSION_NOTIFICATION;
typedef struct
{
	HWND    hwnd;
	RECT    rc;
} SHELLHOOKINFO, * LPSHELLHOOKINFO;
typedef struct tagEVENTMSG {
	UINT    message;
	UINT    paramL;
	UINT    paramH;
	DWORD    time;
	HWND     hwnd;
} EVENTMSG, * PEVENTMSGMSG, * NPEVENTMSGMSG, * LPEVENTMSGMSG;
typedef struct tagEVENTMSG* PEVENTMSG, * NPEVENTMSG, * LPEVENTMSG;
typedef struct tagCWPSTRUCT {
	LPARAM  lParam;
	WPARAM  wParam;
	UINT    message;
	HWND    hwnd;
} CWPSTRUCT, * PCWPSTRUCT, * NPCWPSTRUCT, * LPCWPSTRUCT;
typedef struct tagCWPRETSTRUCT {
	LRESULT lResult;
	LPARAM  lParam;
	WPARAM  wParam;
	UINT    message;
	HWND    hwnd;
} CWPRETSTRUCT, * PCWPRETSTRUCT, * NPCWPRETSTRUCT, * LPCWPRETSTRUCT;
typedef struct tagKBDLLHOOKSTRUCT {
	DWORD   vkCode;
	DWORD   scanCode;
	DWORD   flags;
	DWORD   time;
	ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT, * LPKBDLLHOOKSTRUCT, * PKBDLLHOOKSTRUCT;
typedef struct tagMSLLHOOKSTRUCT {
	POINT   pt;
	DWORD   mouseData;
	DWORD   flags;
	DWORD   time;
	ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT, * LPMSLLHOOKSTRUCT, * PMSLLHOOKSTRUCT;
typedef struct tagDEBUGHOOKINFO
{
	DWORD   idThread;
	DWORD   idThreadInstaller;
	LPARAM  lParam;
	WPARAM  wParam;
	int     code;
} DEBUGHOOKINFO, * PDEBUGHOOKINFO, * NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;
typedef struct tagMOUSEHOOKSTRUCT {
	POINT   pt;
	HWND    hwnd;
	UINT    wHitTestCode;
	ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT, * LPMOUSEHOOKSTRUCT, * PMOUSEHOOKSTRUCT;
typedef struct tagMOUSEHOOKSTRUCTEX
{
	MOUSEHOOKSTRUCT;
	DWORD   mouseData;
} MOUSEHOOKSTRUCTEX, * LPMOUSEHOOKSTRUCTEX, * PMOUSEHOOKSTRUCTEX;
typedef struct tagHARDWAREHOOKSTRUCT {
	HWND    hwnd;
	UINT    message;
	WPARAM  wParam;
	LPARAM  lParam;
} HARDWAREHOOKSTRUCT, * LPHARDWAREHOOKSTRUCT, * PHARDWAREHOOKSTRUCT;

HKL
__stdcall
LoadKeyboardLayoutA(
	LPCSTR pwszKLID,
	UINT Flags);

HKL
__stdcall
LoadKeyboardLayoutW(
	LPCWSTR pwszKLID,
	UINT Flags);

HKL
__stdcall
ActivateKeyboardLayout(
	HKL hkl,
	UINT Flags);

int
__stdcall
ToUnicodeEx(
	UINT wVirtKey,
	UINT wScanCode,
	const BYTE* lpKeyState,
	LPWSTR pwszBuff,
	int cchBuff,
	UINT wFlags,
	HKL dwhkl);

BOOL
__stdcall
UnloadKeyboardLayout(
	HKL hkl);

BOOL
__stdcall
GetKeyboardLayoutNameA(
	LPSTR pwszKLID);

BOOL
__stdcall
GetKeyboardLayoutNameW(
	LPWSTR pwszKLID);

int
__stdcall
GetKeyboardLayoutList(
	int nBuff,
	HKL* lpList);

HKL
__stdcall
GetKeyboardLayout(
	DWORD idThread);
typedef struct tagMOUSEMOVEPOINT {
	int   x;
	int   y;
	DWORD time;
	ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, * PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;

int
__stdcall
GetMouseMovePointsEx(
	UINT cbSize,
	LPMOUSEMOVEPOINT lppt,
	LPMOUSEMOVEPOINT lpptBuf,
	int nBufPoints,
	DWORD resolution);

HDESK
__stdcall
CreateDesktopA(
	LPCSTR lpszDesktop,
	LPCSTR lpszDevice,
	DEVMODEA* pDevmode,
	DWORD dwFlags,
	ACCESS_MASK dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpsa);

HDESK
__stdcall
CreateDesktopW(
	LPCWSTR lpszDesktop,
	LPCWSTR lpszDevice,
	DEVMODEW* pDevmode,
	DWORD dwFlags,
	ACCESS_MASK dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpsa);

HDESK
__stdcall
CreateDesktopExA(
	LPCSTR lpszDesktop,
	LPCSTR lpszDevice,
	DEVMODEA* pDevmode,
	DWORD dwFlags,
	ACCESS_MASK dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpsa,
	ULONG ulHeapSize,
	PVOID pvoid);

HDESK
__stdcall
CreateDesktopExW(
	LPCWSTR lpszDesktop,
	LPCWSTR lpszDevice,
	DEVMODEW* pDevmode,
	DWORD dwFlags,
	ACCESS_MASK dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpsa,
	ULONG ulHeapSize,
	PVOID pvoid);

HDESK
__stdcall
OpenDesktopA(
	LPCSTR lpszDesktop,
	DWORD dwFlags,
	BOOL fInherit,
	ACCESS_MASK dwDesiredAccess);

HDESK
__stdcall
OpenDesktopW(
	LPCWSTR lpszDesktop,
	DWORD dwFlags,
	BOOL fInherit,
	ACCESS_MASK dwDesiredAccess);

HDESK
__stdcall
OpenInputDesktop(
	DWORD dwFlags,
	BOOL fInherit,
	ACCESS_MASK dwDesiredAccess);

BOOL
__stdcall
EnumDesktopsA(
	HWINSTA hwinsta,
	DESKTOPENUMPROCA lpEnumFunc,
	LPARAM lParam);

BOOL
__stdcall
EnumDesktopsW(
	HWINSTA hwinsta,
	DESKTOPENUMPROCW lpEnumFunc,
	LPARAM lParam);

BOOL
__stdcall
EnumDesktopWindows(
	HDESK hDesktop,
	WNDENUMPROC lpfn,
	LPARAM lParam);

BOOL
__stdcall
SwitchDesktop(
	HDESK hDesktop);

BOOL
__stdcall
SetThreadDesktop(
	HDESK hDesktop);

BOOL
__stdcall
CloseDesktop(
	HDESK hDesktop);

HDESK
__stdcall
GetThreadDesktop(
	DWORD dwThreadId);

HWINSTA
__stdcall
CreateWindowStationA(
	LPCSTR lpwinsta,
	DWORD dwFlags,
	ACCESS_MASK dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpsa);

HWINSTA
__stdcall
CreateWindowStationW(
	LPCWSTR lpwinsta,
	DWORD dwFlags,
	ACCESS_MASK dwDesiredAccess,
	LPSECURITY_ATTRIBUTES lpsa);

HWINSTA
__stdcall
OpenWindowStationA(
	LPCSTR lpszWinSta,
	BOOL fInherit,
	ACCESS_MASK dwDesiredAccess);

HWINSTA
__stdcall
OpenWindowStationW(
	LPCWSTR lpszWinSta,
	BOOL fInherit,
	ACCESS_MASK dwDesiredAccess);

BOOL
__stdcall
EnumWindowStationsA(
	WINSTAENUMPROCA lpEnumFunc,
	LPARAM lParam);

BOOL
__stdcall
EnumWindowStationsW(
	WINSTAENUMPROCW lpEnumFunc,
	LPARAM lParam);

BOOL
__stdcall
CloseWindowStation(
	HWINSTA hWinSta);

BOOL
__stdcall
SetProcessWindowStation(
	HWINSTA hWinSta);

HWINSTA
__stdcall
GetProcessWindowStation(
	void);

BOOL
__stdcall
SetUserObjectSecurity(
	HANDLE hObj,
	PSECURITY_INFORMATION pSIRequested,
	PSECURITY_DESCRIPTOR pSID);

BOOL
__stdcall
GetUserObjectSecurity(
	HANDLE hObj,
	PSECURITY_INFORMATION pSIRequested,
	PSECURITY_DESCRIPTOR pSID,
	DWORD nLength,
	LPDWORD lpnLengthNeeded);
typedef struct tagUSEROBJECTFLAGS {
	BOOL fInherit;
	BOOL fReserved;
	DWORD dwFlags;
} USEROBJECTFLAGS, * PUSEROBJECTFLAGS;

BOOL
__stdcall
GetUserObjectInformationA(
	HANDLE hObj,
	int nIndex,
	PVOID pvInfo,
	DWORD nLength,
	LPDWORD lpnLengthNeeded);

BOOL
__stdcall
GetUserObjectInformationW(
	HANDLE hObj,
	int nIndex,
	PVOID pvInfo,
	DWORD nLength,
	LPDWORD lpnLengthNeeded);

BOOL
__stdcall
SetUserObjectInformationA(
	HANDLE hObj,
	int nIndex,
	PVOID pvInfo,
	DWORD nLength);

BOOL
__stdcall
SetUserObjectInformationW(
	HANDLE hObj,
	int nIndex,
	PVOID pvInfo,
	DWORD nLength);
typedef struct tagWNDCLASSEXA {
	UINT        cbSize;
	UINT        style;
	WNDPROC     lpfnWndProc;
	int         cbClsExtra;
	int         cbWndExtra;
	HINSTANCE   hInstance;
	HICON       hIcon;
	HCURSOR     hCursor;
	HBRUSH      hbrBackground;
	LPCSTR      lpszMenuName;
	LPCSTR      lpszClassName;
	HICON       hIconSm;
} WNDCLASSEXA, * PWNDCLASSEXA, * NPWNDCLASSEXA, * LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
	UINT        cbSize;
	UINT        style;
	WNDPROC     lpfnWndProc;
	int         cbClsExtra;
	int         cbWndExtra;
	HINSTANCE   hInstance;
	HICON       hIcon;
	HCURSOR     hCursor;
	HBRUSH      hbrBackground;
	LPCWSTR     lpszMenuName;
	LPCWSTR     lpszClassName;
	HICON       hIconSm;
} WNDCLASSEXW, * PWNDCLASSEXW, * NPWNDCLASSEXW, * LPWNDCLASSEXW;
typedef WNDCLASSEXW WNDCLASSEX;
typedef PWNDCLASSEXW PWNDCLASSEX;
typedef NPWNDCLASSEXW NPWNDCLASSEX;
typedef LPWNDCLASSEXW LPWNDCLASSEX;
typedef struct tagWNDCLASSA {
	UINT        style;
	WNDPROC     lpfnWndProc;
	int         cbClsExtra;
	int         cbWndExtra;
	HINSTANCE   hInstance;
	HICON       hIcon;
	HCURSOR     hCursor;
	HBRUSH      hbrBackground;
	LPCSTR      lpszMenuName;
	LPCSTR      lpszClassName;
} WNDCLASSA, * PWNDCLASSA, * NPWNDCLASSA, * LPWNDCLASSA;
typedef struct tagWNDCLASSW {
	UINT        style;
	WNDPROC     lpfnWndProc;
	int         cbClsExtra;
	int         cbWndExtra;
	HINSTANCE   hInstance;
	HICON       hIcon;
	HCURSOR     hCursor;
	HBRUSH      hbrBackground;
	LPCWSTR     lpszMenuName;
	LPCWSTR     lpszClassName;
} WNDCLASSW, * PWNDCLASSW, * NPWNDCLASSW, * LPWNDCLASSW;
typedef WNDCLASSW WNDCLASS;
typedef PWNDCLASSW PWNDCLASS;
typedef NPWNDCLASSW NPWNDCLASS;
typedef LPWNDCLASSW LPWNDCLASS;

BOOL
__stdcall
IsHungAppWindow(
	HWND hwnd);

void
__stdcall
DisableProcessWindowsGhosting(
	void);
typedef struct tagMSG {
	HWND        hwnd;
	UINT        message;
	WPARAM      wParam;
	LPARAM      lParam;
	DWORD       time;
	POINT       pt;
} MSG, * PMSG, * NPMSG, * LPMSG;
typedef struct tagMINMAXINFO {
	POINT ptReserved;
	POINT ptMaxSize;
	POINT ptMaxPosition;
	POINT ptMinTrackSize;
	POINT ptMaxTrackSize;
} MINMAXINFO, * PMINMAXINFO, * LPMINMAXINFO;
typedef struct tagCOPYDATASTRUCT {
	ULONG_PTR dwData;
	DWORD cbData;
	PVOID lpData;
} COPYDATASTRUCT, * PCOPYDATASTRUCT;
typedef struct tagMDINEXTMENU
{
	HMENU   hmenuIn;
	HMENU   hmenuNext;
	HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU, * LPMDINEXTMENU;
typedef struct {
	GUID PowerSetting;
	DWORD DataLength;
	UCHAR Data[1];
} POWERBROADCAST_SETTING, * PPOWERBROADCAST_SETTING;

UINT
__stdcall
RegisterWindowMessageA(
	LPCSTR lpString);

UINT
__stdcall
RegisterWindowMessageW(
	LPCWSTR lpString);
typedef struct tagWINDOWPOS {
	HWND    hwnd;
	HWND    hwndInsertAfter;
	int     x;
	int     y;
	int     cx;
	int     cy;
	UINT    flags;
} WINDOWPOS, * LPWINDOWPOS, * PWINDOWPOS;
typedef struct tagNCCALCSIZE_PARAMS {
	RECT       rgrc[3];
	PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, * LPNCCALCSIZE_PARAMS;
typedef struct tagTRACKMOUSEEVENT {
	DWORD cbSize;
	DWORD dwFlags;
	HWND  hwndTrack;
	DWORD dwHoverTime;
} TRACKMOUSEEVENT, * LPTRACKMOUSEEVENT;

BOOL
__stdcall
TrackMouseEvent(
	LPTRACKMOUSEEVENT lpEventTrack);

BOOL
__stdcall
DrawEdge(
	HDC hdc,
	LPRECT qrc,
	UINT edge,
	UINT grfFlags);

BOOL
__stdcall
DrawFrameControl(
	HDC,
	LPRECT,
	UINT,
	UINT);

BOOL
__stdcall
DrawCaption(
	HWND hwnd,
	HDC hdc,
	const RECT* lprect,
	UINT flags);

BOOL
__stdcall
DrawAnimatedRects(
	HWND hwnd,
	int idAni,
	const RECT* lprcFrom,
	const RECT* lprcTo);
typedef struct tagACCEL {
	BYTE   fVirt;
	WORD   key;
	WORD   cmd;
} ACCEL, * LPACCEL;
typedef struct tagPAINTSTRUCT {
	HDC         hdc;
	BOOL        fErase;
	RECT        rcPaint;
	BOOL        fRestore;
	BOOL        fIncUpdate;
	BYTE        rgbReserved[32];
} PAINTSTRUCT, * PPAINTSTRUCT, * NPPAINTSTRUCT, * LPPAINTSTRUCT;
typedef struct tagCREATESTRUCTA {
	LPVOID      lpCreateParams;
	HINSTANCE   hInstance;
	HMENU       hMenu;
	HWND        hwndParent;
	int         cy;
	int         cx;
	int         y;
	int         x;
	LONG        style;
	LPCSTR      lpszName;
	LPCSTR      lpszClass;
	DWORD       dwExStyle;
} CREATESTRUCTA, * LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
	LPVOID      lpCreateParams;
	HINSTANCE   hInstance;
	HMENU       hMenu;
	HWND        hwndParent;
	int         cy;
	int         cx;
	int         y;
	int         x;
	LONG        style;
	LPCWSTR     lpszName;
	LPCWSTR     lpszClass;
	DWORD       dwExStyle;
} CREATESTRUCTW, * LPCREATESTRUCTW;
typedef CREATESTRUCTW CREATESTRUCT;
typedef LPCREATESTRUCTW LPCREATESTRUCT;
typedef struct tagWINDOWPLACEMENT {
	UINT  length;
	UINT  flags;
	UINT  showCmd;
	POINT ptMinPosition;
	POINT ptMaxPosition;
	RECT  rcNormalPosition;
} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT* PWINDOWPLACEMENT, * LPWINDOWPLACEMENT;
typedef struct tagNMHDR
{
	HWND      hwndFrom;
	UINT_PTR  idFrom;
	UINT      code;
}   NMHDR;
typedef NMHDR* LPNMHDR;
typedef struct tagSTYLESTRUCT
{
	DWORD   styleOld;
	DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
typedef struct tagMEASUREITEMSTRUCT {
	UINT       CtlType;
	UINT       CtlID;
	UINT       itemID;
	UINT       itemWidth;
	UINT       itemHeight;
	ULONG_PTR  itemData;
} MEASUREITEMSTRUCT, * PMEASUREITEMSTRUCT, * LPMEASUREITEMSTRUCT;
typedef struct tagDRAWITEMSTRUCT {
	UINT        CtlType;
	UINT        CtlID;
	UINT        itemID;
	UINT        itemAction;
	UINT        itemState;
	HWND        hwndItem;
	HDC         hDC;
	RECT        rcItem;
	ULONG_PTR   itemData;
} DRAWITEMSTRUCT, * PDRAWITEMSTRUCT, * LPDRAWITEMSTRUCT;
typedef struct tagDELETEITEMSTRUCT {
	UINT       CtlType;
	UINT       CtlID;
	UINT       itemID;
	HWND       hwndItem;
	ULONG_PTR  itemData;
} DELETEITEMSTRUCT, * PDELETEITEMSTRUCT, * LPDELETEITEMSTRUCT;
typedef struct tagCOMPAREITEMSTRUCT {
	UINT        CtlType;
	UINT        CtlID;
	HWND        hwndItem;
	UINT        itemID1;
	ULONG_PTR   itemData1;
	UINT        itemID2;
	ULONG_PTR   itemData2;
	DWORD       dwLocaleId;
} COMPAREITEMSTRUCT, * PCOMPAREITEMSTRUCT, * LPCOMPAREITEMSTRUCT;

BOOL
__stdcall
GetMessageA(
	LPMSG lpMsg,
	HWND hWnd,
	UINT wMsgFilterMin,
	UINT wMsgFilterMax);

BOOL
__stdcall
GetMessageW(
	LPMSG lpMsg,
	HWND hWnd,
	UINT wMsgFilterMin,
	UINT wMsgFilterMax);

BOOL
__stdcall
TranslateMessage(
	const MSG* lpMsg);

LRESULT
__stdcall
DispatchMessageA(
	const MSG* lpMsg);

LRESULT
__stdcall
DispatchMessageW(
	const MSG* lpMsg);

BOOL
__stdcall
SetMessageQueue(
	int cMessagesMax);

BOOL
__stdcall
PeekMessageA(
	LPMSG lpMsg,
	HWND hWnd,
	UINT wMsgFilterMin,
	UINT wMsgFilterMax,
	UINT wRemoveMsg);

BOOL
__stdcall
PeekMessageW(
	LPMSG lpMsg,
	HWND hWnd,
	UINT wMsgFilterMin,
	UINT wMsgFilterMax,
	UINT wRemoveMsg);

BOOL
__stdcall
RegisterHotKey(
	HWND hWnd,
	int id,
	UINT fsModifiers,
	UINT vk);

BOOL
__stdcall
UnregisterHotKey(
	HWND hWnd,
	int id);

BOOL
__stdcall
ExitWindowsEx(
	UINT uFlags,
	DWORD dwReason);

BOOL
__stdcall
SwapMouseButton(
	BOOL fSwap);

DWORD
__stdcall
GetMessagePos(
	void);

LONG
__stdcall
GetMessageTime(
	void);

LPARAM
__stdcall
GetMessageExtraInfo(
	void);

DWORD
__stdcall
GetUnpredictedMessagePos(
	void);

BOOL
__stdcall
IsWow64Message(
	void);

LPARAM
__stdcall
SetMessageExtraInfo(
	LPARAM lParam);

LRESULT
__stdcall
SendMessageA(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
SendMessageW(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
SendMessageTimeoutA(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam,
	UINT fuFlags,
	UINT uTimeout,
	PDWORD_PTR lpdwResult);

LRESULT
__stdcall
SendMessageTimeoutW(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam,
	UINT fuFlags,
	UINT uTimeout,
	PDWORD_PTR lpdwResult);

BOOL
__stdcall
SendNotifyMessageA(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
SendNotifyMessageW(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
SendMessageCallbackA(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam,
	SENDASYNCPROC lpResultCallBack,
	ULONG_PTR dwData);

BOOL
__stdcall
SendMessageCallbackW(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam,
	SENDASYNCPROC lpResultCallBack,
	ULONG_PTR dwData);
typedef struct {
	UINT  cbSize;
	HDESK hdesk;
	HWND  hwnd;
	LUID  luid;
} BSMINFO, * PBSMINFO;

long
__stdcall
BroadcastSystemMessageExA(
	DWORD flags,
	LPDWORD lpInfo,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam,
	PBSMINFO pbsmInfo);

long
__stdcall
BroadcastSystemMessageExW(
	DWORD flags,
	LPDWORD lpInfo,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam,
	PBSMINFO pbsmInfo);

long
__stdcall
BroadcastSystemMessageA(
	DWORD flags,
	LPDWORD lpInfo,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

long
__stdcall
BroadcastSystemMessageW(
	DWORD flags,
	LPDWORD lpInfo,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);
typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY* PHDEVNOTIFY;

HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
	HANDLE hRecipient,
	LPVOID NotificationFilter,
	DWORD Flags);

HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
	HANDLE hRecipient,
	LPVOID NotificationFilter,
	DWORD Flags);

BOOL
__stdcall
UnregisterDeviceNotification(
	HDEVNOTIFY Handle
);
typedef  PVOID           HPOWERNOTIFY;
typedef  HPOWERNOTIFY* PHPOWERNOTIFY;

HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
	HANDLE hRecipient,
	LPCGUID PowerSettingGuid,
	DWORD Flags
);

BOOL
__stdcall
UnregisterPowerSettingNotification(
	HPOWERNOTIFY Handle
);

HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification(
	HANDLE hRecipient,
	DWORD Flags
);

BOOL
__stdcall
UnregisterSuspendResumeNotification(
	HPOWERNOTIFY Handle
);

BOOL
__stdcall
PostMessageA(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
PostMessageW(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
PostThreadMessageA(
	DWORD idThread,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
PostThreadMessageW(
	DWORD idThread,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
AttachThreadInput(
	DWORD idAttach,
	DWORD idAttachTo,
	BOOL fAttach);

BOOL
__stdcall
ReplyMessage(
	LRESULT lResult);

BOOL
__stdcall
WaitMessage(
	void);

DWORD
__stdcall
WaitForInputIdle(
	HANDLE hProcess,
	DWORD dwMilliseconds);

LRESULT
__stdcall
DefWindowProcA(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
DefWindowProcW(
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

void
__stdcall
PostQuitMessage(
	int nExitCode);

LRESULT
__stdcall
CallWindowProcA(
	WNDPROC lpPrevWndFunc,
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
CallWindowProcW(
	WNDPROC lpPrevWndFunc,
	HWND hWnd,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
InSendMessage(
	void);

DWORD
__stdcall
InSendMessageEx(
	LPVOID lpReserved);

UINT
__stdcall
GetDoubleClickTime(
	void);

BOOL
__stdcall
SetDoubleClickTime(
	UINT);

ATOM
__stdcall
RegisterClassA(
	const WNDCLASSA* lpWndClass);

ATOM
__stdcall
RegisterClassW(
	const WNDCLASSW* lpWndClass);

BOOL
__stdcall
UnregisterClassA(
	LPCSTR lpClassName,
	HINSTANCE hInstance);

BOOL
__stdcall
UnregisterClassW(
	LPCWSTR lpClassName,
	HINSTANCE hInstance);

BOOL
__stdcall
GetClassInfoA(
	HINSTANCE hInstance,
	LPCSTR lpClassName,
	LPWNDCLASSA lpWndClass);

BOOL
__stdcall
GetClassInfoW(
	HINSTANCE hInstance,
	LPCWSTR lpClassName,
	LPWNDCLASSW lpWndClass);

ATOM
__stdcall
RegisterClassExA(
	const WNDCLASSEXA*);

ATOM
__stdcall
RegisterClassExW(
	const WNDCLASSEXW*);

BOOL
__stdcall
GetClassInfoExA(
	HINSTANCE hInstance,
	LPCSTR lpszClass,
	LPWNDCLASSEXA lpwcx);

BOOL
__stdcall
GetClassInfoExW(
	HINSTANCE hInstance,
	LPCWSTR lpszClass,
	LPWNDCLASSEXW lpwcx);
typedef BOOLEAN(__stdcall* PREGISTERCLASSNAMEW)(LPCWSTR);

HWND
__stdcall
CreateWindowExA(
	DWORD dwExStyle,
	LPCSTR lpClassName,
	LPCSTR lpWindowName,
	DWORD dwStyle,
	int X,
	int Y,
	int nWidth,
	int nHeight,
	HWND hWndParent,
	HMENU hMenu,
	HINSTANCE hInstance,
	LPVOID lpParam);

HWND
__stdcall
CreateWindowExW(
	DWORD dwExStyle,
	LPCWSTR lpClassName,
	LPCWSTR lpWindowName,
	DWORD dwStyle,
	int X,
	int Y,
	int nWidth,
	int nHeight,
	HWND hWndParent,
	HMENU hMenu,
	HINSTANCE hInstance,
	LPVOID lpParam);

BOOL
__stdcall
IsWindow(
	HWND hWnd);

BOOL
__stdcall
IsMenu(
	HMENU hMenu);

BOOL
__stdcall
IsChild(
	HWND hWndParent,
	HWND hWnd);

BOOL
__stdcall
DestroyWindow(
	HWND hWnd);

BOOL
__stdcall
ShowWindow(
	HWND hWnd,
	int nCmdShow);

BOOL
__stdcall
AnimateWindow(
	HWND hWnd,
	DWORD dwTime,
	DWORD dwFlags);

BOOL
__stdcall
UpdateLayeredWindow(
	HWND hWnd,
	HDC hdcDst,
	POINT* pptDst,
	SIZE* psize,
	HDC hdcSrc,
	POINT* pptSrc,
	COLORREF crKey,
	BLENDFUNCTION* pblend,
	DWORD dwFlags);
typedef struct tagUPDATELAYEREDWINDOWINFO
{
	DWORD cbSize;
	HDC hdcDst;
	const POINT* pptDst;
	const SIZE* psize;
	HDC hdcSrc;
	const POINT* pptSrc;
	COLORREF crKey;
	const BLENDFUNCTION* pblend;
	DWORD dwFlags;
	const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, * PUPDATELAYEREDWINDOWINFO;

BOOL
__stdcall
UpdateLayeredWindowIndirect(
	HWND hWnd,
	const UPDATELAYEREDWINDOWINFO* pULWInfo);

BOOL
__stdcall
GetLayeredWindowAttributes(
	HWND hwnd,
	COLORREF* pcrKey,
	BYTE* pbAlpha,
	DWORD* pdwFlags);

BOOL
__stdcall
PrintWindow(
	HWND hwnd,
	HDC hdcBlt,
	UINT nFlags);

BOOL
__stdcall
SetLayeredWindowAttributes(
	HWND hwnd,
	COLORREF crKey,
	BYTE bAlpha,
	DWORD dwFlags);

BOOL
__stdcall
ShowWindowAsync(
	HWND hWnd,
	int nCmdShow);

BOOL
__stdcall
FlashWindow(
	HWND hWnd,
	BOOL bInvert);
typedef struct {
	UINT  cbSize;
	HWND  hwnd;
	DWORD dwFlags;
	UINT  uCount;
	DWORD dwTimeout;
} FLASHWINFO, * PFLASHWINFO;

BOOL
__stdcall
FlashWindowEx(
	PFLASHWINFO pfwi);

BOOL
__stdcall
ShowOwnedPopups(
	HWND hWnd,
	BOOL fShow);

BOOL
__stdcall
OpenIcon(
	HWND hWnd);

BOOL
__stdcall
CloseWindow(
	HWND hWnd);

BOOL
__stdcall
MoveWindow(
	HWND hWnd,
	int X,
	int Y,
	int nWidth,
	int nHeight,
	BOOL bRepaint);

BOOL
__stdcall
SetWindowPos(
	HWND hWnd,
	HWND hWndInsertAfter,
	int X,
	int Y,
	int cx,
	int cy,
	UINT uFlags);

BOOL
__stdcall
GetWindowPlacement(
	HWND hWnd,
	WINDOWPLACEMENT* lpwndpl);

BOOL
__stdcall
SetWindowPlacement(
	HWND hWnd,
	const WINDOWPLACEMENT* lpwndpl);

BOOL
__stdcall
GetWindowDisplayAffinity(
	HWND hWnd,
	DWORD* pdwAffinity);

BOOL
__stdcall
SetWindowDisplayAffinity(
	HWND hWnd,
	DWORD dwAffinity);

HDWP
__stdcall
BeginDeferWindowPos(
	int nNumWindows);

HDWP
__stdcall
DeferWindowPos(
	HDWP hWinPosInfo,
	HWND hWnd,
	HWND hWndInsertAfter,
	int x,
	int y,
	int cx,
	int cy,
	UINT uFlags);

BOOL
__stdcall
EndDeferWindowPos(
	HDWP hWinPosInfo);

BOOL
__stdcall
IsWindowVisible(
	HWND hWnd);

BOOL
__stdcall
IsIconic(
	HWND hWnd);

BOOL
__stdcall
AnyPopup(
	void);

BOOL
__stdcall
BringWindowToTop(
	HWND hWnd);

BOOL
__stdcall
IsZoomed(
	HWND hWnd);
typedef struct {
	DWORD style;
	DWORD dwExtendedStyle;
	WORD cdit;
	short x;
	short y;
	short cx;
	short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE* LPDLGTEMPLATEA;
typedef DLGTEMPLATE* LPDLGTEMPLATEW;
typedef LPDLGTEMPLATEW LPDLGTEMPLATE;
typedef const DLGTEMPLATE* LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE* LPCDLGTEMPLATEW;
typedef LPCDLGTEMPLATEW LPCDLGTEMPLATE;
typedef struct {
	DWORD style;
	DWORD dwExtendedStyle;
	short x;
	short y;
	short cx;
	short cy;
	WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE* PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE* PDLGITEMTEMPLATEW;
typedef PDLGITEMTEMPLATEW PDLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE* LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE* LPDLGITEMTEMPLATEW;
typedef LPDLGITEMTEMPLATEW LPDLGITEMTEMPLATE;

HWND
__stdcall
CreateDialogParamA(
	HINSTANCE hInstance,
	LPCSTR lpTemplateName,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

HWND
__stdcall
CreateDialogParamW(
	HINSTANCE hInstance,
	LPCWSTR lpTemplateName,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

HWND
__stdcall
CreateDialogIndirectParamA(
	HINSTANCE hInstance,
	LPCDLGTEMPLATEA lpTemplate,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

HWND
__stdcall
CreateDialogIndirectParamW(
	HINSTANCE hInstance,
	LPCDLGTEMPLATEW lpTemplate,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

INT_PTR
__stdcall
DialogBoxParamA(
	HINSTANCE hInstance,
	LPCSTR lpTemplateName,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

INT_PTR
__stdcall
DialogBoxParamW(
	HINSTANCE hInstance,
	LPCWSTR lpTemplateName,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

INT_PTR
__stdcall
DialogBoxIndirectParamA(
	HINSTANCE hInstance,
	LPCDLGTEMPLATEA hDialogTemplate,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

INT_PTR
__stdcall
DialogBoxIndirectParamW(
	HINSTANCE hInstance,
	LPCDLGTEMPLATEW hDialogTemplate,
	HWND hWndParent,
	DLGPROC lpDialogFunc,
	LPARAM dwInitParam);

BOOL
__stdcall
EndDialog(
	HWND hDlg,
	INT_PTR nResult);

HWND
__stdcall
GetDlgItem(
	HWND hDlg,
	int nIDDlgItem);

BOOL
__stdcall
SetDlgItemInt(
	HWND hDlg,
	int nIDDlgItem,
	UINT uValue,
	BOOL bSigned);

UINT
__stdcall
GetDlgItemInt(
	HWND hDlg,
	int nIDDlgItem,
	BOOL* lpTranslated,
	BOOL bSigned);

BOOL
__stdcall
SetDlgItemTextA(
	HWND hDlg,
	int nIDDlgItem,
	LPCSTR lpString);

BOOL
__stdcall
SetDlgItemTextW(
	HWND hDlg,
	int nIDDlgItem,
	LPCWSTR lpString);

UINT
__stdcall
GetDlgItemTextA(
	HWND hDlg,
	int nIDDlgItem,
	LPSTR lpString,
	int cchMax);

UINT
__stdcall
GetDlgItemTextW(
	HWND hDlg,
	int nIDDlgItem,
	LPWSTR lpString,
	int cchMax);

BOOL
__stdcall
CheckDlgButton(
	HWND hDlg,
	int nIDButton,
	UINT uCheck);

BOOL
__stdcall
CheckRadioButton(
	HWND hDlg,
	int nIDFirstButton,
	int nIDLastButton,
	int nIDCheckButton);

UINT
__stdcall
IsDlgButtonChecked(
	HWND hDlg,
	int nIDButton);

LRESULT
__stdcall
SendDlgItemMessageA(
	HWND hDlg,
	int nIDDlgItem,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
SendDlgItemMessageW(
	HWND hDlg,
	int nIDDlgItem,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

HWND
__stdcall
GetNextDlgGroupItem(
	HWND hDlg,
	HWND hCtl,
	BOOL bPrevious);

HWND
__stdcall
GetNextDlgTabItem(
	HWND hDlg,
	HWND hCtl,
	BOOL bPrevious);

int
__stdcall
GetDlgCtrlID(
	HWND hWnd);

long
__stdcall
GetDialogBaseUnits(void);

LRESULT
__stdcall
DefDlgProcA(
	HWND hDlg,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
DefDlgProcW(
	HWND hDlg,
	UINT Msg,
	WPARAM wParam,
	LPARAM lParam);
typedef enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS {
	DCDC_DEFAULT = 0x0000,
	DCDC_DISABLE_FONT_UPDATE = 0x0001,
	DCDC_DISABLE_RELAYOUT = 0x0002,
} DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS;
;
BOOL
__stdcall
SetDialogControlDpiChangeBehavior(
	HWND hWnd,
	DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,
	DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values);
DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS
__stdcall
GetDialogControlDpiChangeBehavior(
	HWND hWnd);
typedef enum DIALOG_DPI_CHANGE_BEHAVIORS {
	DDC_DEFAULT = 0x0000,
	DDC_DISABLE_ALL = 0x0001,
	DDC_DISABLE_RESIZE = 0x0002,
	DDC_DISABLE_CONTROL_RELAYOUT = 0x0004,
} DIALOG_DPI_CHANGE_BEHAVIORS;
;
BOOL
__stdcall
SetDialogDpiChangeBehavior(
	HWND hDlg,
	DIALOG_DPI_CHANGE_BEHAVIORS mask,
	DIALOG_DPI_CHANGE_BEHAVIORS values);
DIALOG_DPI_CHANGE_BEHAVIORS
__stdcall
GetDialogDpiChangeBehavior(
	HWND hDlg);

BOOL
__stdcall
CallMsgFilterA(
	LPMSG lpMsg,
	int nCode);

BOOL
__stdcall
CallMsgFilterW(
	LPMSG lpMsg,
	int nCode);

BOOL
__stdcall
OpenClipboard(
	HWND hWndNewOwner);

BOOL
__stdcall
CloseClipboard(
	void);

DWORD
__stdcall
GetClipboardSequenceNumber(
	void);

HWND
__stdcall
GetClipboardOwner(
	void);

HWND
__stdcall
SetClipboardViewer(
	HWND hWndNewViewer);

HWND
__stdcall
GetClipboardViewer(
	void);

BOOL
__stdcall
ChangeClipboardChain(
	HWND hWndRemove,
	HWND hWndNewNext);

HANDLE
__stdcall
SetClipboardData(
	UINT uFormat,
	HANDLE hMem);

HANDLE
__stdcall
GetClipboardData(
	UINT uFormat);

UINT
__stdcall
RegisterClipboardFormatA(
	LPCSTR lpszFormat);

UINT
__stdcall
RegisterClipboardFormatW(
	LPCWSTR lpszFormat);

int
__stdcall
CountClipboardFormats(
	void);

UINT
__stdcall
EnumClipboardFormats(
	UINT format);

int
__stdcall
GetClipboardFormatNameA(
	UINT format,
	LPSTR lpszFormatName,
	int cchMaxCount);

int
__stdcall
GetClipboardFormatNameW(
	UINT format,
	LPWSTR lpszFormatName,
	int cchMaxCount);

BOOL
__stdcall
EmptyClipboard(
	void);

BOOL
__stdcall
IsClipboardFormatAvailable(
	UINT format);

int
__stdcall
GetPriorityClipboardFormat(
	UINT* paFormatPriorityList,
	int cFormats);

HWND
__stdcall
GetOpenClipboardWindow(
	void);

BOOL
__stdcall
AddClipboardFormatListener(
	HWND hwnd);

BOOL
__stdcall
RemoveClipboardFormatListener(
	HWND hwnd);

BOOL
__stdcall
GetUpdatedClipboardFormats(
	PUINT lpuiFormats,
	UINT cFormats,
	PUINT pcFormatsOut);

BOOL
__stdcall
CharToOemA(
	LPCSTR pSrc,
	LPSTR pDst);

BOOL
__stdcall
CharToOemW(
	LPCWSTR pSrc,
	LPSTR pDst);

BOOL
__stdcall
OemToCharA(
	LPCSTR pSrc,
	LPSTR pDst);

BOOL
__stdcall
OemToCharW(
	LPCSTR pSrc,
	LPWSTR pDst);

BOOL
__stdcall
CharToOemBuffA(
	LPCSTR lpszSrc,
	LPSTR lpszDst,
	DWORD cchDstLength);

BOOL
__stdcall
CharToOemBuffW(
	LPCWSTR lpszSrc,
	LPSTR lpszDst,
	DWORD cchDstLength);

BOOL
__stdcall
OemToCharBuffA(
	LPCSTR lpszSrc,
	LPSTR lpszDst,
	DWORD cchDstLength);

BOOL
__stdcall
OemToCharBuffW(
	LPCSTR lpszSrc,
	LPWSTR lpszDst,
	DWORD cchDstLength);

LPSTR
__stdcall
CharUpperA(
	LPSTR lpsz);

LPWSTR
__stdcall
CharUpperW(
	LPWSTR lpsz);

DWORD
__stdcall
CharUpperBuffA(
	LPSTR lpsz,
	DWORD cchLength);

DWORD
__stdcall
CharUpperBuffW(
	LPWSTR lpsz,
	DWORD cchLength);

LPSTR
__stdcall
CharLowerA(
	LPSTR lpsz);

LPWSTR
__stdcall
CharLowerW(
	LPWSTR lpsz);

DWORD
__stdcall
CharLowerBuffA(
	LPSTR lpsz,
	DWORD cchLength);

DWORD
__stdcall
CharLowerBuffW(
	LPWSTR lpsz,
	DWORD cchLength);

LPSTR
__stdcall
CharNextA(
	LPCSTR lpsz);

LPWSTR
__stdcall
CharNextW(
	LPCWSTR lpsz);

LPSTR
__stdcall
CharPrevA(
	LPCSTR lpszStart,
	LPCSTR lpszCurrent);

LPWSTR
__stdcall
CharPrevW(
	LPCWSTR lpszStart,
	LPCWSTR lpszCurrent);

LPSTR
__stdcall
CharNextExA(
	WORD CodePage,
	LPCSTR lpCurrentChar,
	DWORD dwFlags);

LPSTR
__stdcall
CharPrevExA(
	WORD CodePage,
	LPCSTR lpStart,
	LPCSTR lpCurrentChar,
	DWORD dwFlags);

BOOL
__stdcall
IsCharAlphaA(
	CHAR ch);

BOOL
__stdcall
IsCharAlphaW(
	WCHAR ch);

BOOL
__stdcall
IsCharAlphaNumericA(
	CHAR ch);

BOOL
__stdcall
IsCharAlphaNumericW(
	WCHAR ch);

BOOL
__stdcall
IsCharUpperA(
	CHAR ch);

BOOL
__stdcall
IsCharUpperW(
	WCHAR ch);

BOOL
__stdcall
IsCharLowerA(
	CHAR ch);

BOOL
__stdcall
IsCharLowerW(
	WCHAR ch);

HWND
__stdcall
SetFocus(
	HWND hWnd);

HWND
__stdcall
GetActiveWindow(
	void);

HWND
__stdcall
GetFocus(
	void);

UINT
__stdcall
GetKBCodePage(
	void);

SHORT
__stdcall
GetKeyState(
	int nVirtKey);

SHORT
__stdcall
GetAsyncKeyState(
	int vKey);

BOOL
__stdcall
GetKeyboardState(
	PBYTE lpKeyState);

BOOL
__stdcall
SetKeyboardState(
	LPBYTE lpKeyState);

int
__stdcall
GetKeyNameTextA(
	LONG lParam,
	LPSTR lpString,
	int cchSize);

int
__stdcall
GetKeyNameTextW(
	LONG lParam,
	LPWSTR lpString,
	int cchSize);

int
__stdcall
GetKeyboardType(
	int nTypeFlag);

int
__stdcall
ToAscii(
	UINT uVirtKey,
	UINT uScanCode,
	const BYTE* lpKeyState,
	LPWORD lpChar,
	UINT uFlags);

int
__stdcall
ToAsciiEx(
	UINT uVirtKey,
	UINT uScanCode,
	const BYTE* lpKeyState,
	LPWORD lpChar,
	UINT uFlags,
	HKL dwhkl);

int
__stdcall
ToUnicode(
	UINT wVirtKey,
	UINT wScanCode,
	const BYTE* lpKeyState,
	LPWSTR pwszBuff,
	int cchBuff,
	UINT wFlags);

DWORD
__stdcall
OemKeyScan(
	WORD wOemChar);

SHORT
__stdcall
VkKeyScanA(
	CHAR ch);

SHORT
__stdcall
VkKeyScanW(
	WCHAR ch);

SHORT
__stdcall
VkKeyScanExA(
	CHAR ch,
	HKL dwhkl);

SHORT
__stdcall
VkKeyScanExW(
	WCHAR ch,
	HKL dwhkl);

void
__stdcall
keybd_event(
	BYTE bVk,
	BYTE bScan,
	DWORD dwFlags,
	ULONG_PTR dwExtraInfo);

void
__stdcall
mouse_event(
	DWORD dwFlags,
	DWORD dx,
	DWORD dy,
	DWORD dwData,
	ULONG_PTR dwExtraInfo);
typedef struct tagMOUSEINPUT {
	LONG    dx;
	LONG    dy;
	DWORD   mouseData;
	DWORD   dwFlags;
	DWORD   time;
	ULONG_PTR dwExtraInfo;
} MOUSEINPUT, * PMOUSEINPUT, * LPMOUSEINPUT;
typedef struct tagKEYBDINPUT {
	WORD    wVk;
	WORD    wScan;
	DWORD   dwFlags;
	DWORD   time;
	ULONG_PTR dwExtraInfo;
} KEYBDINPUT, * PKEYBDINPUT, * LPKEYBDINPUT;
typedef struct tagHARDWAREINPUT {
	DWORD   uMsg;
	WORD    wParamL;
	WORD    wParamH;
} HARDWAREINPUT, * PHARDWAREINPUT, * LPHARDWAREINPUT;
typedef struct tagINPUT {
	DWORD   type;
	union
	{
		MOUSEINPUT      mi;
		KEYBDINPUT      ki;
		HARDWAREINPUT   hi;
	};
} INPUT, * PINPUT, * LPINPUT;

UINT
__stdcall
SendInput(
	UINT cInputs,
	LPINPUT pInputs,
	int cbSize);
struct HTOUCHINPUT__ { int unused; }; typedef struct HTOUCHINPUT__* HTOUCHINPUT;
typedef struct tagTOUCHINPUT {
	LONG x;
	LONG y;
	HANDLE hSource;
	DWORD dwID;
	DWORD dwFlags;
	DWORD dwMask;
	DWORD dwTime;
	ULONG_PTR dwExtraInfo;
	DWORD cxContact;
	DWORD cyContact;
} TOUCHINPUT, * PTOUCHINPUT;
typedef TOUCHINPUT const* PCTOUCHINPUT;

BOOL
__stdcall
GetTouchInputInfo(
	HTOUCHINPUT hTouchInput,
	UINT cInputs,
	PTOUCHINPUT pInputs,
	int cbSize);

BOOL
__stdcall
CloseTouchInputHandle(
	HTOUCHINPUT hTouchInput);

BOOL
__stdcall
RegisterTouchWindow(
	HWND hwnd,
	ULONG ulFlags);

BOOL
__stdcall
UnregisterTouchWindow(
	HWND hwnd);

BOOL
__stdcall
IsTouchWindow(
	HWND hwnd,
	PULONG pulFlags);
enum tagPOINTER_INPUT_TYPE {
	PT_POINTER = 1,
	PT_TOUCH = 2,
	PT_PEN = 3,
	PT_MOUSE = 4,
	PT_TOUCHPAD = 5,
};
typedef DWORD POINTER_INPUT_TYPE;
typedef UINT32 POINTER_FLAGS;
typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
	POINTER_CHANGE_NONE,
	POINTER_CHANGE_FIRSTBUTTON_DOWN,
	POINTER_CHANGE_FIRSTBUTTON_UP,
	POINTER_CHANGE_SECONDBUTTON_DOWN,
	POINTER_CHANGE_SECONDBUTTON_UP,
	POINTER_CHANGE_THIRDBUTTON_DOWN,
	POINTER_CHANGE_THIRDBUTTON_UP,
	POINTER_CHANGE_FOURTHBUTTON_DOWN,
	POINTER_CHANGE_FOURTHBUTTON_UP,
	POINTER_CHANGE_FIFTHBUTTON_DOWN,
	POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;
typedef struct tagPOINTER_INFO {
	POINTER_INPUT_TYPE    pointerType;
	UINT32          pointerId;
	UINT32          frameId;
	POINTER_FLAGS   pointerFlags;
	HANDLE          sourceDevice;
	HWND            hwndTarget;
	POINT           ptPixelLocation;
	POINT           ptHimetricLocation;
	POINT           ptPixelLocationRaw;
	POINT           ptHimetricLocationRaw;
	DWORD           dwTime;
	UINT32          historyCount;
	INT32           InputData;
	DWORD           dwKeyStates;
	UINT64          PerformanceCount;
	POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;
typedef UINT32 TOUCH_FLAGS;
typedef UINT32 TOUCH_MASK;
typedef struct tagPOINTER_TOUCH_INFO {
	POINTER_INFO    pointerInfo;
	TOUCH_FLAGS     touchFlags;
	TOUCH_MASK      touchMask;
	RECT            rcContact;
	RECT            rcContactRaw;
	UINT32          orientation;
	UINT32          pressure;
} POINTER_TOUCH_INFO;
typedef UINT32 PEN_FLAGS;
typedef UINT32 PEN_MASK;
typedef struct tagPOINTER_PEN_INFO {
	POINTER_INFO    pointerInfo;
	PEN_FLAGS       penFlags;
	PEN_MASK        penMask;
	UINT32          pressure;
	UINT32          rotation;
	INT32           tiltX;
	INT32           tiltY;
} POINTER_PEN_INFO;
typedef enum {
	POINTER_FEEDBACK_DEFAULT = 1,
	POINTER_FEEDBACK_INDIRECT = 2,
	POINTER_FEEDBACK_NONE = 3,
} POINTER_FEEDBACK_MODE;

BOOL
__stdcall
InitializeTouchInjection(
	UINT32 maxCount,
	DWORD dwMode);

BOOL
__stdcall
InjectTouchInput(
	UINT32 count,
	const POINTER_TOUCH_INFO* contacts);
typedef struct tagUSAGE_PROPERTIES {
	USHORT level;
	USHORT page;
	USHORT usage;
	INT32 logicalMinimum;
	INT32 logicalMaximum;
	USHORT unit;
	USHORT exponent;
	BYTE   count;
	INT32 physicalMinimum;
	INT32 physicalMaximum;
}USAGE_PROPERTIES, * PUSAGE_PROPERTIES;
typedef struct tagPOINTER_TYPE_INFO {
	POINTER_INPUT_TYPE  type;
	union {
		POINTER_TOUCH_INFO touchInfo;
		POINTER_PEN_INFO   penInfo;
	};
}POINTER_TYPE_INFO, * PPOINTER_TYPE_INFO;
typedef struct tagINPUT_INJECTION_VALUE {
	USHORT page;
	USHORT usage;
	INT32  value;
	USHORT index;
}INPUT_INJECTION_VALUE, * PINPUT_INJECTION_VALUE;

BOOL
__stdcall
GetPointerType(
	UINT32 pointerId,
	POINTER_INPUT_TYPE* pointerType);

BOOL
__stdcall
GetPointerCursorId(
	UINT32 pointerId,
	UINT32* cursorId);

BOOL
__stdcall
GetPointerInfo(
	UINT32 pointerId,
	POINTER_INFO* pointerInfo);

BOOL
__stdcall
GetPointerInfoHistory(
	UINT32 pointerId,
	UINT32* entriesCount,
	POINTER_INFO* pointerInfo);

BOOL
__stdcall
GetPointerFrameInfo(
	UINT32 pointerId,
	UINT32* pointerCount,
	POINTER_INFO* pointerInfo);

BOOL
__stdcall
GetPointerFrameInfoHistory(
	UINT32 pointerId,
	UINT32* entriesCount,
	UINT32* pointerCount,
	POINTER_INFO* pointerInfo);

BOOL
__stdcall
GetPointerTouchInfo(
	UINT32 pointerId,
	POINTER_TOUCH_INFO* touchInfo);

BOOL
__stdcall
GetPointerTouchInfoHistory(
	UINT32 pointerId,
	UINT32* entriesCount,
	POINTER_TOUCH_INFO* touchInfo);

BOOL
__stdcall
GetPointerFrameTouchInfo(
	UINT32 pointerId,
	UINT32* pointerCount,
	POINTER_TOUCH_INFO* touchInfo);

BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
	UINT32 pointerId,
	UINT32* entriesCount,
	UINT32* pointerCount,
	POINTER_TOUCH_INFO* touchInfo);

BOOL
__stdcall
GetPointerPenInfo(
	UINT32 pointerId,
	POINTER_PEN_INFO* penInfo);

BOOL
__stdcall
GetPointerPenInfoHistory(
	UINT32 pointerId,
	UINT32* entriesCount,
	POINTER_PEN_INFO* penInfo);

BOOL
__stdcall
GetPointerFramePenInfo(
	UINT32 pointerId,
	UINT32* pointerCount,
	POINTER_PEN_INFO* penInfo);

BOOL
__stdcall
GetPointerFramePenInfoHistory(
	UINT32 pointerId,
	UINT32* entriesCount,
	UINT32* pointerCount,
	POINTER_PEN_INFO* penInfo);

BOOL
__stdcall
SkipPointerFrameMessages(
	UINT32 pointerId);

BOOL
__stdcall
RegisterPointerInputTarget(
	HWND hwnd,
	POINTER_INPUT_TYPE pointerType);

BOOL
__stdcall
UnregisterPointerInputTarget(
	HWND hwnd,
	POINTER_INPUT_TYPE pointerType);

BOOL
__stdcall
RegisterPointerInputTargetEx(
	HWND hwnd,
	POINTER_INPUT_TYPE pointerType,
	BOOL fObserve);

BOOL
__stdcall
UnregisterPointerInputTargetEx(
	HWND hwnd,
	POINTER_INPUT_TYPE pointerType);
struct HSYNTHETICPOINTERDEVICE__ { int unused; }; typedef struct HSYNTHETICPOINTERDEVICE__* HSYNTHETICPOINTERDEVICE;

HSYNTHETICPOINTERDEVICE
__stdcall
CreateSyntheticPointerDevice(
	POINTER_INPUT_TYPE pointerType,
	ULONG maxCount,
	POINTER_FEEDBACK_MODE mode);

BOOL
__stdcall
InjectSyntheticPointerInput(
	HSYNTHETICPOINTERDEVICE device,
	const POINTER_TYPE_INFO* pointerInfo,
	UINT32 count);

void
__stdcall
DestroySyntheticPointerDevice(
	HSYNTHETICPOINTERDEVICE device);

BOOL
__stdcall
EnableMouseInPointer(
	BOOL fEnable);

BOOL
__stdcall
IsMouseInPointerEnabled(
	void);

BOOL
__stdcall
EnableMouseInPointerForThread(void);

BOOL
__stdcall
RegisterTouchHitTestingWindow(
	HWND hwnd,
	ULONG value);
typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
	UINT16 score;
	POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, * PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;
typedef struct tagTOUCH_HIT_TESTING_INPUT
{
	UINT32 pointerId;
	POINT point;
	RECT boundingBox;
	RECT nonOccludedBoundingBox;
	UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, * PTOUCH_HIT_TESTING_INPUT;

BOOL
__stdcall
EvaluateProximityToRect(
	const RECT* controlBoundingBox,
	const TOUCH_HIT_TESTING_INPUT* pHitTestingInput,
	TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

BOOL
__stdcall
EvaluateProximityToPolygon(
	UINT32 numVertices,
	const POINT* controlPolygon,
	const TOUCH_HIT_TESTING_INPUT* pHitTestingInput,
	TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);

LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
	const TOUCH_HIT_TESTING_INPUT* pHitTestingInput,
	const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION* pProximityEval);
typedef enum tagFEEDBACK_TYPE {
	FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
	FEEDBACK_PEN_BARRELVISUALIZATION = 2,
	FEEDBACK_PEN_TAP = 3,
	FEEDBACK_PEN_DOUBLETAP = 4,
	FEEDBACK_PEN_PRESSANDHOLD = 5,
	FEEDBACK_PEN_RIGHTTAP = 6,
	FEEDBACK_TOUCH_TAP = 7,
	FEEDBACK_TOUCH_DOUBLETAP = 8,
	FEEDBACK_TOUCH_PRESSANDHOLD = 9,
	FEEDBACK_TOUCH_RIGHTTAP = 10,
	FEEDBACK_GESTURE_PRESSANDTAP = 11,
	FEEDBACK_MAX = 0xFFFFFFFF
} FEEDBACK_TYPE;

BOOL
__stdcall
GetWindowFeedbackSetting(
	HWND hwnd,
	FEEDBACK_TYPE feedback,
	DWORD dwFlags,
	UINT32* pSize,
	void* config);

BOOL
__stdcall
SetWindowFeedbackSetting(
	HWND hwnd,
	FEEDBACK_TYPE feedback,
	DWORD dwFlags,
	UINT32 size,
	const void* configuration);
typedef struct tagINPUT_TRANSFORM {
	union {
		struct {
			float        _11, _12, _13, _14;
			float        _21, _22, _23, _24;
			float        _31, _32, _33, _34;
			float        _41, _42, _43, _44;
		};
		float m[4][4];
	};
} INPUT_TRANSFORM;

BOOL
__stdcall
GetPointerInputTransform(
	UINT32 pointerId,
	UINT32 historyCount,
	INPUT_TRANSFORM* inputTransform);
typedef struct tagLASTINPUTINFO {
	UINT cbSize;
	DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

BOOL
__stdcall
GetLastInputInfo(
	PLASTINPUTINFO plii);

UINT
__stdcall
MapVirtualKeyA(
	UINT uCode,
	UINT uMapType);

UINT
__stdcall
MapVirtualKeyW(
	UINT uCode,
	UINT uMapType);

UINT
__stdcall
MapVirtualKeyExA(
	UINT uCode,
	UINT uMapType,
	HKL dwhkl);

UINT
__stdcall
MapVirtualKeyExW(
	UINT uCode,
	UINT uMapType,
	HKL dwhkl);

BOOL
__stdcall
GetInputState(
	void);

DWORD
__stdcall
GetQueueStatus(
	UINT flags);

HWND
__stdcall
GetCapture(
	void);

HWND
__stdcall
SetCapture(
	HWND hWnd);

BOOL
__stdcall
ReleaseCapture(
	void);

DWORD
__stdcall
MsgWaitForMultipleObjects(
	DWORD nCount,
	const HANDLE* pHandles,
	BOOL fWaitAll,
	DWORD dwMilliseconds,
	DWORD dwWakeMask);

DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
	DWORD nCount,
	const HANDLE* pHandles,
	DWORD dwMilliseconds,
	DWORD dwWakeMask,
	DWORD dwFlags);

UINT_PTR
__stdcall
SetTimer(
	HWND hWnd,
	UINT_PTR nIDEvent,
	UINT uElapse,
	TIMERPROC lpTimerFunc);

UINT_PTR
__stdcall
SetCoalescableTimer(
	HWND hWnd,
	UINT_PTR nIDEvent,
	UINT uElapse,
	TIMERPROC lpTimerFunc,
	ULONG uToleranceDelay);

BOOL
__stdcall
KillTimer(
	HWND hWnd,
	UINT_PTR uIDEvent);

BOOL
__stdcall
IsWindowUnicode(
	HWND hWnd);

BOOL
__stdcall
EnableWindow(
	HWND hWnd,
	BOOL bEnable);

BOOL
__stdcall
IsWindowEnabled(
	HWND hWnd);

HACCEL
__stdcall
LoadAcceleratorsA(
	HINSTANCE hInstance,
	LPCSTR lpTableName);

HACCEL
__stdcall
LoadAcceleratorsW(
	HINSTANCE hInstance,
	LPCWSTR lpTableName);

HACCEL
__stdcall
CreateAcceleratorTableA(
	LPACCEL paccel,
	int cAccel);

HACCEL
__stdcall
CreateAcceleratorTableW(
	LPACCEL paccel,
	int cAccel);

BOOL
__stdcall
DestroyAcceleratorTable(
	HACCEL hAccel);

int
__stdcall
CopyAcceleratorTableA(
	HACCEL hAccelSrc,
	LPACCEL lpAccelDst,
	int cAccelEntries);

int
__stdcall
CopyAcceleratorTableW(
	HACCEL hAccelSrc,
	LPACCEL lpAccelDst,
	int cAccelEntries);

int
__stdcall
TranslateAcceleratorA(
	HWND hWnd,
	HACCEL hAccTable,
	LPMSG lpMsg);

int
__stdcall
TranslateAcceleratorW(
	HWND hWnd,
	HACCEL hAccTable,
	LPMSG lpMsg);

int
__stdcall
GetSystemMetrics(
	int nIndex);

int
__stdcall
GetSystemMetricsForDpi(
	int nIndex,
	UINT dpi);

HMENU
__stdcall
LoadMenuA(
	HINSTANCE hInstance,
	LPCSTR lpMenuName);

HMENU
__stdcall
LoadMenuW(
	HINSTANCE hInstance,
	LPCWSTR lpMenuName);

HMENU
__stdcall
LoadMenuIndirectA(
	const MENUTEMPLATEA* lpMenuTemplate);

HMENU
__stdcall
LoadMenuIndirectW(
	const MENUTEMPLATEW* lpMenuTemplate);

HMENU
__stdcall
GetMenu(
	HWND hWnd);

BOOL
__stdcall
SetMenu(
	HWND hWnd,
	HMENU hMenu);

BOOL
__stdcall
ChangeMenuA(
	HMENU hMenu,
	UINT cmd,
	LPCSTR lpszNewItem,
	UINT cmdInsert,
	UINT flags);

BOOL
__stdcall
ChangeMenuW(
	HMENU hMenu,
	UINT cmd,
	LPCWSTR lpszNewItem,
	UINT cmdInsert,
	UINT flags);

BOOL
__stdcall
HiliteMenuItem(
	HWND hWnd,
	HMENU hMenu,
	UINT uIDHiliteItem,
	UINT uHilite);

int
__stdcall
GetMenuStringA(
	HMENU hMenu,
	UINT uIDItem,
	LPSTR lpString,
	int cchMax,
	UINT flags);

int
__stdcall
GetMenuStringW(
	HMENU hMenu,
	UINT uIDItem,
	LPWSTR lpString,
	int cchMax,
	UINT flags);

UINT
__stdcall
GetMenuState(
	HMENU hMenu,
	UINT uId,
	UINT uFlags);

BOOL
__stdcall
DrawMenuBar(
	HWND hWnd);

HMENU
__stdcall
GetSystemMenu(
	HWND hWnd,
	BOOL bRevert);

HMENU
__stdcall
CreateMenu(
	void);

HMENU
__stdcall
CreatePopupMenu(
	void);

BOOL
__stdcall
DestroyMenu(
	HMENU hMenu);

DWORD
__stdcall
CheckMenuItem(
	HMENU hMenu,
	UINT uIDCheckItem,
	UINT uCheck);

BOOL
__stdcall
EnableMenuItem(
	HMENU hMenu,
	UINT uIDEnableItem,
	UINT uEnable);

HMENU
__stdcall
GetSubMenu(
	HMENU hMenu,
	int nPos);

UINT
__stdcall
GetMenuItemID(
	HMENU hMenu,
	int nPos);

int
__stdcall
GetMenuItemCount(
	HMENU hMenu);

BOOL
__stdcall
InsertMenuA(
	HMENU hMenu,
	UINT uPosition,
	UINT uFlags,
	UINT_PTR uIDNewItem,
	LPCSTR lpNewItem);

BOOL
__stdcall
InsertMenuW(
	HMENU hMenu,
	UINT uPosition,
	UINT uFlags,
	UINT_PTR uIDNewItem,
	LPCWSTR lpNewItem);

BOOL
__stdcall
AppendMenuA(
	HMENU hMenu,
	UINT uFlags,
	UINT_PTR uIDNewItem,
	LPCSTR lpNewItem);

BOOL
__stdcall
AppendMenuW(
	HMENU hMenu,
	UINT uFlags,
	UINT_PTR uIDNewItem,
	LPCWSTR lpNewItem);

BOOL
__stdcall
ModifyMenuA(
	HMENU hMnu,
	UINT uPosition,
	UINT uFlags,
	UINT_PTR uIDNewItem,
	LPCSTR lpNewItem);

BOOL
__stdcall
ModifyMenuW(
	HMENU hMnu,
	UINT uPosition,
	UINT uFlags,
	UINT_PTR uIDNewItem,
	LPCWSTR lpNewItem);

BOOL
__stdcall RemoveMenu(
	HMENU hMenu,
	UINT uPosition,
	UINT uFlags);

BOOL
__stdcall
DeleteMenu(
	HMENU hMenu,
	UINT uPosition,
	UINT uFlags);

BOOL
__stdcall
SetMenuItemBitmaps(
	HMENU hMenu,
	UINT uPosition,
	UINT uFlags,
	HBITMAP hBitmapUnchecked,
	HBITMAP hBitmapChecked);

LONG
__stdcall
GetMenuCheckMarkDimensions(
	void);

BOOL
__stdcall
TrackPopupMenu(
	HMENU hMenu,
	UINT uFlags,
	int x,
	int y,
	int nReserved,
	HWND hWnd,
	const RECT* prcRect);
typedef struct tagTPMPARAMS
{
	UINT    cbSize;
	RECT    rcExclude;
}   TPMPARAMS;
typedef TPMPARAMS* LPTPMPARAMS;

BOOL
__stdcall
TrackPopupMenuEx(
	HMENU hMenu,
	UINT uFlags,
	int x,
	int y,
	HWND hwnd,
	LPTPMPARAMS lptpm);

BOOL
__stdcall
CalculatePopupWindowPosition(
	const POINT* anchorPoint,
	const SIZE* windowSize,
	UINT  flags,
	RECT* excludeRect,
	RECT* popupWindowPosition);
typedef struct tagMENUINFO
{
	DWORD   cbSize;
	DWORD   fMask;
	DWORD   dwStyle;
	UINT    cyMax;
	HBRUSH  hbrBack;
	DWORD   dwContextHelpID;
	ULONG_PTR dwMenuData;
}   MENUINFO, * LPMENUINFO;
typedef MENUINFO const* LPCMENUINFO;

BOOL
__stdcall
GetMenuInfo(
	HMENU,
	LPMENUINFO);

BOOL
__stdcall
SetMenuInfo(
	HMENU,
	LPCMENUINFO);

BOOL
__stdcall
EndMenu(
	void);
typedef struct tagMENUGETOBJECTINFO
{
	DWORD dwFlags;
	UINT uPos;
	HMENU hmenu;
	PVOID riid;
	PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;
typedef struct tagMENUITEMINFOA
{
	UINT     cbSize;
	UINT     fMask;
	UINT     fType;
	UINT     fState;
	UINT     wID;
	HMENU    hSubMenu;
	HBITMAP  hbmpChecked;
	HBITMAP  hbmpUnchecked;
	ULONG_PTR dwItemData;
	LPSTR    dwTypeData;
	UINT     cch;
	HBITMAP  hbmpItem;
}   MENUITEMINFOA, * LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
	UINT     cbSize;
	UINT     fMask;
	UINT     fType;
	UINT     fState;
	UINT     wID;
	HMENU    hSubMenu;
	HBITMAP  hbmpChecked;
	HBITMAP  hbmpUnchecked;
	ULONG_PTR dwItemData;
	LPWSTR   dwTypeData;
	UINT     cch;
	HBITMAP  hbmpItem;
}   MENUITEMINFOW, * LPMENUITEMINFOW;
typedef MENUITEMINFOW MENUITEMINFO;
typedef LPMENUITEMINFOW LPMENUITEMINFO;
typedef MENUITEMINFOA const* LPCMENUITEMINFOA;
typedef MENUITEMINFOW const* LPCMENUITEMINFOW;
typedef LPCMENUITEMINFOW LPCMENUITEMINFO;

BOOL
__stdcall
InsertMenuItemA(
	HMENU hmenu,
	UINT item,
	BOOL fByPosition,
	LPCMENUITEMINFOA lpmi);

BOOL
__stdcall
InsertMenuItemW(
	HMENU hmenu,
	UINT item,
	BOOL fByPosition,
	LPCMENUITEMINFOW lpmi);

BOOL
__stdcall
GetMenuItemInfoA(
	HMENU hmenu,
	UINT item,
	BOOL fByPosition,
	LPMENUITEMINFOA lpmii);

BOOL
__stdcall
GetMenuItemInfoW(
	HMENU hmenu,
	UINT item,
	BOOL fByPosition,
	LPMENUITEMINFOW lpmii);

BOOL
__stdcall
SetMenuItemInfoA(
	HMENU hmenu,
	UINT item,
	BOOL fByPositon,
	LPCMENUITEMINFOA lpmii);

BOOL
__stdcall
SetMenuItemInfoW(
	HMENU hmenu,
	UINT item,
	BOOL fByPositon,
	LPCMENUITEMINFOW lpmii);

UINT
__stdcall
GetMenuDefaultItem(
	HMENU hMenu,
	UINT fByPos,
	UINT gmdiFlags);

BOOL
__stdcall
SetMenuDefaultItem(
	HMENU hMenu,
	UINT uItem,
	UINT fByPos);

BOOL
__stdcall
GetMenuItemRect(
	HWND hWnd,
	HMENU hMenu,
	UINT uItem,
	LPRECT lprcItem);

int
__stdcall
MenuItemFromPoint(
	HWND hWnd,
	HMENU hMenu,
	POINT ptScreen);
typedef struct tagDROPSTRUCT
{
	HWND    hwndSource;
	HWND    hwndSink;
	DWORD   wFmt;
	ULONG_PTR dwData;
	POINT   ptDrop;
	DWORD   dwControlData;
} DROPSTRUCT, * PDROPSTRUCT, * LPDROPSTRUCT;

DWORD
__stdcall
DragObject(
	HWND hwndParent,
	HWND hwndFrom,
	UINT fmt,
	ULONG_PTR data,
	HCURSOR hcur);

BOOL
__stdcall
DragDetect(
	HWND hwnd,
	POINT pt);

BOOL
__stdcall
DrawIcon(
	HDC hDC,
	int X,
	int Y,
	HICON hIcon);
typedef struct tagDRAWTEXTPARAMS
{
	UINT    cbSize;
	int     iTabLength;
	int     iLeftMargin;
	int     iRightMargin;
	UINT    uiLengthDrawn;
} DRAWTEXTPARAMS, * LPDRAWTEXTPARAMS;

int
__stdcall
DrawTextA(
	HDC hdc,
	LPCSTR lpchText,
	int cchText,
	LPRECT lprc,
	UINT format);

int
__stdcall
DrawTextW(
	HDC hdc,
	LPCWSTR lpchText,
	int cchText,
	LPRECT lprc,
	UINT format);

int
__stdcall
DrawTextExA(
	HDC hdc,
	LPSTR lpchText,
	int cchText,
	LPRECT lprc,
	UINT format,
	LPDRAWTEXTPARAMS lpdtp);

int
__stdcall
DrawTextExW(
	HDC hdc,
	LPWSTR lpchText,
	int cchText,
	LPRECT lprc,
	UINT format,
	LPDRAWTEXTPARAMS lpdtp);

BOOL
__stdcall
GrayStringA(
	HDC hDC,
	HBRUSH hBrush,
	GRAYSTRINGPROC lpOutputFunc,
	LPARAM lpData,
	int nCount,
	int X,
	int Y,
	int nWidth,
	int nHeight);

BOOL
__stdcall
GrayStringW(
	HDC hDC,
	HBRUSH hBrush,
	GRAYSTRINGPROC lpOutputFunc,
	LPARAM lpData,
	int nCount,
	int X,
	int Y,
	int nWidth,
	int nHeight);

BOOL
__stdcall
DrawStateA(
	HDC hdc,
	HBRUSH hbrFore,
	DRAWSTATEPROC qfnCallBack,
	LPARAM lData,
	WPARAM wData,
	int x,
	int y,
	int cx,
	int cy,
	UINT uFlags);

BOOL
__stdcall
DrawStateW(
	HDC hdc,
	HBRUSH hbrFore,
	DRAWSTATEPROC qfnCallBack,
	LPARAM lData,
	WPARAM wData,
	int x,
	int y,
	int cx,
	int cy,
	UINT uFlags);

LONG
__stdcall
TabbedTextOutA(
	HDC hdc,
	int x,
	int y,
	LPCSTR lpString,
	int chCount,
	int nTabPositions,
	const INT* lpnTabStopPositions,
	int nTabOrigin);

LONG
__stdcall
TabbedTextOutW(
	HDC hdc,
	int x,
	int y,
	LPCWSTR lpString,
	int chCount,
	int nTabPositions,
	const INT* lpnTabStopPositions,
	int nTabOrigin);

DWORD
__stdcall
GetTabbedTextExtentA(
	HDC hdc,
	LPCSTR lpString,
	int chCount,
	int nTabPositions,
	const INT* lpnTabStopPositions);

DWORD
__stdcall
GetTabbedTextExtentW(
	HDC hdc,
	LPCWSTR lpString,
	int chCount,
	int nTabPositions,
	const INT* lpnTabStopPositions);

BOOL
__stdcall
UpdateWindow(
	HWND hWnd);

HWND
__stdcall
SetActiveWindow(
	HWND hWnd);

HWND
__stdcall
GetForegroundWindow(
	void);

BOOL
__stdcall
PaintDesktop(
	HDC hdc);

void
__stdcall
SwitchToThisWindow(
	HWND hwnd,
	BOOL fUnknown);

BOOL
__stdcall
SetForegroundWindow(
	HWND hWnd);

BOOL
__stdcall
AllowSetForegroundWindow(
	DWORD dwProcessId);

BOOL
__stdcall
LockSetForegroundWindow(
	UINT uLockCode);

HWND
__stdcall
WindowFromDC(
	HDC hDC);

HDC
__stdcall
GetDC(
	HWND hWnd);

HDC
__stdcall
GetDCEx(
	HWND hWnd,
	HRGN hrgnClip,
	DWORD flags);

HDC
__stdcall
GetWindowDC(
	HWND hWnd);

int
__stdcall
ReleaseDC(
	HWND hWnd,
	HDC hDC);

HDC
__stdcall
BeginPaint(
	HWND hWnd,
	LPPAINTSTRUCT lpPaint);

BOOL
__stdcall
EndPaint(
	HWND hWnd,
	const PAINTSTRUCT* lpPaint);

BOOL
__stdcall
GetUpdateRect(
	HWND hWnd,
	LPRECT lpRect,
	BOOL bErase);

int
__stdcall
GetUpdateRgn(
	HWND hWnd,
	HRGN hRgn,
	BOOL bErase);

int
__stdcall
SetWindowRgn(
	HWND hWnd,
	HRGN hRgn,
	BOOL bRedraw);

int
__stdcall
GetWindowRgn(
	HWND hWnd,
	HRGN hRgn);

int
__stdcall
GetWindowRgnBox(
	HWND hWnd,
	LPRECT lprc);

int
__stdcall
ExcludeUpdateRgn(
	HDC hDC,
	HWND hWnd);

BOOL
__stdcall
InvalidateRect(
	HWND hWnd,
	const RECT* lpRect,
	BOOL bErase);

BOOL
__stdcall
ValidateRect(
	HWND hWnd,
	const RECT* lpRect);

BOOL
__stdcall
InvalidateRgn(
	HWND hWnd,
	HRGN hRgn,
	BOOL bErase);

BOOL
__stdcall
ValidateRgn(
	HWND hWnd,
	HRGN hRgn);

BOOL
__stdcall
RedrawWindow(
	HWND hWnd,
	const RECT* lprcUpdate,
	HRGN hrgnUpdate,
	UINT flags);

BOOL
__stdcall
LockWindowUpdate(
	HWND hWndLock);

BOOL
__stdcall
ScrollWindow(
	HWND hWnd,
	int XAmount,
	int YAmount,
	const RECT* lpRect,
	const RECT* lpClipRect);

BOOL
__stdcall
ScrollDC(
	HDC hDC,
	int dx,
	int dy,
	const RECT* lprcScroll,
	const RECT* lprcClip,
	HRGN hrgnUpdate,
	LPRECT lprcUpdate);

int
__stdcall
ScrollWindowEx(
	HWND hWnd,
	int dx,
	int dy,
	const RECT* prcScroll,
	const RECT* prcClip,
	HRGN hrgnUpdate,
	LPRECT prcUpdate,
	UINT flags);

int
__stdcall
SetScrollPos(
	HWND hWnd,
	int nBar,
	int nPos,
	BOOL bRedraw);

int
__stdcall
GetScrollPos(
	HWND hWnd,
	int nBar);

BOOL
__stdcall
SetScrollRange(
	HWND hWnd,
	int nBar,
	int nMinPos,
	int nMaxPos,
	BOOL bRedraw);

BOOL
__stdcall
GetScrollRange(
	HWND hWnd,
	int nBar,
	LPINT lpMinPos,
	LPINT lpMaxPos);

BOOL
__stdcall
ShowScrollBar(
	HWND hWnd,
	int wBar,
	BOOL bShow);

BOOL
__stdcall
EnableScrollBar(
	HWND hWnd,
	UINT wSBflags,
	UINT wArrows);

BOOL
__stdcall
SetPropA(
	HWND hWnd,
	LPCSTR lpString,
	HANDLE hData);

BOOL
__stdcall
SetPropW(
	HWND hWnd,
	LPCWSTR lpString,
	HANDLE hData);

HANDLE
__stdcall
GetPropA(
	HWND hWnd,
	LPCSTR lpString);

HANDLE
__stdcall
GetPropW(
	HWND hWnd,
	LPCWSTR lpString);

HANDLE
__stdcall
RemovePropA(
	HWND hWnd,
	LPCSTR lpString);

HANDLE
__stdcall
RemovePropW(
	HWND hWnd,
	LPCWSTR lpString);

int
__stdcall
EnumPropsExA(
	HWND hWnd,
	PROPENUMPROCEXA lpEnumFunc,
	LPARAM lParam);

int
__stdcall
EnumPropsExW(
	HWND hWnd,
	PROPENUMPROCEXW lpEnumFunc,
	LPARAM lParam);

int
__stdcall
EnumPropsA(
	HWND hWnd,
	PROPENUMPROCA lpEnumFunc);

int
__stdcall
EnumPropsW(
	HWND hWnd,
	PROPENUMPROCW lpEnumFunc);

BOOL
__stdcall
SetWindowTextA(
	HWND hWnd,
	LPCSTR lpString);

BOOL
__stdcall
SetWindowTextW(
	HWND hWnd,
	LPCWSTR lpString);

int
__stdcall
GetWindowTextA(
	HWND hWnd,
	LPSTR lpString,
	int nMaxCount);

int
__stdcall
GetWindowTextW(
	HWND hWnd,
	LPWSTR lpString,
	int nMaxCount);

int
__stdcall
GetWindowTextLengthA(
	HWND hWnd);

int
__stdcall
GetWindowTextLengthW(
	HWND hWnd);

BOOL
__stdcall
GetClientRect(
	HWND hWnd,
	LPRECT lpRect);

BOOL
__stdcall
GetWindowRect(
	HWND hWnd,
	LPRECT lpRect);

BOOL
__stdcall
AdjustWindowRect(
	LPRECT lpRect,
	DWORD dwStyle,
	BOOL bMenu);

BOOL
__stdcall
AdjustWindowRectEx(
	LPRECT lpRect,
	DWORD dwStyle,
	BOOL bMenu,
	DWORD dwExStyle);

BOOL
__stdcall
AdjustWindowRectExForDpi(
	LPRECT lpRect,
	DWORD dwStyle,
	BOOL bMenu,
	DWORD dwExStyle,
	UINT dpi);
typedef struct tagHELPINFO
{
	UINT    cbSize;
	int     iContextType;
	int     iCtrlId;
	HANDLE  hItemHandle;
	DWORD_PTR dwContextId;
	POINT   MousePos;
}  HELPINFO, * LPHELPINFO;

BOOL
__stdcall
SetWindowContextHelpId(
	HWND,
	DWORD);

DWORD
__stdcall
GetWindowContextHelpId(
	HWND);

BOOL
__stdcall
SetMenuContextHelpId(
	HMENU,
	DWORD);

DWORD
__stdcall
GetMenuContextHelpId(
	HMENU);

int
__stdcall
MessageBoxA(
	HWND hWnd,
	LPCSTR lpText,
	LPCSTR lpCaption,
	UINT uType);

int
__stdcall
MessageBoxW(
	HWND hWnd,
	LPCWSTR lpText,
	LPCWSTR lpCaption,
	UINT uType);

int
__stdcall
MessageBoxExA(
	HWND hWnd,
	LPCSTR lpText,
	LPCSTR lpCaption,
	UINT uType,
	WORD wLanguageId);

int
__stdcall
MessageBoxExW(
	HWND hWnd,
	LPCWSTR lpText,
	LPCWSTR lpCaption,
	UINT uType,
	WORD wLanguageId);
typedef void(__stdcall* MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef struct tagMSGBOXPARAMSA
{
	UINT        cbSize;
	HWND        hwndOwner;
	HINSTANCE   hInstance;
	LPCSTR      lpszText;
	LPCSTR      lpszCaption;
	DWORD       dwStyle;
	LPCSTR      lpszIcon;
	DWORD_PTR   dwContextHelpId;
	MSGBOXCALLBACK      lpfnMsgBoxCallback;
	DWORD       dwLanguageId;
} MSGBOXPARAMSA, * PMSGBOXPARAMSA, * LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
	UINT        cbSize;
	HWND        hwndOwner;
	HINSTANCE   hInstance;
	LPCWSTR     lpszText;
	LPCWSTR     lpszCaption;
	DWORD       dwStyle;
	LPCWSTR     lpszIcon;
	DWORD_PTR   dwContextHelpId;
	MSGBOXCALLBACK      lpfnMsgBoxCallback;
	DWORD       dwLanguageId;
} MSGBOXPARAMSW, * PMSGBOXPARAMSW, * LPMSGBOXPARAMSW;
typedef MSGBOXPARAMSW MSGBOXPARAMS;
typedef PMSGBOXPARAMSW PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSW LPMSGBOXPARAMS;

int
__stdcall
MessageBoxIndirectA(
	const MSGBOXPARAMSA* lpmbp);

int
__stdcall
MessageBoxIndirectW(
	const MSGBOXPARAMSW* lpmbp);

BOOL
__stdcall
MessageBeep(
	UINT uType);

int
__stdcall
ShowCursor(
	BOOL bShow);

BOOL
__stdcall
SetCursorPos(
	int X,
	int Y);

BOOL
__stdcall
SetPhysicalCursorPos(
	int X,
	int Y);

HCURSOR
__stdcall
SetCursor(
	HCURSOR hCursor);

BOOL
__stdcall
GetCursorPos(
	LPPOINT lpPoint);

BOOL
__stdcall
GetPhysicalCursorPos(
	LPPOINT lpPoint);

BOOL
__stdcall
GetClipCursor(
	LPRECT lpRect);

HCURSOR
__stdcall
GetCursor(
	void);

BOOL
__stdcall
CreateCaret(
	HWND hWnd,
	HBITMAP hBitmap,
	int nWidth,
	int nHeight);

UINT
__stdcall
GetCaretBlinkTime(
	void);

BOOL
__stdcall
SetCaretBlinkTime(
	UINT uMSeconds);

BOOL
__stdcall
DestroyCaret(
	void);

BOOL
__stdcall
HideCaret(
	HWND hWnd);

BOOL
__stdcall
ShowCaret(
	HWND hWnd);

BOOL
__stdcall
SetCaretPos(
	int X,
	int Y);

BOOL
__stdcall
GetCaretPos(
	LPPOINT lpPoint);

BOOL
__stdcall
ClientToScreen(
	HWND hWnd,
	LPPOINT lpPoint);

BOOL
__stdcall
ScreenToClient(
	HWND hWnd,
	LPPOINT lpPoint);

BOOL
__stdcall
LogicalToPhysicalPoint(
	HWND hWnd,
	LPPOINT lpPoint);

BOOL
__stdcall
PhysicalToLogicalPoint(
	HWND hWnd,
	LPPOINT lpPoint);

BOOL
__stdcall
LogicalToPhysicalPointForPerMonitorDPI(
	HWND hWnd,
	LPPOINT lpPoint);

BOOL
__stdcall
PhysicalToLogicalPointForPerMonitorDPI(
	HWND hWnd,
	LPPOINT lpPoint);

int
__stdcall
MapWindowPoints(
	HWND hWndFrom,
	HWND hWndTo,
	LPPOINT lpPoints,
	UINT cPoints);

HWND
__stdcall
WindowFromPoint(
	POINT Point);

HWND
__stdcall
WindowFromPhysicalPoint(
	POINT Point);

HWND
__stdcall
ChildWindowFromPoint(
	HWND hWndParent,
	POINT Point);

BOOL
__stdcall
ClipCursor(
	const RECT* lpRect);

HWND
__stdcall
ChildWindowFromPointEx(
	HWND hwnd,
	POINT pt,
	UINT flags);

DWORD
__stdcall
GetSysColor(
	int nIndex);

HBRUSH
__stdcall
GetSysColorBrush(
	int nIndex);

BOOL
__stdcall
SetSysColors(
	int cElements,
	const INT* lpaElements,
	const COLORREF* lpaRgbValues);

BOOL
__stdcall
DrawFocusRect(
	HDC hDC,
	const RECT* lprc);

int
__stdcall
FillRect(
	HDC hDC,
	const RECT* lprc,
	HBRUSH hbr);

int
__stdcall
FrameRect(
	HDC hDC,
	const RECT* lprc,
	HBRUSH hbr);

BOOL
__stdcall
InvertRect(
	HDC hDC,
	const RECT* lprc);

BOOL
__stdcall
SetRect(
	LPRECT lprc,
	int xLeft,
	int yTop,
	int xRight,
	int yBottom);

BOOL
__stdcall
SetRectEmpty(
	LPRECT lprc);

BOOL
__stdcall
CopyRect(
	LPRECT lprcDst,
	const RECT* lprcSrc);

BOOL
__stdcall
InflateRect(
	LPRECT lprc,
	int dx,
	int dy);

BOOL
__stdcall
IntersectRect(
	LPRECT lprcDst,
	const RECT* lprcSrc1,
	const RECT* lprcSrc2);

BOOL
__stdcall
UnionRect(
	LPRECT lprcDst,
	const RECT* lprcSrc1,
	const RECT* lprcSrc2);

BOOL
__stdcall
SubtractRect(
	LPRECT lprcDst,
	const RECT* lprcSrc1,
	const RECT* lprcSrc2);

BOOL
__stdcall
OffsetRect(
	LPRECT lprc,
	int dx,
	int dy);

BOOL
__stdcall
IsRectEmpty(
	const RECT* lprc);

BOOL
__stdcall
EqualRect(
	const RECT* lprc1,
	const RECT* lprc2);

BOOL
__stdcall
PtInRect(
	const RECT* lprc,
	POINT pt);

WORD
__stdcall
GetWindowWord(
	HWND hWnd,
	int nIndex);

WORD
__stdcall
SetWindowWord(
	HWND hWnd,
	int nIndex,
	WORD wNewWord);

LONG
__stdcall
GetWindowLongA(
	HWND hWnd,
	int nIndex);

LONG
__stdcall
GetWindowLongW(
	HWND hWnd,
	int nIndex);

LONG
__stdcall
SetWindowLongA(
	HWND hWnd,
	int nIndex,
	LONG dwNewLong);

LONG
__stdcall
SetWindowLongW(
	HWND hWnd,
	int nIndex,
	LONG dwNewLong);

LONG_PTR
__stdcall
GetWindowLongPtrA(
	HWND hWnd,
	int nIndex);

LONG_PTR
__stdcall
GetWindowLongPtrW(
	HWND hWnd,
	int nIndex);

LONG_PTR
__stdcall
SetWindowLongPtrA(
	HWND hWnd,
	int nIndex,
	LONG_PTR dwNewLong);

LONG_PTR
__stdcall
SetWindowLongPtrW(
	HWND hWnd,
	int nIndex,
	LONG_PTR dwNewLong);

WORD
__stdcall
GetClassWord(
	HWND hWnd,
	int nIndex);

WORD
__stdcall
SetClassWord(
	HWND hWnd,
	int nIndex,
	WORD wNewWord);

DWORD
__stdcall
GetClassLongA(
	HWND hWnd,
	int nIndex);

DWORD
__stdcall
GetClassLongW(
	HWND hWnd,
	int nIndex);

DWORD
__stdcall
SetClassLongA(
	HWND hWnd,
	int nIndex,
	LONG dwNewLong);

DWORD
__stdcall
SetClassLongW(
	HWND hWnd,
	int nIndex,
	LONG dwNewLong);

ULONG_PTR
__stdcall
GetClassLongPtrA(
	HWND hWnd,
	int nIndex);

ULONG_PTR
__stdcall
GetClassLongPtrW(
	HWND hWnd,
	int nIndex);

ULONG_PTR
__stdcall
SetClassLongPtrA(
	HWND hWnd,
	int nIndex,
	LONG_PTR dwNewLong);

ULONG_PTR
__stdcall
SetClassLongPtrW(
	HWND hWnd,
	int nIndex,
	LONG_PTR dwNewLong);

BOOL
__stdcall
GetProcessDefaultLayout(
	DWORD* pdwDefaultLayout);

BOOL
__stdcall
SetProcessDefaultLayout(
	DWORD dwDefaultLayout);

HWND
__stdcall
GetDesktopWindow(
	void);

HWND
__stdcall
GetParent(
	HWND hWnd);

HWND
__stdcall
SetParent(
	HWND hWndChild,
	HWND hWndNewParent);

BOOL
__stdcall
EnumChildWindows(
	HWND hWndParent,
	WNDENUMPROC lpEnumFunc,
	LPARAM lParam);

HWND
__stdcall
FindWindowA(
	LPCSTR lpClassName,
	LPCSTR lpWindowName);

HWND
__stdcall
FindWindowW(
	LPCWSTR lpClassName,
	LPCWSTR lpWindowName);

HWND
__stdcall
FindWindowExA(
	HWND hWndParent,
	HWND hWndChildAfter,
	LPCSTR lpszClass,
	LPCSTR lpszWindow);

HWND
__stdcall
FindWindowExW(
	HWND hWndParent,
	HWND hWndChildAfter,
	LPCWSTR lpszClass,
	LPCWSTR lpszWindow);

HWND
__stdcall
GetShellWindow(
	void);

BOOL
__stdcall
RegisterShellHookWindow(
	HWND hwnd);

BOOL
__stdcall
DeregisterShellHookWindow(
	HWND hwnd);

BOOL
__stdcall
EnumWindows(
	WNDENUMPROC lpEnumFunc,
	LPARAM lParam);

BOOL
__stdcall
EnumThreadWindows(
	DWORD dwThreadId,
	WNDENUMPROC lpfn,
	LPARAM lParam);

int
__stdcall
GetClassNameA(
	HWND hWnd,
	LPSTR lpClassName,
	int nMaxCount
);

int
__stdcall
GetClassNameW(
	HWND hWnd,
	LPWSTR lpClassName,
	int nMaxCount
);

HWND
__stdcall
GetTopWindow(
	HWND hWnd);

DWORD
__stdcall
GetWindowThreadProcessId(
	HWND hWnd,
	LPDWORD lpdwProcessId);

BOOL
__stdcall
IsGUIThread(
	BOOL bConvert);

HWND
__stdcall
GetLastActivePopup(
	HWND hWnd);

HWND
__stdcall
GetWindow(
	HWND hWnd,
	UINT uCmd);

HHOOK
__stdcall
SetWindowsHookA(
	int nFilterType,
	HOOKPROC pfnFilterProc);

HHOOK
__stdcall
SetWindowsHookW(
	int nFilterType,
	HOOKPROC pfnFilterProc);

BOOL
__stdcall
UnhookWindowsHook(
	int nCode,
	HOOKPROC pfnFilterProc);

HHOOK
__stdcall
SetWindowsHookExA(
	int idHook,
	HOOKPROC lpfn,
	HINSTANCE hmod,
	DWORD dwThreadId);

HHOOK
__stdcall
SetWindowsHookExW(
	int idHook,
	HOOKPROC lpfn,
	HINSTANCE hmod,
	DWORD dwThreadId);

BOOL
__stdcall
UnhookWindowsHookEx(
	HHOOK hhk);

LRESULT
__stdcall
CallNextHookEx(
	HHOOK hhk,
	int nCode,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
CheckMenuRadioItem(
	HMENU hmenu,
	UINT first,
	UINT last,
	UINT check,
	UINT flags);
typedef struct {
	WORD versionNumber;
	WORD offset;
} MENUITEMTEMPLATEHEADER, * PMENUITEMTEMPLATEHEADER;
typedef struct {
	WORD mtOption;
	WORD mtID;
	WCHAR mtString[1];
} MENUITEMTEMPLATE, * PMENUITEMTEMPLATE;

HBITMAP
__stdcall
LoadBitmapA(
	HINSTANCE hInstance,
	LPCSTR lpBitmapName);

HBITMAP
__stdcall
LoadBitmapW(
	HINSTANCE hInstance,
	LPCWSTR lpBitmapName);

HCURSOR
__stdcall
LoadCursorA(
	HINSTANCE hInstance,
	LPCSTR lpCursorName);

HCURSOR
__stdcall
LoadCursorW(
	HINSTANCE hInstance,
	LPCWSTR lpCursorName);

HCURSOR
__stdcall
LoadCursorFromFileA(
	LPCSTR lpFileName);

HCURSOR
__stdcall
LoadCursorFromFileW(
	LPCWSTR lpFileName);

HCURSOR
__stdcall
CreateCursor(
	HINSTANCE hInst,
	int xHotSpot,
	int yHotSpot,
	int nWidth,
	int nHeight,
	const void* pvANDPlane,
	const void* pvXORPlane);

BOOL
__stdcall
DestroyCursor(
	HCURSOR hCursor);

BOOL
__stdcall
SetSystemCursor(
	HCURSOR hcur,
	DWORD id);
typedef struct _ICONINFO {
	BOOL    fIcon;
	DWORD   xHotspot;
	DWORD   yHotspot;
	HBITMAP hbmMask;
	HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO* PICONINFO;

HICON
__stdcall
LoadIconA(
	HINSTANCE hInstance,
	LPCSTR lpIconName);

HICON
__stdcall
LoadIconW(
	HINSTANCE hInstance,
	LPCWSTR lpIconName);

UINT
__stdcall
PrivateExtractIconsA(
	LPCSTR szFileName,
	int nIconIndex,
	int cxIcon,
	int cyIcon,
	HICON* phicon,
	UINT* piconid,
	UINT nIcons,
	UINT flags);

UINT
__stdcall
PrivateExtractIconsW(
	LPCWSTR szFileName,
	int nIconIndex,
	int cxIcon,
	int cyIcon,
	HICON* phicon,
	UINT* piconid,
	UINT nIcons,
	UINT flags);

HICON
__stdcall
CreateIcon(
	HINSTANCE hInstance,
	int nWidth,
	int nHeight,
	BYTE cPlanes,
	BYTE cBitsPixel,
	const BYTE* lpbANDbits,
	const BYTE* lpbXORbits);

BOOL
__stdcall
DestroyIcon(
	HICON hIcon);

int
__stdcall
LookupIconIdFromDirectory(
	PBYTE presbits,
	BOOL fIcon);

int
__stdcall
LookupIconIdFromDirectoryEx(
	PBYTE presbits,
	BOOL fIcon,
	int cxDesired,
	int cyDesired,
	UINT Flags);

HICON
__stdcall
CreateIconFromResource(
	PBYTE presbits,
	DWORD dwResSize,
	BOOL fIcon,
	DWORD dwVer);

HICON
__stdcall
CreateIconFromResourceEx(
	PBYTE presbits,
	DWORD dwResSize,
	BOOL fIcon,
	DWORD dwVer,
	int cxDesired,
	int cyDesired,
	UINT Flags);
typedef struct tagCURSORSHAPE
{
	int     xHotSpot;
	int     yHotSpot;
	int     cx;
	int     cy;
	int     cbWidth;
	BYTE    Planes;
	BYTE    BitsPixel;
} CURSORSHAPE, * LPCURSORSHAPE;

HANDLE
__stdcall
LoadImageA(
	HINSTANCE hInst,
	LPCSTR name,
	UINT type,
	int cx,
	int cy,
	UINT fuLoad);

HANDLE
__stdcall
LoadImageW(
	HINSTANCE hInst,
	LPCWSTR name,
	UINT type,
	int cx,
	int cy,
	UINT fuLoad);

HANDLE
__stdcall
CopyImage(
	HANDLE h,
	UINT type,
	int cx,
	int cy,
	UINT flags);
BOOL __stdcall DrawIconEx(
	HDC hdc,
	int xLeft,
	int yTop,
	HICON hIcon,
	int cxWidth,
	int cyWidth,
	UINT istepIfAniCur,
	HBRUSH hbrFlickerFreeDraw,
	UINT diFlags);

HICON
__stdcall
CreateIconIndirect(
	PICONINFO piconinfo);

HICON
__stdcall
CopyIcon(
	HICON hIcon);

BOOL
__stdcall
GetIconInfo(
	HICON hIcon,
	PICONINFO piconinfo);
typedef struct _ICONINFOEXA {
	DWORD   cbSize;
	BOOL    fIcon;
	DWORD   xHotspot;
	DWORD   yHotspot;
	HBITMAP hbmMask;
	HBITMAP hbmColor;
	WORD    wResID;
	CHAR    szModName[260];
	CHAR    szResName[260];
} ICONINFOEXA, * PICONINFOEXA;
typedef struct _ICONINFOEXW {
	DWORD   cbSize;
	BOOL    fIcon;
	DWORD   xHotspot;
	DWORD   yHotspot;
	HBITMAP hbmMask;
	HBITMAP hbmColor;
	WORD    wResID;
	WCHAR   szModName[260];
	WCHAR   szResName[260];
} ICONINFOEXW, * PICONINFOEXW;
typedef ICONINFOEXW ICONINFOEX;
typedef PICONINFOEXW PICONINFOEX;

BOOL
__stdcall
GetIconInfoExA(
	HICON hicon,
	PICONINFOEXA piconinfo);

BOOL
__stdcall
GetIconInfoExW(
	HICON hicon,
	PICONINFOEXW piconinfo);
typedef enum {
	EDIT_CONTROL_FEATURE_ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0,
	EDIT_CONTROL_FEATURE_PASTE_NOTIFICATIONS = 1,
} EDIT_CONTROL_FEATURE;

BOOL
__stdcall
IsDialogMessageA(
	HWND hDlg,
	LPMSG lpMsg);

BOOL
__stdcall
IsDialogMessageW(
	HWND hDlg,
	LPMSG lpMsg);

BOOL
__stdcall
MapDialogRect(
	HWND hDlg,
	LPRECT lpRect);

int
__stdcall
DlgDirListA(
	HWND hDlg,
	LPSTR lpPathSpec,
	int nIDListBox,
	int nIDStaticPath,
	UINT uFileType);

int
__stdcall
DlgDirListW(
	HWND hDlg,
	LPWSTR lpPathSpec,
	int nIDListBox,
	int nIDStaticPath,
	UINT uFileType);

BOOL
__stdcall
DlgDirSelectExA(
	HWND hwndDlg,
	LPSTR lpString,
	int chCount,
	int idListBox);

BOOL
__stdcall
DlgDirSelectExW(
	HWND hwndDlg,
	LPWSTR lpString,
	int chCount,
	int idListBox);

int
__stdcall
DlgDirListComboBoxA(
	HWND hDlg,
	LPSTR lpPathSpec,
	int nIDComboBox,
	int nIDStaticPath,
	UINT uFiletype);

int
__stdcall
DlgDirListComboBoxW(
	HWND hDlg,
	LPWSTR lpPathSpec,
	int nIDComboBox,
	int nIDStaticPath,
	UINT uFiletype);

BOOL
__stdcall
DlgDirSelectComboBoxExA(
	HWND hwndDlg,
	LPSTR lpString,
	int cchOut,
	int idComboBox);

BOOL
__stdcall
DlgDirSelectComboBoxExW(
	HWND hwndDlg,
	LPWSTR lpString,
	int cchOut,
	int idComboBox);
typedef struct tagSCROLLINFO
{
	UINT    cbSize;
	UINT    fMask;
	int     nMin;
	int     nMax;
	UINT    nPage;
	int     nPos;
	int     nTrackPos;
}   SCROLLINFO, * LPSCROLLINFO;
typedef SCROLLINFO const* LPCSCROLLINFO;

int
__stdcall
SetScrollInfo(
	HWND hwnd,
	int nBar,
	LPCSCROLLINFO lpsi,
	BOOL redraw);

BOOL
__stdcall
GetScrollInfo(
	HWND hwnd,
	int nBar,
	LPSCROLLINFO lpsi);
typedef struct tagMDICREATESTRUCTA {
	LPCSTR   szClass;
	LPCSTR   szTitle;
	HANDLE hOwner;
	int x;
	int y;
	int cx;
	int cy;
	DWORD style;
	LPARAM lParam;
} MDICREATESTRUCTA, * LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
	LPCWSTR  szClass;
	LPCWSTR  szTitle;
	HANDLE hOwner;
	int x;
	int y;
	int cx;
	int cy;
	DWORD style;
	LPARAM lParam;
} MDICREATESTRUCTW, * LPMDICREATESTRUCTW;
typedef MDICREATESTRUCTW MDICREATESTRUCT;
typedef LPMDICREATESTRUCTW LPMDICREATESTRUCT;
typedef struct tagCLIENTCREATESTRUCT {
	HANDLE hWindowMenu;
	UINT idFirstChild;
} CLIENTCREATESTRUCT, * LPCLIENTCREATESTRUCT;

LRESULT
__stdcall
DefFrameProcA(
	HWND hWnd,
	HWND hWndMDIClient,
	UINT uMsg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
DefFrameProcW(
	HWND hWnd,
	HWND hWndMDIClient,
	UINT uMsg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
DefMDIChildProcA(
	HWND hWnd,
	UINT uMsg,
	WPARAM wParam,
	LPARAM lParam);

LRESULT
__stdcall
DefMDIChildProcW(
	HWND hWnd,
	UINT uMsg,
	WPARAM wParam,
	LPARAM lParam);

BOOL
__stdcall
TranslateMDISysAccel(
	HWND hWndClient,
	LPMSG lpMsg);

UINT
__stdcall
ArrangeIconicWindows(
	HWND hWnd);

HWND
__stdcall
CreateMDIWindowA(
	LPCSTR lpClassName,
	LPCSTR lpWindowName,
	DWORD dwStyle,
	int X,
	int Y,
	int nWidth,
	int nHeight,
	HWND hWndParent,
	HINSTANCE hInstance,
	LPARAM lParam);

HWND
__stdcall
CreateMDIWindowW(
	LPCWSTR lpClassName,
	LPCWSTR lpWindowName,
	DWORD dwStyle,
	int X,
	int Y,
	int nWidth,
	int nHeight,
	HWND hWndParent,
	HINSTANCE hInstance,
	LPARAM lParam);

WORD
__stdcall
TileWindows(
	HWND hwndParent,
	UINT wHow,
	const RECT* lpRect,
	UINT cKids,
	const HWND* lpKids);

WORD
__stdcall CascadeWindows(
	HWND hwndParent,
	UINT wHow,
	const RECT* lpRect,
	UINT cKids,
	const HWND* lpKids);
typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {
	DWORD  mkSize;
	CHAR   mkKeylist;
	CHAR   szKeyphrase[1];
} MULTIKEYHELPA, * PMULTIKEYHELPA, * LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {
	DWORD  mkSize;
	WCHAR  mkKeylist;
	WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, * PMULTIKEYHELPW, * LPMULTIKEYHELPW;
typedef MULTIKEYHELPW MULTIKEYHELP;
typedef PMULTIKEYHELPW PMULTIKEYHELP;
typedef LPMULTIKEYHELPW LPMULTIKEYHELP;
typedef struct tagHELPWININFOA {
	int  wStructSize;
	int  x;
	int  y;
	int  dx;
	int  dy;
	int  wMax;
	CHAR   rgchMember[2];
} HELPWININFOA, * PHELPWININFOA, * LPHELPWININFOA;
typedef struct tagHELPWININFOW {
	int  wStructSize;
	int  x;
	int  y;
	int  dx;
	int  dy;
	int  wMax;
	WCHAR  rgchMember[2];
} HELPWININFOW, * PHELPWININFOW, * LPHELPWININFOW;
typedef HELPWININFOW HELPWININFO;
typedef PHELPWININFOW PHELPWININFO;
typedef LPHELPWININFOW LPHELPWININFO;

BOOL
__stdcall
WinHelpA(
	HWND hWndMain,
	LPCSTR lpszHelp,
	UINT uCommand,
	ULONG_PTR dwData);

BOOL
__stdcall
WinHelpW(
	HWND hWndMain,
	LPCWSTR lpszHelp,
	UINT uCommand,
	ULONG_PTR dwData);

DWORD
__stdcall
GetGuiResources(
	HANDLE hProcess,
	DWORD uiFlags);
typedef struct tagTouchPredictionParameters
{
	UINT cbSize;
	UINT dwLatency;
	UINT dwSampleTime;
	UINT bUseHWTimeStamp;
} TOUCHPREDICTIONPARAMETERS, * PTOUCHPREDICTIONPARAMETERS;
typedef enum tagHANDEDNESS {
	HANDEDNESS_LEFT = 0,
	HANDEDNESS_RIGHT
} HANDEDNESS, * PHANDEDNESS;
typedef struct tagNONCLIENTMETRICSA
{
	UINT    cbSize;
	int     iBorderWidth;
	int     iScrollWidth;
	int     iScrollHeight;
	int     iCaptionWidth;
	int     iCaptionHeight;
	LOGFONTA lfCaptionFont;
	int     iSmCaptionWidth;
	int     iSmCaptionHeight;
	LOGFONTA lfSmCaptionFont;
	int     iMenuWidth;
	int     iMenuHeight;
	LOGFONTA lfMenuFont;
	LOGFONTA lfStatusFont;
	LOGFONTA lfMessageFont;
	int     iPaddedBorderWidth;
}   NONCLIENTMETRICSA, * PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
	UINT    cbSize;
	int     iBorderWidth;
	int     iScrollWidth;
	int     iScrollHeight;
	int     iCaptionWidth;
	int     iCaptionHeight;
	LOGFONTW lfCaptionFont;
	int     iSmCaptionWidth;
	int     iSmCaptionHeight;
	LOGFONTW lfSmCaptionFont;
	int     iMenuWidth;
	int     iMenuHeight;
	LOGFONTW lfMenuFont;
	LOGFONTW lfStatusFont;
	LOGFONTW lfMessageFont;
	int     iPaddedBorderWidth;
}   NONCLIENTMETRICSW, * PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;
typedef NONCLIENTMETRICSW NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSW PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSW LPNONCLIENTMETRICS;
typedef struct tagMINIMIZEDMETRICS
{
	UINT    cbSize;
	int     iWidth;
	int     iHorzGap;
	int     iVertGap;
	int     iArrange;
}   MINIMIZEDMETRICS, * PMINIMIZEDMETRICS, * LPMINIMIZEDMETRICS;
typedef struct tagICONMETRICSA
{
	UINT    cbSize;
	int     iHorzSpacing;
	int     iVertSpacing;
	int     iTitleWrap;
	LOGFONTA lfFont;
}   ICONMETRICSA, * PICONMETRICSA, * LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
	UINT    cbSize;
	int     iHorzSpacing;
	int     iVertSpacing;
	int     iTitleWrap;
	LOGFONTW lfFont;
}   ICONMETRICSW, * PICONMETRICSW, * LPICONMETRICSW;
typedef ICONMETRICSW ICONMETRICS;
typedef PICONMETRICSW PICONMETRICS;
typedef LPICONMETRICSW LPICONMETRICS;
typedef struct tagANIMATIONINFO
{
	UINT    cbSize;
	int     iMinAnimate;
}   ANIMATIONINFO, * LPANIMATIONINFO;
typedef struct tagSERIALKEYSA
{
	UINT    cbSize;
	DWORD   dwFlags;
	LPSTR     lpszActivePort;
	LPSTR     lpszPort;
	UINT    iBaudRate;
	UINT    iPortState;
	UINT    iActive;
}   SERIALKEYSA, * LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
	UINT    cbSize;
	DWORD   dwFlags;
	LPWSTR    lpszActivePort;
	LPWSTR    lpszPort;
	UINT    iBaudRate;
	UINT    iPortState;
	UINT    iActive;
}   SERIALKEYSW, * LPSERIALKEYSW;
typedef SERIALKEYSW SERIALKEYS;
typedef LPSERIALKEYSW LPSERIALKEYS;
typedef struct tagHIGHCONTRASTA
{
	UINT    cbSize;
	DWORD   dwFlags;
	LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, * LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
	UINT    cbSize;
	DWORD   dwFlags;
	LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, * LPHIGHCONTRASTW;
typedef HIGHCONTRASTW HIGHCONTRAST;
typedef LPHIGHCONTRASTW LPHIGHCONTRAST;
typedef struct _VIDEOPARAMETERS {
	GUID  Guid;
	ULONG dwOffset;
	ULONG dwCommand;
	ULONG dwFlags;
	ULONG dwMode;
	ULONG dwTVStandard;
	ULONG dwAvailableModes;
	ULONG dwAvailableTVStandard;
	ULONG dwFlickerFilter;
	ULONG dwOverScanX;
	ULONG dwOverScanY;
	ULONG dwMaxUnscaledX;
	ULONG dwMaxUnscaledY;
	ULONG dwPositionX;
	ULONG dwPositionY;
	ULONG dwBrightness;
	ULONG dwContrast;
	ULONG dwCPType;
	ULONG dwCPCommand;
	ULONG dwCPStandard;
	ULONG dwCPKey;
	ULONG bCP_APSTriggerBits;
	UCHAR bOEMCopyProtection[256];
} VIDEOPARAMETERS, * PVIDEOPARAMETERS, * LPVIDEOPARAMETERS;

LONG
__stdcall
ChangeDisplaySettingsA(
	DEVMODEA* lpDevMode,
	DWORD dwFlags);

LONG
__stdcall
ChangeDisplaySettingsW(
	DEVMODEW* lpDevMode,
	DWORD dwFlags);

LONG
__stdcall
ChangeDisplaySettingsExA(
	LPCSTR lpszDeviceName,
	DEVMODEA* lpDevMode,
	HWND hwnd,
	DWORD dwflags,
	LPVOID lParam);

LONG
__stdcall
ChangeDisplaySettingsExW(
	LPCWSTR lpszDeviceName,
	DEVMODEW* lpDevMode,
	HWND hwnd,
	DWORD dwflags,
	LPVOID lParam);

BOOL
__stdcall
EnumDisplaySettingsA(
	LPCSTR lpszDeviceName,
	DWORD iModeNum,
	DEVMODEA* lpDevMode);

BOOL
__stdcall
EnumDisplaySettingsW(
	LPCWSTR lpszDeviceName,
	DWORD iModeNum,
	DEVMODEW* lpDevMode);

BOOL
__stdcall
EnumDisplaySettingsExA(
	LPCSTR lpszDeviceName,
	DWORD iModeNum,
	DEVMODEA* lpDevMode,
	DWORD dwFlags);

BOOL
__stdcall
EnumDisplaySettingsExW(
	LPCWSTR lpszDeviceName,
	DWORD iModeNum,
	DEVMODEW* lpDevMode,
	DWORD dwFlags);

BOOL
__stdcall
EnumDisplayDevicesA(
	LPCSTR lpDevice,
	DWORD iDevNum,
	PDISPLAY_DEVICEA lpDisplayDevice,
	DWORD dwFlags);

BOOL
__stdcall
EnumDisplayDevicesW(
	LPCWSTR lpDevice,
	DWORD iDevNum,
	PDISPLAY_DEVICEW lpDisplayDevice,
	DWORD dwFlags);

LONG
__stdcall
GetDisplayConfigBufferSizes(
	UINT32 flags,
	UINT32* numPathArrayElements,
	UINT32* numModeInfoArrayElements);

LONG
__stdcall
SetDisplayConfig(
	UINT32 numPathArrayElements,
	DISPLAYCONFIG_PATH_INFO* pathArray,
	UINT32 numModeInfoArrayElements,
	DISPLAYCONFIG_MODE_INFO* modeInfoArray,
	UINT32 flags);

LONG
__stdcall
QueryDisplayConfig(
	UINT32 flags,
	UINT32* numPathArrayElements,
	DISPLAYCONFIG_PATH_INFO* pathArray,
	UINT32* numModeInfoArrayElements,
	DISPLAYCONFIG_MODE_INFO* modeInfoArray,
	DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

LONG
__stdcall
DisplayConfigGetDeviceInfo(
	DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

LONG
__stdcall
DisplayConfigSetDeviceInfo(
	DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

BOOL
__stdcall
SystemParametersInfoA(
	UINT uiAction,
	UINT uiParam,
	PVOID pvParam,
	UINT fWinIni);

BOOL
__stdcall
SystemParametersInfoW(
	UINT uiAction,
	UINT uiParam,
	PVOID pvParam,
	UINT fWinIni);

BOOL
__stdcall
SystemParametersInfoForDpi(
	UINT uiAction,
	UINT uiParam,
	PVOID pvParam,
	UINT fWinIni,
	UINT dpi);
typedef struct tagFILTERKEYS
{
	UINT  cbSize;
	DWORD dwFlags;
	DWORD iWaitMSec;
	DWORD iDelayMSec;
	DWORD iRepeatMSec;
	DWORD iBounceMSec;
} FILTERKEYS, * LPFILTERKEYS;
typedef struct tagSTICKYKEYS
{
	UINT  cbSize;
	DWORD dwFlags;
} STICKYKEYS, * LPSTICKYKEYS;
typedef struct tagMOUSEKEYS
{
	UINT cbSize;
	DWORD dwFlags;
	DWORD iMaxSpeed;
	DWORD iTimeToMaxSpeed;
	DWORD iCtrlSpeed;
	DWORD dwReserved1;
	DWORD dwReserved2;
} MOUSEKEYS, * LPMOUSEKEYS;
typedef struct tagACCESSTIMEOUT
{
	UINT  cbSize;
	DWORD dwFlags;
	DWORD iTimeOutMSec;
} ACCESSTIMEOUT, * LPACCESSTIMEOUT;
typedef struct tagSOUNDSENTRYA
{
	UINT cbSize;
	DWORD dwFlags;
	DWORD iFSTextEffect;
	DWORD iFSTextEffectMSec;
	DWORD iFSTextEffectColorBits;
	DWORD iFSGrafEffect;
	DWORD iFSGrafEffectMSec;
	DWORD iFSGrafEffectColor;
	DWORD iWindowsEffect;
	DWORD iWindowsEffectMSec;
	LPSTR   lpszWindowsEffectDLL;
	DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, * LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
	UINT cbSize;
	DWORD dwFlags;
	DWORD iFSTextEffect;
	DWORD iFSTextEffectMSec;
	DWORD iFSTextEffectColorBits;
	DWORD iFSGrafEffect;
	DWORD iFSGrafEffectMSec;
	DWORD iFSGrafEffectColor;
	DWORD iWindowsEffect;
	DWORD iWindowsEffectMSec;
	LPWSTR  lpszWindowsEffectDLL;
	DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, * LPSOUNDSENTRYW;
typedef SOUNDSENTRYW SOUNDSENTRY;
typedef LPSOUNDSENTRYW LPSOUNDSENTRY;

BOOL
__stdcall
SoundSentry(void);
typedef struct tagTOGGLEKEYS
{
	UINT cbSize;
	DWORD dwFlags;
} TOGGLEKEYS, * LPTOGGLEKEYS;
typedef struct tagAUDIODESCRIPTION {
	UINT cbSize;
	BOOL Enabled;
	LCID Locale;
} AUDIODESCRIPTION, * LPAUDIODESCRIPTION;

void
__stdcall
SetDebugErrorLevel(
	DWORD dwLevel);

void
__stdcall
SetLastErrorEx(
	DWORD dwErrCode,
	DWORD dwType);

int
__stdcall
InternalGetWindowText(
	HWND hWnd,
	LPWSTR pString,
	int cchMaxCount);

BOOL
__stdcall
CancelShutdown(
	void);

HMONITOR
__stdcall
MonitorFromPoint(
	POINT pt,
	DWORD dwFlags);

HMONITOR
__stdcall
MonitorFromRect(
	LPCRECT lprc,
	DWORD dwFlags);

HMONITOR
__stdcall
MonitorFromWindow(
	HWND hwnd,
	DWORD dwFlags);
typedef struct tagMONITORINFO
{
	DWORD   cbSize;
	RECT    rcMonitor;
	RECT    rcWork;
	DWORD   dwFlags;
} MONITORINFO, * LPMONITORINFO;
typedef struct tagMONITORINFOEXA
{
	MONITORINFO;
	CHAR        szDevice[32];
} MONITORINFOEXA, * LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW
{
	MONITORINFO;
	WCHAR       szDevice[32];
} MONITORINFOEXW, * LPMONITORINFOEXW;
typedef MONITORINFOEXW MONITORINFOEX;
typedef LPMONITORINFOEXW LPMONITORINFOEX;

BOOL
__stdcall
GetMonitorInfoA(
	HMONITOR hMonitor,
	LPMONITORINFO lpmi);

BOOL
__stdcall
GetMonitorInfoW(
	HMONITOR hMonitor,
	LPMONITORINFO lpmi);
typedef BOOL(__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

BOOL
__stdcall
EnumDisplayMonitors(
	HDC hdc,
	LPCRECT lprcClip,
	MONITORENUMPROC lpfnEnum,
	LPARAM dwData);

void
__stdcall
NotifyWinEvent(
	DWORD event,
	HWND  hwnd,
	LONG  idObject,
	LONG  idChild);
typedef void(__stdcall* WINEVENTPROC)(
	HWINEVENTHOOK hWinEventHook,
	DWORD         event,
	HWND          hwnd,
	LONG          idObject,
	LONG          idChild,
	DWORD         idEventThread,
	DWORD         dwmsEventTime);

HWINEVENTHOOK
__stdcall
SetWinEventHook(
	DWORD eventMin,
	DWORD eventMax,
	HMODULE hmodWinEventProc,
	WINEVENTPROC pfnWinEventProc,
	DWORD idProcess,
	DWORD idThread,
	DWORD dwFlags);

BOOL
__stdcall
IsWinEventHookInstalled(
	DWORD event);

BOOL
__stdcall
UnhookWinEvent(
	HWINEVENTHOOK hWinEventHook);
typedef struct tagGUITHREADINFO
{
	DWORD   cbSize;
	DWORD   flags;
	HWND    hwndActive;
	HWND    hwndFocus;
	HWND    hwndCapture;
	HWND    hwndMenuOwner;
	HWND    hwndMoveSize;
	HWND    hwndCaret;
	RECT    rcCaret;
} GUITHREADINFO, * PGUITHREADINFO, * LPGUITHREADINFO;

BOOL
__stdcall
GetGUIThreadInfo(
	DWORD idThread,
	PGUITHREADINFO pgui);

BOOL
__stdcall
BlockInput(
	BOOL fBlockIt);

BOOL
__stdcall
SetProcessDPIAware(
	void);

BOOL
__stdcall
IsProcessDPIAware(
	void);

DPI_AWARENESS_CONTEXT
__stdcall
SetThreadDpiAwarenessContext(
	DPI_AWARENESS_CONTEXT dpiContext);

DPI_AWARENESS_CONTEXT
__stdcall
GetThreadDpiAwarenessContext(
	void);

DPI_AWARENESS_CONTEXT
__stdcall
GetWindowDpiAwarenessContext(
	HWND hwnd);

DPI_AWARENESS
__stdcall
GetAwarenessFromDpiAwarenessContext(
	DPI_AWARENESS_CONTEXT value);

UINT
__stdcall
GetDpiFromDpiAwarenessContext(
	DPI_AWARENESS_CONTEXT value);

BOOL
__stdcall
AreDpiAwarenessContextsEqual(
	DPI_AWARENESS_CONTEXT dpiContextA,
	DPI_AWARENESS_CONTEXT dpiContextB);

BOOL
__stdcall
IsValidDpiAwarenessContext(
	DPI_AWARENESS_CONTEXT value);

UINT
__stdcall
GetDpiForWindow(
	HWND hwnd);

UINT
__stdcall
GetDpiForSystem(
	void);

UINT
__stdcall
GetSystemDpiForProcess(
	HANDLE hProcess);

BOOL
__stdcall
EnableNonClientDpiScaling(
	HWND hwnd);

BOOL
__stdcall
InheritWindowMonitor(
	HWND hwnd,
	HWND hwndInherit);

BOOL
__stdcall
SetProcessDpiAwarenessContext(
	DPI_AWARENESS_CONTEXT value);

DPI_AWARENESS_CONTEXT
__stdcall
GetDpiAwarenessContextForProcess(
	HANDLE hProcess);

DPI_HOSTING_BEHAVIOR
__stdcall
SetThreadDpiHostingBehavior(
	DPI_HOSTING_BEHAVIOR value);

DPI_HOSTING_BEHAVIOR
__stdcall
GetThreadDpiHostingBehavior(void);

DPI_HOSTING_BEHAVIOR
__stdcall
GetWindowDpiHostingBehavior(
	HWND hwnd);

UINT
__stdcall
GetWindowModuleFileNameA(
	HWND hwnd,
	LPSTR pszFileName,
	UINT cchFileNameMax);

UINT
__stdcall
GetWindowModuleFileNameW(
	HWND hwnd,
	LPWSTR pszFileName,
	UINT cchFileNameMax);
typedef struct tagCURSORINFO
{
	DWORD   cbSize;
	DWORD   flags;
	HCURSOR hCursor;
	POINT   ptScreenPos;
} CURSORINFO, * PCURSORINFO, * LPCURSORINFO;

BOOL
__stdcall
GetCursorInfo(
	PCURSORINFO pci);
typedef struct tagWINDOWINFO
{
	DWORD cbSize;
	RECT rcWindow;
	RECT rcClient;
	DWORD dwStyle;
	DWORD dwExStyle;
	DWORD dwWindowStatus;
	UINT cxWindowBorders;
	UINT cyWindowBorders;
	ATOM atomWindowType;
	WORD wCreatorVersion;
} WINDOWINFO, * PWINDOWINFO, * LPWINDOWINFO;

BOOL
__stdcall
GetWindowInfo(
	HWND hwnd,
	PWINDOWINFO pwi);
typedef struct tagTITLEBARINFO
{
	DWORD cbSize;
	RECT rcTitleBar;
	DWORD rgstate[5 + 1];
} TITLEBARINFO, * PTITLEBARINFO, * LPTITLEBARINFO;

BOOL
__stdcall
GetTitleBarInfo(
	HWND hwnd,
	PTITLEBARINFO pti);
typedef struct tagTITLEBARINFOEX
{
	DWORD cbSize;
	RECT rcTitleBar;
	DWORD rgstate[5 + 1];
	RECT rgrect[5 + 1];
} TITLEBARINFOEX, * PTITLEBARINFOEX, * LPTITLEBARINFOEX;
typedef struct tagMENUBARINFO
{
	DWORD cbSize;
	RECT rcBar;
	HMENU hMenu;
	HWND hwndMenu;
	BOOL fBarFocused : 1;
	BOOL fFocused : 1;
	BOOL fUnused : 30;
} MENUBARINFO, * PMENUBARINFO, * LPMENUBARINFO;

BOOL
__stdcall
GetMenuBarInfo(
	HWND hwnd,
	LONG idObject,
	LONG idItem,
	PMENUBARINFO pmbi);
typedef struct tagSCROLLBARINFO
{
	DWORD cbSize;
	RECT rcScrollBar;
	int dxyLineButton;
	int xyThumbTop;
	int xyThumbBottom;
	int reserved;
	DWORD rgstate[5 + 1];
} SCROLLBARINFO, * PSCROLLBARINFO, * LPSCROLLBARINFO;

BOOL
__stdcall
GetScrollBarInfo(
	HWND hwnd,
	LONG idObject,
	PSCROLLBARINFO psbi);
typedef struct tagCOMBOBOXINFO
{
	DWORD cbSize;
	RECT rcItem;
	RECT rcButton;
	DWORD stateButton;
	HWND hwndCombo;
	HWND hwndItem;
	HWND hwndList;
} COMBOBOXINFO, * PCOMBOBOXINFO, * LPCOMBOBOXINFO;

BOOL
__stdcall
GetComboBoxInfo(
	HWND hwndCombo,
	PCOMBOBOXINFO pcbi);

HWND
__stdcall
GetAncestor(
	HWND hwnd,
	UINT gaFlags);

HWND
__stdcall
RealChildWindowFromPoint(
	HWND hwndParent,
	POINT ptParentClientCoords);

UINT
__stdcall
RealGetWindowClassA(
	HWND hwnd,
	LPSTR ptszClassName,
	UINT cchClassNameMax);

UINT
__stdcall
RealGetWindowClassW(
	HWND hwnd,
	LPWSTR ptszClassName,
	UINT cchClassNameMax);
typedef struct tagALTTABINFO
{
	DWORD cbSize;
	int cItems;
	int cColumns;
	int cRows;
	int iColFocus;
	int iRowFocus;
	int cxItem;
	int cyItem;
	POINT ptStart;
} ALTTABINFO, * PALTTABINFO, * LPALTTABINFO;

BOOL
__stdcall
GetAltTabInfoA(
	HWND hwnd,
	int iItem,
	PALTTABINFO pati,
	LPSTR pszItemText,
	UINT cchItemText);

BOOL
__stdcall
GetAltTabInfoW(
	HWND hwnd,
	int iItem,
	PALTTABINFO pati,
	LPWSTR pszItemText,
	UINT cchItemText);

DWORD
__stdcall
GetListBoxInfo(
	HWND hwnd);

BOOL
__stdcall
LockWorkStation(
	void);

BOOL
__stdcall
UserHandleGrantAccess(
	HANDLE hUserHandle,
	HANDLE hJob,
	BOOL   bGrant);
struct HRAWINPUT__ { int unused; }; typedef struct HRAWINPUT__* HRAWINPUT;
typedef struct tagRAWINPUTHEADER {
	DWORD dwType;
	DWORD dwSize;
	HANDLE hDevice;
	WPARAM wParam;
} RAWINPUTHEADER, * PRAWINPUTHEADER, * LPRAWINPUTHEADER;
typedef struct tagRAWMOUSE {
	USHORT usFlags;
	union {
		ULONG ulButtons;
		struct {
			USHORT  usButtonFlags;
			USHORT  usButtonData;
		};
	};
	ULONG ulRawButtons;
	LONG lLastX;
	LONG lLastY;
	ULONG ulExtraInformation;
} RAWMOUSE, * PRAWMOUSE, * LPRAWMOUSE;
typedef struct tagRAWKEYBOARD {
	USHORT MakeCode;
	USHORT Flags;
	USHORT Reserved;
	USHORT VKey;
	UINT   Message;
	ULONG ExtraInformation;
} RAWKEYBOARD, * PRAWKEYBOARD, * LPRAWKEYBOARD;
typedef struct tagRAWHID {
	DWORD dwSizeHid;
	DWORD dwCount;
	BYTE bRawData[1];
} RAWHID, * PRAWHID, * LPRAWHID;
typedef struct tagRAWINPUT {
	RAWINPUTHEADER header;
	union {
		RAWMOUSE    mouse;
		RAWKEYBOARD keyboard;
		RAWHID      hid;
	} data;
} RAWINPUT, * PRAWINPUT, * LPRAWINPUT;

UINT
__stdcall
GetRawInputData(
	HRAWINPUT hRawInput,
	UINT uiCommand,
	LPVOID pData,
	PUINT pcbSize,
	UINT cbSizeHeader);
typedef struct tagRID_DEVICE_INFO_MOUSE {
	DWORD dwId;
	DWORD dwNumberOfButtons;
	DWORD dwSampleRate;
	BOOL  fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, * PRID_DEVICE_INFO_MOUSE;
typedef struct tagRID_DEVICE_INFO_KEYBOARD {
	DWORD dwType;
	DWORD dwSubType;
	DWORD dwKeyboardMode;
	DWORD dwNumberOfFunctionKeys;
	DWORD dwNumberOfIndicators;
	DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, * PRID_DEVICE_INFO_KEYBOARD;
typedef struct tagRID_DEVICE_INFO_HID {
	DWORD dwVendorId;
	DWORD dwProductId;
	DWORD dwVersionNumber;
	USHORT usUsagePage;
	USHORT usUsage;
} RID_DEVICE_INFO_HID, * PRID_DEVICE_INFO_HID;
typedef struct tagRID_DEVICE_INFO {
	DWORD cbSize;
	DWORD dwType;
	union {
		RID_DEVICE_INFO_MOUSE mouse;
		RID_DEVICE_INFO_KEYBOARD keyboard;
		RID_DEVICE_INFO_HID hid;
	};
} RID_DEVICE_INFO, * PRID_DEVICE_INFO, * LPRID_DEVICE_INFO;

UINT
__stdcall
GetRawInputDeviceInfoA(
	HANDLE hDevice,
	UINT uiCommand,
	LPVOID pData,
	PUINT pcbSize);

UINT
__stdcall
GetRawInputDeviceInfoW(
	HANDLE hDevice,
	UINT uiCommand,
	LPVOID pData,
	PUINT pcbSize);

UINT
__stdcall
GetRawInputBuffer(
	PRAWINPUT pData,
	PUINT pcbSize,
	UINT cbSizeHeader);
typedef struct tagRAWINPUTDEVICE {
	USHORT usUsagePage;
	USHORT usUsage;
	DWORD dwFlags;
	HWND hwndTarget;
} RAWINPUTDEVICE, * PRAWINPUTDEVICE, * LPRAWINPUTDEVICE;
typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;

BOOL
__stdcall
RegisterRawInputDevices(
	PCRAWINPUTDEVICE pRawInputDevices,
	UINT uiNumDevices,
	UINT cbSize);

UINT
__stdcall
GetRegisteredRawInputDevices(
	PRAWINPUTDEVICE pRawInputDevices,
	PUINT puiNumDevices,
	UINT cbSize);
typedef struct tagRAWINPUTDEVICELIST {
	HANDLE hDevice;
	DWORD dwType;
} RAWINPUTDEVICELIST, * PRAWINPUTDEVICELIST;

UINT
__stdcall
GetRawInputDeviceList(
	PRAWINPUTDEVICELIST pRawInputDeviceList,
	PUINT puiNumDevices,
	UINT cbSize);

LRESULT
__stdcall
DefRawInputProc(
	PRAWINPUT* paRawInput,
	INT nInput,
	UINT cbSizeHeader);
typedef enum tagPOINTER_DEVICE_TYPE {
	POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
	POINTER_DEVICE_TYPE_EXTERNAL_PEN = 0x00000002,
	POINTER_DEVICE_TYPE_TOUCH = 0x00000003,
	POINTER_DEVICE_TYPE_TOUCH_PAD = 0x00000004,
	POINTER_DEVICE_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;
typedef struct tagPOINTER_DEVICE_INFO {
	DWORD displayOrientation;
	HANDLE device;
	POINTER_DEVICE_TYPE pointerDeviceType;
	HMONITOR monitor;
	ULONG startingCursorId;
	USHORT maxActiveContacts;
	WCHAR productString[520];
} POINTER_DEVICE_INFO;
typedef struct tagPOINTER_DEVICE_PROPERTY {
	INT32 logicalMin;
	INT32 logicalMax;
	INT32 physicalMin;
	INT32 physicalMax;
	UINT32 unit;
	UINT32 unitExponent;
	USHORT usagePageId;
	USHORT usageId;
} POINTER_DEVICE_PROPERTY;
typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
	POINTER_DEVICE_CURSOR_TYPE_UNKNOWN = 0x00000000,
	POINTER_DEVICE_CURSOR_TYPE_TIP = 0x00000001,
	POINTER_DEVICE_CURSOR_TYPE_ERASER = 0x00000002,
	POINTER_DEVICE_CURSOR_TYPE_MAX = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;
typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
	UINT32 cursorId;
	POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

BOOL
__stdcall
GetPointerDevices(
	UINT32* deviceCount,
	POINTER_DEVICE_INFO* pointerDevices);

BOOL
__stdcall
GetPointerDevice(
	HANDLE device,
	POINTER_DEVICE_INFO* pointerDevice);

BOOL
__stdcall
GetPointerDeviceProperties(
	HANDLE device,
	UINT32* propertyCount,
	POINTER_DEVICE_PROPERTY* pointerProperties);

BOOL
__stdcall
RegisterPointerDeviceNotifications(
	HWND window,
	BOOL notifyRange);

BOOL
__stdcall
GetPointerDeviceRects(
	HANDLE device,
	RECT* pointerDeviceRect,
	RECT* displayRect);

BOOL
__stdcall
GetPointerDeviceCursors(
	HANDLE device,
	UINT32* cursorCount,
	POINTER_DEVICE_CURSOR_INFO* deviceCursors);

BOOL
__stdcall
GetRawPointerDeviceData(
	UINT32 pointerId,
	UINT32 historyCount,
	UINT32 propertiesCount,
	POINTER_DEVICE_PROPERTY* pProperties,
	LONG* pValues);

BOOL
__stdcall
ChangeWindowMessageFilter(
	UINT message,
	DWORD dwFlag);
typedef struct tagCHANGEFILTERSTRUCT {
	DWORD cbSize;
	DWORD ExtStatus;
} CHANGEFILTERSTRUCT, * PCHANGEFILTERSTRUCT;

BOOL
__stdcall
ChangeWindowMessageFilterEx(
	HWND hwnd,
	UINT message,
	DWORD action,
	PCHANGEFILTERSTRUCT pChangeFilterStruct);
struct HGESTUREINFO__ { int unused; }; typedef struct HGESTUREINFO__* HGESTUREINFO;
typedef struct tagGESTUREINFO {
	UINT cbSize;
	DWORD dwFlags;
	DWORD dwID;
	HWND hwndTarget;
	POINTS ptsLocation;
	DWORD dwInstanceID;
	DWORD dwSequenceID;
	ULONGLONG ullArguments;
	UINT cbExtraArgs;
} GESTUREINFO, * PGESTUREINFO;
typedef GESTUREINFO const* PCGESTUREINFO;
typedef struct tagGESTURENOTIFYSTRUCT {
	UINT cbSize;
	DWORD dwFlags;
	HWND hwndTarget;
	POINTS ptsLocation;
	DWORD dwInstanceID;
} GESTURENOTIFYSTRUCT, * PGESTURENOTIFYSTRUCT;

BOOL
__stdcall
GetGestureInfo(
	HGESTUREINFO hGestureInfo,
	PGESTUREINFO pGestureInfo);

BOOL
__stdcall
GetGestureExtraArgs(
	HGESTUREINFO hGestureInfo,
	UINT cbExtraArgs,
	PBYTE pExtraArgs);

BOOL
__stdcall
CloseGestureInfoHandle(
	HGESTUREINFO hGestureInfo);
typedef struct tagGESTURECONFIG {
	DWORD dwID;
	DWORD dwWant;
	DWORD dwBlock;
} GESTURECONFIG, * PGESTURECONFIG;

BOOL
__stdcall
SetGestureConfig(
	HWND hwnd,
	DWORD dwReserved,
	UINT cIDs,
	PGESTURECONFIG pGestureConfig,
	UINT cbSize);

BOOL
__stdcall
GetGestureConfig(
	HWND hwnd,
	DWORD dwReserved,
	DWORD dwFlags,
	PUINT pcIDs,
	PGESTURECONFIG pGestureConfig,
	UINT cbSize);

BOOL
__stdcall
ShutdownBlockReasonCreate(
	HWND hWnd,
	LPCWSTR pwszReason);

BOOL
__stdcall
ShutdownBlockReasonQuery(
	HWND hWnd,
	LPWSTR pwszBuff,
	DWORD* pcchBuff);

BOOL
__stdcall
ShutdownBlockReasonDestroy(
	HWND hWnd);
typedef enum tagINPUT_MESSAGE_DEVICE_TYPE {
	IMDT_UNAVAILABLE = 0x00000000,
	IMDT_KEYBOARD = 0x00000001,
	IMDT_MOUSE = 0x00000002,
	IMDT_TOUCH = 0x00000004,
	IMDT_PEN = 0x00000008,
	IMDT_TOUCHPAD = 0x00000010,
} INPUT_MESSAGE_DEVICE_TYPE;
typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
	IMO_UNAVAILABLE = 0x00000000,
	IMO_HARDWARE = 0x00000001,
	IMO_INJECTED = 0x00000002,
	IMO_SYSTEM = 0x00000004,
} INPUT_MESSAGE_ORIGIN_ID;
typedef struct tagINPUT_MESSAGE_SOURCE {
	INPUT_MESSAGE_DEVICE_TYPE deviceType;
	INPUT_MESSAGE_ORIGIN_ID   originId;
} INPUT_MESSAGE_SOURCE;

BOOL
__stdcall
GetCurrentInputMessageSource(
	INPUT_MESSAGE_SOURCE* inputMessageSource);

BOOL
__stdcall
GetCIMSSM(
	INPUT_MESSAGE_SOURCE* inputMessageSource);
typedef enum tagAR_STATE {
	AR_ENABLED = 0x0,
	AR_DISABLED = 0x1,
	AR_SUPPRESSED = 0x2,
	AR_REMOTESESSION = 0x4,
	AR_MULTIMON = 0x8,
	AR_NOSENSOR = 0x10,
	AR_NOT_SUPPORTED = 0x20,
	AR_DOCKED = 0x40,
	AR_LAPTOP = 0x80
} AR_STATE, * PAR_STATE;
typedef enum ORIENTATION_PREFERENCE {
	ORIENTATION_PREFERENCE_NONE = 0x0,
	ORIENTATION_PREFERENCE_LANDSCAPE = 0x1,
	ORIENTATION_PREFERENCE_PORTRAIT = 0x2,
	ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
	ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED = 0x8
} ORIENTATION_PREFERENCE;

BOOL
__stdcall
GetAutoRotationState(
	PAR_STATE pState);

BOOL
__stdcall
GetDisplayAutoRotationPreferences(
	ORIENTATION_PREFERENCE* pOrientation);

BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
	DWORD dwProcessId,
	ORIENTATION_PREFERENCE* pOrientation,
	BOOL* fRotateScreen);

BOOL
__stdcall
SetDisplayAutoRotationPreferences(
	ORIENTATION_PREFERENCE orientation);

BOOL
__stdcall
IsImmersiveProcess(
	HANDLE hProcess);

BOOL
__stdcall
SetProcessRestrictionExemption(
	BOOL fEnableExemption);

int
__stdcall
GetDateFormatA(
	LCID Locale,
	DWORD dwFlags,
	const SYSTEMTIME* lpDate,
	LPCSTR lpFormat,
	LPSTR lpDateStr,
	int cchDate
);

int
__stdcall
GetDateFormatW(
	LCID Locale,
	DWORD dwFlags,
	const SYSTEMTIME* lpDate,
	LPCWSTR lpFormat,
	LPWSTR lpDateStr,
	int cchDate
);

int
__stdcall
GetTimeFormatA(
	LCID Locale,
	DWORD dwFlags,
	const SYSTEMTIME* lpTime,
	LPCSTR lpFormat,
	LPSTR lpTimeStr,
	int cchTime
);

int
__stdcall
GetTimeFormatW(
	LCID Locale,
	DWORD dwFlags,
	const SYSTEMTIME* lpTime,
	LPCWSTR lpFormat,
	LPWSTR lpTimeStr,
	int cchTime
);

int
__stdcall
GetTimeFormatEx(
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	const SYSTEMTIME* lpTime,
	LPCWSTR lpFormat,
	LPWSTR lpTimeStr,
	int cchTime
);

int
__stdcall
GetDateFormatEx(
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	const SYSTEMTIME* lpDate,
	LPCWSTR lpFormat,
	LPWSTR lpDateStr,
	int cchDate,
	LPCWSTR lpCalendar
);

int
__stdcall
GetDurationFormatEx(
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	const SYSTEMTIME* lpDuration,
	ULONGLONG ullDuration,
	LPCWSTR lpFormat,
	LPWSTR lpDurationStr,
	int cchDuration
);
typedef DWORD LGRPID;
typedef DWORD LCTYPE;
typedef DWORD CALTYPE;
typedef DWORD CALID;
typedef struct _cpinfo {
	UINT    MaxCharSize;
	BYTE    DefaultChar[2];
	BYTE    LeadByte[12];
} CPINFO, * LPCPINFO;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;
typedef LONG    GEOID;
typedef struct _cpinfoexA {
	UINT    MaxCharSize;
	BYTE    DefaultChar[2];
	BYTE    LeadByte[12];
	WCHAR   UnicodeDefaultChar;
	UINT    CodePage;
	CHAR    CodePageName[260];
} CPINFOEXA, * LPCPINFOEXA;
typedef struct _cpinfoexW {
	UINT    MaxCharSize;
	BYTE    DefaultChar[2];
	BYTE    LeadByte[12];
	WCHAR   UnicodeDefaultChar;
	UINT    CodePage;
	WCHAR   CodePageName[260];
} CPINFOEXW, * LPCPINFOEXW;
typedef CPINFOEXW CPINFOEX;
typedef LPCPINFOEXW LPCPINFOEX;
typedef struct _numberfmtA {
	UINT    NumDigits;
	UINT    LeadingZero;
	UINT    Grouping;
	LPSTR   lpDecimalSep;
	LPSTR   lpThousandSep;
	UINT    NegativeOrder;
} NUMBERFMTA, * LPNUMBERFMTA;
typedef struct _numberfmtW {
	UINT    NumDigits;
	UINT    LeadingZero;
	UINT    Grouping;
	LPWSTR  lpDecimalSep;
	LPWSTR  lpThousandSep;
	UINT    NegativeOrder;
} NUMBERFMTW, * LPNUMBERFMTW;
typedef NUMBERFMTW NUMBERFMT;
typedef LPNUMBERFMTW LPNUMBERFMT;
typedef struct _currencyfmtA {
	UINT    NumDigits;
	UINT    LeadingZero;
	UINT    Grouping;
	LPSTR   lpDecimalSep;
	LPSTR   lpThousandSep;
	UINT    NegativeOrder;
	UINT    PositiveOrder;
	LPSTR   lpCurrencySymbol;
} CURRENCYFMTA, * LPCURRENCYFMTA;
typedef struct _currencyfmtW {
	UINT    NumDigits;
	UINT    LeadingZero;
	UINT    Grouping;
	LPWSTR  lpDecimalSep;
	LPWSTR  lpThousandSep;
	UINT    NegativeOrder;
	UINT    PositiveOrder;
	LPWSTR  lpCurrencySymbol;
} CURRENCYFMTW, * LPCURRENCYFMTW;
typedef CURRENCYFMTW CURRENCYFMT;
typedef LPCURRENCYFMTW LPCURRENCYFMT;
enum SYSNLS_FUNCTION {
	COMPARE_STRING = 0x0001,
};
typedef DWORD NLS_FUNCTION;
typedef struct _nlsversioninfo {
	DWORD dwNLSVersionInfoSize;
	DWORD dwNLSVersion;
	DWORD dwDefinedVersion;
	DWORD dwEffectiveId;
	GUID  guidCustomVersion;
} NLSVERSIONINFO, * LPNLSVERSIONINFO;
typedef struct _nlsversioninfoex {
	DWORD dwNLSVersionInfoSize;
	DWORD dwNLSVersion;
	DWORD dwDefinedVersion;
	DWORD dwEffectiveId;
	GUID  guidCustomVersion;
} NLSVERSIONINFOEX, * LPNLSVERSIONINFOEX;
enum SYSGEOTYPE {
	GEO_NATION = 0x0001,
	GEO_LATITUDE = 0x0002,
	GEO_LONGITUDE = 0x0003,
	GEO_ISO2 = 0x0004,
	GEO_ISO3 = 0x0005,
	GEO_RFC1766 = 0x0006,
	GEO_LCID = 0x0007,
	GEO_FRIENDLYNAME = 0x0008,
	GEO_OFFICIALNAME = 0x0009,
	GEO_TIMEZONES = 0x000A,
	GEO_OFFICIALLANGUAGES = 0x000B,
	GEO_ISO_UN_NUMBER = 0x000C,
	GEO_PARENT = 0x000D,
	GEO_DIALINGCODE = 0x000E,
	GEO_CURRENCYCODE = 0x000F,
	GEO_CURRENCYSYMBOL = 0x0010,
	GEO_NAME = 0x0011,
	GEO_ID = 0x0012
};
enum SYSGEOCLASS {
	GEOCLASS_NATION = 16,
	GEOCLASS_REGION = 14,
	GEOCLASS_ALL = 0
};
typedef BOOL(__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL(__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef enum _NORM_FORM {
	NormalizationOther = 0,
	NormalizationC = 0x1,
	NormalizationD = 0x2,
	NormalizationKC = 0x5,
	NormalizationKD = 0x6
} NORM_FORM;
typedef BOOL(__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL(__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL(__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL(__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL(__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL(__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL(__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL(__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL(__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL(__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL(__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL(__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL(__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL(__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL(__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL(__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL(__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL(__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL(__stdcall* GEO_ENUMPROC)(GEOID);
typedef BOOL(__stdcall* GEO_ENUMNAMEPROC)(PWSTR, LPARAM);
typedef struct _FILEMUIINFO {
	DWORD       dwSize;
	DWORD       dwVersion;
	DWORD       dwFileType;
	BYTE        pChecksum[16];
	BYTE        pServiceChecksum[16];
	DWORD       dwLanguageNameOffset;
	DWORD       dwTypeIDMainSize;
	DWORD       dwTypeIDMainOffset;
	DWORD       dwTypeNameMainOffset;
	DWORD       dwTypeIDMUISize;
	DWORD       dwTypeIDMUIOffset;
	DWORD       dwTypeNameMUIOffset;
	BYTE        abBuffer[8];
} FILEMUIINFO, * PFILEMUIINFO;

int
__stdcall
CompareStringEx(
	LPCWSTR lpLocaleName,
	DWORD dwCmpFlags,
	LPCWCH lpString1,
	int cchCount1,
	LPCWCH lpString2,
	int cchCount2,
	LPNLSVERSIONINFO lpVersionInformation,
	LPVOID lpReserved,
	LPARAM lParam
);

int
__stdcall
CompareStringOrdinal(
	LPCWCH lpString1,
	int cchCount1,
	LPCWCH lpString2,
	int cchCount2,
	BOOL bIgnoreCase
);

int
__stdcall
CompareStringW(
	LCID Locale,
	DWORD dwCmpFlags,
	PCNZWCH lpString1,
	int cchCount1,
	PCNZWCH lpString2,
	int cchCount2
);

int
__stdcall
FoldStringW(
	DWORD dwMapFlags,
	LPCWCH lpSrcStr,
	int cchSrc,
	LPWSTR lpDestStr,
	int cchDest
);

BOOL
__stdcall
GetStringTypeExW(
	LCID Locale,
	DWORD dwInfoType,
	LPCWCH lpSrcStr,
	int cchSrc,
	LPWORD lpCharType
);

BOOL
__stdcall
GetStringTypeW(
	DWORD dwInfoType,
	LPCWCH lpSrcStr,
	int cchSrc,
	LPWORD lpCharType
);

int
__stdcall
MultiByteToWideChar(
	UINT CodePage,
	DWORD dwFlags,
	LPCCH lpMultiByteStr,
	int cbMultiByte,
	LPWSTR lpWideCharStr,
	int cchWideChar
);

int
__stdcall
WideCharToMultiByte(
	UINT CodePage,
	DWORD dwFlags,
	LPCWCH lpWideCharStr,
	int cchWideChar,
	LPSTR lpMultiByteStr,
	int cbMultiByte,
	LPCCH lpDefaultChar,
	LPBOOL lpUsedDefaultChar
);

BOOL
__stdcall
IsValidCodePage(
	UINT  CodePage);

UINT
__stdcall
GetACP(void);

UINT
__stdcall
GetOEMCP(void);

BOOL
__stdcall
GetCPInfo(
	UINT       CodePage,
	LPCPINFO  lpCPInfo);

BOOL
__stdcall
GetCPInfoExA(
	UINT          CodePage,
	DWORD         dwFlags,
	LPCPINFOEXA  lpCPInfoEx);

BOOL
__stdcall
GetCPInfoExW(
	UINT          CodePage,
	DWORD         dwFlags,
	LPCPINFOEXW  lpCPInfoEx);

int
__stdcall
CompareStringA(
	LCID     Locale,
	DWORD    dwCmpFlags,
	PCNZCH lpString1,
	int      cchCount1,
	PCNZCH  lpString2,
	int      cchCount2);

int
__stdcall
FindNLSString(
	LCID Locale,
	DWORD dwFindNLSStringFlags,
	LPCWSTR lpStringSource,
	int cchSource,
	LPCWSTR lpStringValue,
	int cchValue,
	LPINT pcchFound);

int
__stdcall
LCMapStringW(
	LCID     Locale,
	DWORD    dwMapFlags,
	LPCWSTR  lpSrcStr,
	int      cchSrc,
	LPWSTR  lpDestStr,
	int      cchDest);

int
__stdcall
LCMapStringA(
	LCID     Locale,
	DWORD    dwMapFlags,
	LPCSTR  lpSrcStr,
	int      cchSrc,
	LPSTR  lpDestStr,
	int      cchDest);

int
__stdcall
GetLocaleInfoW(
	LCID     Locale,
	LCTYPE   LCType,
	LPWSTR lpLCData,
	int      cchData);

int
__stdcall
GetLocaleInfoA(
	LCID Locale,
	LCTYPE LCType,
	LPSTR lpLCData,
	int cchData
);

BOOL
__stdcall
SetLocaleInfoA(
	LCID     Locale,
	LCTYPE   LCType,
	LPCSTR  lpLCData);

BOOL
__stdcall
SetLocaleInfoW(
	LCID     Locale,
	LCTYPE   LCType,
	LPCWSTR  lpLCData);

int
__stdcall
GetCalendarInfoA(
	LCID     Locale,
	CALID    Calendar,
	CALTYPE  CalType,
	LPSTR   lpCalData,
	int      cchData,
	LPDWORD  lpValue);

int
__stdcall
GetCalendarInfoW(
	LCID     Locale,
	CALID    Calendar,
	CALTYPE  CalType,
	LPWSTR   lpCalData,
	int      cchData,
	LPDWORD  lpValue);

BOOL
__stdcall
SetCalendarInfoA(
	LCID     Locale,
	CALID    Calendar,
	CALTYPE  CalType,
	LPCSTR  lpCalData);

BOOL
__stdcall
SetCalendarInfoW(
	LCID     Locale,
	CALID    Calendar,
	CALTYPE  CalType,
	LPCWSTR  lpCalData);

BOOL
__stdcall
LoadStringByReference(
	DWORD   Flags,
	PCWSTR  Language,
	PCWSTR  SourceString,
	PWSTR   Buffer,
	ULONG  cchBuffer,
	PCWSTR  Directory,
	PULONG  pcchBufferOut
);

BOOL
__stdcall
IsDBCSLeadByte(
	BYTE  TestChar
);

BOOL
__stdcall
IsDBCSLeadByteEx(
	UINT  CodePage,
	BYTE  TestChar
);

LCID
__stdcall
LocaleNameToLCID(
	LPCWSTR lpName,
	DWORD dwFlags);

int
__stdcall
LCIDToLocaleName(
	LCID     Locale,
	LPWSTR  lpName,
	int      cchName,
	DWORD    dwFlags);

int
__stdcall
GetDurationFormat(
	LCID             Locale,
	DWORD            dwFlags,
	const SYSTEMTIME* lpDuration,
	ULONGLONG ullDuration,
	LPCWSTR          lpFormat,
	LPWSTR          lpDurationStr,
	int              cchDuration);

int
__stdcall
GetNumberFormatA(
	LCID             Locale,
	DWORD            dwFlags,
	LPCSTR          lpValue,
	const NUMBERFMTA* lpFormat,
	LPSTR          lpNumberStr,
	int              cchNumber);

int
__stdcall
GetNumberFormatW(
	LCID             Locale,
	DWORD            dwFlags,
	LPCWSTR          lpValue,
	const NUMBERFMTW* lpFormat,
	LPWSTR          lpNumberStr,
	int              cchNumber);

int
__stdcall
GetCurrencyFormatA(
	LCID               Locale,
	DWORD              dwFlags,
	LPCSTR            lpValue,
	const CURRENCYFMTA* lpFormat,
	LPSTR            lpCurrencyStr,
	int                cchCurrency);

int
__stdcall
GetCurrencyFormatW(
	LCID               Locale,
	DWORD              dwFlags,
	LPCWSTR            lpValue,
	const CURRENCYFMTW* lpFormat,
	LPWSTR            lpCurrencyStr,
	int                cchCurrency);

BOOL
__stdcall
EnumCalendarInfoA(
	CALINFO_ENUMPROCA lpCalInfoEnumProc,
	LCID              Locale,
	CALID             Calendar,
	CALTYPE           CalType);

BOOL
__stdcall
EnumCalendarInfoW(
	CALINFO_ENUMPROCW lpCalInfoEnumProc,
	LCID              Locale,
	CALID             Calendar,
	CALTYPE           CalType);

BOOL
__stdcall
EnumCalendarInfoExA(
	CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
	LCID                Locale,
	CALID               Calendar,
	CALTYPE             CalType);

BOOL
__stdcall
EnumCalendarInfoExW(
	CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
	LCID                Locale,
	CALID               Calendar,
	CALTYPE             CalType);

BOOL
__stdcall
EnumTimeFormatsA(
	TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
	LCID              Locale,
	DWORD             dwFlags);

BOOL
__stdcall
EnumTimeFormatsW(
	TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
	LCID              Locale,
	DWORD             dwFlags);

BOOL
__stdcall
EnumDateFormatsA(
	DATEFMT_ENUMPROCA lpDateFmtEnumProc,
	LCID              Locale,
	DWORD             dwFlags);

BOOL
__stdcall
EnumDateFormatsW(
	DATEFMT_ENUMPROCW lpDateFmtEnumProc,
	LCID              Locale,
	DWORD             dwFlags);

BOOL
__stdcall
EnumDateFormatsExA(
	DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
	LCID                Locale,
	DWORD               dwFlags);

BOOL
__stdcall
EnumDateFormatsExW(
	DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
	LCID                Locale,
	DWORD               dwFlags);

BOOL
__stdcall
IsValidLanguageGroup(
	LGRPID  LanguageGroup,
	DWORD   dwFlags);

BOOL
__stdcall
GetNLSVersion(
	NLS_FUNCTION     Function,
	LCID             Locale,
	LPNLSVERSIONINFO lpVersionInformation);

BOOL
__stdcall
IsValidLocale(
	LCID   Locale,
	DWORD  dwFlags);

int
__stdcall
GetGeoInfoA(
	GEOID       Location,
	GEOTYPE     GeoType,
	LPSTR     lpGeoData,
	int         cchData,
	LANGID      LangId);

int
__stdcall
GetGeoInfoW(
	GEOID       Location,
	GEOTYPE     GeoType,
	LPWSTR     lpGeoData,
	int         cchData,
	LANGID      LangId);

int
__stdcall
GetGeoInfoEx(
	PWSTR       location,
	GEOTYPE     geoType,
	PWSTR    geoData,
	int         geoDataCount);

BOOL
__stdcall
EnumSystemGeoID(
	GEOCLASS        GeoClass,
	GEOID           ParentGeoId,
	GEO_ENUMPROC    lpGeoEnumProc);

BOOL
__stdcall
EnumSystemGeoNames(
	GEOCLASS            geoClass,
	GEO_ENUMNAMEPROC    geoEnumProc,
	LPARAM          data);

GEOID
__stdcall
GetUserGeoID(
	GEOCLASS    GeoClass);

int
__stdcall
GetUserDefaultGeoName(
	LPWSTR geoName,
	int geoNameCount
);

BOOL
__stdcall
SetUserGeoID(
	GEOID       GeoId);

BOOL
__stdcall
SetUserGeoName(
	PWSTR       geoName);

LCID
__stdcall
ConvertDefaultLocale(
	LCID   Locale);

LANGID
__stdcall
GetSystemDefaultUILanguage(void);

LCID
__stdcall
GetThreadLocale(void);

BOOL
__stdcall
SetThreadLocale(
	LCID  Locale
);

LANGID
__stdcall
GetUserDefaultUILanguage(void);

LANGID
__stdcall
GetUserDefaultLangID(void);

LANGID
__stdcall
GetSystemDefaultLangID(void);

LCID
__stdcall
GetSystemDefaultLCID(void);

LCID
__stdcall
GetUserDefaultLCID(void);

LANGID
__stdcall
SetThreadUILanguage(LANGID LangId);

LANGID
__stdcall
GetThreadUILanguage(void);

BOOL
__stdcall
GetProcessPreferredUILanguages(
	DWORD dwFlags,
	PULONG pulNumLanguages,
	PZZWSTR pwszLanguagesBuffer,
	PULONG pcchLanguagesBuffer
);

BOOL
__stdcall
SetProcessPreferredUILanguages(
	DWORD dwFlags,
	PCZZWSTR pwszLanguagesBuffer,
	PULONG pulNumLanguages
);

BOOL
__stdcall
GetUserPreferredUILanguages(
	DWORD dwFlags,
	PULONG pulNumLanguages,
	PZZWSTR pwszLanguagesBuffer,
	PULONG pcchLanguagesBuffer
);

BOOL
__stdcall
GetSystemPreferredUILanguages(
	DWORD dwFlags,
	PULONG pulNumLanguages,
	PZZWSTR pwszLanguagesBuffer,
	PULONG pcchLanguagesBuffer
);

BOOL
__stdcall
GetThreadPreferredUILanguages(
	DWORD dwFlags,
	PULONG pulNumLanguages,
	PZZWSTR pwszLanguagesBuffer,
	PULONG pcchLanguagesBuffer
);

BOOL
__stdcall
SetThreadPreferredUILanguages(
	DWORD dwFlags,
	PCZZWSTR pwszLanguagesBuffer,
	PULONG pulNumLanguages
);

BOOL
__stdcall
GetFileMUIInfo(
	DWORD           dwFlags,
	PCWSTR          pcwszFilePath,
	PFILEMUIINFO    pFileMUIInfo,
	DWORD* pcbFileMUIInfo);

BOOL
__stdcall
GetFileMUIPath(
	DWORD      dwFlags,
	PCWSTR     pcwszFilePath,
	PWSTR pwszLanguage,
	PULONG  pcchLanguage,
	PWSTR pwszFileMUIPath,
	PULONG pcchFileMUIPath,
	PULONGLONG pululEnumerator
);

BOOL
__stdcall
GetUILanguageInfo(
	DWORD dwFlags,
	PCZZWSTR pwmszLanguage,
	PZZWSTR pwszFallbackLanguages,
	PDWORD pcchFallbackLanguages,
	PDWORD pAttributes
);
struct HSAVEDUILANGUAGES__ { int unused; }; typedef struct HSAVEDUILANGUAGES__* HSAVEDUILANGUAGES;

BOOL
__stdcall
SetThreadPreferredUILanguages2(
	ULONG flags,
	PCZZWSTR languages,
	PULONG numLanguagesSet,
	HSAVEDUILANGUAGES* snapshot);

void
__stdcall
RestoreThreadPreferredUILanguages(const HSAVEDUILANGUAGES snapshot);

BOOL
__stdcall
NotifyUILanguageChange(
	DWORD dwFlags,
	PCWSTR pcwstrNewLanguage,
	PCWSTR pcwstrPreviousLanguage,
	DWORD dwReserved,
	PDWORD pdwStatusRtrn
);

BOOL
__stdcall
GetStringTypeExA(
	LCID       Locale,
	DWORD      dwInfoType,
	LPCSTR   lpSrcStr,
	int        cchSrc,
	LPWORD     lpCharType);

BOOL
__stdcall
GetStringTypeA(
	LCID     Locale,
	DWORD    dwInfoType,
	LPCSTR   lpSrcStr,
	int      cchSrc,
	LPWORD  lpCharType);

int
__stdcall
FoldStringA(
	DWORD    dwMapFlags,
	LPCSTR  lpSrcStr,
	int      cchSrc,
	LPSTR  lpDestStr,
	int      cchDest);

BOOL
__stdcall
EnumSystemLocalesA(
	LOCALE_ENUMPROCA lpLocaleEnumProc,
	DWORD            dwFlags);

BOOL
__stdcall
EnumSystemLocalesW(
	LOCALE_ENUMPROCW lpLocaleEnumProc,
	DWORD            dwFlags);

BOOL
__stdcall
EnumSystemLanguageGroupsA(
	LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
	DWORD                   dwFlags,
	LONG_PTR                lParam);

BOOL
__stdcall
EnumSystemLanguageGroupsW(
	LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
	DWORD                   dwFlags,
	LONG_PTR                lParam);

BOOL
__stdcall
EnumLanguageGroupLocalesA(
	LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
	LGRPID                    LanguageGroup,
	DWORD                     dwFlags,
	LONG_PTR                  lParam);

BOOL
__stdcall
EnumLanguageGroupLocalesW(
	LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
	LGRPID                    LanguageGroup,
	DWORD                     dwFlags,
	LONG_PTR                  lParam);

BOOL
__stdcall
EnumUILanguagesA(
	UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
	DWORD                dwFlags,
	LONG_PTR             lParam);

BOOL
__stdcall
EnumUILanguagesW(
	UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
	DWORD                dwFlags,
	LONG_PTR             lParam);

BOOL
__stdcall
EnumSystemCodePagesA(
	CODEPAGE_ENUMPROCA lpCodePageEnumProc,
	DWORD              dwFlags);

BOOL
__stdcall
EnumSystemCodePagesW(
	CODEPAGE_ENUMPROCW lpCodePageEnumProc,
	DWORD              dwFlags);

int
__stdcall IdnToAscii(DWORD    dwFlags,
	LPCWSTR  lpUnicodeCharStr,
	int      cchUnicodeChar,
	LPWSTR   lpASCIICharStr,
	int      cchASCIIChar);

int
__stdcall IdnToUnicode(DWORD   dwFlags,
	LPCWSTR lpASCIICharStr,
	int     cchASCIIChar,
	LPWSTR  lpUnicodeCharStr,
	int     cchUnicodeChar);

int
__stdcall IdnToNameprepUnicode(DWORD   dwFlags,
	LPCWSTR lpUnicodeCharStr,
	int     cchUnicodeChar,
	LPWSTR  lpNameprepCharStr,
	int     cchNameprepChar);

int
__stdcall NormalizeString(NORM_FORM NormForm,
	LPCWSTR   lpSrcString,
	int       cwSrcLength,
	LPWSTR    lpDstString,
	int       cwDstLength);

BOOL
__stdcall IsNormalizedString(NORM_FORM NormForm,
	LPCWSTR   lpString,
	int       cwLength);

BOOL
__stdcall VerifyScripts(
	DWORD   dwFlags,
	LPCWSTR lpLocaleScripts,
	int     cchLocaleScripts,
	LPCWSTR lpTestScripts,
	int     cchTestScripts);

int
__stdcall GetStringScripts(
	DWORD   dwFlags,
	LPCWSTR lpString,
	int     cchString,
	LPWSTR  lpScripts,
	int     cchScripts);

int
__stdcall
GetLocaleInfoEx(
	LPCWSTR lpLocaleName,
	LCTYPE LCType,
	LPWSTR lpLCData,
	int cchData
);

int
__stdcall
GetCalendarInfoEx(
	LPCWSTR lpLocaleName,
	CALID Calendar,
	LPCWSTR lpReserved,
	CALTYPE CalType,
	LPWSTR lpCalData,
	int cchData,
	LPDWORD lpValue
);

int
__stdcall
GetNumberFormatEx(
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	LPCWSTR lpValue,
	const NUMBERFMTW* lpFormat,
	LPWSTR lpNumberStr,
	int cchNumber
);

int
__stdcall
GetCurrencyFormatEx(
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	LPCWSTR lpValue,
	const CURRENCYFMTW* lpFormat,
	LPWSTR lpCurrencyStr,
	int cchCurrency
);

int
__stdcall
GetUserDefaultLocaleName(
	LPWSTR lpLocaleName,
	int cchLocaleName
);

int
__stdcall
GetSystemDefaultLocaleName(
	LPWSTR lpLocaleName,
	int cchLocaleName
);

BOOL
__stdcall
IsNLSDefinedString(
	NLS_FUNCTION     Function,
	DWORD            dwFlags,
	LPNLSVERSIONINFO lpVersionInformation,
	LPCWSTR          lpString,
	INT              cchStr);

BOOL
__stdcall
GetNLSVersionEx(
	NLS_FUNCTION function,
	LPCWSTR lpLocaleName,
	LPNLSVERSIONINFOEX lpVersionInformation
);

DWORD
__stdcall
IsValidNLSVersion(
	NLS_FUNCTION function,
	LPCWSTR lpLocaleName,
	LPNLSVERSIONINFOEX lpVersionInformation
);

int
__stdcall
FindNLSStringEx(
	LPCWSTR lpLocaleName,
	DWORD dwFindNLSStringFlags,
	LPCWSTR lpStringSource,
	int cchSource,
	LPCWSTR lpStringValue,
	int cchValue,
	LPINT pcchFound,
	LPNLSVERSIONINFO lpVersionInformation,
	LPVOID lpReserved,
	LPARAM sortHandle
);

int
__stdcall
LCMapStringEx(
	LPCWSTR lpLocaleName,
	DWORD dwMapFlags,
	LPCWSTR lpSrcStr,
	int cchSrc,
	LPWSTR lpDestStr,
	int cchDest,
	LPNLSVERSIONINFO lpVersionInformation,
	LPVOID lpReserved,
	LPARAM sortHandle
);

BOOL
__stdcall
IsValidLocaleName(
	LPCWSTR lpLocaleName
);
typedef BOOL(__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

BOOL
__stdcall
EnumCalendarInfoExEx(
	CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
	LPCWSTR lpLocaleName,
	CALID Calendar,
	LPCWSTR lpReserved,
	CALTYPE CalType,
	LPARAM lParam
);
typedef BOOL(__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

BOOL
__stdcall
EnumDateFormatsExEx(
	DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	LPARAM lParam
);
typedef BOOL(__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

BOOL
__stdcall
EnumTimeFormatsEx(
	TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
	LPCWSTR lpLocaleName,
	DWORD dwFlags,
	LPARAM lParam
);
typedef BOOL(__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

BOOL
__stdcall
EnumSystemLocalesEx(
	LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
	DWORD dwFlags,
	LPARAM lParam,
	LPVOID lpReserved
);

int
__stdcall
ResolveLocaleName(
	LPCWSTR lpNameToResolve,
	LPWSTR  lpLocaleName,
	int     cchLocaleName
);
typedef struct _COORD {
	SHORT X;
	SHORT Y;
} COORD, * PCOORD;
typedef struct _SMALL_RECT {
	SHORT Left;
	SHORT Top;
	SHORT Right;
	SHORT Bottom;
} SMALL_RECT, * PSMALL_RECT;
typedef struct _KEY_EVENT_RECORD {
	BOOL bKeyDown;
	WORD wRepeatCount;
	WORD wVirtualKeyCode;
	WORD wVirtualScanCode;
	union {
		WCHAR UnicodeChar;
		CHAR   AsciiChar;
	} uChar;
	DWORD dwControlKeyState;
} KEY_EVENT_RECORD, * PKEY_EVENT_RECORD;
typedef struct _MOUSE_EVENT_RECORD {
	COORD dwMousePosition;
	DWORD dwButtonState;
	DWORD dwControlKeyState;
	DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, * PMOUSE_EVENT_RECORD;
typedef struct _WINDOW_BUFFER_SIZE_RECORD {
	COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, * PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _MENU_EVENT_RECORD {
	UINT dwCommandId;
} MENU_EVENT_RECORD, * PMENU_EVENT_RECORD;
typedef struct _FOCUS_EVENT_RECORD {
	BOOL bSetFocus;
} FOCUS_EVENT_RECORD, * PFOCUS_EVENT_RECORD;
typedef struct _INPUT_RECORD {
	WORD EventType;
	union {
		KEY_EVENT_RECORD KeyEvent;
		MOUSE_EVENT_RECORD MouseEvent;
		WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
		MENU_EVENT_RECORD MenuEvent;
		FOCUS_EVENT_RECORD FocusEvent;
	} Event;
} INPUT_RECORD, * PINPUT_RECORD;
typedef struct _CHAR_INFO {
	union {
		WCHAR UnicodeChar;
		CHAR   AsciiChar;
	} Char;
	WORD Attributes;
} CHAR_INFO, * PCHAR_INFO;
typedef struct _CONSOLE_FONT_INFO {
	DWORD  nFont;
	COORD  dwFontSize;
} CONSOLE_FONT_INFO, * PCONSOLE_FONT_INFO;
typedef void* HPCON;

BOOL
__stdcall
AllocConsole(
	void
);

BOOL
__stdcall
FreeConsole(
	void
);

BOOL
__stdcall
AttachConsole(
	DWORD dwProcessId
);

UINT
__stdcall
GetConsoleCP(
	void
);

UINT
__stdcall
GetConsoleOutputCP(
	void
);

BOOL
__stdcall
GetConsoleMode(
	HANDLE hConsoleHandle,
	LPDWORD lpMode
);

BOOL
__stdcall
SetConsoleMode(
	HANDLE hConsoleHandle,
	DWORD dwMode
);

BOOL
__stdcall
GetNumberOfConsoleInputEvents(
	HANDLE hConsoleInput,
	LPDWORD lpNumberOfEvents
);

BOOL
__stdcall
ReadConsoleInputA(
	HANDLE hConsoleInput,
	PINPUT_RECORD lpBuffer,
	DWORD nLength,
	LPDWORD lpNumberOfEventsRead
);

BOOL
__stdcall
ReadConsoleInputW(
	HANDLE hConsoleInput,
	PINPUT_RECORD lpBuffer,
	DWORD nLength,
	LPDWORD lpNumberOfEventsRead
);

BOOL
__stdcall
PeekConsoleInputA(
	HANDLE hConsoleInput,
	PINPUT_RECORD lpBuffer,
	DWORD nLength,
	LPDWORD lpNumberOfEventsRead
);

BOOL
__stdcall
PeekConsoleInputW(
	HANDLE hConsoleInput,
	PINPUT_RECORD lpBuffer,
	DWORD nLength,
	LPDWORD lpNumberOfEventsRead
);
typedef struct _CONSOLE_READCONSOLE_CONTROL {
	ULONG nLength;
	ULONG nInitialChars;
	ULONG dwCtrlWakeupMask;
	ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, * PCONSOLE_READCONSOLE_CONTROL;

BOOL
__stdcall
ReadConsoleA(
	HANDLE hConsoleInput,
	LPVOID lpBuffer,
	DWORD nNumberOfCharsToRead,
	LPDWORD lpNumberOfCharsRead,
	PCONSOLE_READCONSOLE_CONTROL pInputControl
);

BOOL
__stdcall
ReadConsoleW(
	HANDLE hConsoleInput,
	LPVOID lpBuffer,
	DWORD nNumberOfCharsToRead,
	LPDWORD lpNumberOfCharsRead,
	PCONSOLE_READCONSOLE_CONTROL pInputControl
);

BOOL
__stdcall
WriteConsoleA(
	HANDLE hConsoleOutput,
	const void* lpBuffer,
	DWORD nNumberOfCharsToWrite,
	LPDWORD lpNumberOfCharsWritten,
	LPVOID lpReserved
);

BOOL
__stdcall
WriteConsoleW(
	HANDLE hConsoleOutput,
	const void* lpBuffer,
	DWORD nNumberOfCharsToWrite,
	LPDWORD lpNumberOfCharsWritten,
	LPVOID lpReserved
);
typedef
BOOL
(__stdcall* PHANDLER_ROUTINE)(
	DWORD CtrlType
	);

BOOL
__stdcall
SetConsoleCtrlHandler(
	PHANDLER_ROUTINE HandlerRoutine,
	BOOL Add
);

HRESULT
__stdcall
CreatePseudoConsole(
	COORD size,
	HANDLE hInput,
	HANDLE hOutput,
	DWORD dwFlags,
	HPCON* phPC
);

HRESULT
__stdcall
ResizePseudoConsole(
	HPCON hPC,
	COORD size
);

void
__stdcall
ClosePseudoConsole(
	HPCON hPC
);

BOOL
__stdcall
FillConsoleOutputCharacterA(
	HANDLE hConsoleOutput,
	CHAR cCharacter,
	DWORD nLength,
	COORD dwWriteCoord,
	LPDWORD lpNumberOfCharsWritten
);

BOOL
__stdcall
FillConsoleOutputCharacterW(
	HANDLE hConsoleOutput,
	WCHAR cCharacter,
	DWORD nLength,
	COORD dwWriteCoord,
	LPDWORD lpNumberOfCharsWritten
);

BOOL
__stdcall
FillConsoleOutputAttribute(
	HANDLE hConsoleOutput,
	WORD wAttribute,
	DWORD nLength,
	COORD dwWriteCoord,
	LPDWORD lpNumberOfAttrsWritten
);

BOOL
__stdcall
GenerateConsoleCtrlEvent(
	DWORD dwCtrlEvent,
	DWORD dwProcessGroupId
);

HANDLE
__stdcall
CreateConsoleScreenBuffer(
	DWORD dwDesiredAccess,
	DWORD dwShareMode,
	const SECURITY_ATTRIBUTES* lpSecurityAttributes,
	DWORD dwFlags,
	LPVOID lpScreenBufferData
);

BOOL
__stdcall
SetConsoleActiveScreenBuffer(
	HANDLE hConsoleOutput
);

BOOL
__stdcall
FlushConsoleInputBuffer(
	HANDLE hConsoleInput
);

BOOL
__stdcall
SetConsoleCP(
	UINT wCodePageID
);

BOOL
__stdcall
SetConsoleOutputCP(
	UINT wCodePageID
);
typedef struct _CONSOLE_CURSOR_INFO {
	DWORD  dwSize;
	BOOL   bVisible;
} CONSOLE_CURSOR_INFO, * PCONSOLE_CURSOR_INFO;

BOOL
__stdcall
GetConsoleCursorInfo(
	HANDLE hConsoleOutput,
	PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
);

BOOL
__stdcall
SetConsoleCursorInfo(
	HANDLE hConsoleOutput,
	const CONSOLE_CURSOR_INFO* lpConsoleCursorInfo
);
typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
	COORD dwSize;
	COORD dwCursorPosition;
	WORD  wAttributes;
	SMALL_RECT srWindow;
	COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, * PCONSOLE_SCREEN_BUFFER_INFO;

BOOL
__stdcall
GetConsoleScreenBufferInfo(
	HANDLE hConsoleOutput,
	PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
);
typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
	ULONG cbSize;
	COORD dwSize;
	COORD dwCursorPosition;
	WORD wAttributes;
	SMALL_RECT srWindow;
	COORD dwMaximumWindowSize;
	WORD wPopupAttributes;
	BOOL bFullscreenSupported;
	COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, * PCONSOLE_SCREEN_BUFFER_INFOEX;

BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
	HANDLE hConsoleOutput,
	PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
	HANDLE hConsoleOutput,
	PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx
);

BOOL
__stdcall
SetConsoleScreenBufferSize(
	HANDLE hConsoleOutput,
	COORD dwSize
);

BOOL
__stdcall
SetConsoleCursorPosition(
	HANDLE hConsoleOutput,
	COORD dwCursorPosition
);

COORD
__stdcall
GetLargestConsoleWindowSize(
	HANDLE hConsoleOutput
);

BOOL
__stdcall
SetConsoleTextAttribute(
	HANDLE hConsoleOutput,
	WORD wAttributes
);

BOOL
__stdcall
SetConsoleWindowInfo(
	HANDLE hConsoleOutput,
	BOOL bAbsolute,
	const SMALL_RECT* lpConsoleWindow
);

BOOL
__stdcall
WriteConsoleOutputCharacterA(
	HANDLE hConsoleOutput,
	LPCSTR lpCharacter,
	DWORD nLength,
	COORD dwWriteCoord,
	LPDWORD lpNumberOfCharsWritten
);

BOOL
__stdcall
WriteConsoleOutputCharacterW(
	HANDLE hConsoleOutput,
	LPCWSTR lpCharacter,
	DWORD nLength,
	COORD dwWriteCoord,
	LPDWORD lpNumberOfCharsWritten
);

BOOL
__stdcall
WriteConsoleOutputAttribute(
	HANDLE hConsoleOutput,
	const WORD* lpAttribute,
	DWORD nLength,
	COORD dwWriteCoord,
	LPDWORD lpNumberOfAttrsWritten
);

BOOL
__stdcall
ReadConsoleOutputCharacterA(
	HANDLE hConsoleOutput,
	LPSTR lpCharacter,
	DWORD nLength,
	COORD dwReadCoord,
	LPDWORD lpNumberOfCharsRead
);

BOOL
__stdcall
ReadConsoleOutputCharacterW(
	HANDLE hConsoleOutput,
	LPWSTR lpCharacter,
	DWORD nLength,
	COORD dwReadCoord,
	LPDWORD lpNumberOfCharsRead
);

BOOL
__stdcall
ReadConsoleOutputAttribute(
	HANDLE hConsoleOutput,
	LPWORD lpAttribute,
	DWORD nLength,
	COORD dwReadCoord,
	LPDWORD lpNumberOfAttrsRead
);

BOOL
__stdcall
WriteConsoleInputA(
	HANDLE hConsoleInput,
	const INPUT_RECORD* lpBuffer,
	DWORD nLength,
	LPDWORD lpNumberOfEventsWritten
);

BOOL
__stdcall
WriteConsoleInputW(
	HANDLE hConsoleInput,
	const INPUT_RECORD* lpBuffer,
	DWORD nLength,
	LPDWORD lpNumberOfEventsWritten
);

BOOL
__stdcall
ScrollConsoleScreenBufferA(
	HANDLE hConsoleOutput,
	const SMALL_RECT* lpScrollRectangle,
	const SMALL_RECT* lpClipRectangle,
	COORD dwDestinationOrigin,
	const CHAR_INFO* lpFill
);

BOOL
__stdcall
ScrollConsoleScreenBufferW(
	HANDLE hConsoleOutput,
	const SMALL_RECT* lpScrollRectangle,
	const SMALL_RECT* lpClipRectangle,
	COORD dwDestinationOrigin,
	const CHAR_INFO* lpFill
);

BOOL
__stdcall
WriteConsoleOutputA(
	HANDLE hConsoleOutput,
	const CHAR_INFO* lpBuffer,
	COORD dwBufferSize,
	COORD dwBufferCoord,
	PSMALL_RECT lpWriteRegion
);

BOOL
__stdcall
WriteConsoleOutputW(
	HANDLE hConsoleOutput,
	const CHAR_INFO* lpBuffer,
	COORD dwBufferSize,
	COORD dwBufferCoord,
	PSMALL_RECT lpWriteRegion
);

BOOL
__stdcall
ReadConsoleOutputA(
	HANDLE hConsoleOutput,
	PCHAR_INFO lpBuffer,
	COORD dwBufferSize,
	COORD dwBufferCoord,
	PSMALL_RECT lpReadRegion
);

BOOL
__stdcall
ReadConsoleOutputW(
	HANDLE hConsoleOutput,
	PCHAR_INFO lpBuffer,
	COORD dwBufferSize,
	COORD dwBufferCoord,
	PSMALL_RECT lpReadRegion
);

DWORD
__stdcall
GetConsoleTitleA(
	LPSTR lpConsoleTitle,
	DWORD nSize
);

DWORD
__stdcall
GetConsoleTitleW(
	LPWSTR lpConsoleTitle,
	DWORD nSize
);

DWORD
__stdcall
GetConsoleOriginalTitleA(
	LPSTR lpConsoleTitle,
	DWORD nSize
);

DWORD
__stdcall
GetConsoleOriginalTitleW(
	LPWSTR lpConsoleTitle,
	DWORD nSize
);

BOOL
__stdcall
SetConsoleTitleA(
	LPCSTR lpConsoleTitle
);

BOOL
__stdcall
SetConsoleTitleW(
	LPCWSTR lpConsoleTitle
);

BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
	LPDWORD lpNumberOfMouseButtons
);

COORD
__stdcall
GetConsoleFontSize(
	HANDLE hConsoleOutput,
	DWORD nFont
);

BOOL
__stdcall
GetCurrentConsoleFont(
	HANDLE hConsoleOutput,
	BOOL bMaximumWindow,
	PCONSOLE_FONT_INFO lpConsoleCurrentFont
);
typedef struct _CONSOLE_FONT_INFOEX {
	ULONG cbSize;
	DWORD nFont;
	COORD dwFontSize;
	UINT FontFamily;
	UINT FontWeight;
	WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, * PCONSOLE_FONT_INFOEX;

BOOL
__stdcall
GetCurrentConsoleFontEx(
	HANDLE hConsoleOutput,
	BOOL bMaximumWindow,
	PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);

BOOL
__stdcall
SetCurrentConsoleFontEx(
	HANDLE hConsoleOutput,
	BOOL bMaximumWindow,
	PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx
);
typedef struct _CONSOLE_SELECTION_INFO {
	DWORD dwFlags;
	COORD dwSelectionAnchor;
	SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, * PCONSOLE_SELECTION_INFO;

BOOL
__stdcall
GetConsoleSelectionInfo(
	PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
);
typedef struct _CONSOLE_HISTORY_INFO {
	UINT cbSize;
	UINT HistoryBufferSize;
	UINT NumberOfHistoryBuffers;
	DWORD dwFlags;
} CONSOLE_HISTORY_INFO, * PCONSOLE_HISTORY_INFO;

BOOL
__stdcall
GetConsoleHistoryInfo(
	PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);

BOOL
__stdcall
SetConsoleHistoryInfo(
	PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo
);

BOOL
__stdcall
GetConsoleDisplayMode(
	LPDWORD lpModeFlags
);

BOOL
__stdcall
SetConsoleDisplayMode(
	HANDLE hConsoleOutput,
	DWORD dwFlags,
	PCOORD lpNewScreenBufferDimensions
);

HWND
__stdcall
GetConsoleWindow(
	void
);

BOOL
__stdcall
AddConsoleAliasA(
	LPSTR Source,
	LPSTR Target,
	LPSTR ExeName
);

BOOL
__stdcall
AddConsoleAliasW(
	LPWSTR Source,
	LPWSTR Target,
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasA(
	LPSTR Source,
	LPSTR TargetBuffer,
	DWORD TargetBufferLength,
	LPSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasW(
	LPWSTR Source,
	LPWSTR TargetBuffer,
	DWORD TargetBufferLength,
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasesLengthA(
	LPSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasesLengthW(
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasExesLengthA(
	void
);

DWORD
__stdcall
GetConsoleAliasExesLengthW(
	void
);

DWORD
__stdcall
GetConsoleAliasesA(
	LPSTR AliasBuffer,
	DWORD AliasBufferLength,
	LPSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasesW(
	LPWSTR AliasBuffer,
	DWORD AliasBufferLength,
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleAliasExesA(
	LPSTR ExeNameBuffer,
	DWORD ExeNameBufferLength
);

DWORD
__stdcall
GetConsoleAliasExesW(
	LPWSTR ExeNameBuffer,
	DWORD ExeNameBufferLength
);

void
__stdcall
ExpungeConsoleCommandHistoryA(
	LPSTR ExeName
);

void
__stdcall
ExpungeConsoleCommandHistoryW(
	LPWSTR ExeName
);

BOOL
__stdcall
SetConsoleNumberOfCommandsA(
	DWORD Number,
	LPSTR ExeName
);

BOOL
__stdcall
SetConsoleNumberOfCommandsW(
	DWORD Number,
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleCommandHistoryLengthA(
	LPSTR ExeName
);

DWORD
__stdcall
GetConsoleCommandHistoryLengthW(
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleCommandHistoryA(
	LPSTR Commands,
	DWORD CommandBufferLength,
	LPSTR ExeName
);

DWORD
__stdcall
GetConsoleCommandHistoryW(
	LPWSTR Commands,
	DWORD CommandBufferLength,
	LPWSTR ExeName
);

DWORD
__stdcall
GetConsoleProcessList(
	LPDWORD lpdwProcessList,
	DWORD dwProcessCount
);
typedef struct tagVS_FIXEDFILEINFO
{
	DWORD   dwSignature;
	DWORD   dwStrucVersion;
	DWORD   dwFileVersionMS;
	DWORD   dwFileVersionLS;
	DWORD   dwProductVersionMS;
	DWORD   dwProductVersionLS;
	DWORD   dwFileFlagsMask;
	DWORD   dwFileFlags;
	DWORD   dwFileOS;
	DWORD   dwFileType;
	DWORD   dwFileSubtype;
	DWORD   dwFileDateMS;
	DWORD   dwFileDateLS;
} VS_FIXEDFILEINFO;
DWORD
__stdcall
VerFindFileA(
	DWORD uFlags,
	LPCSTR szFileName,
	LPCSTR szWinDir,
	LPCSTR szAppDir,
	LPSTR szCurDir,
	PUINT puCurDirLen,
	LPSTR szDestDir,
	PUINT puDestDirLen
);
DWORD
__stdcall
VerFindFileW(
	DWORD uFlags,
	LPCWSTR szFileName,
	LPCWSTR szWinDir,
	LPCWSTR szAppDir,
	LPWSTR szCurDir,
	PUINT puCurDirLen,
	LPWSTR szDestDir,
	PUINT puDestDirLen
);
DWORD
__stdcall
VerInstallFileA(
	DWORD uFlags,
	LPCSTR szSrcFileName,
	LPCSTR szDestFileName,
	LPCSTR szSrcDir,
	LPCSTR szDestDir,
	LPCSTR szCurDir,
	LPSTR szTmpFile,
	PUINT puTmpFileLen
);
DWORD
__stdcall
VerInstallFileW(
	DWORD uFlags,
	LPCWSTR szSrcFileName,
	LPCWSTR szDestFileName,
	LPCWSTR szSrcDir,
	LPCWSTR szDestDir,
	LPCWSTR szCurDir,
	LPWSTR szTmpFile,
	PUINT puTmpFileLen
);
DWORD
__stdcall
GetFileVersionInfoSizeA(
	LPCSTR lptstrFilename,
	LPDWORD lpdwHandle
);
DWORD
__stdcall
GetFileVersionInfoSizeW(
	LPCWSTR lptstrFilename,
	LPDWORD lpdwHandle
);
BOOL
__stdcall
GetFileVersionInfoA(
	LPCSTR lptstrFilename,
	DWORD dwHandle,
	DWORD dwLen,
	LPVOID lpData
);
BOOL
__stdcall
GetFileVersionInfoW(
	LPCWSTR lptstrFilename,
	DWORD dwHandle,
	DWORD dwLen,
	LPVOID lpData
);
DWORD __stdcall GetFileVersionInfoSizeExA(DWORD dwFlags, LPCSTR lpwstrFilename, LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW(DWORD dwFlags, LPCWSTR lpwstrFilename, LPDWORD lpdwHandle);
BOOL __stdcall GetFileVersionInfoExA(DWORD dwFlags,
	LPCSTR lpwstrFilename,
	DWORD dwHandle,
	DWORD dwLen,
	LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW(DWORD dwFlags,
	LPCWSTR lpwstrFilename,
	DWORD dwHandle,
	DWORD dwLen,
	LPVOID lpData);
DWORD
__stdcall
VerLanguageNameA(
	DWORD wLang,
	LPSTR szLang,
	DWORD cchLang
);
DWORD
__stdcall
VerLanguageNameW(
	DWORD wLang,
	LPWSTR szLang,
	DWORD cchLang
);
BOOL
__stdcall
VerQueryValueA(
	LPCVOID pBlock,
	LPCSTR lpSubBlock,
	LPVOID* lplpBuffer,
	PUINT puLen
);
BOOL
__stdcall
VerQueryValueW(
	LPCVOID pBlock,
	LPCWSTR lpSubBlock,
	LPVOID* lplpBuffer,
	PUINT puLen
);
typedef   LONG LSTATUS;
typedef ACCESS_MASK REGSAM;
struct val_context {
	int valuelen;
	LPVOID value_context;
	LPVOID val_buff_ptr;
};
typedef struct val_context* PVALCONTEXT;
typedef struct pvalueA {
	LPSTR   pv_valuename;
	int pv_valuelen;
	LPVOID pv_value_context;
	DWORD pv_type;
}PVALUEA, * PPVALUEA;
typedef struct pvalueW {
	LPWSTR  pv_valuename;
	int pv_valuelen;
	LPVOID pv_value_context;
	DWORD pv_type;
}PVALUEW, * PPVALUEW;
typedef PVALUEW PVALUE;
typedef PPVALUEW PPVALUE;
typedef
DWORD __cdecl
QUERYHANDLER(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
	LPVOID outputbuffer, DWORD* total_outlen, DWORD input_blen);
typedef QUERYHANDLER* PQUERYHANDLER;
typedef struct provider_info {
	PQUERYHANDLER pi_R0_1val;
	PQUERYHANDLER pi_R0_allvals;
	PQUERYHANDLER pi_R3_1val;
	PQUERYHANDLER pi_R3_allvals;
	DWORD pi_flags;
	LPVOID pi_key_context;
}REG_PROVIDER;
typedef struct provider_info* PPROVIDER;
typedef struct value_entA {
	LPSTR   ve_valuename;
	DWORD ve_valuelen;
	DWORD_PTR ve_valueptr;
	DWORD ve_type;
}VALENTA, * PVALENTA;
typedef struct value_entW {
	LPWSTR  ve_valuename;
	DWORD ve_valuelen;
	DWORD_PTR ve_valueptr;
	DWORD ve_type;
}VALENTW, * PVALENTW;
typedef VALENTW VALENT;
typedef PVALENTW PVALENT;

LSTATUS
__stdcall
RegCloseKey(
	HKEY hKey
);

LSTATUS
__stdcall
RegOverridePredefKey(
	HKEY hKey,
	HKEY hNewHKey
);

LSTATUS
__stdcall
RegOpenUserClassesRoot(
	HANDLE hToken,
	DWORD dwOptions,
	REGSAM samDesired,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegOpenCurrentUser(
	REGSAM samDesired,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegDisablePredefinedCache(
	void
);

LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
	void
);

LSTATUS
__stdcall
RegConnectRegistryA(
	LPCSTR lpMachineName,
	HKEY hKey,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegConnectRegistryW(
	LPCWSTR lpMachineName,
	HKEY hKey,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegConnectRegistryExA(
	LPCSTR lpMachineName,
	HKEY hKey,
	ULONG Flags,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegConnectRegistryExW(
	LPCWSTR lpMachineName,
	HKEY hKey,
	ULONG Flags,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegCreateKeyA(
	HKEY hKey,
	LPCSTR lpSubKey,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegCreateKeyW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegCreateKeyExA(
	HKEY hKey,
	LPCSTR lpSubKey,
	DWORD Reserved,
	LPSTR lpClass,
	DWORD dwOptions,
	REGSAM samDesired,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	PHKEY phkResult,
	LPDWORD lpdwDisposition
);

LSTATUS
__stdcall
RegCreateKeyExW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	DWORD Reserved,
	LPWSTR lpClass,
	DWORD dwOptions,
	REGSAM samDesired,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	PHKEY phkResult,
	LPDWORD lpdwDisposition
);

LSTATUS
__stdcall
RegCreateKeyTransactedA(
	HKEY hKey,
	LPCSTR lpSubKey,
	DWORD Reserved,
	LPSTR lpClass,
	DWORD dwOptions,
	REGSAM samDesired,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	PHKEY phkResult,
	LPDWORD lpdwDisposition,
	HANDLE hTransaction,
	PVOID  pExtendedParemeter
);

LSTATUS
__stdcall
RegCreateKeyTransactedW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	DWORD Reserved,
	LPWSTR lpClass,
	DWORD dwOptions,
	REGSAM samDesired,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	PHKEY phkResult,
	LPDWORD lpdwDisposition,
	HANDLE hTransaction,
	PVOID  pExtendedParemeter
);

LSTATUS
__stdcall
RegDeleteKeyA(
	HKEY hKey,
	LPCSTR lpSubKey
);

LSTATUS
__stdcall
RegDeleteKeyW(
	HKEY hKey,
	LPCWSTR lpSubKey
);

LSTATUS
__stdcall
RegDeleteKeyExA(
	HKEY hKey,
	LPCSTR lpSubKey,
	REGSAM samDesired,
	DWORD Reserved
);

LSTATUS
__stdcall
RegDeleteKeyExW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	REGSAM samDesired,
	DWORD Reserved
);

LSTATUS
__stdcall
RegDeleteKeyTransactedA(
	HKEY hKey,
	LPCSTR lpSubKey,
	REGSAM samDesired,
	DWORD Reserved,
	HANDLE hTransaction,
	PVOID  pExtendedParameter
);

LSTATUS
__stdcall
RegDeleteKeyTransactedW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	REGSAM samDesired,
	DWORD Reserved,
	HANDLE hTransaction,
	PVOID  pExtendedParameter
);

LONG
__stdcall
RegDisableReflectionKey(
	HKEY hBase
);

LONG
__stdcall
RegEnableReflectionKey(
	HKEY hBase
);

LONG
__stdcall
RegQueryReflectionKey(
	HKEY hBase,
	BOOL* bIsReflectionDisabled
);

LSTATUS
__stdcall
RegDeleteValueA(
	HKEY hKey,
	LPCSTR lpValueName
);

LSTATUS
__stdcall
RegDeleteValueW(
	HKEY hKey,
	LPCWSTR lpValueName
);

LSTATUS
__stdcall
RegEnumKeyA(
	HKEY hKey,
	DWORD dwIndex,
	LPSTR lpName,
	DWORD cchName
);

LSTATUS
__stdcall
RegEnumKeyW(
	HKEY hKey,
	DWORD dwIndex,
	LPWSTR lpName,
	DWORD cchName
);

LSTATUS
__stdcall
RegEnumKeyExA(
	HKEY hKey,
	DWORD dwIndex,
	LPSTR lpName,
	LPDWORD lpcchName,
	LPDWORD lpReserved,
	LPSTR lpClass,
	LPDWORD lpcchClass,
	PFILETIME lpftLastWriteTime
);

LSTATUS
__stdcall
RegEnumKeyExW(
	HKEY hKey,
	DWORD dwIndex,
	LPWSTR lpName,
	LPDWORD lpcchName,
	LPDWORD lpReserved,
	LPWSTR lpClass,
	LPDWORD lpcchClass,
	PFILETIME lpftLastWriteTime
);

LSTATUS
__stdcall
RegEnumValueA(
	HKEY hKey,
	DWORD dwIndex,
	LPSTR lpValueName,
	LPDWORD lpcchValueName,
	LPDWORD lpReserved,
	LPDWORD lpType,
	LPBYTE lpData,
	LPDWORD lpcbData
);

LSTATUS
__stdcall
RegEnumValueW(
	HKEY hKey,
	DWORD dwIndex,
	LPWSTR lpValueName,
	LPDWORD lpcchValueName,
	LPDWORD lpReserved,
	LPDWORD lpType,
	LPBYTE lpData,
	LPDWORD lpcbData
);

LSTATUS
__stdcall
RegFlushKey(
	HKEY hKey
);

LSTATUS
__stdcall
RegGetKeySecurity(
	HKEY hKey,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor,
	LPDWORD lpcbSecurityDescriptor
);

LSTATUS
__stdcall
RegLoadKeyA(
	HKEY hKey,
	LPCSTR lpSubKey,
	LPCSTR lpFile
);

LSTATUS
__stdcall
RegLoadKeyW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	LPCWSTR lpFile
);

LSTATUS
__stdcall
RegNotifyChangeKeyValue(
	HKEY hKey,
	BOOL bWatchSubtree,
	DWORD dwNotifyFilter,
	HANDLE hEvent,
	BOOL fAsynchronous
);

LSTATUS
__stdcall
RegOpenKeyA(
	HKEY hKey,
	LPCSTR lpSubKey,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegOpenKeyW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegOpenKeyExA(
	HKEY hKey,
	LPCSTR lpSubKey,
	DWORD ulOptions,
	REGSAM samDesired,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegOpenKeyExW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	DWORD ulOptions,
	REGSAM samDesired,
	PHKEY phkResult
);

LSTATUS
__stdcall
RegOpenKeyTransactedA(
	HKEY hKey,
	LPCSTR lpSubKey,
	DWORD ulOptions,
	REGSAM samDesired,
	PHKEY phkResult,
	HANDLE hTransaction,
	PVOID  pExtendedParemeter
);

LSTATUS
__stdcall
RegOpenKeyTransactedW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	DWORD ulOptions,
	REGSAM samDesired,
	PHKEY phkResult,
	HANDLE hTransaction,
	PVOID  pExtendedParemeter
);

LSTATUS
__stdcall
RegQueryInfoKeyA(
	HKEY hKey,
	LPSTR lpClass,
	LPDWORD lpcchClass,
	LPDWORD lpReserved,
	LPDWORD lpcSubKeys,
	LPDWORD lpcbMaxSubKeyLen,
	LPDWORD lpcbMaxClassLen,
	LPDWORD lpcValues,
	LPDWORD lpcbMaxValueNameLen,
	LPDWORD lpcbMaxValueLen,
	LPDWORD lpcbSecurityDescriptor,
	PFILETIME lpftLastWriteTime
);

LSTATUS
__stdcall
RegQueryInfoKeyW(
	HKEY hKey,
	LPWSTR lpClass,
	LPDWORD lpcchClass,
	LPDWORD lpReserved,
	LPDWORD lpcSubKeys,
	LPDWORD lpcbMaxSubKeyLen,
	LPDWORD lpcbMaxClassLen,
	LPDWORD lpcValues,
	LPDWORD lpcbMaxValueNameLen,
	LPDWORD lpcbMaxValueLen,
	LPDWORD lpcbSecurityDescriptor,
	PFILETIME lpftLastWriteTime
);

LSTATUS
__stdcall
RegQueryValueA(
	HKEY hKey,
	LPCSTR lpSubKey,
	LPSTR lpData,
	PLONG lpcbData
);

LSTATUS
__stdcall
RegQueryValueW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	LPWSTR lpData,
	PLONG lpcbData
);

LSTATUS
__stdcall
RegQueryMultipleValuesA(
	HKEY hKey,
	PVALENTA val_list,
	DWORD num_vals,
	LPSTR lpValueBuf,
	LPDWORD ldwTotsize
);

LSTATUS
__stdcall
RegQueryMultipleValuesW(
	HKEY hKey,
	PVALENTW val_list,
	DWORD num_vals,
	LPWSTR lpValueBuf,
	LPDWORD ldwTotsize
);

LSTATUS
__stdcall
RegQueryValueExA(
	HKEY hKey,
	LPCSTR lpValueName,
	LPDWORD lpReserved,
	LPDWORD lpType,
	LPBYTE lpData,
	LPDWORD lpcbData
);

LSTATUS
__stdcall
RegQueryValueExW(
	HKEY hKey,
	LPCWSTR lpValueName,
	LPDWORD lpReserved,
	LPDWORD lpType,
	LPBYTE lpData,
	LPDWORD lpcbData
);

LSTATUS
__stdcall
RegReplaceKeyA(
	HKEY hKey,
	LPCSTR lpSubKey,
	LPCSTR lpNewFile,
	LPCSTR lpOldFile
);

LSTATUS
__stdcall
RegReplaceKeyW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	LPCWSTR lpNewFile,
	LPCWSTR lpOldFile
);

LSTATUS
__stdcall
RegRestoreKeyA(
	HKEY hKey,
	LPCSTR lpFile,
	DWORD dwFlags
);

LSTATUS
__stdcall
RegRestoreKeyW(
	HKEY hKey,
	LPCWSTR lpFile,
	DWORD dwFlags
);

LSTATUS
__stdcall
RegRenameKey(
	HKEY hKey,
	LPCWSTR lpSubKeyName,
	LPCWSTR lpNewKeyName
);

LSTATUS
__stdcall
RegSaveKeyA(
	HKEY hKey,
	LPCSTR lpFile,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

LSTATUS
__stdcall
RegSaveKeyW(
	HKEY hKey,
	LPCWSTR lpFile,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes
);

LSTATUS
__stdcall
RegSetKeySecurity(
	HKEY hKey,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR pSecurityDescriptor
);

LSTATUS
__stdcall
RegSetValueA(
	HKEY hKey,
	LPCSTR lpSubKey,
	DWORD dwType,
	LPCSTR lpData,
	DWORD cbData
);

LSTATUS
__stdcall
RegSetValueW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	DWORD dwType,
	LPCWSTR lpData,
	DWORD cbData
);

LSTATUS
__stdcall
RegSetValueExA(
	HKEY hKey,
	LPCSTR lpValueName,
	DWORD Reserved,
	DWORD dwType,
	const BYTE* lpData,
	DWORD cbData
);

LSTATUS
__stdcall
RegSetValueExW(
	HKEY hKey,
	LPCWSTR lpValueName,
	DWORD Reserved,
	DWORD dwType,
	const BYTE* lpData,
	DWORD cbData
);

LSTATUS
__stdcall
RegUnLoadKeyA(
	HKEY hKey,
	LPCSTR lpSubKey
);

LSTATUS
__stdcall
RegUnLoadKeyW(
	HKEY hKey,
	LPCWSTR lpSubKey
);

LSTATUS
__stdcall
RegDeleteKeyValueA(
	HKEY hKey,
	LPCSTR lpSubKey,
	LPCSTR lpValueName
);

LSTATUS
__stdcall
RegDeleteKeyValueW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	LPCWSTR lpValueName
);

LSTATUS
__stdcall
RegSetKeyValueA(
	HKEY hKey,
	LPCSTR lpSubKey,
	LPCSTR lpValueName,
	DWORD dwType,
	LPCVOID lpData,
	DWORD cbData
);

LSTATUS
__stdcall
RegSetKeyValueW(
	HKEY hKey,
	LPCWSTR lpSubKey,
	LPCWSTR lpValueName,
	DWORD dwType,
	LPCVOID lpData,
	DWORD cbData
);

LSTATUS
__stdcall
RegDeleteTreeA(
	HKEY hKey,
	LPCSTR lpSubKey
);

LSTATUS
__stdcall
RegDeleteTreeW(
	HKEY hKey,
	LPCWSTR lpSubKey
);

LSTATUS
__stdcall
RegCopyTreeA(
	HKEY     hKeySrc,
	LPCSTR  lpSubKey,
	HKEY     hKeyDest
);

LSTATUS
__stdcall
RegGetValueA(
	HKEY hkey,
	LPCSTR lpSubKey,
	LPCSTR lpValue,
	DWORD dwFlags,
	LPDWORD pdwType,
	PVOID pvData,
	LPDWORD pcbData
);

LSTATUS
__stdcall
RegGetValueW(
	HKEY hkey,
	LPCWSTR lpSubKey,
	LPCWSTR lpValue,
	DWORD dwFlags,
	LPDWORD pdwType,
	PVOID pvData,
	LPDWORD pcbData
);

LSTATUS
__stdcall
RegCopyTreeW(
	HKEY hKeySrc,
	LPCWSTR lpSubKey,
	HKEY hKeyDest
);

LSTATUS
__stdcall
RegLoadMUIStringA(
	HKEY hKey,
	LPCSTR pszValue,
	LPSTR pszOutBuf,
	DWORD cbOutBuf,
	LPDWORD pcbData,
	DWORD Flags,
	LPCSTR pszDirectory
);

LSTATUS
__stdcall
RegLoadMUIStringW(
	HKEY hKey,
	LPCWSTR pszValue,
	LPWSTR pszOutBuf,
	DWORD cbOutBuf,
	LPDWORD pcbData,
	DWORD Flags,
	LPCWSTR pszDirectory
);

LSTATUS
__stdcall
RegLoadAppKeyA(
	LPCSTR lpFile,
	PHKEY phkResult,
	REGSAM samDesired,
	DWORD dwOptions,
	DWORD Reserved
);

LSTATUS
__stdcall
RegLoadAppKeyW(
	LPCWSTR lpFile,
	PHKEY phkResult,
	REGSAM samDesired,
	DWORD dwOptions,
	DWORD Reserved
);

BOOL
__stdcall
InitiateSystemShutdownA(
	LPSTR lpMachineName,
	LPSTR lpMessage,
	DWORD dwTimeout,
	BOOL bForceAppsClosed,
	BOOL bRebootAfterShutdown
);

BOOL
__stdcall
InitiateSystemShutdownW(
	LPWSTR lpMachineName,
	LPWSTR lpMessage,
	DWORD dwTimeout,
	BOOL bForceAppsClosed,
	BOOL bRebootAfterShutdown
);

BOOL
__stdcall
AbortSystemShutdownA(
	LPSTR lpMachineName
);

BOOL
__stdcall
AbortSystemShutdownW(
	LPWSTR lpMachineName
);

BOOL
__stdcall
InitiateSystemShutdownExA(
	LPSTR lpMachineName,
	LPSTR lpMessage,
	DWORD dwTimeout,
	BOOL bForceAppsClosed,
	BOOL bRebootAfterShutdown,
	DWORD dwReason
);

BOOL
__stdcall
InitiateSystemShutdownExW(
	LPWSTR lpMachineName,
	LPWSTR lpMessage,
	DWORD dwTimeout,
	BOOL bForceAppsClosed,
	BOOL bRebootAfterShutdown,
	DWORD dwReason
);

DWORD
__stdcall
InitiateShutdownA(
	LPSTR lpMachineName,
	LPSTR lpMessage,
	DWORD dwGracePeriod,
	DWORD dwShutdownFlags,
	DWORD dwReason
);

DWORD
__stdcall
InitiateShutdownW(
	LPWSTR lpMachineName,
	LPWSTR lpMessage,
	DWORD dwGracePeriod,
	DWORD dwShutdownFlags,
	DWORD dwReason
);

DWORD
__stdcall
CheckForHiberboot(
	PBOOLEAN pHiberboot,
	BOOLEAN bClearFlag
);

LSTATUS
__stdcall
RegSaveKeyExA(
	HKEY hKey,
	LPCSTR lpFile,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD Flags
);

LSTATUS
__stdcall
RegSaveKeyExW(
	HKEY hKey,
	LPCWSTR lpFile,
	const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
	DWORD Flags
);
typedef struct  _NETRESOURCEA {
	DWORD    dwScope;
	DWORD    dwType;
	DWORD    dwDisplayType;
	DWORD    dwUsage;
	LPSTR    lpLocalName;
	LPSTR    lpRemoteName;
	LPSTR    lpComment;
	LPSTR    lpProvider;
}NETRESOURCEA, * LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
	DWORD    dwScope;
	DWORD    dwType;
	DWORD    dwDisplayType;
	DWORD    dwUsage;
	LPWSTR   lpLocalName;
	LPWSTR   lpRemoteName;
	LPWSTR   lpComment;
	LPWSTR   lpProvider;
}NETRESOURCEW, * LPNETRESOURCEW;
typedef NETRESOURCEW NETRESOURCE;
typedef LPNETRESOURCEW LPNETRESOURCE;
DWORD __stdcall
WNetAddConnectionA(
	LPCSTR   lpRemoteName,
	LPCSTR   lpPassword,
	LPCSTR   lpLocalName
);
DWORD __stdcall
WNetAddConnectionW(
	LPCWSTR   lpRemoteName,
	LPCWSTR   lpPassword,
	LPCWSTR   lpLocalName
);
DWORD __stdcall
WNetAddConnection2A(
	LPNETRESOURCEA lpNetResource,
	LPCSTR       lpPassword,
	LPCSTR       lpUserName,
	DWORD          dwFlags
);
DWORD __stdcall
WNetAddConnection2W(
	LPNETRESOURCEW lpNetResource,
	LPCWSTR       lpPassword,
	LPCWSTR       lpUserName,
	DWORD          dwFlags
);
DWORD __stdcall
WNetAddConnection3A(
	HWND           hwndOwner,
	LPNETRESOURCEA lpNetResource,
	LPCSTR       lpPassword,
	LPCSTR       lpUserName,
	DWORD          dwFlags
);
DWORD __stdcall
WNetAddConnection3W(
	HWND           hwndOwner,
	LPNETRESOURCEW lpNetResource,
	LPCWSTR       lpPassword,
	LPCWSTR       lpUserName,
	DWORD          dwFlags
);
DWORD __stdcall
WNetAddConnection4A(
	HWND           hwndOwner,
	LPNETRESOURCEA lpNetResource,
	PVOID  pAuthBuffer,
	DWORD          cbAuthBuffer,
	DWORD          dwFlags,
	PBYTE          lpUseOptions,
	DWORD          cbUseOptions
);
DWORD __stdcall
WNetAddConnection4W(
	HWND           hwndOwner,
	LPNETRESOURCEW lpNetResource,
	PVOID  pAuthBuffer,
	DWORD          cbAuthBuffer,
	DWORD          dwFlags,
	PBYTE          lpUseOptions,
	DWORD          cbUseOptions
);
DWORD __stdcall
WNetCancelConnectionA(
	LPCSTR lpName,
	BOOL     fForce
);
DWORD __stdcall
WNetCancelConnectionW(
	LPCWSTR lpName,
	BOOL     fForce
);
DWORD __stdcall
WNetCancelConnection2A(
	LPCSTR lpName,
	DWORD    dwFlags,
	BOOL     fForce
);
DWORD __stdcall
WNetCancelConnection2W(
	LPCWSTR lpName,
	DWORD    dwFlags,
	BOOL     fForce
);
DWORD __stdcall
WNetGetConnectionA(
	LPCSTR lpLocalName,
	LPSTR  lpRemoteName,
	LPDWORD lpnLength
);
DWORD __stdcall
WNetGetConnectionW(
	LPCWSTR lpLocalName,
	LPWSTR  lpRemoteName,
	LPDWORD lpnLength
);
DWORD __stdcall
WNetRestoreSingleConnectionW(
	HWND    hwndParent,
	LPCWSTR lpDevice,
	BOOL    fUseUI
);
DWORD __stdcall
WNetUseConnectionA(
	HWND            hwndOwner,
	LPNETRESOURCEA  lpNetResource,
	LPCSTR        lpPassword,
	LPCSTR        lpUserId,
	DWORD           dwFlags,
	LPSTR lpAccessName,
	LPDWORD lpBufferSize,
	LPDWORD   lpResult
);
DWORD __stdcall
WNetUseConnectionW(
	HWND            hwndOwner,
	LPNETRESOURCEW  lpNetResource,
	LPCWSTR        lpPassword,
	LPCWSTR        lpUserId,
	DWORD           dwFlags,
	LPWSTR lpAccessName,
	LPDWORD lpBufferSize,
	LPDWORD   lpResult
);
DWORD __stdcall
WNetUseConnection4A(
	HWND            hwndOwner,
	LPNETRESOURCEA  lpNetResource,
	PVOID  pAuthBuffer,
	DWORD           cbAuthBuffer,
	DWORD           dwFlags,
	PBYTE           lpUseOptions,
	DWORD           cbUseOptions,
	LPSTR lpAccessName,
	LPDWORD lpBufferSize,
	LPDWORD   lpResult
);
DWORD __stdcall
WNetUseConnection4W(
	HWND            hwndOwner,
	LPNETRESOURCEW  lpNetResource,
	PVOID  pAuthBuffer,
	DWORD           cbAuthBuffer,
	DWORD           dwFlags,
	PBYTE           lpUseOptions,
	DWORD           cbUseOptions,
	LPWSTR lpAccessName,
	LPDWORD lpBufferSize,
	LPDWORD   lpResult
);
DWORD __stdcall
WNetConnectionDialog(
	HWND  hwnd,
	DWORD dwType
);
DWORD __stdcall
WNetDisconnectDialog(
	HWND hwnd,
	DWORD dwType
);
typedef struct _CONNECTDLGSTRUCTA {
	DWORD cbStructure;
	HWND hwndOwner;
	LPNETRESOURCEA lpConnRes;
	DWORD dwFlags;
	DWORD dwDevNum;
} CONNECTDLGSTRUCTA, * LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW {
	DWORD cbStructure;
	HWND hwndOwner;
	LPNETRESOURCEW lpConnRes;
	DWORD dwFlags;
	DWORD dwDevNum;
} CONNECTDLGSTRUCTW, * LPCONNECTDLGSTRUCTW;
typedef CONNECTDLGSTRUCTW CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTW LPCONNECTDLGSTRUCT;
DWORD __stdcall
WNetConnectionDialog1A(
	LPCONNECTDLGSTRUCTA lpConnDlgStruct
);
DWORD __stdcall
WNetConnectionDialog1W(
	LPCONNECTDLGSTRUCTW lpConnDlgStruct
);
typedef struct _DISCDLGSTRUCTA {
	DWORD           cbStructure;
	HWND            hwndOwner;
	LPSTR           lpLocalName;
	LPSTR           lpRemoteName;
	DWORD           dwFlags;
} DISCDLGSTRUCTA, * LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW {
	DWORD           cbStructure;
	HWND            hwndOwner;
	LPWSTR          lpLocalName;
	LPWSTR          lpRemoteName;
	DWORD           dwFlags;
} DISCDLGSTRUCTW, * LPDISCDLGSTRUCTW;
typedef DISCDLGSTRUCTW DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTW LPDISCDLGSTRUCT;
DWORD __stdcall
WNetDisconnectDialog1A(
	LPDISCDLGSTRUCTA lpConnDlgStruct
);
DWORD __stdcall
WNetDisconnectDialog1W(
	LPDISCDLGSTRUCTW lpConnDlgStruct
);
DWORD __stdcall
WNetOpenEnumA(
	DWORD          dwScope,
	DWORD          dwType,
	DWORD          dwUsage,
	LPNETRESOURCEA lpNetResource,
	LPHANDLE       lphEnum
);
DWORD __stdcall
WNetOpenEnumW(
	DWORD          dwScope,
	DWORD          dwType,
	DWORD          dwUsage,
	LPNETRESOURCEW lpNetResource,
	LPHANDLE       lphEnum
);
DWORD __stdcall
WNetEnumResourceA(
	HANDLE  hEnum,
	LPDWORD lpcCount,
	LPVOID  lpBuffer,
	LPDWORD lpBufferSize
);
DWORD __stdcall
WNetEnumResourceW(
	HANDLE  hEnum,
	LPDWORD lpcCount,
	LPVOID  lpBuffer,
	LPDWORD lpBufferSize
);
DWORD __stdcall
WNetCloseEnum(
	HANDLE   hEnum
);
DWORD __stdcall
WNetGetResourceParentA(
	LPNETRESOURCEA lpNetResource,
	LPVOID lpBuffer,
	LPDWORD lpcbBuffer
);
DWORD __stdcall
WNetGetResourceParentW(
	LPNETRESOURCEW lpNetResource,
	LPVOID lpBuffer,
	LPDWORD lpcbBuffer
);
DWORD __stdcall
WNetGetResourceInformationA(
	LPNETRESOURCEA  lpNetResource,
	LPVOID lpBuffer,
	LPDWORD lpcbBuffer,
	LPSTR* lplpSystem
);
DWORD __stdcall
WNetGetResourceInformationW(
	LPNETRESOURCEW  lpNetResource,
	LPVOID lpBuffer,
	LPDWORD lpcbBuffer,
	LPWSTR* lplpSystem
);
typedef struct  _UNIVERSAL_NAME_INFOA {
	LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, * LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
	LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, * LPUNIVERSAL_NAME_INFOW;
typedef UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOW LPUNIVERSAL_NAME_INFO;
typedef struct  _REMOTE_NAME_INFOA {
	LPSTR    lpUniversalName;
	LPSTR    lpConnectionName;
	LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, * LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
	LPWSTR   lpUniversalName;
	LPWSTR   lpConnectionName;
	LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, * LPREMOTE_NAME_INFOW;
typedef REMOTE_NAME_INFOW REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOW LPREMOTE_NAME_INFO;
DWORD __stdcall
WNetGetUniversalNameA(
	LPCSTR lpLocalPath,
	DWORD    dwInfoLevel,
	LPVOID lpBuffer,
	LPDWORD lpBufferSize
);
DWORD __stdcall
WNetGetUniversalNameW(
	LPCWSTR lpLocalPath,
	DWORD    dwInfoLevel,
	LPVOID lpBuffer,
	LPDWORD lpBufferSize
);
DWORD __stdcall
WNetGetUserA(
	LPCSTR  lpName,
	LPSTR lpUserName,
	LPDWORD lpnLength
);
DWORD __stdcall
WNetGetUserW(
	LPCWSTR  lpName,
	LPWSTR lpUserName,
	LPDWORD lpnLength
);
DWORD __stdcall
WNetGetProviderNameA(
	DWORD   dwNetType,
	LPSTR lpProviderName,
	LPDWORD lpBufferSize
);
DWORD __stdcall
WNetGetProviderNameW(
	DWORD   dwNetType,
	LPWSTR lpProviderName,
	LPDWORD lpBufferSize
);
typedef struct _NETINFOSTRUCT {
	DWORD cbStructure;
	DWORD dwProviderVersion;
	DWORD dwStatus;
	DWORD dwCharacteristics;
	ULONG_PTR dwHandle;
	WORD  wNetType;
	DWORD dwPrinters;
	DWORD dwDrives;
} NETINFOSTRUCT, * LPNETINFOSTRUCT;
DWORD __stdcall
WNetGetNetworkInformationA(
	LPCSTR        lpProvider,
	LPNETINFOSTRUCT lpNetInfoStruct
);
DWORD __stdcall
WNetGetNetworkInformationW(
	LPCWSTR        lpProvider,
	LPNETINFOSTRUCT lpNetInfoStruct
);
DWORD __stdcall
WNetGetLastErrorA(
	LPDWORD    lpError,
	LPSTR lpErrorBuf,
	DWORD      nErrorBufSize,
	LPSTR  lpNameBuf,
	DWORD      nNameBufSize
);
DWORD __stdcall
WNetGetLastErrorW(
	LPDWORD    lpError,
	LPWSTR lpErrorBuf,
	DWORD      nErrorBufSize,
	LPWSTR  lpNameBuf,
	DWORD      nNameBufSize
);
typedef struct _NETCONNECTINFOSTRUCT {
	DWORD cbStructure;
	DWORD dwFlags;
	DWORD dwSpeed;
	DWORD dwDelay;
	DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT, * LPNETCONNECTINFOSTRUCT;
DWORD __stdcall
MultinetGetConnectionPerformanceA(
	LPNETRESOURCEA lpNetResource,
	LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
);
DWORD __stdcall
MultinetGetConnectionPerformanceW(
	LPNETRESOURCEW lpNetResource,
	LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
);
LPUWSTR
__stdcall
uaw_CharUpperW(
	LPUWSTR String
);
int
__stdcall
uaw_lstrcmpW(
	PCUWSTR String1,
	PCUWSTR String2
);
int
__stdcall
uaw_lstrcmpiW(
	PCUWSTR String1,
	PCUWSTR String2
);
int
__stdcall
uaw_lstrlenW(
	LPCUWSTR String
);
PUWSTR
__cdecl
uaw_wcschr(
	PCUWSTR String,
	WCHAR   Character
);
PUWSTR
__cdecl
uaw_wcscpy(
	PUWSTR  Destination,
	PCUWSTR Source
);
int
__cdecl
uaw_wcsicmp(
	PCUWSTR String1,
	PCUWSTR String2
);
size_t
__cdecl
uaw_wcslen(
	PCUWSTR String
);
PUWSTR
__cdecl
uaw_wcsrchr(
	PCUWSTR String,
	WCHAR   Character
);

LPUWSTR
static
ua_CharUpperW(
	LPUWSTR String
);

int
static
ua_lstrcmpW(
	LPCUWSTR String1,
	LPCUWSTR String2
);

int
static
ua_lstrcmpiW(
	LPCUWSTR String1,
	LPCUWSTR String2
);

int
static
ua_lstrlenW(
	LPCUWSTR String
);
typedef  WCHAR __unaligned* PUWSTR_C;

PUWSTR_C
static
ua_wcschr(
	PCUWSTR String,
	WCHAR   Character
);

PUWSTR_C
static
ua_wcsrchr(
	PCUWSTR String,
	WCHAR   Character
);

PUWSTR
static

ua_wcscpy(
	PUWSTR  Destination,
	PCUWSTR Source
);

PUWSTR
static
ua_wcscpy_s(
	PUWSTR Destination,
	size_t  DestinationSize,
	PCUWSTR Source
);

size_t
static
ua_wcslen(
	PCUWSTR String
);

int
static
ua_wcsicmp(
	PCUWSTR String1,
	PCUWSTR String2
);
extern const GUID  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID = { 0x4f27f2de, 0x14e2, 0x430b, { 0xa5, 0x49, 0x7c, 0xd4, 0x8c, 0xbc, 0x82, 0x45 } };
extern const GUID  NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID = { 0xcc4ba62a, 0x162e, 0x4648, { 0x84, 0x7a, 0xb6, 0xbd, 0xf9, 0x93, 0xe3, 0x35 } };
extern const GUID  DOMAIN_JOIN_GUID = { 0x1ce20aba, 0x9851, 0x4421, { 0x94, 0x30, 0x1d, 0xde, 0xb7, 0x66, 0xe8, 0x09 } };
extern const GUID  DOMAIN_LEAVE_GUID = { 0xddaf516e, 0x58c2, 0x4866, { 0x95, 0x74, 0xc3, 0xb6, 0x15, 0xd4, 0x2e, 0xa1 } };
extern const GUID  FIREWALL_PORT_OPEN_GUID = { 0xb7569e07, 0x8421, 0x4ee0, { 0xad, 0x10, 0x86, 0x91, 0x5a, 0xfd, 0xad, 0x09 } };
extern const GUID  FIREWALL_PORT_CLOSE_GUID = { 0xa144ed38, 0x8e12, 0x4de4, { 0x9d, 0x96, 0xe6, 0x47, 0x40, 0xb1, 0xa5, 0x24 } };
extern const GUID  MACHINE_POLICY_PRESENT_GUID = { 0x659FCAE6, 0x5BDB, 0x4DA9, { 0xB1, 0xFF, 0xCA, 0x2A, 0x17, 0x8D, 0x46, 0xE0 } };
extern const GUID  USER_POLICY_PRESENT_GUID = { 0x54FB46C8, 0xF089, 0x464C, { 0xB1, 0xFD, 0x59, 0xD1, 0xB6, 0x2C, 0x3B, 0x50 } };
extern const GUID  RPC_INTERFACE_EVENT_GUID = { 0xbc90d167, 0x9470, 0x4139, { 0xa9, 0xba, 0xbe, 0x0b, 0xbb, 0xf5, 0xb7, 0x4d } };
extern const GUID  NAMED_PIPE_EVENT_GUID = { 0x1f81d131, 0x3fac, 0x4537, { 0x9e, 0x0c, 0x7e, 0x7b, 0x0c, 0x2f, 0x4b, 0x55 } };
extern const GUID  CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID = { 0x2d7a2816, 0x0c5e, 0x45fc, { 0x9c, 0xe7, 0x57, 0x0e, 0x5e, 0xcd, 0xe9, 0xc9 } };
typedef struct
{
	DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;
typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
	union {
		SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
		struct {
			DWORD DataOffset;
			BYTE Data[1];
		} s;
	} u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, * LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
typedef struct _SERVICE_DESCRIPTIONA {
	LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, * LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW {
	LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, * LPSERVICE_DESCRIPTIONW;
typedef SERVICE_DESCRIPTIONW SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONW LPSERVICE_DESCRIPTION;
typedef enum _SC_ACTION_TYPE {
	SC_ACTION_NONE = 0,
	SC_ACTION_RESTART = 1,
	SC_ACTION_REBOOT = 2,
	SC_ACTION_RUN_COMMAND = 3,
	SC_ACTION_OWN_RESTART = 4
} SC_ACTION_TYPE;
typedef struct _SC_ACTION {
	SC_ACTION_TYPE  Type;
	DWORD           Delay;
} SC_ACTION, * LPSC_ACTION;
typedef struct _SERVICE_FAILURE_ACTIONSA {
	DWORD       dwResetPeriod;
	LPSTR       lpRebootMsg;
	LPSTR       lpCommand;
	DWORD       cActions;
	SC_ACTION* lpsaActions;
} SERVICE_FAILURE_ACTIONSA, * LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
	DWORD       dwResetPeriod;
	LPWSTR      lpRebootMsg;
	LPWSTR      lpCommand;
	DWORD       cActions;
	SC_ACTION* lpsaActions;
} SERVICE_FAILURE_ACTIONSW, * LPSERVICE_FAILURE_ACTIONSW;
typedef SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSW LPSERVICE_FAILURE_ACTIONS;
typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
	BOOL       fDelayedAutostart;
} SERVICE_DELAYED_AUTO_START_INFO, * LPSERVICE_DELAYED_AUTO_START_INFO;
typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
	BOOL       fFailureActionsOnNonCrashFailures;
} SERVICE_FAILURE_ACTIONS_FLAG, * LPSERVICE_FAILURE_ACTIONS_FLAG;
typedef struct _SERVICE_SID_INFO {
	DWORD       dwServiceSidType;
} SERVICE_SID_INFO, * LPSERVICE_SID_INFO;
typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
	LPSTR       pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOA, * LPSERVICE_REQUIRED_PRIVILEGES_INFOA;
typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
	LPWSTR      pmszRequiredPrivileges;
} SERVICE_REQUIRED_PRIVILEGES_INFOW, * LPSERVICE_REQUIRED_PRIVILEGES_INFOW;
typedef SERVICE_REQUIRED_PRIVILEGES_INFOW SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOW LPSERVICE_REQUIRED_PRIVILEGES_INFO;
typedef struct _SERVICE_PRESHUTDOWN_INFO {
	DWORD       dwPreshutdownTimeout;
} SERVICE_PRESHUTDOWN_INFO, * LPSERVICE_PRESHUTDOWN_INFO;
typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
	DWORD   dwDataType;
	DWORD   cbData;
	PBYTE   pData;
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, * PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;
typedef struct _SERVICE_TRIGGER
{
	DWORD                       dwTriggerType;
	DWORD                       dwAction;
	GUID* pTriggerSubtype;
	DWORD                       cDataItems;
	PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM  pDataItems;
} SERVICE_TRIGGER, * PSERVICE_TRIGGER;
typedef struct _SERVICE_TRIGGER_INFO {
	DWORD                   cTriggers;
	PSERVICE_TRIGGER        pTriggers;
	PBYTE                   pReserved;
} SERVICE_TRIGGER_INFO, * PSERVICE_TRIGGER_INFO;
typedef struct _SERVICE_PREFERRED_NODE_INFO {
	USHORT                  usPreferredNode;
	BOOLEAN                 fDelete;
} SERVICE_PREFERRED_NODE_INFO, * LPSERVICE_PREFERRED_NODE_INFO;
typedef struct _SERVICE_TIMECHANGE_INFO {
	LARGE_INTEGER   liNewTime;
	LARGE_INTEGER   liOldTime;
} SERVICE_TIMECHANGE_INFO, * PSERVICE_TIMECHANGE_INFO;
typedef struct _SERVICE_LAUNCH_PROTECTED_INFO {
	DWORD       dwLaunchProtected;
} SERVICE_LAUNCH_PROTECTED_INFO, * PSERVICE_LAUNCH_PROTECTED_INFO;
struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__* SC_HANDLE;
typedef SC_HANDLE* LPSC_HANDLE;
struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__* SERVICE_STATUS_HANDLE;
typedef enum _SC_STATUS_TYPE {
	SC_STATUS_PROCESS_INFO = 0
} SC_STATUS_TYPE;
typedef enum _SC_ENUM_TYPE {
	SC_ENUM_PROCESS_INFO = 0
} SC_ENUM_TYPE;
typedef struct _SERVICE_STATUS {
	DWORD   dwServiceType;
	DWORD   dwCurrentState;
	DWORD   dwControlsAccepted;
	DWORD   dwWin32ExitCode;
	DWORD   dwServiceSpecificExitCode;
	DWORD   dwCheckPoint;
	DWORD   dwWaitHint;
} SERVICE_STATUS, * LPSERVICE_STATUS;
typedef struct _SERVICE_STATUS_PROCESS {
	DWORD   dwServiceType;
	DWORD   dwCurrentState;
	DWORD   dwControlsAccepted;
	DWORD   dwWin32ExitCode;
	DWORD   dwServiceSpecificExitCode;
	DWORD   dwCheckPoint;
	DWORD   dwWaitHint;
	DWORD   dwProcessId;
	DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, * LPSERVICE_STATUS_PROCESS;
typedef struct _ENUM_SERVICE_STATUSA {
	LPSTR             lpServiceName;
	LPSTR             lpDisplayName;
	SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, * LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
	LPWSTR            lpServiceName;
	LPWSTR            lpDisplayName;
	SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, * LPENUM_SERVICE_STATUSW;
typedef ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSW LPENUM_SERVICE_STATUS;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
	LPSTR                     lpServiceName;
	LPSTR                     lpDisplayName;
	SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, * LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
	LPWSTR                    lpServiceName;
	LPWSTR                    lpDisplayName;
	SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, * LPENUM_SERVICE_STATUS_PROCESSW;
typedef ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSW LPENUM_SERVICE_STATUS_PROCESS;
typedef LPVOID  SC_LOCK;
typedef struct _QUERY_SERVICE_LOCK_STATUSA {
	DWORD   fIsLocked;
	LPSTR   lpLockOwner;
	DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, * LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
	DWORD   fIsLocked;
	LPWSTR  lpLockOwner;
	DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, * LPQUERY_SERVICE_LOCK_STATUSW;
typedef QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSW LPQUERY_SERVICE_LOCK_STATUS;
typedef struct _QUERY_SERVICE_CONFIGA {
	DWORD   dwServiceType;
	DWORD   dwStartType;
	DWORD   dwErrorControl;
	LPSTR   lpBinaryPathName;
	LPSTR   lpLoadOrderGroup;
	DWORD   dwTagId;
	LPSTR   lpDependencies;
	LPSTR   lpServiceStartName;
	LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, * LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
	DWORD   dwServiceType;
	DWORD   dwStartType;
	DWORD   dwErrorControl;
	LPWSTR  lpBinaryPathName;
	LPWSTR  lpLoadOrderGroup;
	DWORD   dwTagId;
	LPWSTR  lpDependencies;
	LPWSTR  lpServiceStartName;
	LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, * LPQUERY_SERVICE_CONFIGW;
typedef QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGW LPQUERY_SERVICE_CONFIG;
typedef void __stdcall SERVICE_MAIN_FUNCTIONW(
	DWORD dwNumServicesArgs,
	LPWSTR* lpServiceArgVectors
);
typedef void __stdcall SERVICE_MAIN_FUNCTIONA(
	DWORD dwNumServicesArgs,
	LPTSTR* lpServiceArgVectors
);
typedef void(__stdcall* LPSERVICE_MAIN_FUNCTIONW)(
	DWORD   dwNumServicesArgs,
	LPWSTR* lpServiceArgVectors
	);
typedef void(__stdcall* LPSERVICE_MAIN_FUNCTIONA)(
	DWORD   dwNumServicesArgs,
	LPSTR* lpServiceArgVectors
	);
typedef struct _SERVICE_TABLE_ENTRYA {
	LPSTR                       lpServiceName;
	LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, * LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
	LPWSTR                      lpServiceName;
	LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, * LPSERVICE_TABLE_ENTRYW;
typedef SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYW LPSERVICE_TABLE_ENTRY;
typedef void __stdcall HANDLER_FUNCTION(
	DWORD    dwControl
);
typedef DWORD __stdcall HANDLER_FUNCTION_EX(
	DWORD    dwControl,
	DWORD    dwEventType,
	LPVOID   lpEventData,
	LPVOID   lpContext
);
typedef void(__stdcall* LPHANDLER_FUNCTION)(
	DWORD    dwControl
	);
typedef DWORD(__stdcall* LPHANDLER_FUNCTION_EX)(
	DWORD    dwControl,
	DWORD    dwEventType,
	LPVOID   lpEventData,
	LPVOID   lpContext
	);
typedef
void
(__stdcall* PFN_SC_NOTIFY_CALLBACK) (
	PVOID pParameter
	);
typedef struct _SERVICE_NOTIFY_1 {
	DWORD                   dwVersion;
	PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
	PVOID                   pContext;
	DWORD                   dwNotificationStatus;
	SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_NOTIFY_1, * PSERVICE_NOTIFY_1;
typedef struct _SERVICE_NOTIFY_2A {
	DWORD                   dwVersion;
	PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
	PVOID                   pContext;
	DWORD                   dwNotificationStatus;
	SERVICE_STATUS_PROCESS  ServiceStatus;
	DWORD                   dwNotificationTriggered;
	LPSTR                   pszServiceNames;
} SERVICE_NOTIFY_2A, * PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
	DWORD                   dwVersion;
	PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
	PVOID                   pContext;
	DWORD                   dwNotificationStatus;
	SERVICE_STATUS_PROCESS  ServiceStatus;
	DWORD                   dwNotificationTriggered;
	LPWSTR                  pszServiceNames;
} SERVICE_NOTIFY_2W, * PSERVICE_NOTIFY_2W;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2W PSERVICE_NOTIFY_2;
typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, * PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, * PSERVICE_NOTIFYW;
typedef SERVICE_NOTIFYW SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYW PSERVICE_NOTIFY;
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
	DWORD                   dwReason;
	LPSTR                   pszComment;
	SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, * PSERVICE_CONTROL_STATUS_REASON_PARAMSA;
typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
	DWORD                   dwReason;
	LPWSTR                  pszComment;
	SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, * PSERVICE_CONTROL_STATUS_REASON_PARAMSW;
typedef SERVICE_CONTROL_STATUS_REASON_PARAMSW SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSW PSERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef struct _SERVICE_START_REASON {
	DWORD                   dwReason;
} SERVICE_START_REASON, * PSERVICE_START_REASON;

BOOL
__stdcall
ChangeServiceConfigA(
	SC_HANDLE    hService,
	DWORD        dwServiceType,
	DWORD        dwStartType,
	DWORD        dwErrorControl,
	LPCSTR     lpBinaryPathName,
	LPCSTR     lpLoadOrderGroup,
	LPDWORD      lpdwTagId,
	LPCSTR     lpDependencies,
	LPCSTR     lpServiceStartName,
	LPCSTR     lpPassword,
	LPCSTR     lpDisplayName
);

BOOL
__stdcall
ChangeServiceConfigW(
	SC_HANDLE    hService,
	DWORD        dwServiceType,
	DWORD        dwStartType,
	DWORD        dwErrorControl,
	LPCWSTR     lpBinaryPathName,
	LPCWSTR     lpLoadOrderGroup,
	LPDWORD      lpdwTagId,
	LPCWSTR     lpDependencies,
	LPCWSTR     lpServiceStartName,
	LPCWSTR     lpPassword,
	LPCWSTR     lpDisplayName
);

BOOL
__stdcall
ChangeServiceConfig2A(
	SC_HANDLE    hService,
	DWORD        dwInfoLevel,
	LPVOID       lpInfo
);

BOOL
__stdcall
ChangeServiceConfig2W(
	SC_HANDLE    hService,
	DWORD        dwInfoLevel,
	LPVOID       lpInfo
);

BOOL
__stdcall
CloseServiceHandle(
	SC_HANDLE   hSCObject
);

BOOL
__stdcall
ControlService(
	SC_HANDLE           hService,
	DWORD               dwControl,
	LPSERVICE_STATUS    lpServiceStatus
);

SC_HANDLE
__stdcall
CreateServiceA(
	SC_HANDLE    hSCManager,
	LPCSTR     lpServiceName,
	LPCSTR     lpDisplayName,
	DWORD        dwDesiredAccess,
	DWORD        dwServiceType,
	DWORD        dwStartType,
	DWORD        dwErrorControl,
	LPCSTR     lpBinaryPathName,
	LPCSTR     lpLoadOrderGroup,
	LPDWORD      lpdwTagId,
	LPCSTR     lpDependencies,
	LPCSTR     lpServiceStartName,
	LPCSTR     lpPassword
);

SC_HANDLE
__stdcall
CreateServiceW(
	SC_HANDLE    hSCManager,
	LPCWSTR     lpServiceName,
	LPCWSTR     lpDisplayName,
	DWORD        dwDesiredAccess,
	DWORD        dwServiceType,
	DWORD        dwStartType,
	DWORD        dwErrorControl,
	LPCWSTR     lpBinaryPathName,
	LPCWSTR     lpLoadOrderGroup,
	LPDWORD      lpdwTagId,
	LPCWSTR     lpDependencies,
	LPCWSTR     lpServiceStartName,
	LPCWSTR     lpPassword
);

BOOL
__stdcall
DeleteService(
	SC_HANDLE   hService
);

BOOL
__stdcall
EnumDependentServicesA(
	SC_HANDLE               hService,
	DWORD                   dwServiceState,
	LPENUM_SERVICE_STATUSA  lpServices,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded,
	LPDWORD                 lpServicesReturned
);

BOOL
__stdcall
EnumDependentServicesW(
	SC_HANDLE               hService,
	DWORD                   dwServiceState,
	LPENUM_SERVICE_STATUSW  lpServices,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded,
	LPDWORD                 lpServicesReturned
);

BOOL
__stdcall
EnumServicesStatusA(
	SC_HANDLE               hSCManager,
	DWORD                   dwServiceType,
	DWORD                   dwServiceState,
	LPENUM_SERVICE_STATUSA  lpServices,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded,
	LPDWORD                 lpServicesReturned,
	LPDWORD                 lpResumeHandle
);

BOOL
__stdcall
EnumServicesStatusW(
	SC_HANDLE               hSCManager,
	DWORD                   dwServiceType,
	DWORD                   dwServiceState,
	LPENUM_SERVICE_STATUSW  lpServices,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded,
	LPDWORD                 lpServicesReturned,
	LPDWORD                 lpResumeHandle
);

BOOL
__stdcall
EnumServicesStatusExA(
	SC_HANDLE               hSCManager,
	SC_ENUM_TYPE            InfoLevel,
	DWORD                   dwServiceType,
	DWORD                   dwServiceState,
	LPBYTE                  lpServices,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded,
	LPDWORD                 lpServicesReturned,
	LPDWORD                 lpResumeHandle,
	LPCSTR                pszGroupName
);

BOOL
__stdcall
EnumServicesStatusExW(
	SC_HANDLE               hSCManager,
	SC_ENUM_TYPE            InfoLevel,
	DWORD                   dwServiceType,
	DWORD                   dwServiceState,
	LPBYTE                  lpServices,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded,
	LPDWORD                 lpServicesReturned,
	LPDWORD                 lpResumeHandle,
	LPCWSTR                pszGroupName
);

BOOL
__stdcall
GetServiceKeyNameA(
	SC_HANDLE               hSCManager,
	LPCSTR                lpDisplayName,
	LPSTR                 lpServiceName,
	LPDWORD                 lpcchBuffer
);

BOOL
__stdcall
GetServiceKeyNameW(
	SC_HANDLE               hSCManager,
	LPCWSTR                lpDisplayName,
	LPWSTR                 lpServiceName,
	LPDWORD                 lpcchBuffer
);

BOOL
__stdcall
GetServiceDisplayNameA(
	SC_HANDLE               hSCManager,
	LPCSTR                lpServiceName,
	LPSTR                 lpDisplayName,
	LPDWORD                 lpcchBuffer
);

BOOL
__stdcall
GetServiceDisplayNameW(
	SC_HANDLE               hSCManager,
	LPCWSTR                lpServiceName,
	LPWSTR                 lpDisplayName,
	LPDWORD                 lpcchBuffer
);

SC_LOCK
__stdcall
LockServiceDatabase(
	SC_HANDLE               hSCManager
);

BOOL
__stdcall
NotifyBootConfigStatus(
	BOOL                    BootAcceptable
);

SC_HANDLE
__stdcall
OpenSCManagerA(
	LPCSTR                lpMachineName,
	LPCSTR                lpDatabaseName,
	DWORD                   dwDesiredAccess
);

SC_HANDLE
__stdcall
OpenSCManagerW(
	LPCWSTR                lpMachineName,
	LPCWSTR                lpDatabaseName,
	DWORD                   dwDesiredAccess
);

SC_HANDLE
__stdcall
OpenServiceA(
	SC_HANDLE               hSCManager,
	LPCSTR                lpServiceName,
	DWORD                   dwDesiredAccess
);

SC_HANDLE
__stdcall
OpenServiceW(
	SC_HANDLE               hSCManager,
	LPCWSTR                lpServiceName,
	DWORD                   dwDesiredAccess
);

BOOL
__stdcall
QueryServiceConfigA(
	SC_HANDLE               hService,
	LPQUERY_SERVICE_CONFIGA lpServiceConfig,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceConfigW(
	SC_HANDLE               hService,
	LPQUERY_SERVICE_CONFIGW lpServiceConfig,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceConfig2A(
	SC_HANDLE               hService,
	DWORD                   dwInfoLevel,
	LPBYTE                  lpBuffer,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceConfig2W(
	SC_HANDLE               hService,
	DWORD                   dwInfoLevel,
	LPBYTE                  lpBuffer,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceLockStatusA(
	SC_HANDLE                       hSCManager,
	LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
	DWORD                           cbBufSize,
	LPDWORD                         pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceLockStatusW(
	SC_HANDLE                       hSCManager,
	LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
	DWORD                           cbBufSize,
	LPDWORD                         pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceObjectSecurity(
	SC_HANDLE               hService,
	SECURITY_INFORMATION    dwSecurityInformation,
	PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
	DWORD                   cbBufSize,
	LPDWORD                 pcbBytesNeeded
);

BOOL
__stdcall
QueryServiceStatus(
	SC_HANDLE           hService,
	LPSERVICE_STATUS    lpServiceStatus
);

BOOL
__stdcall
QueryServiceStatusEx(
	SC_HANDLE           hService,
	SC_STATUS_TYPE      InfoLevel,
	LPBYTE              lpBuffer,
	DWORD               cbBufSize,
	LPDWORD             pcbBytesNeeded
);

SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
	LPCSTR                    lpServiceName,
	LPHANDLER_FUNCTION          lpHandlerProc
);

SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
	LPCWSTR                    lpServiceName,
	LPHANDLER_FUNCTION          lpHandlerProc
);

SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
	LPCSTR                    lpServiceName,
	LPHANDLER_FUNCTION_EX       lpHandlerProc,
	LPVOID                     lpContext
);

SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
	LPCWSTR                    lpServiceName,
	LPHANDLER_FUNCTION_EX       lpHandlerProc,
	LPVOID                     lpContext
);

BOOL
__stdcall
SetServiceObjectSecurity(
	SC_HANDLE               hService,
	SECURITY_INFORMATION    dwSecurityInformation,
	PSECURITY_DESCRIPTOR    lpSecurityDescriptor
);

BOOL
__stdcall
SetServiceStatus(
	SERVICE_STATUS_HANDLE   hServiceStatus,
	LPSERVICE_STATUS        lpServiceStatus
);

BOOL
__stdcall
StartServiceCtrlDispatcherA(
	const  SERVICE_TABLE_ENTRYA* lpServiceStartTable
);

BOOL
__stdcall
StartServiceCtrlDispatcherW(
	const  SERVICE_TABLE_ENTRYW* lpServiceStartTable
);

BOOL
__stdcall
StartServiceA(
	SC_HANDLE            hService,
	DWORD                dwNumServiceArgs,
	LPCSTR* lpServiceArgVectors
);

BOOL
__stdcall
StartServiceW(
	SC_HANDLE            hService,
	DWORD                dwNumServiceArgs,
	LPCWSTR* lpServiceArgVectors
);

BOOL
__stdcall
UnlockServiceDatabase(
	SC_LOCK             ScLock
);

DWORD
__stdcall
NotifyServiceStatusChangeA(
	SC_HANDLE               hService,
	DWORD                   dwNotifyMask,
	PSERVICE_NOTIFYA        pNotifyBuffer
);

DWORD
__stdcall
NotifyServiceStatusChangeW(
	SC_HANDLE               hService,
	DWORD                   dwNotifyMask,
	PSERVICE_NOTIFYW        pNotifyBuffer
);

BOOL
__stdcall
ControlServiceExA(
	SC_HANDLE               hService,
	DWORD                   dwControl,
	DWORD                   dwInfoLevel,
	PVOID                   pControlParams
);

BOOL
__stdcall
ControlServiceExW(
	SC_HANDLE               hService,
	DWORD                   dwControl,
	DWORD                   dwInfoLevel,
	PVOID                   pControlParams
);

BOOL
__stdcall
QueryServiceDynamicInformation(
	SERVICE_STATUS_HANDLE   hServiceStatus,
	DWORD                   dwInfoLevel,
	PVOID* ppDynamicInfo
);
typedef enum _SC_EVENT_TYPE {
	SC_EVENT_DATABASE_CHANGE,
	SC_EVENT_PROPERTY_CHANGE,
	SC_EVENT_STATUS_CHANGE
} SC_EVENT_TYPE, * PSC_EVENT_TYPE;
typedef
void
__stdcall
SC_NOTIFICATION_CALLBACK(
	DWORD                   dwNotify,
	PVOID                   pCallbackContext
);
typedef SC_NOTIFICATION_CALLBACK* PSC_NOTIFICATION_CALLBACK;
typedef struct _SC_NOTIFICATION_REGISTRATION* PSC_NOTIFICATION_REGISTRATION;

DWORD
__stdcall
SubscribeServiceChangeNotifications(
	SC_HANDLE                      hService,
	SC_EVENT_TYPE                  eEventType,
	PSC_NOTIFICATION_CALLBACK      pCallback,
	PVOID                          pCallbackContext,
	PSC_NOTIFICATION_REGISTRATION* pSubscription
);

void
__stdcall
UnsubscribeServiceChangeNotifications(
	PSC_NOTIFICATION_REGISTRATION pSubscription
);

DWORD
__stdcall
WaitServiceState(
	SC_HANDLE  hService,
	DWORD      dwNotify,
	DWORD      dwTimeout,
	HANDLE     hCancelEvent
);
typedef enum SERVICE_REGISTRY_STATE_TYPE {
	ServiceRegistryStateParameters = 0,
	ServiceRegistryStatePersistent = 1,
	MaxServiceRegistryStateType = 2,
} SERVICE_REGISTRY_STATE_TYPE;
DWORD
__stdcall
GetServiceRegistryStateKey(
	SERVICE_STATUS_HANDLE ServiceStatusHandle,
	SERVICE_REGISTRY_STATE_TYPE StateType,
	DWORD AccessMask,
	HKEY* ServiceStateKey
);
typedef enum SERVICE_DIRECTORY_TYPE {
	ServiceDirectoryPersistentState = 0,
	ServiceDirectoryTypeMax = 1,
} SERVICE_DIRECTORY_TYPE;
DWORD
__stdcall
GetServiceDirectory(
	SERVICE_STATUS_HANDLE hServiceStatus,
	SERVICE_DIRECTORY_TYPE eDirectoryType,
	PWCHAR lpPathBuffer,
	DWORD cchPathBufferLength,
	DWORD* lpcchRequiredBufferLength
);
typedef struct _MODEMDEVCAPS {
	DWORD   dwActualSize;
	DWORD   dwRequiredSize;
	DWORD   dwDevSpecificOffset;
	DWORD   dwDevSpecificSize;
	DWORD   dwModemProviderVersion;
	DWORD   dwModemManufacturerOffset;
	DWORD   dwModemManufacturerSize;
	DWORD   dwModemModelOffset;
	DWORD   dwModemModelSize;
	DWORD   dwModemVersionOffset;
	DWORD   dwModemVersionSize;
	DWORD   dwDialOptions;
	DWORD   dwCallSetupFailTimer;
	DWORD   dwInactivityTimeout;
	DWORD   dwSpeakerVolume;
	DWORD   dwSpeakerMode;
	DWORD   dwModemOptions;
	DWORD   dwMaxDTERate;
	DWORD   dwMaxDCERate;
	BYTE    abVariablePortion[1];
} MODEMDEVCAPS, * PMODEMDEVCAPS, * LPMODEMDEVCAPS;
typedef struct _MODEMSETTINGS {
	DWORD   dwActualSize;
	DWORD   dwRequiredSize;
	DWORD   dwDevSpecificOffset;
	DWORD   dwDevSpecificSize;
	DWORD   dwCallSetupFailTimer;
	DWORD   dwInactivityTimeout;
	DWORD   dwSpeakerVolume;
	DWORD   dwSpeakerMode;
	DWORD   dwPreferredModemOptions;
	DWORD   dwNegotiatedModemOptions;
	DWORD   dwNegotiatedDCERate;
	BYTE    abVariablePortion[1];
} MODEMSETTINGS, * PMODEMSETTINGS, * LPMODEMSETTINGS;
struct HIMC__ { int unused; }; typedef struct HIMC__* HIMC;
struct HIMCC__ { int unused; }; typedef struct HIMCC__* HIMCC;
typedef HKL* LPHKL;
typedef UINT* LPUINT;
typedef struct tagCOMPOSITIONFORM {
	DWORD dwStyle;
	POINT ptCurrentPos;
	RECT  rcArea;
} COMPOSITIONFORM, * PCOMPOSITIONFORM, * NPCOMPOSITIONFORM, * LPCOMPOSITIONFORM;
typedef struct tagCANDIDATEFORM {
	DWORD dwIndex;
	DWORD dwStyle;
	POINT ptCurrentPos;
	RECT  rcArea;
} CANDIDATEFORM, * PCANDIDATEFORM, * NPCANDIDATEFORM, * LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST {
	DWORD dwSize;
	DWORD dwStyle;
	DWORD dwCount;
	DWORD dwSelection;
	DWORD dwPageStart;
	DWORD dwPageSize;
	DWORD dwOffset[1];
} CANDIDATELIST, * PCANDIDATELIST, * NPCANDIDATELIST, * LPCANDIDATELIST;
typedef struct tagREGISTERWORDA {
	LPSTR   lpReading;
	LPSTR   lpWord;
} REGISTERWORDA, * PREGISTERWORDA, * NPREGISTERWORDA, * LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
	LPWSTR  lpReading;
	LPWSTR  lpWord;
} REGISTERWORDW, * PREGISTERWORDW, * NPREGISTERWORDW, * LPREGISTERWORDW;
typedef REGISTERWORDW REGISTERWORD;
typedef PREGISTERWORDW PREGISTERWORD;
typedef NPREGISTERWORDW NPREGISTERWORD;
typedef LPREGISTERWORDW LPREGISTERWORD;
typedef struct tagRECONVERTSTRING {
	DWORD dwSize;
	DWORD dwVersion;
	DWORD dwStrLen;
	DWORD dwStrOffset;
	DWORD dwCompStrLen;
	DWORD dwCompStrOffset;
	DWORD dwTargetStrLen;
	DWORD dwTargetStrOffset;
} RECONVERTSTRING, * PRECONVERTSTRING, * NPRECONVERTSTRING, * LPRECONVERTSTRING;
typedef struct tagSTYLEBUFA {
	DWORD       dwStyle;
	CHAR        szDescription[32];
} STYLEBUFA, * PSTYLEBUFA, * NPSTYLEBUFA, * LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
	DWORD       dwStyle;
	WCHAR       szDescription[32];
} STYLEBUFW, * PSTYLEBUFW, * NPSTYLEBUFW, * LPSTYLEBUFW;
typedef STYLEBUFW STYLEBUF;
typedef PSTYLEBUFW PSTYLEBUF;
typedef NPSTYLEBUFW NPSTYLEBUF;
typedef LPSTYLEBUFW LPSTYLEBUF;
typedef struct tagIMEMENUITEMINFOA {
	UINT        cbSize;
	UINT        fType;
	UINT        fState;
	UINT        wID;
	HBITMAP     hbmpChecked;
	HBITMAP     hbmpUnchecked;
	DWORD       dwItemData;
	CHAR        szString[80];
	HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, * PIMEMENUITEMINFOA, * NPIMEMENUITEMINFOA, * LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
	UINT        cbSize;
	UINT        fType;
	UINT        fState;
	UINT        wID;
	HBITMAP     hbmpChecked;
	HBITMAP     hbmpUnchecked;
	DWORD       dwItemData;
	WCHAR       szString[80];
	HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, * PIMEMENUITEMINFOW, * NPIMEMENUITEMINFOW, * LPIMEMENUITEMINFOW;
typedef IMEMENUITEMINFOW IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOW PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOW NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOW LPIMEMENUITEMINFO;
typedef struct tagIMECHARPOSITION {
	DWORD       dwSize;
	DWORD       dwCharPos;
	POINT       pt;
	UINT        cLineHeight;
	RECT        rcDocument;
} IMECHARPOSITION, * PIMECHARPOSITION, * NPIMECHARPOSITION, * LPIMECHARPOSITION;
typedef BOOL(__stdcall* IMCENUMPROC)(HIMC, LPARAM);
HKL  __stdcall ImmInstallIMEA(LPCSTR lpszIMEFileName, LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);
HWND __stdcall ImmGetDefaultIMEWnd(HWND);
UINT __stdcall ImmGetDescriptionA(HKL, LPSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetDescriptionW(HKL, LPWSTR lpszDescription, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameA(HKL, LPSTR lpszFileName, UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW(HKL, LPWSTR lpszFileName, UINT uBufLen);
DWORD __stdcall ImmGetProperty(HKL, DWORD);
BOOL __stdcall ImmIsIME(HKL);
BOOL __stdcall ImmSimulateHotKey(HWND, DWORD);
HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext(HIMC);
HIMC __stdcall ImmGetContext(HWND);
BOOL __stdcall ImmReleaseContext(HWND, HIMC);
HIMC __stdcall ImmAssociateContext(HWND, HIMC);
BOOL __stdcall ImmAssociateContextEx(HWND, HIMC, DWORD);
LONG  __stdcall ImmGetCompositionStringA(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
LONG  __stdcall ImmGetCompositionStringW(HIMC, DWORD, LPVOID lpBuf, DWORD dwBufLen);
BOOL  __stdcall ImmSetCompositionStringA(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
BOOL  __stdcall ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPVOID lpComp, DWORD dwCompLen, LPVOID lpRead, DWORD dwReadLen);
DWORD __stdcall ImmGetCandidateListCountA(HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListA(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST lpCandList, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineA(HIMC, DWORD dwIndex, LPSTR lpBuf, DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR lpBuf, DWORD dwBufLen);
BOOL __stdcall ImmGetConversionStatus(HIMC, LPDWORD lpfdwConversion, LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus(HIMC, DWORD, DWORD);
BOOL __stdcall ImmGetOpenStatus(HIMC);
BOOL __stdcall ImmSetOpenStatus(HIMC, BOOL);
BOOL __stdcall ImmGetCompositionFontA(HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW(HIMC, LPLOGFONTW lplf);
BOOL __stdcall ImmSetCompositionFontA(HIMC, LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW(HIMC, LPLOGFONTW lplf);
BOOL    __stdcall ImmConfigureIMEA(HKL, HWND, DWORD, LPVOID);
BOOL    __stdcall ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);
LRESULT __stdcall ImmEscapeA(HKL, HIMC, UINT, LPVOID);
LRESULT __stdcall ImmEscapeW(HKL, HIMC, UINT, LPVOID);
DWORD   __stdcall ImmGetConversionListA(HKL, HIMC, LPCSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
DWORD   __stdcall ImmGetConversionListW(HKL, HIMC, LPCWSTR lpSrc, LPCANDIDATELIST lpDst, DWORD dwBufLen, UINT uFlag);
BOOL    __stdcall ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);
BOOL __stdcall ImmGetStatusWindowPos(HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos(HIMC, LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmIsUIMessageA(HWND, UINT, WPARAM, LPARAM);
BOOL __stdcall ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);
UINT __stdcall ImmGetVirtualKey(HWND);
typedef int(__stdcall* REGISTERWORDENUMPROCA)(LPCSTR lpszReading, DWORD, LPCSTR lpszString, LPVOID);
typedef int(__stdcall* REGISTERWORDENUMPROCW)(LPCWSTR lpszReading, DWORD, LPCWSTR lpszString, LPVOID);
BOOL __stdcall ImmRegisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);
BOOL __stdcall ImmUnregisterWordA(HKL, LPCSTR lpszReading, DWORD, LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);
UINT __stdcall ImmGetRegisterWordStyleA(HKL, UINT nItem, LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW lpStyleBuf);
UINT __stdcall ImmEnumRegisterWordA(HKL, REGISTERWORDENUMPROCA, LPCSTR lpszReading, DWORD, LPCSTR lpszRegister, LPVOID);
UINT __stdcall ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);
BOOL __stdcall ImmDisableIME(DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA lpImeParentMenu, LPIMEMENUITEMINFOA lpImeMenu, DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW lpImeParentMenu, LPIMEMENUITEMINFOW lpImeMenu, DWORD dwSize);
BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);
BOOL __stdcall ImmDisableLegacyIME(void);
extern const GUID  GUID_DEVINTERFACE_DISK = { 0x53f56307L, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_CDROM = { 0x53f56308L, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_PARTITION = { 0x53f5630aL, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_TAPE = { 0x53f5630bL, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_WRITEONCEDISK = { 0x53f5630cL, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_VOLUME = { 0x53f5630dL, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_MEDIUMCHANGER = { 0x53f56310L, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_FLOPPY = { 0x53f56311L, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_CDCHANGER = { 0x53f56312L, 0xb6bf, 0x11d0, { 0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_STORAGEPORT = { 0x2accfe60L, 0xc130, 0x11d2, { 0xb0, 0x82, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b } };
extern const GUID  GUID_DEVINTERFACE_VMLUN = { 0x6f416619L, 0x9f29, 0x42a5, { 0xb2, 0x0b, 0x37, 0xe2, 0x19, 0xca, 0x02, 0xb0 } };
extern const GUID  GUID_DEVINTERFACE_SES = { 0x1790c9ecL, 0x47d5, 0x4df3, { 0xb5, 0xaf, 0x9a, 0xdf, 0x3c, 0xf2, 0x3e, 0x48 } };
extern const GUID  GUID_DEVINTERFACE_SERVICE_VOLUME = { 0x6ead3d82L, 0x25ec, 0x46bc, { 0xb7, 0xfd, 0xc1, 0xf0, 0xdf, 0x8f, 0x50, 0x37 } };
extern const GUID  GUID_DEVINTERFACE_HIDDEN_VOLUME = { 0x7f108a28L, 0x9833, 0x4b3b, { 0xb7, 0x80, 0x2c, 0x6b, 0x5f, 0xa5, 0xc0, 0x62 } };
extern const GUID  GUID_DEVINTERFACE_UNIFIED_ACCESS_RPMB = { 0x27447c21L, 0xbcc3, 0x4d07, { 0xa0, 0x5b, 0xa3, 0x39, 0x5b, 0xb4, 0xee, 0xe7 } };
extern const GUID  GUID_DEVINTERFACE_SCM_PHYSICAL_DEVICE = { 0x4283609d, 0x4dc2, 0x43be, { 0xbb, 0xb4, 0x4f, 0x15, 0xdf, 0xce, 0x2c, 0x61 } };
extern const GUID  GUID_SCM_PD_HEALTH_NOTIFICATION = { 0x9da2d386, 0x72f5, 0x4ee3, { 0x81, 0x55, 0xec, 0xa0, 0x67, 0x8e, 0x3b, 0x6 } };
extern const GUID  GUID_SCM_PD_PASSTHROUGH_INVDIMM = { 0x4309AC30, 0x0D11, 0x11E4, { 0x91, 0x91, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66 } };
extern const GUID  GUID_DEVINTERFACE_COMPORT = { 0X86E0D1E0L, 0X8089, 0X11D0, { 0X9C, 0XE4, 0X08, 0X00, 0X3E, 0X30, 0X1F, 0X73 } };
extern const GUID  GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR = { 0x4D36E978L, 0xE325, 0x11CE, { 0xBF, 0xC1, 0x08, 0x00, 0x2B, 0xE1, 0x03, 0x18 } };
typedef struct _STORAGE_HOTPLUG_INFO {
	DWORD Size;
	BOOLEAN MediaRemovable;
	BOOLEAN MediaHotplug;
	BOOLEAN DeviceHotplug;
	BOOLEAN WriteCacheEnableOverride;
} STORAGE_HOTPLUG_INFO, * PSTORAGE_HOTPLUG_INFO;
typedef struct _STORAGE_DEVICE_NUMBER {
	DWORD DeviceType;
	DWORD       DeviceNumber;
	DWORD       PartitionNumber;
} STORAGE_DEVICE_NUMBER, * PSTORAGE_DEVICE_NUMBER;
typedef struct _STORAGE_DEVICE_NUMBERS {
	DWORD Version;
	DWORD Size;
	DWORD NumberOfDevices;
	STORAGE_DEVICE_NUMBER Devices[1];
} STORAGE_DEVICE_NUMBERS, * PSTORAGE_DEVICE_NUMBERS;
typedef struct _STORAGE_DEVICE_NUMBER_EX {
	DWORD       Version;
	DWORD       Size;
	DWORD       Flags;
	DWORD DeviceType;
	DWORD       DeviceNumber;
	GUID        DeviceGuid;
	DWORD       PartitionNumber;
} STORAGE_DEVICE_NUMBER_EX, * PSTORAGE_DEVICE_NUMBER_EX;
typedef struct _STORAGE_BUS_RESET_REQUEST {
	BYTE  PathId;
} STORAGE_BUS_RESET_REQUEST, * PSTORAGE_BUS_RESET_REQUEST;
typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
	DWORD Length;
	BYTE  _unused;
	BYTE  PathId;
	BYTE  TargetId;
	BYTE  Lun;
} STORAGE_BREAK_RESERVATION_REQUEST, * PSTORAGE_BREAK_RESERVATION_REQUEST;
typedef struct _PREVENT_MEDIA_REMOVAL {
	BOOLEAN PreventMediaRemoval;
} PREVENT_MEDIA_REMOVAL, * PPREVENT_MEDIA_REMOVAL;
typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
	DWORD MediaChangeCount;
	DWORD NewState;
} CLASS_MEDIA_CHANGE_CONTEXT, * PCLASS_MEDIA_CHANGE_CONTEXT;
typedef struct _TAPE_STATISTICS {
	DWORD Version;
	DWORD Flags;
	LARGE_INTEGER RecoveredWrites;
	LARGE_INTEGER UnrecoveredWrites;
	LARGE_INTEGER RecoveredReads;
	LARGE_INTEGER UnrecoveredReads;
	BYTE          CompressionRatioReads;
	BYTE          CompressionRatioWrites;
} TAPE_STATISTICS, * PTAPE_STATISTICS;
typedef struct _TAPE_GET_STATISTICS {
	DWORD Operation;
} TAPE_GET_STATISTICS, * PTAPE_GET_STATISTICS;
typedef enum _STORAGE_MEDIA_TYPE {
	DDS_4mm = 0x20,
	MiniQic,
	Travan,
	QIC,
	MP_8mm,
	AME_8mm,
	AIT1_8mm,
	DLT,
	NCTP,
	IBM_3480,
	IBM_3490E,
	IBM_Magstar_3590,
	IBM_Magstar_MP,
	STK_DATA_D3,
	SONY_DTF,
	DV_6mm,
	DMI,
	SONY_D2,
	CLEANER_CARTRIDGE,
	CD_ROM,
	CD_R,
	CD_RW,
	DVD_ROM,
	DVD_R,
	DVD_RW,
	MO_3_RW,
	MO_5_WO,
	MO_5_RW,
	MO_5_LIMDOW,
	PC_5_WO,
	PC_5_RW,
	PD_5_RW,
	ABL_5_WO,
	PINNACLE_APEX_5_RW,
	SONY_12_WO,
	PHILIPS_12_WO,
	HITACHI_12_WO,
	CYGNET_12_WO,
	KODAK_14_WO,
	MO_NFR_525,
	NIKON_12_RW,
	IOMEGA_ZIP,
	IOMEGA_JAZ,
	SYQUEST_EZ135,
	SYQUEST_EZFLYER,
	SYQUEST_SYJET,
	AVATAR_F2,
	MP2_8mm,
	DST_S,
	DST_M,
	DST_L,
	VXATape_1,
	VXATape_2,
	STK_9840,
	LTO_Ultrium,
	LTO_Accelis,
	DVD_RAM,
	AIT_8mm,
	ADR_1,
	ADR_2,
	STK_9940,
	SAIT,
	VXATape
}STORAGE_MEDIA_TYPE, * PSTORAGE_MEDIA_TYPE;
typedef enum  _STORAGE_BUS_TYPE {
	BusTypeUnknown = 0x00,
	BusTypeScsi,
	BusTypeAtapi,
	BusTypeAta,
	BusType1394,
	BusTypeSsa,
	BusTypeFibre,
	BusTypeUsb,
	BusTypeRAID,
	BusTypeiScsi,
	BusTypeSas,
	BusTypeSata,
	BusTypeSd,
	BusTypeMmc,
	BusTypeVirtual,
	BusTypeFileBackedVirtual,
	BusTypeSpaces,
	BusTypeNvme,
	BusTypeSCM,
	BusTypeUfs,
	BusTypeMax,
	BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE, * PSTORAGE_BUS_TYPE;
typedef struct _DEVICE_MEDIA_INFO {
	union {
		struct {
			LARGE_INTEGER Cylinders;
			STORAGE_MEDIA_TYPE MediaType;
			DWORD TracksPerCylinder;
			DWORD SectorsPerTrack;
			DWORD BytesPerSector;
			DWORD NumberMediaSides;
			DWORD MediaCharacteristics;
		} DiskInfo;
		struct {
			LARGE_INTEGER Cylinders;
			STORAGE_MEDIA_TYPE MediaType;
			DWORD TracksPerCylinder;
			DWORD SectorsPerTrack;
			DWORD BytesPerSector;
			DWORD NumberMediaSides;
			DWORD MediaCharacteristics;
		} RemovableDiskInfo;
		struct {
			STORAGE_MEDIA_TYPE MediaType;
			DWORD   MediaCharacteristics;
			DWORD   CurrentBlockSize;
			STORAGE_BUS_TYPE BusType;
			union {
				struct {
					BYTE  MediumType;
					BYTE  DensityCode;
				} ScsiInformation;
			} BusSpecificData;
		} TapeInfo;
	} DeviceSpecific;
} DEVICE_MEDIA_INFO, * PDEVICE_MEDIA_INFO;
typedef struct _GET_MEDIA_TYPES {
	DWORD DeviceType;
	DWORD MediaInfoCount;
	DEVICE_MEDIA_INFO MediaInfo[1];
} GET_MEDIA_TYPES, * PGET_MEDIA_TYPES;
typedef struct _STORAGE_PREDICT_FAILURE
{
	DWORD PredictFailure;
	BYTE  VendorSpecific[512];
} STORAGE_PREDICT_FAILURE, * PSTORAGE_PREDICT_FAILURE;
typedef struct _STORAGE_FAILURE_PREDICTION_CONFIG {
	DWORD Version;
	DWORD Size;
	BOOLEAN Set;
	BOOLEAN Enabled;
	WORD   Reserved;
} STORAGE_FAILURE_PREDICTION_CONFIG, * PSTORAGE_FAILURE_PREDICTION_CONFIG;
typedef enum _STORAGE_QUERY_TYPE {
	PropertyStandardQuery = 0,
	PropertyExistsQuery,
	PropertyMaskQuery,
	PropertyQueryMaxDefined
} STORAGE_QUERY_TYPE, * PSTORAGE_QUERY_TYPE;
typedef enum _STORAGE_SET_TYPE {
	PropertyStandardSet = 0,
	PropertyExistsSet,
	PropertySetMaxDefined
} STORAGE_SET_TYPE, * PSTORAGE_SET_TYPE;
typedef enum  _STORAGE_PROPERTY_ID {
	StorageDeviceProperty = 0,
	StorageAdapterProperty,
	StorageDeviceIdProperty,
	StorageDeviceUniqueIdProperty,
	StorageDeviceWriteCacheProperty,
	StorageMiniportProperty,
	StorageAccessAlignmentProperty,
	StorageDeviceSeekPenaltyProperty,
	StorageDeviceTrimProperty,
	StorageDeviceWriteAggregationProperty,
	StorageDeviceDeviceTelemetryProperty,
	StorageDeviceLBProvisioningProperty,
	StorageDevicePowerProperty,
	StorageDeviceCopyOffloadProperty,
	StorageDeviceResiliencyProperty,
	StorageDeviceMediumProductType,
	StorageAdapterRpmbProperty,
	StorageAdapterCryptoProperty,
	StorageDeviceIoCapabilityProperty = 48,
	StorageAdapterProtocolSpecificProperty,
	StorageDeviceProtocolSpecificProperty,
	StorageAdapterTemperatureProperty,
	StorageDeviceTemperatureProperty,
	StorageAdapterPhysicalTopologyProperty,
	StorageDevicePhysicalTopologyProperty,
	StorageDeviceAttributesProperty,
	StorageDeviceManagementStatus,
	StorageAdapterSerialNumberProperty,
	StorageDeviceLocationProperty,
	StorageDeviceNumaProperty,
	StorageDeviceZonedDeviceProperty,
	StorageDeviceUnsafeShutdownCount,
	StorageDeviceEnduranceProperty,
} STORAGE_PROPERTY_ID, * PSTORAGE_PROPERTY_ID;
typedef struct _STORAGE_PROPERTY_QUERY {
	STORAGE_PROPERTY_ID PropertyId;
	STORAGE_QUERY_TYPE QueryType;
	BYTE  AdditionalParameters[1];
} STORAGE_PROPERTY_QUERY, * PSTORAGE_PROPERTY_QUERY;
typedef struct _STORAGE_PROPERTY_SET {
	STORAGE_PROPERTY_ID PropertyId;
	STORAGE_SET_TYPE SetType;
	BYTE  AdditionalParameters[1];
} STORAGE_PROPERTY_SET, * PSTORAGE_PROPERTY_SET;
typedef   struct  _STORAGE_DESCRIPTOR_HEADER {
	DWORD Version;
	DWORD Size;
} STORAGE_DESCRIPTOR_HEADER, * PSTORAGE_DESCRIPTOR_HEADER;
typedef   struct  _STORAGE_DEVICE_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	BYTE  DeviceType;
	BYTE  DeviceTypeModifier;
	BOOLEAN RemovableMedia;
	BOOLEAN CommandQueueing;
	DWORD VendorIdOffset;
	DWORD ProductIdOffset;
	DWORD ProductRevisionOffset;
	DWORD SerialNumberOffset;
	STORAGE_BUS_TYPE BusType;
	DWORD RawPropertiesLength;
	BYTE  RawDeviceProperties[1];
} STORAGE_DEVICE_DESCRIPTOR, * PSTORAGE_DEVICE_DESCRIPTOR;
typedef   struct  _STORAGE_ADAPTER_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD MaximumTransferLength;
	DWORD MaximumPhysicalPages;
	DWORD AlignmentMask;
	BOOLEAN AdapterUsesPio;
	BOOLEAN AdapterScansDown;
	BOOLEAN CommandQueueing;
	BOOLEAN AcceleratedTransfer;
	BYTE  BusType;
	WORD   BusMajorVersion;
	WORD   BusMinorVersion;
	BYTE  SrbType;
	BYTE  AddressType;
} STORAGE_ADAPTER_DESCRIPTOR, * PSTORAGE_ADAPTER_DESCRIPTOR;
typedef   struct  _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD BytesPerCacheLine;
	DWORD BytesOffsetForCacheAlignment;
	DWORD BytesPerLogicalSector;
	DWORD BytesPerPhysicalSector;
	DWORD BytesOffsetForSectorAlignment;
} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, * PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;
typedef   struct _STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD MediumProductType;
} STORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR, * PSTORAGE_MEDIUM_PRODUCT_TYPE_DESCRIPTOR;
typedef enum  _STORAGE_PORT_CODE_SET {
	StoragePortCodeSetReserved = 0,
	StoragePortCodeSetStorport = 1,
	StoragePortCodeSetSCSIport = 2,
	StoragePortCodeSetSpaceport = 3,
	StoragePortCodeSetATAport = 4,
	StoragePortCodeSetUSBport = 5,
	StoragePortCodeSetSBP2port = 6,
	StoragePortCodeSetSDport = 7
} STORAGE_PORT_CODE_SET, * PSTORAGE_PORT_CODE_SET;
typedef struct  _STORAGE_MINIPORT_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	STORAGE_PORT_CODE_SET Portdriver;
	BOOLEAN LUNResetSupported;
	BOOLEAN TargetResetSupported;
	WORD    IoTimeoutValue;
	BOOLEAN ExtraIoInfoSupported;
	BYTE    Reserved0[3];
	DWORD   Reserved1;
} STORAGE_MINIPORT_DESCRIPTOR, * PSTORAGE_MINIPORT_DESCRIPTOR;
typedef enum  _STORAGE_IDENTIFIER_CODE_SET {
	StorageIdCodeSetReserved = 0,
	StorageIdCodeSetBinary = 1,
	StorageIdCodeSetAscii = 2,
	StorageIdCodeSetUtf8 = 3
} STORAGE_IDENTIFIER_CODE_SET, * PSTORAGE_IDENTIFIER_CODE_SET;
typedef enum  _STORAGE_IDENTIFIER_TYPE {
	StorageIdTypeVendorSpecific = 0,
	StorageIdTypeVendorId = 1,
	StorageIdTypeEUI64 = 2,
	StorageIdTypeFCPHName = 3,
	StorageIdTypePortRelative = 4,
	StorageIdTypeTargetPortGroup = 5,
	StorageIdTypeLogicalUnitGroup = 6,
	StorageIdTypeMD5LogicalUnitIdentifier = 7,
	StorageIdTypeScsiNameString = 8
} STORAGE_IDENTIFIER_TYPE, * PSTORAGE_IDENTIFIER_TYPE;
typedef enum  _STORAGE_ID_NAA_FORMAT {
	StorageIdNAAFormatIEEEExtended = 2,
	StorageIdNAAFormatIEEERegistered = 3,
	StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT, * PSTORAGE_ID_NAA_FORMAT;
typedef enum  _STORAGE_ASSOCIATION_TYPE {
	StorageIdAssocDevice = 0,
	StorageIdAssocPort = 1,
	StorageIdAssocTarget = 2
} STORAGE_ASSOCIATION_TYPE, * PSTORAGE_ASSOCIATION_TYPE;
typedef struct  _STORAGE_IDENTIFIER {
	STORAGE_IDENTIFIER_CODE_SET CodeSet;
	STORAGE_IDENTIFIER_TYPE Type;
	WORD   IdentifierSize;
	WORD   NextOffset;
	STORAGE_ASSOCIATION_TYPE Association;
	BYTE  Identifier[1];
} STORAGE_IDENTIFIER, * PSTORAGE_IDENTIFIER;
typedef   struct  _STORAGE_DEVICE_ID_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD NumberOfIdentifiers;
	BYTE  Identifiers[1];
} STORAGE_DEVICE_ID_DESCRIPTOR, * PSTORAGE_DEVICE_ID_DESCRIPTOR;
typedef struct  _DEVICE_SEEK_PENALTY_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	BOOLEAN     IncursSeekPenalty;
} DEVICE_SEEK_PENALTY_DESCRIPTOR, * PDEVICE_SEEK_PENALTY_DESCRIPTOR;
typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	BOOLEAN     BenefitsFromWriteAggregation;
} DEVICE_WRITE_AGGREGATION_DESCRIPTOR, * PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;
typedef struct  _DEVICE_TRIM_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	BOOLEAN     TrimEnabled;
} DEVICE_TRIM_DESCRIPTOR, * PDEVICE_TRIM_DESCRIPTOR;
typedef struct  _DEVICE_LB_PROVISIONING_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	BYTE  ThinProvisioningEnabled : 1;
	BYTE  ThinProvisioningReadZeros : 1;
	BYTE  AnchorSupported : 3;
	BYTE  UnmapGranularityAlignmentValid : 1;
	BYTE  Reserved0 : 2;
	BYTE  Reserved1[7];
	DWORDLONG OptimalUnmapGranularity;
	DWORDLONG UnmapGranularityAlignment;
	DWORD MaxUnmapLbaCount;
	DWORD MaxUnmapBlockDescriptorCount;
} DEVICE_LB_PROVISIONING_DESCRIPTOR, * PDEVICE_LB_PROVISIONING_DESCRIPTOR;
typedef struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
	DWORD       Size;
	DWORD       Version;
	BYTE        AvailableMappingResourcesValid : 1;
	BYTE        UsedMappingResourcesValid : 1;
	BYTE        Reserved0 : 6;
	BYTE        Reserved1[3];
	BYTE        AvailableMappingResourcesScope : 2;
	BYTE        UsedMappingResourcesScope : 2;
	BYTE        Reserved2 : 4;
	BYTE        Reserved3[3];
	DWORDLONG   AvailableMappingResources;
	DWORDLONG   UsedMappingResources;
} STORAGE_LB_PROVISIONING_MAP_RESOURCES, * PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;
typedef struct _DEVICE_POWER_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	BOOLEAN     DeviceAttentionSupported;
	BOOLEAN     AsynchronousNotificationSupported;
	BOOLEAN     IdlePowerManagementEnabled;
	BOOLEAN     D3ColdEnabled;
	BOOLEAN     D3ColdSupported;
	BOOLEAN     NoVerifyDuringIdlePower;
	BYTE        Reserved[2];
	DWORD       IdleTimeoutInMS;
} DEVICE_POWER_DESCRIPTOR, * PDEVICE_POWER_DESCRIPTOR;
typedef struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	DWORD       MaximumTokenLifetime;
	DWORD       DefaultTokenLifetime;
	DWORDLONG   MaximumTransferSize;
	DWORDLONG   OptimalTransferCount;
	DWORD       MaximumDataDescriptors;
	DWORD       MaximumTransferLengthPerDescriptor;
	DWORD       OptimalTransferLengthPerDescriptor;
	WORD        OptimalTransferLengthGranularity;
	BYTE        Reserved[2];
} DEVICE_COPY_OFFLOAD_DESCRIPTOR, * PDEVICE_COPY_OFFLOAD_DESCRIPTOR;
typedef   struct  _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD NameOffset;
	DWORD NumberOfLogicalCopies;
	DWORD NumberOfPhysicalCopies;
	DWORD PhysicalDiskRedundancy;
	DWORD NumberOfColumns;
	DWORD Interleave;
} STORAGE_DEVICE_RESILIENCY_DESCRIPTOR, * PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;
typedef enum _STORAGE_RPMB_FRAME_TYPE {
	StorageRpmbFrameTypeUnknown = 0,
	StorageRpmbFrameTypeStandard,
	StorageRpmbFrameTypeMax,
} STORAGE_RPMB_FRAME_TYPE, * PSTORAGE_RPMB_FRAME_TYPE;
typedef struct _STORAGE_RPMB_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD SizeInBytes;
	DWORD MaxReliableWriteSizeInBytes;
	STORAGE_RPMB_FRAME_TYPE FrameFormat;
} STORAGE_RPMB_DESCRIPTOR, * PSTORAGE_RPMB_DESCRIPTOR;
typedef enum _STORAGE_CRYPTO_ALGORITHM_ID {
	StorageCryptoAlgorithmUnknown = 0,
	StorageCryptoAlgorithmXTSAES = 1,
	StorageCryptoAlgorithmBitlockerAESCBC,
	StorageCryptoAlgorithmAESECB,
	StorageCryptoAlgorithmESSIVAESCBC,
	StorageCryptoAlgorithmMax
} STORAGE_CRYPTO_ALGORITHM_ID, * PSTORAGE_CRYPTO_ALGORITHM_ID;
typedef enum _STORAGE_CRYPTO_KEY_SIZE {
	StorageCryptoKeySizeUnknown = 0,
	StorageCryptoKeySize128Bits = 1,
	StorageCryptoKeySize192Bits,
	StorageCryptoKeySize256Bits,
	StorageCryptoKeySize512Bits
} STORAGE_CRYPTO_KEY_SIZE, * PSTORAGE_CRYPTO_KEY_SIZE;
typedef struct _STORAGE_CRYPTO_CAPABILITY {
	DWORD Version;
	DWORD Size;
	DWORD CryptoCapabilityIndex;
	STORAGE_CRYPTO_ALGORITHM_ID AlgorithmId;
	STORAGE_CRYPTO_KEY_SIZE KeySize;
	DWORD DataUnitSizeBitmask;
} STORAGE_CRYPTO_CAPABILITY, * PSTORAGE_CRYPTO_CAPABILITY;
typedef struct _STORAGE_CRYPTO_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD NumKeysSupported;
	DWORD NumCryptoCapabilities;
	STORAGE_CRYPTO_CAPABILITY CryptoCapabilities[1];
} STORAGE_CRYPTO_DESCRIPTOR, * PSTORAGE_CRYPTO_DESCRIPTOR;
typedef enum _STORAGE_TIER_MEDIA_TYPE {
	StorageTierMediaTypeUnspecified = 0,
	StorageTierMediaTypeDisk = 1,
	StorageTierMediaTypeSsd = 2,
	StorageTierMediaTypeScm = 4,
	StorageTierMediaTypeMax
} STORAGE_TIER_MEDIA_TYPE, * PSTORAGE_TIER_MEDIA_TYPE;
typedef enum _STORAGE_TIER_CLASS {
	StorageTierClassUnspecified = 0,
	StorageTierClassCapacity,
	StorageTierClassPerformance,
	StorageTierClassMax
} STORAGE_TIER_CLASS, * PSTORAGE_TIER_CLASS;
typedef struct _STORAGE_TIER {
	GUID Id;
	WCHAR Name[(256)];
	WCHAR Description[(256)];
	DWORDLONG Flags;
	DWORDLONG ProvisionedCapacity;
	STORAGE_TIER_MEDIA_TYPE MediaType;
	STORAGE_TIER_CLASS Class;
} STORAGE_TIER, * PSTORAGE_TIER;
typedef   struct _STORAGE_DEVICE_TIERING_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	DWORD TotalNumberOfTiers;
	DWORD NumberOfTiersReturned;
	STORAGE_TIER Tiers[1];
} STORAGE_DEVICE_TIERING_DESCRIPTOR, * PSTORAGE_DEVICE_TIERING_DESCRIPTOR;
typedef   struct  _STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD NumberOfFaultDomains;
	GUID FaultDomainIds[1];
} STORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR, * PSTORAGE_DEVICE_FAULT_DOMAIN_DESCRIPTOR;
typedef enum _STORAGE_PROTOCOL_TYPE {
	ProtocolTypeUnknown = 0x00,
	ProtocolTypeScsi,
	ProtocolTypeAta,
	ProtocolTypeNvme,
	ProtocolTypeSd,
	ProtocolTypeUfs,
	ProtocolTypeProprietary = 0x7E,
	ProtocolTypeMaxReserved = 0x7F
} STORAGE_PROTOCOL_TYPE, * PSTORAGE_PROTOCOL_TYPE;
typedef enum _STORAGE_PROTOCOL_NVME_DATA_TYPE {
	NVMeDataTypeUnknown = 0,
	NVMeDataTypeIdentify,
	NVMeDataTypeLogPage,
	NVMeDataTypeFeature,
} STORAGE_PROTOCOL_NVME_DATA_TYPE, * PSTORAGE_PROTOCOL_NVME_DATA_TYPE;
typedef enum _STORAGE_PROTOCOL_ATA_DATA_TYPE {
	AtaDataTypeUnknown = 0,
	AtaDataTypeIdentify,
	AtaDataTypeLogPage,
} STORAGE_PROTOCOL_ATA_DATA_TYPE, * PSTORAGE_PROTOCOL_ATA_DATA_TYPE;
typedef enum _STORAGE_PROTOCOL_UFS_DATA_TYPE {
	UfsDataTypeUnknown = 0,
	UfsDataTypeQueryDescriptor,
	UfsDataTypeMax,
} STORAGE_PROTOCOL_UFS_DATA_TYPE, * PSTORAGE_PROTOCOL_UFS_DATA_TYPE;
typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA {
	STORAGE_PROTOCOL_TYPE ProtocolType;
	DWORD   DataType;
	DWORD   ProtocolDataRequestValue;
	DWORD   ProtocolDataRequestSubValue;
	DWORD   ProtocolDataOffset;
	DWORD   ProtocolDataLength;
	DWORD   FixedProtocolReturnData;
	DWORD   ProtocolDataRequestSubValue2;
	DWORD   ProtocolDataRequestSubValue3;
	DWORD   Reserved;
} STORAGE_PROTOCOL_SPECIFIC_DATA, * PSTORAGE_PROTOCOL_SPECIFIC_DATA;
typedef struct _STORAGE_PROTOCOL_SPECIFIC_DATA_EXT {
	STORAGE_PROTOCOL_TYPE ProtocolType;
	DWORD   DataType;
	DWORD   ProtocolDataValue;
	DWORD   ProtocolDataSubValue;
	DWORD   ProtocolDataOffset;
	DWORD   ProtocolDataLength;
	DWORD   FixedProtocolReturnData;
	DWORD   ProtocolDataSubValue2;
	DWORD   ProtocolDataSubValue3;
	DWORD   ProtocolDataSubValue4;
	DWORD   ProtocolDataSubValue5;
	DWORD   Reserved[5];
} STORAGE_PROTOCOL_SPECIFIC_DATA_EXT, * PSTORAGE_PROTOCOL_SPECIFIC_DATA_EXT;
typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR {
	DWORD   Version;
	DWORD   Size;
	STORAGE_PROTOCOL_SPECIFIC_DATA ProtocolSpecificData;
} STORAGE_PROTOCOL_DATA_DESCRIPTOR, * PSTORAGE_PROTOCOL_DATA_DESCRIPTOR;
typedef struct _STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT {
	DWORD   Version;
	DWORD   Size;
	STORAGE_PROTOCOL_SPECIFIC_DATA_EXT ProtocolSpecificData;
} STORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT, * PSTORAGE_PROTOCOL_DATA_DESCRIPTOR_EXT;
typedef struct _STORAGE_TEMPERATURE_INFO {
	WORD    Index;
	SHORT   Temperature;
	SHORT   OverThreshold;
	SHORT   UnderThreshold;
	BOOLEAN OverThresholdChangable;
	BOOLEAN UnderThresholdChangable;
	BOOLEAN EventGenerated;
	BYTE    Reserved0;
	DWORD   Reserved1;
} STORAGE_TEMPERATURE_INFO, * PSTORAGE_TEMPERATURE_INFO;
typedef struct _STORAGE_TEMPERATURE_DATA_DESCRIPTOR {
	DWORD   Version;
	DWORD   Size;
	SHORT   CriticalTemperature;
	SHORT   WarningTemperature;
	WORD    InfoCount;
	BYTE    Reserved0[2];
	DWORD   Reserved1[2];
	STORAGE_TEMPERATURE_INFO TemperatureInfo[1];
} STORAGE_TEMPERATURE_DATA_DESCRIPTOR, * PSTORAGE_TEMPERATURE_DATA_DESCRIPTOR;
typedef struct _STORAGE_TEMPERATURE_THRESHOLD {
	DWORD   Version;
	DWORD   Size;
	WORD    Flags;
	WORD    Index;
	SHORT   Threshold;
	BOOLEAN OverThreshold;
	BYTE    Reserved;
} STORAGE_TEMPERATURE_THRESHOLD, * PSTORAGE_TEMPERATURE_THRESHOLD;
typedef enum _STORAGE_DEVICE_FORM_FACTOR {
	FormFactorUnknown = 0,
	FormFactor3_5,
	FormFactor2_5,
	FormFactor1_8,
	FormFactor1_8Less,
	FormFactorEmbedded,
	FormFactorMemoryCard,
	FormFactormSata,
	FormFactorM_2,
	FormFactorPCIeBoard,
	FormFactorDimm,
} STORAGE_DEVICE_FORM_FACTOR, * PSTORAGE_DEVICE_FORM_FACTOR;
typedef enum _STORAGE_COMPONENT_HEALTH_STATUS {
	HealthStatusUnknown = 0,
	HealthStatusNormal,
	HealthStatusThrottled,
	HealthStatusWarning,
	HealthStatusDisabled,
	HealthStatusFailed,
} STORAGE_COMPONENT_HEALTH_STATUS, * PSTORAGE_COMPONENT_HEALTH_STATUS;
typedef union _STORAGE_SPEC_VERSION {
	struct {
		union {
			struct {
				BYTE    SubMinor;
				BYTE    Minor;
			};
			WORD    AsUshort;
		} MinorVersion;
		WORD    MajorVersion;
	};
	DWORD   AsUlong;
} STORAGE_SPEC_VERSION, * PSTORAGE_SPEC_VERSION;
typedef struct _STORAGE_PHYSICAL_DEVICE_DATA {
	DWORD       DeviceId;
	DWORD       Role;
	STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
	STORAGE_PROTOCOL_TYPE           CommandProtocol;
	STORAGE_SPEC_VERSION            SpecVersion;
	STORAGE_DEVICE_FORM_FACTOR      FormFactor;
	BYTE        Vendor[8];
	BYTE        Model[40];
	BYTE        FirmwareRevision[16];
	DWORDLONG   Capacity;
	BYTE        PhysicalLocation[32];
	DWORD       Reserved[2];
} STORAGE_PHYSICAL_DEVICE_DATA, * PSTORAGE_PHYSICAL_DEVICE_DATA;
typedef struct _STORAGE_PHYSICAL_ADAPTER_DATA {
	DWORD       AdapterId;
	STORAGE_COMPONENT_HEALTH_STATUS HealthStatus;
	STORAGE_PROTOCOL_TYPE           CommandProtocol;
	STORAGE_SPEC_VERSION            SpecVersion;
	BYTE        Vendor[8];
	BYTE        Model[40];
	BYTE        FirmwareRevision[16];
	BYTE        PhysicalLocation[32];
	BOOLEAN     ExpanderConnected;
	BYTE        Reserved0[3];
	DWORD       Reserved1[3];
} STORAGE_PHYSICAL_ADAPTER_DATA, * PSTORAGE_PHYSICAL_ADAPTER_DATA;
typedef struct _STORAGE_PHYSICAL_NODE_DATA {
	DWORD       NodeId;
	DWORD       AdapterCount;
	DWORD       AdapterDataLength;
	DWORD       AdapterDataOffset;
	DWORD       DeviceCount;
	DWORD       DeviceDataLength;
	DWORD       DeviceDataOffset;
	DWORD       Reserved[3];
} STORAGE_PHYSICAL_NODE_DATA, * PSTORAGE_PHYSICAL_NODE_DATA;
typedef struct _STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR {
	DWORD       Version;
	DWORD       Size;
	DWORD       NodeCount;
	DWORD       Reserved;
	STORAGE_PHYSICAL_NODE_DATA Node[1];
} STORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR, * PSTORAGE_PHYSICAL_TOPOLOGY_DESCRIPTOR;
typedef   struct _STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD LunMaxIoCount;
	DWORD AdapterMaxIoCount;
} STORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR, * PSTORAGE_DEVICE_IO_CAPABILITY_DESCRIPTOR;
typedef   struct _STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD64 Attributes;
} STORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR, * PSTORAGE_DEVICE_ATTRIBUTES_DESCRIPTOR;
typedef enum _STORAGE_DISK_HEALTH_STATUS {
	DiskHealthUnknown = 0,
	DiskHealthUnhealthy,
	DiskHealthWarning,
	DiskHealthHealthy,
	DiskHealthMax
} STORAGE_DISK_HEALTH_STATUS, * PSTORAGE_DISK_HEALTH_STATUS;
typedef enum _STORAGE_DISK_OPERATIONAL_STATUS {
	DiskOpStatusNone = 0,
	DiskOpStatusUnknown,
	DiskOpStatusOk,
	DiskOpStatusPredictingFailure,
	DiskOpStatusInService,
	DiskOpStatusHardwareError,
	DiskOpStatusNotUsable,
	DiskOpStatusTransientError,
	DiskOpStatusMissing,
} STORAGE_DISK_OPERATIONAL_STATUS, * PSTORAGE_DISK_OPERATIONAL_STATUS;
typedef enum _STORAGE_OPERATIONAL_STATUS_REASON {
	DiskOpReasonUnknown = 0,
	DiskOpReasonScsiSenseCode,
	DiskOpReasonMedia,
	DiskOpReasonIo,
	DiskOpReasonThresholdExceeded,
	DiskOpReasonLostData,
	DiskOpReasonEnergySource,
	DiskOpReasonConfiguration,
	DiskOpReasonDeviceController,
	DiskOpReasonMediaController,
	DiskOpReasonComponent,
	DiskOpReasonNVDIMM_N,
	DiskOpReasonBackgroundOperation,
	DiskOpReasonInvalidFirmware,
	DiskOpReasonHealthCheck,
	DiskOpReasonLostDataPersistence,
	DiskOpReasonDisabledByPlatform,
	DiskOpReasonLostWritePersistence,
	DiskOpReasonDataPersistenceLossImminent,
	DiskOpReasonWritePersistenceLossImminent,
	DiskOpReasonMax
} STORAGE_OPERATIONAL_STATUS_REASON, * PSTORAGE_OPERATIONAL_STATUS_REASON;
typedef struct _STORAGE_OPERATIONAL_REASON {
	DWORD Version;
	DWORD Size;
	STORAGE_OPERATIONAL_STATUS_REASON Reason;
	union {
		struct {
			BYTE  SenseKey;
			BYTE  ASC;
			BYTE  ASCQ;
			BYTE  Reserved;
		} ScsiSenseKey;
		struct {
			BYTE  CriticalHealth;
			BYTE  ModuleHealth[2];
			BYTE  ErrorThresholdStatus;
		} NVDIMM_N;
		DWORD AsUlong;
	} RawBytes;
} STORAGE_OPERATIONAL_REASON, * PSTORAGE_OPERATIONAL_REASON;
typedef struct _STORAGE_DEVICE_MANAGEMENT_STATUS {
	DWORD Version;
	DWORD Size;
	STORAGE_DISK_HEALTH_STATUS Health;
	DWORD NumberOfOperationalStatus;
	DWORD NumberOfAdditionalReasons;
	STORAGE_DISK_OPERATIONAL_STATUS OperationalStatus[16];
	STORAGE_OPERATIONAL_REASON AdditionalReasons[1];
} STORAGE_DEVICE_MANAGEMENT_STATUS, * PSTORAGE_DEVICE_MANAGEMENT_STATUS;
typedef   struct  _STORAGE_ADAPTER_SERIAL_NUMBER {
	DWORD Version;
	DWORD Size;
	WCHAR SerialNumber[(128)];
} STORAGE_ADAPTER_SERIAL_NUMBER, * PSTORAGE_ADAPTER_SERIAL_NUMBER;
typedef enum  _STORAGE_ZONED_DEVICE_TYPES {
	ZonedDeviceTypeUnknown = 0,
	ZonedDeviceTypeHostManaged,
	ZonedDeviceTypeHostAware,
	ZonedDeviceTypeDeviceManaged,
} STORAGE_ZONED_DEVICE_TYPES, * PSTORAGE_ZONED_DEVICE_TYPES;
typedef enum  _STORAGE_ZONE_TYPES {
	ZoneTypeUnknown = 0,
	ZoneTypeConventional = 1,
	ZoneTypeSequentialWriteRequired = 2,
	ZoneTypeSequentialWritePreferred = 3,
	ZoneTypeMax
} STORAGE_ZONE_TYPES, * PSTORAGE_ZONE_TYPES;
typedef struct  _STORAGE_ZONE_GROUP {
	DWORD ZoneCount;
	STORAGE_ZONE_TYPES ZoneType;
	DWORDLONG ZoneSize;
} STORAGE_ZONE_GROUP, * PSTORAGE_ZONE_GROUP;
typedef   struct  _STORAGE_ZONED_DEVICE_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	STORAGE_ZONED_DEVICE_TYPES DeviceType;
	DWORD ZoneCount;
	union {
		struct {
			DWORD   MaxOpenZoneCount;
			BOOLEAN UnrestrictedRead;
			BYTE    Reserved[3];
		}  SequentialRequiredZone;
		struct {
			DWORD   OptimalOpenZoneCount;
			DWORD   Reserved;
		}  SequentialPreferredZone;
	} ZoneAttributes;
	DWORD ZoneGroupCount;
	STORAGE_ZONE_GROUP ZoneGroup[1];
} STORAGE_ZONED_DEVICE_DESCRIPTOR, * PSTORAGE_ZONED_DEVICE_DESCRIPTOR;
typedef struct  _DEVICE_LOCATION {
	DWORD Socket;
	DWORD Slot;
	DWORD Adapter;
	DWORD Port;
	union {
		struct {
			DWORD Channel;
			DWORD Device;
		};
		struct {
			DWORD Target;
			DWORD Lun;
		};
	};
} DEVICE_LOCATION, * PDEVICE_LOCATION;
typedef   struct  _STORAGE_DEVICE_LOCATION_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DEVICE_LOCATION Location;
	DWORD StringOffset;
} STORAGE_DEVICE_LOCATION_DESCRIPTOR, * PSTORAGE_DEVICE_LOCATION_DESCRIPTOR;
typedef struct _STORAGE_DEVICE_NUMA_PROPERTY {
	DWORD Version;
	DWORD Size;
	DWORD NumaNode;
} STORAGE_DEVICE_NUMA_PROPERTY, * PSTORAGE_DEVICE_NUMA_PROPERTY;
typedef struct _STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT {
	DWORD Version;
	DWORD Size;
	DWORD UnsafeShutdownCount;
} STORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT, * PSTORAGE_DEVICE_UNSAFE_SHUTDOWN_COUNT;
typedef struct _STORAGE_HW_ENDURANCE_INFO {
	DWORD       ValidFields;
	DWORD       GroupId;
	struct {
		DWORD   Shared : 1;
		DWORD   Reserved : 31;
	} Flags;
	DWORD       LifePercentage;
	BYTE        BytesReadCount[16];
	BYTE        ByteWriteCount[16];
} STORAGE_HW_ENDURANCE_INFO, * PSTORAGE_HW_ENDURANCE_INFO;
typedef struct _STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR {
	DWORD                           Version;
	DWORD                           Size;
	STORAGE_HW_ENDURANCE_INFO       EnduranceInfo;
} STORAGE_HW_ENDURANCE_DATA_DESCRIPTOR, * PSTORAGE_HW_ENDURANCE_DATA_DESCRIPTOR;
typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION, DEVICE_DSM_ACTION;
typedef struct _DEVICE_DATA_SET_RANGE {
	LONGLONG StartingOffset;
	DWORDLONG LengthInBytes;
} DEVICE_DATA_SET_RANGE, * PDEVICE_DATA_SET_RANGE,
DEVICE_DSM_RANGE, * PDEVICE_DSM_RANGE;
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
	DWORD Size;
	DEVICE_DSM_ACTION Action;
	DWORD Flags;
	DWORD ParameterBlockOffset;
	DWORD ParameterBlockLength;
	DWORD DataSetRangesOffset;
	DWORD DataSetRangesLength;
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, * PDEVICE_MANAGE_DATA_SET_ATTRIBUTES,
DEVICE_DSM_INPUT, * PDEVICE_DSM_INPUT;
typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {
	DWORD Size;
	DEVICE_DSM_ACTION Action;
	DWORD Flags;
	DWORD OperationStatus;
	DWORD ExtendedError;
	DWORD TargetDetailedError;
	DWORD ReservedStatus;
	DWORD OutputBlockOffset;
	DWORD OutputBlockLength;
} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, * PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT,
DEVICE_DSM_OUTPUT, * PDEVICE_DSM_OUTPUT;
typedef struct _DEVICE_DSM_DEFINITION {
	DEVICE_DSM_ACTION Action;
	BOOLEAN SingleRange;
	DWORD ParameterBlockAlignment;
	DWORD ParameterBlockLength;
	BOOLEAN HasOutput;
	DWORD OutputBlockAlignment;
	DWORD OutputBlockLength;
} DEVICE_DSM_DEFINITION, * PDEVICE_DSM_DEFINITION;
typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {
	DWORD Size;
	DWORD Flags;
	DWORD NumFileTypeIDs;
	GUID  FileTypeID[1];
} DEVICE_DSM_NOTIFICATION_PARAMETERS, * PDEVICE_DSM_NOTIFICATION_PARAMETERS;
typedef struct _STORAGE_OFFLOAD_TOKEN {
	BYTE  TokenType[4];
	BYTE  Reserved[2];
	BYTE  TokenIdLength[2];
	union {
		struct {
			BYTE  Reserved2[0x1F8];
		} StorageOffloadZeroDataToken;
		BYTE  Token[0x1F8];
	};
} STORAGE_OFFLOAD_TOKEN, * PSTORAGE_OFFLOAD_TOKEN;
typedef struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
	DWORD Flags;
	DWORD TimeToLive;
	DWORD Reserved[2];
} DEVICE_DSM_OFFLOAD_READ_PARAMETERS, * PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;
typedef struct _STORAGE_OFFLOAD_READ_OUTPUT {
	DWORD OffloadReadFlags;
	DWORD Reserved;
	DWORDLONG LengthProtected;
	DWORD TokenLength;
	STORAGE_OFFLOAD_TOKEN Token;
} STORAGE_OFFLOAD_READ_OUTPUT, * PSTORAGE_OFFLOAD_READ_OUTPUT;
typedef struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
	DWORD Flags;
	DWORD Reserved;
	DWORDLONG TokenOffset;
	STORAGE_OFFLOAD_TOKEN Token;
} DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS, * PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;
typedef struct _STORAGE_OFFLOAD_WRITE_OUTPUT {
	DWORD OffloadWriteFlags;
	DWORD Reserved;
	DWORDLONG LengthCopied;
} STORAGE_OFFLOAD_WRITE_OUTPUT, * PSTORAGE_OFFLOAD_WRITE_OUTPUT;
typedef struct _DEVICE_DATA_SET_LBP_STATE_PARAMETERS {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	DWORD OutputVersion;
} DEVICE_DATA_SET_LBP_STATE_PARAMETERS, * PDEVICE_DATA_SET_LBP_STATE_PARAMETERS,
DEVICE_DSM_ALLOCATION_PARAMETERS, * PDEVICE_DSM_ALLOCATION_PARAMETERS;
typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {
	DWORD Size;
	DWORD Version;
	DWORDLONG SlabSizeInBytes;
	DWORD SlabOffsetDeltaInBytes;
	DWORD SlabAllocationBitMapBitCount;
	DWORD SlabAllocationBitMapLength;
	DWORD SlabAllocationBitMap[1];
} DEVICE_DATA_SET_LB_PROVISIONING_STATE, * PDEVICE_DATA_SET_LB_PROVISIONING_STATE,
DEVICE_DSM_ALLOCATION_OUTPUT, * PDEVICE_DSM_ALLOCATION_OUTPUT;
typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2 {
	DWORD Size;
	DWORD Version;
	DWORDLONG SlabSizeInBytes;
	DWORDLONG SlabOffsetDeltaInBytes;
	DWORD SlabAllocationBitMapBitCount;
	DWORD SlabAllocationBitMapLength;
	DWORD SlabAllocationBitMap[1];
} DEVICE_DATA_SET_LB_PROVISIONING_STATE_V2, * PDEVICE_DATA_SET_LB_PROVISIONING_STATE_V2,
DEVICE_DSM_ALLOCATION_OUTPUT2, * PDEVICE_DSM_ALLOCATION_OUTPUT2;
typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {
	DWORD NumberOfRepairCopies;
	DWORD SourceCopy;
	DWORD RepairCopies[1];
} DEVICE_DATA_SET_REPAIR_PARAMETERS, * PDEVICE_DATA_SET_REPAIR_PARAMETERS,
DEVICE_DSM_REPAIR_PARAMETERS, * PDEVICE_DSM_REPAIR_PARAMETERS;
typedef struct _DEVICE_DATA_SET_REPAIR_OUTPUT {
	DEVICE_DSM_RANGE ParityExtent;
} DEVICE_DATA_SET_REPAIR_OUTPUT, * PDEVICE_DATA_SET_REPAIR_OUTPUT,
DEVICE_DSM_REPAIR_OUTPUT, * PDEVICE_DSM_REPAIR_OUTPUT;
typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {
	DWORDLONG BytesProcessed;
	DWORDLONG BytesRepaired;
	DWORDLONG BytesFailed;
} DEVICE_DATA_SET_SCRUB_OUTPUT, * PDEVICE_DATA_SET_SCRUB_OUTPUT,
DEVICE_DSM_SCRUB_OUTPUT, * PDEVICE_DSM_SCRUB_OUTPUT;
typedef struct _DEVICE_DATA_SET_SCRUB_EX_OUTPUT {
	DWORDLONG BytesProcessed;
	DWORDLONG BytesRepaired;
	DWORDLONG BytesFailed;
	DEVICE_DSM_RANGE ParityExtent;
} DEVICE_DATA_SET_SCRUB_EX_OUTPUT, * PDEVICE_DATA_SET_SCRUB_EX_OUTPUT,
DEVICE_DSM_SCRUB_OUTPUT2, * PDEVICE_DSM_SCRUB_OUTPUT2;
typedef struct _DEVICE_DSM_TIERING_QUERY_INPUT {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	DWORD NumberOfTierIds;
	GUID  TierIds[1];
} DEVICE_DSM_TIERING_QUERY_INPUT, * PDEVICE_DSM_TIERING_QUERY_INPUT,
DEVICE_DSM_TIERING_QUERY_PARAMETERS, * PDEVICE_DSM_TIERING_QUERY_PARAMETERS;
typedef struct _STORAGE_TIER_REGION {
	GUID TierId;
	DWORDLONG Offset;
	DWORDLONG Length;
} STORAGE_TIER_REGION, * PSTORAGE_TIER_REGION;
typedef struct _DEVICE_DSM_TIERING_QUERY_OUTPUT {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	DWORD Reserved;
	DWORDLONG Alignment;
	DWORD TotalNumberOfRegions;
	DWORD NumberOfRegionsReturned;
	STORAGE_TIER_REGION Regions[1];
} DEVICE_DSM_TIERING_QUERY_OUTPUT, * PDEVICE_DSM_TIERING_QUERY_OUTPUT;
typedef struct _DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS {
	DWORD Size;
	BYTE  TargetPriority;
	BYTE  Reserved[3];
} DEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS, * PDEVICE_DSM_NVCACHE_CHANGE_PRIORITY_PARAMETERS;
typedef struct _DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT {
	DWORDLONG TopologyRangeBytes;
	BYTE  TopologyId[16];
} DEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT, * PDEVICE_DATA_SET_TOPOLOGY_ID_QUERY_OUTPUT,
DEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT, * PDEVICE_DSM_TOPOLOGY_ID_QUERY_OUTPUT;
typedef struct _DEVICE_STORAGE_ADDRESS_RANGE {
	LONGLONG    StartAddress;
	DWORDLONG   LengthInBytes;
} DEVICE_STORAGE_ADDRESS_RANGE, * PDEVICE_STORAGE_ADDRESS_RANGE;
typedef struct _DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT {
	DWORD Version;
	DWORD Flags;
	DWORD TotalNumberOfRanges;
	DWORD NumberOfRangesReturned;
	DEVICE_STORAGE_ADDRESS_RANGE Ranges[1];
} DEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT, * PDEVICE_DSM_PHYSICAL_ADDRESSES_OUTPUT;
typedef struct _DEVICE_DSM_REPORT_ZONES_PARAMETERS {
	DWORD Size;
	BYTE  ReportOption;
	BYTE  Partial;
	BYTE  Reserved[2];
} DEVICE_DSM_REPORT_ZONES_PARAMETERS, * PDEVICE_DSM_REPORT_ZONES_PARAMETERS;
typedef enum _STORAGE_ZONES_ATTRIBUTES {
	ZonesAttributeTypeAndLengthMayDifferent = 0,
	ZonesAttributeTypeSameLengthSame = 1,
	ZonesAttributeTypeSameLastZoneLengthDifferent = 2,
	ZonesAttributeTypeMayDifferentLengthSame = 3,
} STORAGE_ZONES_ATTRIBUTES, * PSTORAGE_ZONES_ATTRIBUTES;
typedef enum _STORAGE_ZONE_CONDITION {
	ZoneConditionConventional = 0x00,
	ZoneConditionEmpty = 0x01,
	ZoneConditionImplicitlyOpened = 0x02,
	ZoneConditionExplicitlyOpened = 0x03,
	ZoneConditionClosed = 0x04,
	ZoneConditionReadOnly = 0x0D,
	ZoneConditionFull = 0x0E,
	ZoneConditionOffline = 0x0F,
} STORAGE_ZONE_CONDITION, * PSTORAGE_ZONE_CONDITION;
typedef struct _STORAGE_ZONE_DESCRIPTOR {
	DWORD Size;
	STORAGE_ZONE_TYPES ZoneType;
	STORAGE_ZONE_CONDITION ZoneCondition;
	BOOLEAN ResetWritePointerRecommend;
	BYTE  Reserved0[3];
	DWORDLONG ZoneSize;
	DWORDLONG WritePointerOffset;
} STORAGE_ZONE_DESCRIPTOR, * PSTORAGE_ZONE_DESCRIPTOR;
typedef struct _DEVICE_DSM_REPORT_ZONES_DATA {
	DWORD Size;
	DWORD ZoneCount;
	STORAGE_ZONES_ATTRIBUTES Attributes;
	DWORD Reserved0;
	STORAGE_ZONE_DESCRIPTOR ZoneDescriptors[1];
} DEVICE_DSM_REPORT_ZONES_DATA, * PDEVICE_DSM_REPORT_ZONES_DATA,
DEVICE_DSM_REPORT_ZONES_OUTPUT, * PDEVICE_DSM_REPORT_ZONES_OUTPUT;
typedef struct _DEVICE_STORAGE_RANGE_ATTRIBUTES {
	DWORDLONG LengthInBytes;
	union {
		DWORD AllFlags;
		struct {
			DWORD IsRangeBad : 1;
		};
	};
	DWORD Reserved;
} DEVICE_STORAGE_RANGE_ATTRIBUTES, * PDEVICE_STORAGE_RANGE_ATTRIBUTES;
typedef struct _DEVICE_DSM_RANGE_ERROR_INFO {
	DWORD Version;
	DWORD Flags;
	DWORD TotalNumberOfRanges;
	DWORD NumberOfRangesReturned;
	DEVICE_STORAGE_RANGE_ATTRIBUTES Ranges[1];
} DEVICE_DSM_RANGE_ERROR_INFO, * PDEVICE_DSM_RANGE_ERROR_INFO,
DEVICE_DSM_RANGE_ERROR_OUTPUT, * PDEVICE_DSM_RANGE_ERROR_OUTPUT;
typedef struct _DEVICE_DSM_LOST_QUERY_PARAMETERS {
	DWORD Version;
	DWORDLONG Granularity;
} DEVICE_DSM_LOST_QUERY_PARAMETERS, * PDEVICE_DSM_LOST_QUERY_PARAMETERS;
typedef struct _DEVICE_DSM_LOST_QUERY_OUTPUT {
	DWORD Version;
	DWORD Size;
	DWORDLONG Alignment;
	DWORD NumberOfBits;
	DWORD BitMap[1];
} DEVICE_DSM_LOST_QUERY_OUTPUT, * PDEVICE_DSM_LOST_QUERY_OUTPUT;
typedef struct _DEVICE_DSM_FREE_SPACE_OUTPUT {
	DWORD Version;
	DWORDLONG FreeSpace;
} DEVICE_DSM_FREE_SPACE_OUTPUT, * PDEVICE_DSM_FREE_SPACE_OUTPUT;
typedef struct _DEVICE_DSM_CONVERSION_OUTPUT {
	DWORD Version;
	GUID Source;
} DEVICE_DSM_CONVERSION_OUTPUT, * PDEVICE_DSM_CONVERSION_OUTPUT;

PVOID
DeviceDsmParameterBlock(
	PDEVICE_DSM_INPUT Input
);

PDEVICE_DSM_RANGE
DeviceDsmDataSetRanges(
	PDEVICE_DSM_INPUT Input
);

DWORD
DeviceDsmNumberOfDataSetRanges(
	PDEVICE_DSM_INPUT Input
);

DWORD
DeviceDsmGetInputLength(
	PDEVICE_DSM_DEFINITION Definition,
	DWORD ParameterBlockLength,
	DWORD NumberOfDataSetRanges
);

DWORD
DeviceDsmGetNumberOfDataSetRanges(
	PDEVICE_DSM_DEFINITION Definition,
	DWORD InputLength,
	DWORD ParameterBlockLength
);

void
DeviceDsmInitializeInput(
	PDEVICE_DSM_DEFINITION Definition,
	PDEVICE_DSM_INPUT Input,
	DWORD InputLength,
	DWORD Flags,
	PVOID Parameters,
	DWORD ParameterBlockLength
);

BOOLEAN
DeviceDsmAddDataSetRange(
	PDEVICE_DSM_INPUT Input,
	DWORD InputLength,
	LONGLONG Offset,
	DWORDLONG Length
);

BOOLEAN
DeviceDsmValidateInput(
	PDEVICE_DSM_DEFINITION Definition,
	PDEVICE_DSM_INPUT Input,
	DWORD InputLength
);

PVOID
DeviceDsmOutputBlock(
	PDEVICE_DSM_OUTPUT Output
);

DWORD
DeviceDsmGetOutputLength(
	PDEVICE_DSM_DEFINITION Definition,
	DWORD OutputBlockLength
);

BOOLEAN
DeviceDsmValidateOutputLength(
	PDEVICE_DSM_DEFINITION Definition,
	DWORD OutputLength
);

DWORD
DeviceDsmGetOutputBlockLength(
	PDEVICE_DSM_DEFINITION Definition,
	DWORD OutputLength
);

void
DeviceDsmInitializeOutput(
	PDEVICE_DSM_DEFINITION Definition,
	PDEVICE_DSM_OUTPUT Output,
	DWORD OutputLength,
	DWORD Flags
);

BOOLEAN
DeviceDsmValidateOutput(
	PDEVICE_DSM_DEFINITION Definition,
	PDEVICE_DSM_OUTPUT Output,
	DWORD OutputLength
);
typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {
	DWORD MaximumRequestsPerPeriod;
	DWORD MinimumPeriod;
	DWORDLONG MaximumRequestSize;
	DWORD EstimatedTimePerRequest;
	DWORD NumOutStandingRequests;
	DWORDLONG RequestSize;
} STORAGE_GET_BC_PROPERTIES_OUTPUT, * PSTORAGE_GET_BC_PROPERTIES_OUTPUT;
typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {
	DWORD Version;
	DWORD RequestsPerPeriod;
	DWORD Period;
	BOOLEAN RetryFailures;
	BOOLEAN Discardable;
	BOOLEAN Reserved1[2];
	DWORD AccessType;
	DWORD AccessMode;
} STORAGE_ALLOCATE_BC_STREAM_INPUT, * PSTORAGE_ALLOCATE_BC_STREAM_INPUT;
typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {
	DWORDLONG RequestSize;
	DWORD NumOutStandingRequests;
} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, * PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;
typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
	DWORD SupportFlags;
} STORAGE_PRIORITY_HINT_SUPPORT, * PSTORAGE_PRIORITY_HINT_SUPPORT;
typedef enum _STORAGE_DIAGNOSTIC_LEVEL {
	StorageDiagnosticLevelDefault = 0,
	StorageDiagnosticLevelMax
} STORAGE_DIAGNOSTIC_LEVEL, * PSTORAGE_DIAGNOSTIC_LEVEL;
typedef enum _STORAGE_DIAGNOSTIC_TARGET_TYPE {
	StorageDiagnosticTargetTypeUndefined = 0,
	StorageDiagnosticTargetTypePort,
	StorageDiagnosticTargetTypeMiniport,
	StorageDiagnosticTargetTypeHbaFirmware,
	StorageDiagnosticTargetTypeMax
} STORAGE_DIAGNOSTIC_TARGET_TYPE, * PSTORAGE_DIAGNOSTIC_TARGET_TYPE;
typedef struct _STORAGE_DIAGNOSTIC_REQUEST {
	DWORD Version;
	DWORD Size;
	DWORD Reserved;
	STORAGE_DIAGNOSTIC_TARGET_TYPE TargetType;
	STORAGE_DIAGNOSTIC_LEVEL Level;
} STORAGE_DIAGNOSTIC_REQUEST, * PSTORAGE_DIAGNOSTIC_REQUEST;
typedef struct _STORAGE_DIAGNOSTIC_DATA {
	DWORD Version;
	DWORD Size;
	GUID ProviderId;
	DWORD BufferSize;
	DWORD Reserved;
	BYTE  DiagnosticDataBuffer[1];
} STORAGE_DIAGNOSTIC_DATA, * PSTORAGE_DIAGNOSTIC_DATA;
typedef struct _PHYSICAL_ELEMENT_STATUS_REQUEST {
	DWORD Version;
	DWORD Size;
	DWORD StartingElement;
	BYTE  Filter;
	BYTE  ReportType;
	BYTE  Reserved[2];
} PHYSICAL_ELEMENT_STATUS_REQUEST, * PPHYSICAL_ELEMENT_STATUS_REQUEST;
typedef struct _PHYSICAL_ELEMENT_STATUS_DESCRIPTOR {
	DWORD Version;
	DWORD Size;
	DWORD ElementIdentifier;
	BYTE  PhysicalElementType;
	BYTE  PhysicalElementHealth;
	BYTE  Reserved1[2];
	DWORDLONG AssociatedCapacity;
	DWORD Reserved2[4];
} PHYSICAL_ELEMENT_STATUS_DESCRIPTOR, * PPHYSICAL_ELEMENT_STATUS_DESCRIPTOR;
typedef struct _PHYSICAL_ELEMENT_STATUS {
	DWORD Version;
	DWORD Size;
	DWORD DescriptorCount;
	DWORD ReturnedDescriptorCount;
	DWORD ElementIdentifierBeingDepoped;
	DWORD Reserved;
	PHYSICAL_ELEMENT_STATUS_DESCRIPTOR Descriptors[1];
} PHYSICAL_ELEMENT_STATUS, * PPHYSICAL_ELEMENT_STATUS;
typedef struct _REMOVE_ELEMENT_AND_TRUNCATE_REQUEST {
	DWORD Version;
	DWORD Size;
	DWORDLONG RequestCapacity;
	DWORD ElementIdentifier;
	DWORD Reserved;
} REMOVE_ELEMENT_AND_TRUNCATE_REQUEST, * PREMOVE_ELEMENT_AND_TRUNCATE_REQUEST;
typedef enum _DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE {
	DeviceInternalStatusDataRequestTypeUndefined = 0,
	DeviceCurrentInternalStatusDataHeader,
	DeviceCurrentInternalStatusData
} DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE, * PDEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE;
typedef enum _DEVICE_INTERNAL_STATUS_DATA_SET {
	DeviceStatusDataSetUndefined = 0,
	DeviceStatusDataSet1,
	DeviceStatusDataSet2,
	DeviceStatusDataSet3,
	DeviceStatusDataSet4,
	DeviceStatusDataSetMax
} DEVICE_INTERNAL_STATUS_DATA_SET, * PDEVICE_INTERNAL_STATUS_DATA_SET;
typedef struct _GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST {
	DWORD Version;
	DWORD Size;
	DEVICE_INTERNAL_STATUS_DATA_REQUEST_TYPE RequestDataType;
	DEVICE_INTERNAL_STATUS_DATA_SET RequestDataSet;
} GET_DEVICE_INTERNAL_STATUS_DATA_REQUEST, * PGET_DEVICE_INTERNAL_STATUS_DATA_REQUEST;
typedef struct _DEVICE_INTERNAL_STATUS_DATA {
	DWORD Version;
	DWORD Size;
	DWORDLONG T10VendorId;
	DWORD DataSet1Length;
	DWORD DataSet2Length;
	DWORD DataSet3Length;
	DWORD DataSet4Length;
	BYTE  StatusDataVersion;
	BYTE  Reserved[3];
	BYTE  ReasonIdentifier[128];
	DWORD StatusDataLength;
	BYTE  StatusData[1];
} DEVICE_INTERNAL_STATUS_DATA, * PDEVICE_INTERNAL_STATUS_DATA;
typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {
	WORD   Reserved;
	WORD   SerialNumberLength;
	BYTE  SerialNumber[0];
} STORAGE_MEDIA_SERIAL_NUMBER_DATA, * PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;
typedef   struct _STORAGE_READ_CAPACITY {
	DWORD Version;
	DWORD Size;
	DWORD BlockLength;
	LARGE_INTEGER NumberOfBlocks;
	LARGE_INTEGER DiskLength;
} STORAGE_READ_CAPACITY, * PSTORAGE_READ_CAPACITY;
typedef enum  _WRITE_CACHE_TYPE {
	WriteCacheTypeUnknown,
	WriteCacheTypeNone,
	WriteCacheTypeWriteBack,
	WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE;
typedef enum  _WRITE_CACHE_ENABLE {
	WriteCacheEnableUnknown,
	WriteCacheDisabled,
	WriteCacheEnabled
} WRITE_CACHE_ENABLE;
typedef enum  _WRITE_CACHE_CHANGE {
	WriteCacheChangeUnknown,
	WriteCacheNotChangeable,
	WriteCacheChangeable
} WRITE_CACHE_CHANGE;
typedef enum  _WRITE_THROUGH {
	WriteThroughUnknown,
	WriteThroughNotSupported,
	WriteThroughSupported
} WRITE_THROUGH;
typedef   struct  _STORAGE_WRITE_CACHE_PROPERTY {
	DWORD Version;
	DWORD Size;
	WRITE_CACHE_TYPE WriteCacheType;
	WRITE_CACHE_ENABLE WriteCacheEnabled;
	WRITE_CACHE_CHANGE WriteCacheChangeable;
	WRITE_THROUGH WriteThroughSupported;
	BOOLEAN FlushCacheSupported;
	BOOLEAN UserDefinedPowerProtection;
	BOOLEAN NVCacheEnabled;
} STORAGE_WRITE_CACHE_PROPERTY, * PSTORAGE_WRITE_CACHE_PROPERTY;
typedef struct _PERSISTENT_RESERVE_COMMAND {
	DWORD Version;
	DWORD Size;
	union {
		struct {
			BYTE  ServiceAction : 5;
			BYTE  Reserved1 : 3;
			WORD   AllocationLength;
		} PR_IN;
		struct {
			BYTE  ServiceAction : 5;
			BYTE  Reserved1 : 3;
			BYTE  Type : 4;
			BYTE  Scope : 4;
			BYTE  ParameterList[0];
		} PR_OUT;
	};
} PERSISTENT_RESERVE_COMMAND, * PPERSISTENT_RESERVE_COMMAND;
typedef enum _DEVICEDUMP_COLLECTION_TYPE {
	TCCollectionBugCheck = 1,
	TCCollectionApplicationRequested,
	TCCollectionDeviceRequested
} DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE, * PDEVICEDUMP_COLLECTION_TYPE;
typedef struct _DEVICEDUMP_SUBSECTION_POINTER {
	DWORD    dwSize;
	DWORD    dwFlags;
	DWORD    dwOffset;
} DEVICEDUMP_SUBSECTION_POINTER, * PDEVICEDUMP_SUBSECTION_POINTER;
typedef struct _DEVICEDUMP_STRUCTURE_VERSION {
	DWORD   dwSignature;
	DWORD   dwVersion;
	DWORD   dwSize;
} DEVICEDUMP_STRUCTURE_VERSION, * PDEVICEDUMP_STRUCTURE_VERSION;
typedef  struct _DEVICEDUMP_SECTION_HEADER {
	GUID    guidDeviceDataId;
	BYTE     sOrganizationID[16];
	DWORD    dwFirmwareRevision;
	BYTE    sModelNumber[32];
	BYTE    szDeviceManufacturingID[32];
	DWORD  dwFlags;
	DWORD bRestrictedPrivateDataVersion;
	DWORD dwFirmwareIssueId;
	BYTE     szIssueDescriptionString[132];
} DEVICEDUMP_SECTION_HEADER, * PDEVICEDUMP_SECTION_HEADER;
typedef struct _GP_LOG_PAGE_DESCRIPTOR {
	WORD    LogAddress;
	WORD    LogSectors;
} GP_LOG_PAGE_DESCRIPTOR, * PGP_LOG_PAGE_DESCRIPTOR;
typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION {
	DWORD   dwFlags;
	GP_LOG_PAGE_DESCRIPTOR  GPLogTable[16];
	CHAR    szDescription[16];
	BYTE    bData[1];
} DEVICEDUMP_PUBLIC_SUBSECTION, * PDEVICEDUMP_PUBLIC_SUBSECTION;
typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION {
	BYTE    bData[1];
} DEVICEDUMP_RESTRICTED_SUBSECTION, * PDEVICEDUMP_RESTRICTED_SUBSECTION;
typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION {
	DWORD   dwFlags;
	GP_LOG_PAGE_DESCRIPTOR GPLogId;
	BYTE    bData[1];
} DEVICEDUMP_PRIVATE_SUBSECTION, * PDEVICEDUMP_PRIVATE_SUBSECTION;
typedef   struct _DEVICEDUMP_STORAGEDEVICE_DATA {
	DEVICEDUMP_STRUCTURE_VERSION    Descriptor;
	DEVICEDUMP_SECTION_HEADER SectionHeader;
	DWORD   dwBufferSize;
	DWORD   dwReasonForCollection;
	DEVICEDUMP_SUBSECTION_POINTER PublicData;
	DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
	DEVICEDUMP_SUBSECTION_POINTER PrivateData;
} DEVICEDUMP_STORAGEDEVICE_DATA, * PDEVICEDUMP_STORAGEDEVICE_DATA;
typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
	BYTE      Cdb[16];
	BYTE      Command[16];
	DWORDLONG StartTime;
	DWORDLONG EndTime;
	DWORD  OperationStatus;
	DWORD   OperationError;
	union {
		struct {
			DWORD dwReserved;
		} ExternalStack;
		struct {
			DWORD   dwAtaPortSpecific;
		}  AtaPort;
		struct {
			DWORD   SrbTag;
		}  StorPort;
	} StackSpecific;
} DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD, * PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;
typedef   struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {
	DEVICEDUMP_STRUCTURE_VERSION    Descriptor;
	DWORD   dwReasonForCollection;
	BYTE    cDriverName[16];
	DWORD   uiNumRecords;
	DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1];
} DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP, * PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;
typedef struct _STORAGE_IDLE_POWER {
	DWORD Version;
	DWORD Size;
	DWORD WakeCapableHint : 1;
	DWORD D3ColdSupported : 1;
	DWORD Reserved : 30;
	DWORD D3IdleTimeout;
} STORAGE_IDLE_POWER, * PSTORAGE_IDLE_POWER;
typedef enum _STORAGE_POWERUP_REASON_TYPE {
	StoragePowerupUnknown = 0,
	StoragePowerupIO,
	StoragePowerupDeviceAttention
} STORAGE_POWERUP_REASON_TYPE, * PSTORAGE_POWERUP_REASON_TYPE;
typedef struct _STORAGE_IDLE_POWERUP_REASON {
	DWORD Version;
	DWORD Size;
	STORAGE_POWERUP_REASON_TYPE PowerupReason;
} STORAGE_IDLE_POWERUP_REASON, * PSTORAGE_IDLE_POWERUP_REASON;
typedef enum _STORAGE_DEVICE_POWER_CAP_UNITS {
	StorageDevicePowerCapUnitsPercent,
	StorageDevicePowerCapUnitsMilliwatts
} STORAGE_DEVICE_POWER_CAP_UNITS, * PSTORAGE_DEVICE_POWER_CAP_UNITS;
typedef struct _STORAGE_DEVICE_POWER_CAP {
	DWORD Version;
	DWORD Size;
	STORAGE_DEVICE_POWER_CAP_UNITS Units;
	DWORDLONG MaxPower;
} STORAGE_DEVICE_POWER_CAP, * PSTORAGE_DEVICE_POWER_CAP;
typedef struct _STORAGE_RPMB_DATA_FRAME {
	BYTE  Stuff[196];
	BYTE  KeyOrMAC[32];
	BYTE  Data[256];
	BYTE  Nonce[16];
	BYTE  WriteCounter[4];
	BYTE  Address[2];
	BYTE  BlockCount[2];
	BYTE  OperationResult[2];
	BYTE  RequestOrResponseType[2];
} STORAGE_RPMB_DATA_FRAME, * PSTORAGE_RPMB_DATA_FRAME;
typedef enum _STORAGE_RPMB_COMMAND_TYPE {
	StorRpmbProgramAuthKey = 0x00000001,
	StorRpmbQueryWriteCounter = 0x00000002,
	StorRpmbAuthenticatedWrite = 0x00000003,
	StorRpmbAuthenticatedRead = 0x00000004,
	StorRpmbReadResultRequest = 0x00000005,
	StorRpmbAuthenticatedDeviceConfigWrite = 0x00000006,
	StorRpmbAuthenticatedDeviceConfigRead = 0x00000007,
} STORAGE_RPMB_COMMAND_TYPE, * PSTORAGE_RPMB_COMMAND_TYPE;
typedef struct _STORAGE_EVENT_NOTIFICATION {
	DWORD Version;
	DWORD Size;
	DWORDLONG Events;
} STORAGE_EVENT_NOTIFICATION, * PSTORAGE_EVENT_NOTIFICATION;
typedef enum _STORAGE_COUNTER_TYPE {
	StorageCounterTypeUnknown = 0,
	StorageCounterTypeTemperatureCelsius,
	StorageCounterTypeTemperatureCelsiusMax,
	StorageCounterTypeReadErrorsTotal,
	StorageCounterTypeReadErrorsCorrected,
	StorageCounterTypeReadErrorsUncorrected,
	StorageCounterTypeWriteErrorsTotal,
	StorageCounterTypeWriteErrorsCorrected,
	StorageCounterTypeWriteErrorsUncorrected,
	StorageCounterTypeManufactureDate,
	StorageCounterTypeStartStopCycleCount,
	StorageCounterTypeStartStopCycleCountMax,
	StorageCounterTypeLoadUnloadCycleCount,
	StorageCounterTypeLoadUnloadCycleCountMax,
	StorageCounterTypeWearPercentage,
	StorageCounterTypeWearPercentageWarning,
	StorageCounterTypeWearPercentageMax,
	StorageCounterTypePowerOnHours,
	StorageCounterTypeReadLatency100NSMax,
	StorageCounterTypeWriteLatency100NSMax,
	StorageCounterTypeFlushLatency100NSMax,
	StorageCounterTypeMax
} STORAGE_COUNTER_TYPE, * PSTORAGE_COUNTER_TYPE;
typedef struct _STORAGE_COUNTER {
	STORAGE_COUNTER_TYPE Type;
	union {
		struct {
			DWORD Week;
			DWORD Year;
		} ManufactureDate;
		DWORDLONG AsUlonglong;
	} Value;
} STORAGE_COUNTER, * PSTORAGE_COUNTER;
typedef   struct _STORAGE_COUNTERS {
	DWORD Version;
	DWORD Size;
	DWORD NumberOfCounters;
	STORAGE_COUNTER Counters[1];
} STORAGE_COUNTERS, * PSTORAGE_COUNTERS;
typedef struct _STORAGE_HW_FIRMWARE_INFO_QUERY {
	DWORD   Version;
	DWORD   Size;
	DWORD   Flags;
	DWORD   Reserved;
} STORAGE_HW_FIRMWARE_INFO_QUERY, * PSTORAGE_HW_FIRMWARE_INFO_QUERY;
typedef struct  _STORAGE_HW_FIRMWARE_SLOT_INFO {
	DWORD   Version;
	DWORD   Size;
	BYTE    SlotNumber;
	BYTE    ReadOnly : 1;
	BYTE    Reserved0 : 7;
	BYTE    Reserved1[6];
	BYTE    Revision[16];
} STORAGE_HW_FIRMWARE_SLOT_INFO, * PSTORAGE_HW_FIRMWARE_SLOT_INFO;
typedef struct  _STORAGE_HW_FIRMWARE_INFO {
	DWORD   Version;
	DWORD   Size;
	BYTE    SupportUpgrade : 1;
	BYTE    Reserved0 : 7;
	BYTE    SlotCount;
	BYTE    ActiveSlot;
	BYTE    PendingActivateSlot;
	BOOLEAN FirmwareShared;
	BYTE    Reserved[3];
	DWORD   ImagePayloadAlignment;
	DWORD   ImagePayloadMaxSize;
	STORAGE_HW_FIRMWARE_SLOT_INFO Slot[1];
} STORAGE_HW_FIRMWARE_INFO, * PSTORAGE_HW_FIRMWARE_INFO;
typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD {
	DWORD       Version;
	DWORD       Size;
	DWORD       Flags;
	BYTE        Slot;
	BYTE        Reserved[3];
	DWORDLONG   Offset;
	DWORDLONG   BufferSize;
	BYTE        ImageBuffer[1];
} STORAGE_HW_FIRMWARE_DOWNLOAD, * PSTORAGE_HW_FIRMWARE_DOWNLOAD;
typedef struct _STORAGE_HW_FIRMWARE_DOWNLOAD_V2 {
	DWORD       Version;
	DWORD       Size;
	DWORD       Flags;
	BYTE        Slot;
	BYTE        Reserved[3];
	DWORDLONG   Offset;
	DWORDLONG   BufferSize;
	DWORD       ImageSize;
	DWORD       Reserved2;
	BYTE        ImageBuffer[1];
} STORAGE_HW_FIRMWARE_DOWNLOAD_V2, * PSTORAGE_HW_FIRMWARE_DOWNLOAD_V2;
typedef struct _STORAGE_HW_FIRMWARE_ACTIVATE {
	DWORD   Version;
	DWORD   Size;
	DWORD   Flags;
	BYTE    Slot;
	BYTE    Reserved0[3];
} STORAGE_HW_FIRMWARE_ACTIVATE, * PSTORAGE_HW_FIRMWARE_ACTIVATE;
typedef struct _STORAGE_PROTOCOL_COMMAND {
	DWORD   Version;
	DWORD   Length;
	STORAGE_PROTOCOL_TYPE  ProtocolType;
	DWORD   Flags;
	DWORD   ReturnStatus;
	DWORD   ErrorCode;
	DWORD   CommandLength;
	DWORD   ErrorInfoLength;
	DWORD   DataToDeviceTransferLength;
	DWORD   DataFromDeviceTransferLength;
	DWORD   TimeOutValue;
	DWORD   ErrorInfoOffset;
	DWORD   DataToDeviceBufferOffset;
	DWORD   DataFromDeviceBufferOffset;
	DWORD   CommandSpecific;
	DWORD   Reserved0;
	DWORD   FixedProtocolReturnData;
	DWORD   Reserved1[3];
	BYTE  Command[1];
} STORAGE_PROTOCOL_COMMAND, * PSTORAGE_PROTOCOL_COMMAND;
typedef enum _STORAGE_ATTRIBUTE_MGMT_ACTION {
	StorAttributeMgmt_ClearAttribute = 0,
	StorAttributeMgmt_SetAttribute = 1,
	StorAttributeMgmt_ResetAttribute = 2
} STORAGE_ATTRIBUTE_MGMT_ACTION, * PSTORAGE_ATTRIBUTE_MGMT_ACTION;
typedef struct _STORAGE_ATTRIBUTE_MGMT {
	DWORD Version;
	DWORD Size;
	STORAGE_ATTRIBUTE_MGMT_ACTION Action;
	DWORD Attribute;
} STORAGE_ATTRIBUTE_MGMT, * PSTORAGE_ATTRIBUTE_MGMT;
typedef struct _SCM_PD_HEALTH_NOTIFICATION_DATA {
	GUID  DeviceGuid;
} SCM_PD_HEALTH_NOTIFICATION_DATA, * PSCM_PD_HEALTH_NOTIFICATION_DATA;
typedef struct _SCM_LOGICAL_DEVICE_INSTANCE {
	DWORD Version;
	DWORD Size;
	GUID DeviceGuid;
	WCHAR SymbolicLink[256];
} SCM_LOGICAL_DEVICE_INSTANCE, * PSCM_LOGICAL_DEVICE_INSTANCE;
typedef struct _SCM_LOGICAL_DEVICES {
	DWORD Version;
	DWORD Size;
	DWORD DeviceCount;
	SCM_LOGICAL_DEVICE_INSTANCE Devices[1];
} SCM_LOGICAL_DEVICES, * PSCM_LOGICAL_DEVICES;
typedef struct _SCM_PHYSICAL_DEVICE_INSTANCE {
	DWORD Version;
	DWORD Size;
	DWORD NfitHandle;
	WCHAR SymbolicLink[256];
} SCM_PHYSICAL_DEVICE_INSTANCE, * PSCM_PHYSICAL_DEVICE_INSTANCE;
typedef struct _SCM_PHYSICAL_DEVICES {
	DWORD Version;
	DWORD Size;
	DWORD DeviceCount;
	SCM_PHYSICAL_DEVICE_INSTANCE Devices[1];
} SCM_PHYSICAL_DEVICES, * PSCM_PHYSICAL_DEVICES;
typedef enum _SCM_REGION_FLAG {
	ScmRegionFlagNone = 0x0,
	ScmRegionFlagLabel = 0x1
} SCM_REGION_FLAG, * PSCM_REGION_FLAG;
typedef struct _SCM_REGION {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	DWORD NfitHandle;
	GUID LogicalDeviceGuid;
	GUID AddressRangeType;
	DWORD AssociatedId;
	DWORD64 Length;
	DWORD64 StartingDPA;
	DWORD64 BaseSPA;
	DWORD64 SPAOffset;
	DWORD64 RegionOffset;
} SCM_REGION, * PSCM_REGION;
typedef struct _SCM_REGIONS {
	DWORD Version;
	DWORD Size;
	DWORD RegionCount;
	SCM_REGION Regions[1];
} SCM_REGIONS, * PSCM_REGIONS;
typedef struct _SCM_INTERLEAVED_PD_INFO {
	DWORD DeviceHandle;
	GUID DeviceGuid;
} SCM_INTERLEAVED_PD_INFO, * PSCM_INTERLEAVED_PD_INFO;
typedef struct _SCM_LD_INTERLEAVE_SET_INFO {
	DWORD Version;
	DWORD Size;
	DWORD InterleaveSetSize;
	SCM_INTERLEAVED_PD_INFO InterleaveSet[1];
} SCM_LD_INTERLEAVE_SET_INFO, * PSCM_LD_INTERLEAVE_SET_INFO;
typedef enum _SCM_PD_QUERY_TYPE {
	ScmPhysicalDeviceQuery_Descriptor = 0,
	ScmPhysicalDeviceQuery_IsSupported,
	ScmPhysicalDeviceQuery_Max
} SCM_PD_QUERY_TYPE, * PSCM_PD_QUERY_TYPE;
typedef enum _SCM_PD_PROPERTY_ID {
	ScmPhysicalDeviceProperty_DeviceInfo = 0,
	ScmPhysicalDeviceProperty_ManagementStatus,
	ScmPhysicalDeviceProperty_FirmwareInfo,
	ScmPhysicalDeviceProperty_LocationString,
	ScmPhysicalDeviceProperty_DeviceSpecificInfo,
	ScmPhysicalDeviceProperty_DeviceHandle,
	ScmPhysicalDeviceProperty_Max
} SCM_PD_PROPERTY_ID, * PSCM_PD_PROPERTY_ID;
typedef struct _SCM_PD_PROPERTY_QUERY {
	DWORD Version;
	DWORD Size;
	SCM_PD_PROPERTY_ID PropertyId;
	SCM_PD_QUERY_TYPE QueryType;
	BYTE  AdditionalParameters[1];
} SCM_PD_PROPERTY_QUERY, * PSCM_PD_PROPERTY_QUERY;
typedef struct _SCM_PD_DESCRIPTOR_HEADER {
	DWORD Version;
	DWORD Size;
} SCM_PD_DESCRIPTOR_HEADER, * PSCM_PD_DESCRIPTOR_HEADER;
typedef struct _SCM_PD_DEVICE_HANDLE {
	DWORD Version;
	DWORD Size;
	GUID DeviceGuid;
	DWORD DeviceHandle;
} SCM_PD_DEVICE_HANDLE, * PSCM_PD_DEVICE_HANDLE;
typedef struct _SCM_PD_DEVICE_INFO {
	DWORD Version;
	DWORD Size;
	GUID DeviceGuid;
	DWORD UnsafeShutdownCount;
	DWORD64 PersistentMemorySizeInBytes;
	DWORD64 VolatileMemorySizeInBytes;
	DWORD64 TotalMemorySizeInBytes;
	DWORD SlotNumber;
	DWORD DeviceHandle;
	WORD   PhysicalId;
	BYTE   NumberOfFormatInterfaceCodes;
	WORD   FormatInterfaceCodes[8];
	DWORD VendorId;
	DWORD ProductId;
	DWORD SubsystemDeviceId;
	DWORD SubsystemVendorId;
	BYTE  ManufacturingLocation;
	BYTE  ManufacturingWeek;
	BYTE  ManufacturingYear;
	DWORD SerialNumber4Byte;
	DWORD SerialNumberLengthInChars;
	CHAR SerialNumber[1];
} SCM_PD_DEVICE_INFO, * PSCM_PD_DEVICE_INFO;
typedef struct _SCM_PD_DEVICE_SPECIFIC_PROPERTY {
	WCHAR Name[128];
	LONGLONG Value;
} SCM_PD_DEVICE_SPECIFIC_PROPERTY, * PSCM_PD_DEVICE_SPECIFIC_PROPERTY;
typedef struct _SCM_PD_DEVICE_SPECIFIC_INFO {
	DWORD Version;
	DWORD Size;
	DWORD NumberOfProperties;
	SCM_PD_DEVICE_SPECIFIC_PROPERTY DeviceSpecificProperties[1];
} SCM_PD_DEVICE_SPECIFIC_INFO, * PSCM_PD_DEVICE_SPECIFIC_INFO;
typedef struct _SCM_PD_FIRMWARE_SLOT_INFO {
	DWORD   Version;
	DWORD   Size;
	BYTE    SlotNumber;
	BYTE    ReadOnly : 1;
	BYTE    Reserved0 : 7;
	BYTE    Reserved1[6];
	BYTE    Revision[32];
} SCM_PD_FIRMWARE_SLOT_INFO, * PSCM_PD_FIRMWARE_SLOT_INFO;
typedef struct _SCM_PD_FIRMWARE_INFO {
	DWORD Version;
	DWORD Size;
	BYTE  ActiveSlot;
	BYTE  NextActiveSlot;
	BYTE  SlotCount;
	SCM_PD_FIRMWARE_SLOT_INFO Slots[1];
} SCM_PD_FIRMWARE_INFO, * PSCM_PD_FIRMWARE_INFO;
typedef enum _SCM_PD_HEALTH_STATUS {
	ScmPhysicalDeviceHealth_Unknown = 0,
	ScmPhysicalDeviceHealth_Unhealthy,
	ScmPhysicalDeviceHealth_Warning,
	ScmPhysicalDeviceHealth_Healthy,
	ScmPhysicalDeviceHealth_Max
} SCM_PD_HEALTH_STATUS, * PSCM_PD_HEALTH_STATUS;
typedef enum _SCM_PD_OPERATIONAL_STATUS {
	ScmPhysicalDeviceOpStatus_Unknown = 0,
	ScmPhysicalDeviceOpStatus_Ok,
	ScmPhysicalDeviceOpStatus_PredictingFailure,
	ScmPhysicalDeviceOpStatus_InService,
	ScmPhysicalDeviceOpStatus_HardwareError,
	ScmPhysicalDeviceOpStatus_NotUsable,
	ScmPhysicalDeviceOpStatus_TransientError,
	ScmPhysicalDeviceOpStatus_Missing,
	ScmPhysicalDeviceOpStatus_Max
} SCM_PD_OPERATIONAL_STATUS, * PSCM_PD_OPERATIONAL_STATUS;
typedef enum _SCM_PD_OPERATIONAL_STATUS_REASON {
	ScmPhysicalDeviceOpReason_Unknown = 0,
	ScmPhysicalDeviceOpReason_Media,
	ScmPhysicalDeviceOpReason_ThresholdExceeded,
	ScmPhysicalDeviceOpReason_LostData,
	ScmPhysicalDeviceOpReason_EnergySource,
	ScmPhysicalDeviceOpReason_Configuration,
	ScmPhysicalDeviceOpReason_DeviceController,
	ScmPhysicalDeviceOpReason_MediaController,
	ScmPhysicalDeviceOpReason_Component,
	ScmPhysicalDeviceOpReason_BackgroundOperation,
	ScmPhysicalDeviceOpReason_InvalidFirmware,
	ScmPhysicalDeviceOpReason_HealthCheck,
	ScmPhysicalDeviceOpReason_LostDataPersistence,
	ScmPhysicalDeviceOpReason_DisabledByPlatform,
	ScmPhysicalDeviceOpReason_PermanentError,
	ScmPhysicalDeviceOpReason_LostWritePersistence,
	ScmPhysicalDeviceOpReason_FatalError,
	ScmPhysicalDeviceOpReason_DataPersistenceLossImminent,
	ScmPhysicalDeviceOpReason_WritePersistenceLossImminent,
	ScmPhysicalDeviceOpReason_MediaRemainingSpareBlock,
	ScmPhysicalDeviceOpReason_PerformanceDegradation,
	ScmPhysicalDeviceOpReason_ExcessiveTemperature,
	ScmPhysicalDeviceOpReason_Max
} SCM_PD_OPERATIONAL_STATUS_REASON, * PSCM_PD_OPERATIONAL_STATUS_REASON;
typedef struct _SCM_PD_MANAGEMENT_STATUS {
	DWORD Version;
	DWORD Size;
	SCM_PD_HEALTH_STATUS Health;
	DWORD NumberOfOperationalStatus;
	DWORD NumberOfAdditionalReasons;
	SCM_PD_OPERATIONAL_STATUS OperationalStatus[16];
	SCM_PD_OPERATIONAL_STATUS_REASON AdditionalReasons[1];
} SCM_PD_MANAGEMENT_STATUS, * PSCM_PD_MANAGEMENT_STATUS;
typedef struct _SCM_PD_LOCATION_STRING {
	DWORD Version;
	DWORD Size;
	WCHAR Location[1];
} SCM_PD_LOCATION_STRING, * PSCM_PD_LOCATION_STRING;
typedef struct _SCM_PD_FIRMWARE_DOWNLOAD {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	BYTE  Slot;
	BYTE  Reserved[3];
	DWORD64 Offset;
	DWORD FirmwareImageSizeInBytes;
	BYTE  FirmwareImage[1];
} SCM_PD_FIRMWARE_DOWNLOAD, * PSCM_PD_FIRMWARE_DOWNLOAD;
typedef struct _SCM_PD_FIRMWARE_ACTIVATE {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	BYTE  Slot;
} SCM_PD_FIRMWARE_ACTIVATE, * PSCM_PD_FIRMWARE_ACTIVATE;
typedef struct _SCM_PD_PASSTHROUGH_INPUT {
	DWORD Version;
	DWORD Size;
	GUID ProtocolGuid;
	DWORD DataSize;
	BYTE  Data[1];
} SCM_PD_PASSTHROUGH_INPUT, * PSCM_PD_PASSTHROUGH_INPUT;
typedef struct _SCM_PD_PASSTHROUGH_OUTPUT {
	DWORD Version;
	DWORD Size;
	GUID ProtocolGuid;
	DWORD DataSize;
	BYTE  Data[1];
} SCM_PD_PASSTHROUGH_OUTPUT, * PSCM_PD_PASSTHROUGH_OUTPUT;
typedef struct _SCM_PD_PASSTHROUGH_INVDIMM_INPUT {
	DWORD Opcode;
	DWORD OpcodeParametersLength;
	BYTE  OpcodeParameters[1];
} SCM_PD_PASSTHROUGH_INVDIMM_INPUT, * PSCM_PD_PASSTHROUGH_INVDIMM_INPUT;
typedef struct _SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT {
	WORD   GeneralStatus;
	WORD   ExtendedStatus;
	DWORD OutputDataLength;
	BYTE  OutputData[1];
} SCM_PD_PASSTHROUGH_INVDIMM_OUTPUT, * PSCM_PD_PASSTHROUGH_INVDIMM_OUTPUT;
typedef struct _SCM_PD_REINITIALIZE_MEDIA_INPUT {
	DWORD Version;
	DWORD Size;
	struct {
		DWORD Overwrite : 1;
	} Options;
} SCM_PD_REINITIALIZE_MEDIA_INPUT, * PSCM_PD_REINITIALIZE_MEDIA_INPUT;
typedef enum _SCM_PD_MEDIA_REINITIALIZATION_STATUS {
	ScmPhysicalDeviceReinit_Success = 0,
	ScmPhysicalDeviceReinit_RebootNeeded,
	ScmPhysicalDeviceReinit_ColdBootNeeded,
	ScmPhysicalDeviceReinit_Max
} SCM_PD_MEDIA_REINITIALIZATION_STATUS, * PSCM_PD_MEDIA_REINITIALIZATION_STATUS;
typedef struct _SCM_PD_REINITIALIZE_MEDIA_OUTPUT {
	DWORD Version;
	DWORD Size;
	SCM_PD_MEDIA_REINITIALIZATION_STATUS Status;
} SCM_PD_REINITIALIZE_MEDIA_OUTPUT, * PSCM_PD_REINITIALIZE_MEDIA_OUTPUT;
typedef enum  _MEDIA_TYPE {
	Unknown,
	F5_1Pt2_512,
	F3_1Pt44_512,
	F3_2Pt88_512,
	F3_20Pt8_512,
	F3_720_512,
	F5_360_512,
	F5_320_512,
	F5_320_1024,
	F5_180_512,
	F5_160_512,
	RemovableMedia,
	FixedMedia,
	F3_120M_512,
	F3_640_512,
	F5_640_512,
	F5_720_512,
	F3_1Pt2_512,
	F3_1Pt23_1024,
	F5_1Pt23_1024,
	F3_128Mb_512,
	F3_230Mb_512,
	F8_256_128,
	F3_200Mb_512,
	F3_240M_512,
	F3_32M_512
} MEDIA_TYPE, * PMEDIA_TYPE;
typedef struct _FORMAT_PARAMETERS {
	MEDIA_TYPE MediaType;
	DWORD StartCylinderNumber;
	DWORD EndCylinderNumber;
	DWORD StartHeadNumber;
	DWORD EndHeadNumber;
} FORMAT_PARAMETERS, * PFORMAT_PARAMETERS;
typedef WORD   BAD_TRACK_NUMBER;
typedef WORD* PBAD_TRACK_NUMBER;
typedef struct _FORMAT_EX_PARAMETERS {
	MEDIA_TYPE MediaType;
	DWORD StartCylinderNumber;
	DWORD EndCylinderNumber;
	DWORD StartHeadNumber;
	DWORD EndHeadNumber;
	WORD   FormatGapLength;
	WORD   SectorsPerTrack;
	WORD   SectorNumber[1];
} FORMAT_EX_PARAMETERS, * PFORMAT_EX_PARAMETERS;
typedef struct  _DISK_GEOMETRY {
	LARGE_INTEGER Cylinders;
	MEDIA_TYPE MediaType;
	DWORD TracksPerCylinder;
	DWORD SectorsPerTrack;
	DWORD BytesPerSector;
} DISK_GEOMETRY, * PDISK_GEOMETRY;
typedef struct _PARTITION_INFORMATION {
	LARGE_INTEGER StartingOffset;
	LARGE_INTEGER PartitionLength;
	DWORD HiddenSectors;
	DWORD PartitionNumber;
	BYTE  PartitionType;
	BOOLEAN BootIndicator;
	BOOLEAN RecognizedPartition;
	BOOLEAN RewritePartition;
} PARTITION_INFORMATION, * PPARTITION_INFORMATION;
typedef struct _SET_PARTITION_INFORMATION {
	BYTE  PartitionType;
} SET_PARTITION_INFORMATION, * PSET_PARTITION_INFORMATION;
typedef struct _DRIVE_LAYOUT_INFORMATION {
	DWORD PartitionCount;
	DWORD Signature;
	PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION, * PDRIVE_LAYOUT_INFORMATION;
typedef struct _VERIFY_INFORMATION {
	LARGE_INTEGER StartingOffset;
	DWORD Length;
} VERIFY_INFORMATION, * PVERIFY_INFORMATION;
typedef struct _REASSIGN_BLOCKS {
	WORD   Reserved;
	WORD   Count;
	DWORD BlockNumber[1];
} REASSIGN_BLOCKS, * PREASSIGN_BLOCKS;
typedef struct _REASSIGN_BLOCKS_EX {
	WORD   Reserved;
	WORD   Count;
	LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX, * PREASSIGN_BLOCKS_EX;
typedef enum  _PARTITION_STYLE {
	PARTITION_STYLE_MBR,
	PARTITION_STYLE_GPT,
	PARTITION_STYLE_RAW
} PARTITION_STYLE;
typedef struct  _PARTITION_INFORMATION_GPT {
	GUID PartitionType;
	GUID PartitionId;
	DWORD64 Attributes;
	WCHAR Name[36];
} PARTITION_INFORMATION_GPT, * PPARTITION_INFORMATION_GPT;
typedef struct  _PARTITION_INFORMATION_MBR {
	BYTE  PartitionType;
	BOOLEAN BootIndicator;
	BOOLEAN RecognizedPartition;
	DWORD HiddenSectors;
	GUID PartitionId;
} PARTITION_INFORMATION_MBR, * PPARTITION_INFORMATION_MBR;
typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;
typedef struct _SET_PARTITION_INFORMATION_EX {
	PARTITION_STYLE PartitionStyle;
	union {
		SET_PARTITION_INFORMATION_MBR Mbr;
		SET_PARTITION_INFORMATION_GPT Gpt;
	};
} SET_PARTITION_INFORMATION_EX, * PSET_PARTITION_INFORMATION_EX;
typedef struct _CREATE_DISK_GPT {
	GUID DiskId;
	DWORD MaxPartitionCount;
} CREATE_DISK_GPT, * PCREATE_DISK_GPT;
typedef struct _CREATE_DISK_MBR {
	DWORD Signature;
} CREATE_DISK_MBR, * PCREATE_DISK_MBR;
typedef struct _CREATE_DISK {
	PARTITION_STYLE PartitionStyle;
	union {
		CREATE_DISK_MBR Mbr;
		CREATE_DISK_GPT Gpt;
	};
} CREATE_DISK, * PCREATE_DISK;
typedef struct _GET_LENGTH_INFORMATION {
	LARGE_INTEGER   Length;
} GET_LENGTH_INFORMATION, * PGET_LENGTH_INFORMATION;
typedef struct  _PARTITION_INFORMATION_EX {
	PARTITION_STYLE PartitionStyle;
	LARGE_INTEGER StartingOffset;
	LARGE_INTEGER PartitionLength;
	DWORD PartitionNumber;
	BOOLEAN RewritePartition;
	BOOLEAN IsServicePartition;
	union {
		PARTITION_INFORMATION_MBR Mbr;
		PARTITION_INFORMATION_GPT Gpt;
	};
} PARTITION_INFORMATION_EX, * PPARTITION_INFORMATION_EX;
typedef struct  _DRIVE_LAYOUT_INFORMATION_GPT {
	GUID DiskId;
	LARGE_INTEGER StartingUsableOffset;
	LARGE_INTEGER UsableLength;
	DWORD MaxPartitionCount;
} DRIVE_LAYOUT_INFORMATION_GPT, * PDRIVE_LAYOUT_INFORMATION_GPT;
typedef struct  _DRIVE_LAYOUT_INFORMATION_MBR {
	DWORD Signature;
	DWORD CheckSum;
} DRIVE_LAYOUT_INFORMATION_MBR, * PDRIVE_LAYOUT_INFORMATION_MBR;
typedef struct  _DRIVE_LAYOUT_INFORMATION_EX {
	DWORD PartitionStyle;
	DWORD PartitionCount;
	union {
		DRIVE_LAYOUT_INFORMATION_MBR Mbr;
		DRIVE_LAYOUT_INFORMATION_GPT Gpt;
	};
	PARTITION_INFORMATION_EX PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION_EX, * PDRIVE_LAYOUT_INFORMATION_EX;
typedef enum _DETECTION_TYPE {
	DetectNone,
	DetectInt13,
	DetectExInt13
} DETECTION_TYPE;
typedef struct _DISK_INT13_INFO {
	WORD   DriveSelect;
	DWORD MaxCylinders;
	WORD   SectorsPerTrack;
	WORD   MaxHeads;
	WORD   NumberDrives;
} DISK_INT13_INFO, * PDISK_INT13_INFO;
typedef struct _DISK_EX_INT13_INFO {
	WORD   ExBufferSize;
	WORD   ExFlags;
	DWORD ExCylinders;
	DWORD ExHeads;
	DWORD ExSectorsPerTrack;
	DWORD64 ExSectorsPerDrive;
	WORD   ExSectorSize;
	WORD   ExReserved;
} DISK_EX_INT13_INFO, * PDISK_EX_INT13_INFO;
typedef struct _DISK_DETECTION_INFO {
	DWORD SizeOfDetectInfo;
	DETECTION_TYPE DetectionType;
	union {
		struct {
			DISK_INT13_INFO Int13;
			DISK_EX_INT13_INFO ExInt13;
		};
	};
} DISK_DETECTION_INFO, * PDISK_DETECTION_INFO;
typedef struct _DISK_PARTITION_INFO {
	DWORD SizeOfPartitionInfo;
	PARTITION_STYLE PartitionStyle;
	union {
		struct {
			DWORD Signature;
			DWORD CheckSum;
		} Mbr;
		struct {
			GUID DiskId;
		} Gpt;
	};
} DISK_PARTITION_INFO, * PDISK_PARTITION_INFO;
typedef struct _DISK_GEOMETRY_EX {
	DISK_GEOMETRY Geometry;
	LARGE_INTEGER DiskSize;
	BYTE  Data[1];
} DISK_GEOMETRY_EX, * PDISK_GEOMETRY_EX;
typedef struct _DISK_CONTROLLER_NUMBER {
	DWORD ControllerNumber;
	DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER, * PDISK_CONTROLLER_NUMBER;
typedef enum {
	EqualPriority,
	KeepPrefetchedData,
	KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;
typedef struct _DISK_CACHE_INFORMATION {
	BOOLEAN ParametersSavable;
	BOOLEAN ReadCacheEnabled;
	BOOLEAN WriteCacheEnabled;
	DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
	DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;
	WORD   DisablePrefetchTransferLength;
	BOOLEAN PrefetchScalar;
	union {
		struct {
			WORD   Minimum;
			WORD   Maximum;
			WORD   MaximumBlocks;
		} ScalarPrefetch;
		struct {
			WORD   Minimum;
			WORD   Maximum;
		} BlockPrefetch;
	};
} DISK_CACHE_INFORMATION, * PDISK_CACHE_INFORMATION;
typedef struct _DISK_GROW_PARTITION {
	DWORD PartitionNumber;
	LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION, * PDISK_GROW_PARTITION;
typedef struct _HISTOGRAM_BUCKET {
	DWORD       Reads;
	DWORD       Writes;
} HISTOGRAM_BUCKET, * PHISTOGRAM_BUCKET;
typedef struct _DISK_HISTOGRAM {
	LARGE_INTEGER   DiskSize;
	LARGE_INTEGER   Start;
	LARGE_INTEGER   End;
	LARGE_INTEGER   Average;
	LARGE_INTEGER   AverageRead;
	LARGE_INTEGER   AverageWrite;
	DWORD           Granularity;
	DWORD           Size;
	DWORD           ReadCount;
	DWORD           WriteCount;
	PHISTOGRAM_BUCKET  Histogram;
} DISK_HISTOGRAM, * PDISK_HISTOGRAM;
typedef struct _DISK_PERFORMANCE {
	LARGE_INTEGER BytesRead;
	LARGE_INTEGER BytesWritten;
	LARGE_INTEGER ReadTime;
	LARGE_INTEGER WriteTime;
	LARGE_INTEGER IdleTime;
	DWORD ReadCount;
	DWORD WriteCount;
	DWORD QueueDepth;
	DWORD SplitCount;
	LARGE_INTEGER QueryTime;
	DWORD   StorageDeviceNumber;
	WCHAR   StorageManagerName[8];
} DISK_PERFORMANCE, * PDISK_PERFORMANCE;
typedef struct _DISK_RECORD {
	LARGE_INTEGER ByteOffset;
	LARGE_INTEGER StartTime;
	LARGE_INTEGER EndTime;
	PVOID VirtualAddress;
	DWORD NumberOfBytes;
	BYTE  DeviceNumber;
	BOOLEAN ReadRequest;
} DISK_RECORD, * PDISK_RECORD;
typedef struct _DISK_LOGGING {
	BYTE  Function;
	PVOID BufferAddress;
	DWORD BufferSize;
} DISK_LOGGING, * PDISK_LOGGING;
typedef enum _BIN_TYPES {
	RequestSize,
	RequestLocation
} BIN_TYPES;
typedef struct _BIN_RANGE {
	LARGE_INTEGER StartValue;
	LARGE_INTEGER Length;
} BIN_RANGE, * PBIN_RANGE;
typedef struct _PERF_BIN {
	DWORD NumberOfBins;
	DWORD TypeOfBin;
	BIN_RANGE BinsRanges[1];
} PERF_BIN, * PPERF_BIN;
typedef struct _BIN_COUNT {
	BIN_RANGE BinRange;
	DWORD BinCount;
} BIN_COUNT, * PBIN_COUNT;
typedef struct _BIN_RESULTS {
	DWORD NumberOfBins;
	BIN_COUNT BinCounts[1];
} BIN_RESULTS, * PBIN_RESULTS;
typedef struct _GETVERSIONINPARAMS {
	BYTE     bVersion;
	BYTE     bRevision;
	BYTE     bReserved;
	BYTE     bIDEDeviceMap;
	DWORD   fCapabilities;
	DWORD   dwReserved[4];
} GETVERSIONINPARAMS, * PGETVERSIONINPARAMS, * LPGETVERSIONINPARAMS;
typedef struct _IDEREGS {
	BYTE     bFeaturesReg;
	BYTE     bSectorCountReg;
	BYTE     bSectorNumberReg;
	BYTE     bCylLowReg;
	BYTE     bCylHighReg;
	BYTE     bDriveHeadReg;
	BYTE     bCommandReg;
	BYTE     bReserved;
} IDEREGS, * PIDEREGS, * LPIDEREGS;
typedef struct _SENDCMDINPARAMS {
	DWORD   cBufferSize;
	IDEREGS irDriveRegs;
	BYTE     bDriveNumber;
	BYTE     bReserved[3];
	DWORD   dwReserved[4];
	BYTE     bBuffer[1];
} SENDCMDINPARAMS, * PSENDCMDINPARAMS, * LPSENDCMDINPARAMS;
typedef struct _DRIVERSTATUS {
	BYTE     bDriverError;
	BYTE     bIDEError;
	BYTE     bReserved[2];
	DWORD   dwReserved[2];
} DRIVERSTATUS, * PDRIVERSTATUS, * LPDRIVERSTATUS;
typedef struct _SENDCMDOUTPARAMS {
	DWORD                   cBufferSize;
	DRIVERSTATUS            DriverStatus;
	BYTE                    bBuffer[1];
} SENDCMDOUTPARAMS, * PSENDCMDOUTPARAMS, * LPSENDCMDOUTPARAMS;
typedef struct _GET_DISK_ATTRIBUTES {
	DWORD Version;
	DWORD Reserved1;
	DWORDLONG Attributes;
} GET_DISK_ATTRIBUTES, * PGET_DISK_ATTRIBUTES;
typedef struct _SET_DISK_ATTRIBUTES {
	DWORD Version;
	BOOLEAN Persist;
	BYTE  Reserved1[3];
	DWORDLONG Attributes;
	DWORDLONG AttributesMask;
	DWORD Reserved2[4];
} SET_DISK_ATTRIBUTES, * PSET_DISK_ATTRIBUTES;
typedef  enum _ELEMENT_TYPE {
	AllElements,
	ChangerTransport,
	ChangerSlot,
	ChangerIEPort,
	ChangerDrive,
	ChangerDoor,
	ChangerKeypad,
	ChangerMaxElement
} ELEMENT_TYPE, * PELEMENT_TYPE;
typedef  struct _CHANGER_ELEMENT {
	ELEMENT_TYPE    ElementType;
	DWORD   ElementAddress;
} CHANGER_ELEMENT, * PCHANGER_ELEMENT;
typedef  struct _CHANGER_ELEMENT_LIST {
	CHANGER_ELEMENT Element;
	DWORD   NumberOfElements;
} CHANGER_ELEMENT_LIST, * PCHANGER_ELEMENT_LIST;
typedef  struct _GET_CHANGER_PARAMETERS {
	DWORD Size;
	WORD   NumberTransportElements;
	WORD   NumberStorageElements;
	WORD   NumberCleanerSlots;
	WORD   NumberIEElements;
	WORD   NumberDataTransferElements;
	WORD   NumberOfDoors;
	WORD   FirstSlotNumber;
	WORD   FirstDriveNumber;
	WORD   FirstTransportNumber;
	WORD   FirstIEPortNumber;
	WORD   FirstCleanerSlotAddress;
	WORD   MagazineSize;
	DWORD DriveCleanTimeout;
	DWORD Features0;
	DWORD Features1;
	BYTE  MoveFromTransport;
	BYTE  MoveFromSlot;
	BYTE  MoveFromIePort;
	BYTE  MoveFromDrive;
	BYTE  ExchangeFromTransport;
	BYTE  ExchangeFromSlot;
	BYTE  ExchangeFromIePort;
	BYTE  ExchangeFromDrive;
	BYTE  LockUnlockCapabilities;
	BYTE  PositionCapabilities;
	BYTE  Reserved1[2];
	DWORD Reserved2[2];
} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;
typedef  struct _CHANGER_PRODUCT_DATA {
	BYTE  VendorId[8];
	BYTE  ProductId[16];
	BYTE  Revision[4];
	BYTE  SerialNumber[32];
	BYTE  DeviceType;
} CHANGER_PRODUCT_DATA, * PCHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_ACCESS {
	CHANGER_ELEMENT Element;
	DWORD           Control;
} CHANGER_SET_ACCESS, * PCHANGER_SET_ACCESS;
typedef struct _CHANGER_READ_ELEMENT_STATUS {
	CHANGER_ELEMENT_LIST ElementList;
	BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, * PCHANGER_READ_ELEMENT_STATUS;
typedef  struct _CHANGER_ELEMENT_STATUS {
	CHANGER_ELEMENT Element;
	CHANGER_ELEMENT SrcElementAddress;
	DWORD Flags;
	DWORD ExceptionCode;
	BYTE  TargetId;
	BYTE  Lun;
	WORD   Reserved;
	BYTE  PrimaryVolumeID[36];
	BYTE  AlternateVolumeID[36];
} CHANGER_ELEMENT_STATUS, * PCHANGER_ELEMENT_STATUS;
typedef  struct _CHANGER_ELEMENT_STATUS_EX {
	CHANGER_ELEMENT Element;
	CHANGER_ELEMENT SrcElementAddress;
	DWORD Flags;
	DWORD ExceptionCode;
	BYTE  TargetId;
	BYTE  Lun;
	WORD   Reserved;
	BYTE  PrimaryVolumeID[36];
	BYTE  AlternateVolumeID[36];
	BYTE  VendorIdentification[8];
	BYTE  ProductIdentification[16];
	BYTE  SerialNumber[32];
} CHANGER_ELEMENT_STATUS_EX, * PCHANGER_ELEMENT_STATUS_EX;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {
	CHANGER_ELEMENT_LIST ElementList;
	BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, * PCHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _CHANGER_SET_POSITION {
	CHANGER_ELEMENT Transport;
	CHANGER_ELEMENT Destination;
	BOOLEAN         Flip;
} CHANGER_SET_POSITION, * PCHANGER_SET_POSITION;
typedef struct _CHANGER_EXCHANGE_MEDIUM {
	CHANGER_ELEMENT Transport;
	CHANGER_ELEMENT Source;
	CHANGER_ELEMENT Destination1;
	CHANGER_ELEMENT Destination2;
	BOOLEAN         Flip1;
	BOOLEAN         Flip2;
} CHANGER_EXCHANGE_MEDIUM, * PCHANGER_EXCHANGE_MEDIUM;
typedef struct _CHANGER_MOVE_MEDIUM {
	CHANGER_ELEMENT Transport;
	CHANGER_ELEMENT Source;
	CHANGER_ELEMENT Destination;
	BOOLEAN         Flip;
} CHANGER_MOVE_MEDIUM, * PCHANGER_MOVE_MEDIUM;
typedef  struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {
	CHANGER_ELEMENT StartingElement;
	DWORD ActionCode;
	BYTE  VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, * PCHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _READ_ELEMENT_ADDRESS_INFO {
	DWORD NumberOfElements;
	CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, * PREAD_ELEMENT_ADDRESS_INFO;
typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
	DeviceProblemNone,
	DeviceProblemHardware,
	DeviceProblemCHMError,
	DeviceProblemDoorOpen,
	DeviceProblemCalibrationError,
	DeviceProblemTargetFailure,
	DeviceProblemCHMMoveError,
	DeviceProblemCHMZeroError,
	DeviceProblemCartridgeInsertError,
	DeviceProblemPositionError,
	DeviceProblemSensorError,
	DeviceProblemCartridgeEjectError,
	DeviceProblemGripperError,
	DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE, * PCHANGER_DEVICE_PROBLEM_TYPE;
typedef struct _PATHNAME_BUFFER {
	DWORD PathNameLength;
	WCHAR Name[1];
} PATHNAME_BUFFER, * PPATHNAME_BUFFER;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {
	BYTE  First0x24BytesOfBootSector[0x24];
} FSCTL_QUERY_FAT_BPB_BUFFER, * PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct {
	LARGE_INTEGER VolumeSerialNumber;
	LARGE_INTEGER NumberSectors;
	LARGE_INTEGER TotalClusters;
	LARGE_INTEGER FreeClusters;
	LARGE_INTEGER TotalReserved;
	DWORD BytesPerSector;
	DWORD BytesPerCluster;
	DWORD BytesPerFileRecordSegment;
	DWORD ClustersPerFileRecordSegment;
	LARGE_INTEGER MftValidDataLength;
	LARGE_INTEGER MftStartLcn;
	LARGE_INTEGER Mft2StartLcn;
	LARGE_INTEGER MftZoneStart;
	LARGE_INTEGER MftZoneEnd;
} NTFS_VOLUME_DATA_BUFFER, * PNTFS_VOLUME_DATA_BUFFER;
typedef struct {
	DWORD ByteCount;
	WORD   MajorVersion;
	WORD   MinorVersion;
	DWORD BytesPerPhysicalSector;
	WORD   LfsMajorVersion;
	WORD   LfsMinorVersion;
	DWORD MaxDeviceTrimExtentCount;
	DWORD MaxDeviceTrimByteCount;
	DWORD MaxVolumeTrimExtentCount;
	DWORD MaxVolumeTrimByteCount;
} NTFS_EXTENDED_VOLUME_DATA, * PNTFS_EXTENDED_VOLUME_DATA;
typedef struct {
	DWORD ByteCount;
	DWORD MajorVersion;
	DWORD MinorVersion;
	DWORD BytesPerPhysicalSector;
	LARGE_INTEGER VolumeSerialNumber;
	LARGE_INTEGER NumberSectors;
	LARGE_INTEGER TotalClusters;
	LARGE_INTEGER FreeClusters;
	LARGE_INTEGER TotalReserved;
	DWORD BytesPerSector;
	DWORD BytesPerCluster;
	LARGE_INTEGER MaximumSizeOfResidentFile;
	WORD   FastTierDataFillRatio;
	WORD   SlowTierDataFillRatio;
	DWORD DestagesFastTierToSlowTierRate;
	LARGE_INTEGER Reserved[9];
} REFS_VOLUME_DATA_BUFFER, * PREFS_VOLUME_DATA_BUFFER;
typedef struct {
	LARGE_INTEGER StartingLcn;
} STARTING_LCN_INPUT_BUFFER, * PSTARTING_LCN_INPUT_BUFFER;
typedef struct {
	LARGE_INTEGER StartingLcn;
	DWORD Flags;
} STARTING_LCN_INPUT_BUFFER_EX, * PSTARTING_LCN_INPUT_BUFFER_EX;
typedef struct {
	LARGE_INTEGER StartingLcn;
	LARGE_INTEGER BitmapSize;
	BYTE  Buffer[1];
} VOLUME_BITMAP_BUFFER, * PVOLUME_BITMAP_BUFFER;
typedef struct {
	LARGE_INTEGER StartingVcn;
} STARTING_VCN_INPUT_BUFFER, * PSTARTING_VCN_INPUT_BUFFER;
typedef struct RETRIEVAL_POINTERS_BUFFER {
	DWORD ExtentCount;
	LARGE_INTEGER StartingVcn;
	struct {
		LARGE_INTEGER NextVcn;
		LARGE_INTEGER Lcn;
	} Extents[1];
} RETRIEVAL_POINTERS_BUFFER, * PRETRIEVAL_POINTERS_BUFFER;
typedef struct RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER {
	DWORD ExtentCount;
	LARGE_INTEGER StartingVcn;
	struct {
		LARGE_INTEGER NextVcn;
		LARGE_INTEGER Lcn;
		DWORD ReferenceCount;
	} Extents[1];
} RETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER, * PRETRIEVAL_POINTERS_AND_REFCOUNT_BUFFER;
typedef struct RETRIEVAL_POINTER_COUNT {
	DWORD ExtentCount;
} RETRIEVAL_POINTER_COUNT, * PRETRIEVAL_POINTER_COUNT;
typedef struct {
	LARGE_INTEGER FileReferenceNumber;
} NTFS_FILE_RECORD_INPUT_BUFFER, * PNTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct {
	LARGE_INTEGER FileReferenceNumber;
	DWORD FileRecordLength;
	BYTE  FileRecordBuffer[1];
} NTFS_FILE_RECORD_OUTPUT_BUFFER, * PNTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct {
	HANDLE FileHandle;
	LARGE_INTEGER StartingVcn;
	LARGE_INTEGER StartingLcn;
	DWORD ClusterCount;
} MOVE_FILE_DATA, * PMOVE_FILE_DATA;
typedef struct {
	HANDLE FileHandle;
	LARGE_INTEGER SourceFileRecord;
	LARGE_INTEGER TargetFileRecord;
} MOVE_FILE_RECORD_DATA, * PMOVE_FILE_RECORD_DATA;
typedef struct _MOVE_FILE_DATA32 {
	UINT32 FileHandle;
	LARGE_INTEGER StartingVcn;
	LARGE_INTEGER StartingLcn;
	DWORD ClusterCount;
} MOVE_FILE_DATA32, * PMOVE_FILE_DATA32;
typedef struct {
	DWORD Restart;
	SID Sid;
} FIND_BY_SID_DATA, * PFIND_BY_SID_DATA;
typedef struct {
	DWORD NextEntryOffset;
	DWORD FileIndex;
	DWORD FileNameLength;
	WCHAR FileName[1];
} FIND_BY_SID_OUTPUT, * PFIND_BY_SID_OUTPUT;
typedef struct {
	DWORDLONG StartFileReferenceNumber;
	USN LowUsn;
	USN HighUsn;
} MFT_ENUM_DATA_V0, * PMFT_ENUM_DATA_V0;
typedef struct {
	DWORDLONG StartFileReferenceNumber;
	USN LowUsn;
	USN HighUsn;
	WORD   MinMajorVersion;
	WORD   MaxMajorVersion;
} MFT_ENUM_DATA_V1, * PMFT_ENUM_DATA_V1;
typedef MFT_ENUM_DATA_V1 MFT_ENUM_DATA, * PMFT_ENUM_DATA;
typedef struct {
	DWORDLONG MaximumSize;
	DWORDLONG AllocationDelta;
} CREATE_USN_JOURNAL_DATA, * PCREATE_USN_JOURNAL_DATA;
typedef struct {
	WORD   MinMajorVersion;
	WORD   MaxMajorVersion;
} READ_FILE_USN_DATA, * PREAD_FILE_USN_DATA;
typedef struct {
	USN StartUsn;
	DWORD ReasonMask;
	DWORD ReturnOnlyOnClose;
	DWORDLONG Timeout;
	DWORDLONG BytesToWaitFor;
	DWORDLONG UsnJournalID;
} READ_USN_JOURNAL_DATA_V0, * PREAD_USN_JOURNAL_DATA_V0;
typedef struct {
	USN StartUsn;
	DWORD ReasonMask;
	DWORD ReturnOnlyOnClose;
	DWORDLONG Timeout;
	DWORDLONG BytesToWaitFor;
	DWORDLONG UsnJournalID;
	WORD   MinMajorVersion;
	WORD   MaxMajorVersion;
} READ_USN_JOURNAL_DATA_V1, * PREAD_USN_JOURNAL_DATA_V1;
typedef READ_USN_JOURNAL_DATA_V1 READ_USN_JOURNAL_DATA, * PREAD_USN_JOURNAL_DATA;
typedef struct {
	DWORD Flags;
	DWORD Unused;
	DWORDLONG ChunkSize;
	LONGLONG FileSizeThreshold;
} USN_TRACK_MODIFIED_RANGES, * PUSN_TRACK_MODIFIED_RANGES;
typedef struct {
	USN Usn;
} USN_RANGE_TRACK_OUTPUT, * PUSN_RANGE_TRACK_OUTPUT;
typedef struct {
	DWORD RecordLength;
	WORD   MajorVersion;
	WORD   MinorVersion;
	DWORDLONG FileReferenceNumber;
	DWORDLONG ParentFileReferenceNumber;
	USN Usn;
	LARGE_INTEGER TimeStamp;
	DWORD Reason;
	DWORD SourceInfo;
	DWORD SecurityId;
	DWORD FileAttributes;
	WORD   FileNameLength;
	WORD   FileNameOffset;
	WCHAR FileName[1];
} USN_RECORD_V2, * PUSN_RECORD_V2;
typedef struct {
	DWORD RecordLength;
	WORD   MajorVersion;
	WORD   MinorVersion;
	FILE_ID_128 FileReferenceNumber;
	FILE_ID_128 ParentFileReferenceNumber;
	USN Usn;
	LARGE_INTEGER TimeStamp;
	DWORD Reason;
	DWORD SourceInfo;
	DWORD SecurityId;
	DWORD FileAttributes;
	WORD   FileNameLength;
	WORD   FileNameOffset;
	WCHAR FileName[1];
} USN_RECORD_V3, * PUSN_RECORD_V3;
typedef USN_RECORD_V2 USN_RECORD, * PUSN_RECORD;
typedef struct {
	DWORD RecordLength;
	WORD   MajorVersion;
	WORD   MinorVersion;
} USN_RECORD_COMMON_HEADER, * PUSN_RECORD_COMMON_HEADER;
typedef struct {
	LONGLONG Offset;
	LONGLONG Length;
} USN_RECORD_EXTENT, * PUSN_RECORD_EXTENT;
typedef struct {
	USN_RECORD_COMMON_HEADER Header;
	FILE_ID_128 FileReferenceNumber;
	FILE_ID_128 ParentFileReferenceNumber;
	USN Usn;
	DWORD Reason;
	DWORD SourceInfo;
	DWORD RemainingExtents;
	WORD   NumberOfExtents;
	WORD   ExtentSize;
	USN_RECORD_EXTENT Extents[1];
} USN_RECORD_V4, * PUSN_RECORD_V4;
typedef union {
	USN_RECORD_COMMON_HEADER Header;
	USN_RECORD_V2 V2;
	USN_RECORD_V3 V3;
	USN_RECORD_V4 V4;
} USN_RECORD_UNION, * PUSN_RECORD_UNION;
typedef struct {
	DWORDLONG UsnJournalID;
	USN FirstUsn;
	USN NextUsn;
	USN LowestValidUsn;
	USN MaxUsn;
	DWORDLONG MaximumSize;
	DWORDLONG AllocationDelta;
} USN_JOURNAL_DATA_V0, * PUSN_JOURNAL_DATA_V0;
typedef struct {
	DWORDLONG UsnJournalID;
	USN FirstUsn;
	USN NextUsn;
	USN LowestValidUsn;
	USN MaxUsn;
	DWORDLONG MaximumSize;
	DWORDLONG AllocationDelta;
	WORD   MinSupportedMajorVersion;
	WORD   MaxSupportedMajorVersion;
} USN_JOURNAL_DATA_V1, * PUSN_JOURNAL_DATA_V1;
typedef struct {
	DWORDLONG UsnJournalID;
	USN FirstUsn;
	USN NextUsn;
	USN LowestValidUsn;
	USN MaxUsn;
	DWORDLONG MaximumSize;
	DWORDLONG AllocationDelta;
	WORD   MinSupportedMajorVersion;
	WORD   MaxSupportedMajorVersion;
	DWORD Flags;
	DWORDLONG RangeTrackChunkSize;
	LONGLONG RangeTrackFileSizeThreshold;
} USN_JOURNAL_DATA_V2, * PUSN_JOURNAL_DATA_V2;
typedef USN_JOURNAL_DATA_V1 USN_JOURNAL_DATA, * PUSN_JOURNAL_DATA;
typedef struct {
	DWORDLONG UsnJournalID;
	DWORD DeleteFlags;
} DELETE_USN_JOURNAL_DATA, * PDELETE_USN_JOURNAL_DATA;
typedef struct {
	union {
		DWORD UsnSourceInfo;
		DWORD CopyNumber;
	};
	HANDLE VolumeHandle;
	DWORD HandleInfo;
} MARK_HANDLE_INFO, * PMARK_HANDLE_INFO;
typedef struct {
	union {
		DWORD UsnSourceInfo;
		DWORD CopyNumber;
	};
	UINT32 VolumeHandle;
	DWORD HandleInfo;
} MARK_HANDLE_INFO32, * PMARK_HANDLE_INFO32;
typedef struct {
	ACCESS_MASK DesiredAccess;
	DWORD SecurityIds[1];
} BULK_SECURITY_TEST_DATA, * PBULK_SECURITY_TEST_DATA;
typedef struct _FILE_PREFETCH {
	DWORD Type;
	DWORD Count;
	DWORDLONG Prefetch[1];
} FILE_PREFETCH, * PFILE_PREFETCH;
typedef struct _FILE_PREFETCH_EX {
	DWORD Type;
	DWORD Count;
	PVOID Context;
	DWORDLONG Prefetch[1];
} FILE_PREFETCH_EX, * PFILE_PREFETCH_EX;
typedef struct _FILESYSTEM_STATISTICS {
	WORD   FileSystemType;
	WORD   Version;
	DWORD SizeOfCompleteStructure;
	DWORD UserFileReads;
	DWORD UserFileReadBytes;
	DWORD UserDiskReads;
	DWORD UserFileWrites;
	DWORD UserFileWriteBytes;
	DWORD UserDiskWrites;
	DWORD MetaDataReads;
	DWORD MetaDataReadBytes;
	DWORD MetaDataDiskReads;
	DWORD MetaDataWrites;
	DWORD MetaDataWriteBytes;
	DWORD MetaDataDiskWrites;
} FILESYSTEM_STATISTICS, * PFILESYSTEM_STATISTICS;
typedef struct _FAT_STATISTICS {
	DWORD CreateHits;
	DWORD SuccessfulCreates;
	DWORD FailedCreates;
	DWORD NonCachedReads;
	DWORD NonCachedReadBytes;
	DWORD NonCachedWrites;
	DWORD NonCachedWriteBytes;
	DWORD NonCachedDiskReads;
	DWORD NonCachedDiskWrites;
} FAT_STATISTICS, * PFAT_STATISTICS;
typedef struct _EXFAT_STATISTICS {
	DWORD CreateHits;
	DWORD SuccessfulCreates;
	DWORD FailedCreates;
	DWORD NonCachedReads;
	DWORD NonCachedReadBytes;
	DWORD NonCachedWrites;
	DWORD NonCachedWriteBytes;
	DWORD NonCachedDiskReads;
	DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, * PEXFAT_STATISTICS;
typedef struct _NTFS_STATISTICS {
	DWORD LogFileFullExceptions;
	DWORD OtherExceptions;
	DWORD MftReads;
	DWORD MftReadBytes;
	DWORD MftWrites;
	DWORD MftWriteBytes;
	struct {
		WORD   Write;
		WORD   Create;
		WORD   SetInfo;
		WORD   Flush;
	} MftWritesUserLevel;
	WORD   MftWritesFlushForLogFileFull;
	WORD   MftWritesLazyWriter;
	WORD   MftWritesUserRequest;
	DWORD Mft2Writes;
	DWORD Mft2WriteBytes;
	struct {
		WORD   Write;
		WORD   Create;
		WORD   SetInfo;
		WORD   Flush;
	} Mft2WritesUserLevel;
	WORD   Mft2WritesFlushForLogFileFull;
	WORD   Mft2WritesLazyWriter;
	WORD   Mft2WritesUserRequest;
	DWORD RootIndexReads;
	DWORD RootIndexReadBytes;
	DWORD RootIndexWrites;
	DWORD RootIndexWriteBytes;
	DWORD BitmapReads;
	DWORD BitmapReadBytes;
	DWORD BitmapWrites;
	DWORD BitmapWriteBytes;
	WORD   BitmapWritesFlushForLogFileFull;
	WORD   BitmapWritesLazyWriter;
	WORD   BitmapWritesUserRequest;
	struct {
		WORD   Write;
		WORD   Create;
		WORD   SetInfo;
	} BitmapWritesUserLevel;
	DWORD MftBitmapReads;
	DWORD MftBitmapReadBytes;
	DWORD MftBitmapWrites;
	DWORD MftBitmapWriteBytes;
	WORD   MftBitmapWritesFlushForLogFileFull;
	WORD   MftBitmapWritesLazyWriter;
	WORD   MftBitmapWritesUserRequest;
	struct {
		WORD   Write;
		WORD   Create;
		WORD   SetInfo;
		WORD   Flush;
	} MftBitmapWritesUserLevel;
	DWORD UserIndexReads;
	DWORD UserIndexReadBytes;
	DWORD UserIndexWrites;
	DWORD UserIndexWriteBytes;
	DWORD LogFileReads;
	DWORD LogFileReadBytes;
	DWORD LogFileWrites;
	DWORD LogFileWriteBytes;
	struct {
		DWORD Calls;
		DWORD Clusters;
		DWORD Hints;
		DWORD RunsReturned;
		DWORD HintsHonored;
		DWORD HintsClusters;
		DWORD Cache;
		DWORD CacheClusters;
		DWORD CacheMiss;
		DWORD CacheMissClusters;
	} Allocate;
	DWORD DiskResourcesExhausted;
} NTFS_STATISTICS, * PNTFS_STATISTICS;
typedef struct _FILESYSTEM_STATISTICS_EX {
	WORD   FileSystemType;
	WORD   Version;
	DWORD SizeOfCompleteStructure;
	DWORDLONG UserFileReads;
	DWORDLONG UserFileReadBytes;
	DWORDLONG UserDiskReads;
	DWORDLONG UserFileWrites;
	DWORDLONG UserFileWriteBytes;
	DWORDLONG UserDiskWrites;
	DWORDLONG MetaDataReads;
	DWORDLONG MetaDataReadBytes;
	DWORDLONG MetaDataDiskReads;
	DWORDLONG MetaDataWrites;
	DWORDLONG MetaDataWriteBytes;
	DWORDLONG MetaDataDiskWrites;
} FILESYSTEM_STATISTICS_EX, * PFILESYSTEM_STATISTICS_EX;
typedef struct _NTFS_STATISTICS_EX {
	DWORD LogFileFullExceptions;
	DWORD OtherExceptions;
	DWORDLONG MftReads;
	DWORDLONG MftReadBytes;
	DWORDLONG MftWrites;
	DWORDLONG MftWriteBytes;
	struct {
		DWORD Write;
		DWORD Create;
		DWORD SetInfo;
		DWORD Flush;
	} MftWritesUserLevel;
	DWORD MftWritesFlushForLogFileFull;
	DWORD MftWritesLazyWriter;
	DWORD MftWritesUserRequest;
	DWORDLONG Mft2Writes;
	DWORDLONG Mft2WriteBytes;
	struct {
		DWORD Write;
		DWORD Create;
		DWORD SetInfo;
		DWORD Flush;
	} Mft2WritesUserLevel;
	DWORD Mft2WritesFlushForLogFileFull;
	DWORD Mft2WritesLazyWriter;
	DWORD Mft2WritesUserRequest;
	DWORDLONG RootIndexReads;
	DWORDLONG RootIndexReadBytes;
	DWORDLONG RootIndexWrites;
	DWORDLONG RootIndexWriteBytes;
	DWORDLONG BitmapReads;
	DWORDLONG BitmapReadBytes;
	DWORDLONG BitmapWrites;
	DWORDLONG BitmapWriteBytes;
	DWORD BitmapWritesFlushForLogFileFull;
	DWORD BitmapWritesLazyWriter;
	DWORD BitmapWritesUserRequest;
	struct {
		DWORD Write;
		DWORD Create;
		DWORD SetInfo;
		DWORD Flush;
	} BitmapWritesUserLevel;
	DWORDLONG MftBitmapReads;
	DWORDLONG MftBitmapReadBytes;
	DWORDLONG MftBitmapWrites;
	DWORDLONG MftBitmapWriteBytes;
	DWORD MftBitmapWritesFlushForLogFileFull;
	DWORD MftBitmapWritesLazyWriter;
	DWORD MftBitmapWritesUserRequest;
	struct {
		DWORD Write;
		DWORD Create;
		DWORD SetInfo;
		DWORD Flush;
	} MftBitmapWritesUserLevel;
	DWORDLONG UserIndexReads;
	DWORDLONG UserIndexReadBytes;
	DWORDLONG UserIndexWrites;
	DWORDLONG UserIndexWriteBytes;
	DWORDLONG LogFileReads;
	DWORDLONG LogFileReadBytes;
	DWORDLONG LogFileWrites;
	DWORDLONG LogFileWriteBytes;
	struct {
		DWORD Calls;
		DWORD RunsReturned;
		DWORD Hints;
		DWORD HintsHonored;
		DWORD Cache;
		DWORD CacheMiss;
		DWORDLONG Clusters;
		DWORDLONG HintsClusters;
		DWORDLONG CacheClusters;
		DWORDLONG CacheMissClusters;
	} Allocate;
	DWORD DiskResourcesExhausted;
	DWORDLONG VolumeTrimCount;
	DWORDLONG VolumeTrimTime;
	DWORDLONG VolumeTrimByteCount;
	DWORDLONG FileLevelTrimCount;
	DWORDLONG FileLevelTrimTime;
	DWORDLONG FileLevelTrimByteCount;
	DWORDLONG VolumeTrimSkippedCount;
	DWORDLONG VolumeTrimSkippedByteCount;
	DWORDLONG NtfsFillStatInfoFromMftRecordCalledCount;
	DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfAttributeListCount;
	DWORDLONG NtfsFillStatInfoFromMftRecordBailedBecauseOfNonResReparsePointCount;
} NTFS_STATISTICS_EX, * PNTFS_STATISTICS_EX;
typedef struct _FILE_OBJECTID_BUFFER {
	BYTE  ObjectId[16];
	union {
		struct {
			BYTE  BirthVolumeId[16];
			BYTE  BirthObjectId[16];
			BYTE  DomainId[16];
		};
		BYTE  ExtendedInfo[48];
	};
} FILE_OBJECTID_BUFFER, * PFILE_OBJECTID_BUFFER;
typedef struct _FILE_SET_SPARSE_BUFFER {
	BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER, * PFILE_SET_SPARSE_BUFFER;
typedef struct _FILE_ZERO_DATA_INFORMATION {
	LARGE_INTEGER FileOffset;
	LARGE_INTEGER BeyondFinalZero;
} FILE_ZERO_DATA_INFORMATION, * PFILE_ZERO_DATA_INFORMATION;
typedef struct _FILE_ZERO_DATA_INFORMATION_EX {
	LARGE_INTEGER FileOffset;
	LARGE_INTEGER BeyondFinalZero;
	DWORD Flags;
} FILE_ZERO_DATA_INFORMATION_EX, * PFILE_ZERO_DATA_INFORMATION_EX;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER {
	LARGE_INTEGER FileOffset;
	LARGE_INTEGER Length;
} FILE_ALLOCATED_RANGE_BUFFER, * PFILE_ALLOCATED_RANGE_BUFFER;
typedef struct _ENCRYPTION_BUFFER {
	DWORD EncryptionOperation;
	BYTE  Private[1];
} ENCRYPTION_BUFFER, * PENCRYPTION_BUFFER;
typedef struct _DECRYPTION_STATUS_BUFFER {
	BOOLEAN NoEncryptedStreams;
} DECRYPTION_STATUS_BUFFER, * PDECRYPTION_STATUS_BUFFER;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA {
	LONGLONG FileOffset;
	DWORD Length;
} REQUEST_RAW_ENCRYPTED_DATA, * PREQUEST_RAW_ENCRYPTED_DATA;
typedef struct _ENCRYPTED_DATA_INFO {
	DWORDLONG StartingFileOffset;
	DWORD OutputBufferOffset;
	DWORD BytesWithinFileSize;
	DWORD BytesWithinValidDataLength;
	WORD   CompressionFormat;
	BYTE  DataUnitShift;
	BYTE  ChunkShift;
	BYTE  ClusterShift;
	BYTE  EncryptionFormat;
	WORD   NumberOfDataBlocks;
	DWORD DataBlockSize[1];
} ENCRYPTED_DATA_INFO, * PENCRYPTED_DATA_INFO;
typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {
	DWORD ExtendedCode;
	DWORD Length;
	DWORD Flags;
	DWORD Reserved;
} EXTENDED_ENCRYPTED_DATA_INFO, * PEXTENDED_ENCRYPTED_DATA_INFO;
typedef struct _PLEX_READ_DATA_REQUEST {
	LARGE_INTEGER ByteOffset;
	DWORD ByteLength;
	DWORD PlexNumber;
} PLEX_READ_DATA_REQUEST, * PPLEX_READ_DATA_REQUEST;
typedef struct _SI_COPYFILE {
	DWORD SourceFileNameLength;
	DWORD DestinationFileNameLength;
	DWORD Flags;
	WCHAR FileNameBuffer[1];
} SI_COPYFILE, * PSI_COPYFILE;
typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
	BOOLEAN CloseDisc;
} FILE_MAKE_COMPATIBLE_BUFFER, * PFILE_MAKE_COMPATIBLE_BUFFER;
typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
	BOOLEAN Disable;
} FILE_SET_DEFECT_MGMT_BUFFER, * PFILE_SET_DEFECT_MGMT_BUFFER;
typedef struct _FILE_QUERY_SPARING_BUFFER {
	DWORD SparingUnitBytes;
	BOOLEAN SoftwareSparing;
	DWORD TotalSpareBlocks;
	DWORD FreeSpareBlocks;
} FILE_QUERY_SPARING_BUFFER, * PFILE_QUERY_SPARING_BUFFER;
typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
	LARGE_INTEGER DirectoryCount;
	LARGE_INTEGER FileCount;
	WORD   FsFormatMajVersion;
	WORD   FsFormatMinVersion;
	WCHAR FsFormatName[12];
	LARGE_INTEGER FormatTime;
	LARGE_INTEGER LastUpdateTime;
	WCHAR CopyrightInfo[34];
	WCHAR AbstractInfo[34];
	WCHAR FormattingImplementationInfo[34];
	WCHAR LastModifyingImplementationInfo[34];
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, * PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;
typedef DWORDLONG CLSN;
typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
	DWORDLONG Hint1;
	DWORDLONG Hint2;
	CLSN Clsn;
	DWORD    Status;
} FILE_INITIATE_REPAIR_OUTPUT_BUFFER, * PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;
typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
	ShrinkPrepare = 1,
	ShrinkCommit,
	ShrinkAbort
} SHRINK_VOLUME_REQUEST_TYPES, * PSHRINK_VOLUME_REQUEST_TYPES;
typedef struct _SHRINK_VOLUME_INFORMATION
{
	SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
	DWORDLONG Flags;
	LONGLONG NewNumberOfSectors;
} SHRINK_VOLUME_INFORMATION, * PSHRINK_VOLUME_INFORMATION;
typedef struct _TXFS_MODIFY_RM {
	DWORD Flags;
	DWORD LogContainerCountMax;
	DWORD LogContainerCountMin;
	DWORD LogContainerCount;
	DWORD LogGrowthIncrement;
	DWORD LogAutoShrinkPercentage;
	DWORDLONG Reserved;
	WORD   LoggingMode;
} TXFS_MODIFY_RM,
* PTXFS_MODIFY_RM;
typedef struct _TXFS_QUERY_RM_INFORMATION {
	DWORD BytesRequired;
	DWORDLONG TailLsn;
	DWORDLONG CurrentLsn;
	DWORDLONG ArchiveTailLsn;
	DWORDLONG LogContainerSize;
	LARGE_INTEGER HighestVirtualClock;
	DWORD LogContainerCount;
	DWORD LogContainerCountMax;
	DWORD LogContainerCountMin;
	DWORD LogGrowthIncrement;
	DWORD LogAutoShrinkPercentage;
	DWORD Flags;
	WORD   LoggingMode;
	WORD   Reserved;
	DWORD RmState;
	DWORDLONG LogCapacity;
	DWORDLONG LogFree;
	DWORDLONG TopsSize;
	DWORDLONG TopsUsed;
	DWORDLONG TransactionCount;
	DWORDLONG OnePCCount;
	DWORDLONG TwoPCCount;
	DWORDLONG NumberLogFileFull;
	DWORDLONG OldestTransactionAge;
	GUID RMName;
	DWORD TmLogPathOffset;
} TXFS_QUERY_RM_INFORMATION,
* PTXFS_QUERY_RM_INFORMATION;
typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
	LARGE_INTEGER  LastVirtualClock;
	DWORDLONG LastRedoLsn;
	DWORDLONG HighestRecoveryLsn;
	DWORD Flags;
} TXFS_ROLLFORWARD_REDO_INFORMATION,
* PTXFS_ROLLFORWARD_REDO_INFORMATION;
typedef struct _TXFS_START_RM_INFORMATION {
	DWORD Flags;
	DWORDLONG LogContainerSize;
	DWORD LogContainerCountMin;
	DWORD LogContainerCountMax;
	DWORD LogGrowthIncrement;
	DWORD LogAutoShrinkPercentage;
	DWORD TmLogPathOffset;
	WORD   TmLogPathLength;
	WORD   LoggingMode;
	WORD   LogPathLength;
	WORD   Reserved;
	WCHAR LogPath[1];
} TXFS_START_RM_INFORMATION,
* PTXFS_START_RM_INFORMATION;
typedef struct _TXFS_GET_METADATA_INFO_OUT {
	struct {
		LONGLONG LowPart;
		LONGLONG HighPart;
	} TxfFileId;
	GUID LockingTransaction;
	DWORDLONG LastLsn;
	DWORD TransactionState;
} TXFS_GET_METADATA_INFO_OUT, * PTXFS_GET_METADATA_INFO_OUT;
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {
	DWORDLONG Offset;
	DWORD NameFlags;
	LONGLONG FileId;
	DWORD Reserved1;
	DWORD Reserved2;
	LONGLONG Reserved3;
	WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, * PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;
typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {
	GUID KtmTransaction;
	DWORDLONG NumberOfFiles;
	DWORDLONG BufferSizeRequired;
	DWORDLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, * PTXFS_LIST_TRANSACTION_LOCKED_FILES;
typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {
	GUID TransactionId;
	DWORD TransactionState;
	DWORD Reserved1;
	DWORD Reserved2;
	LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, * PTXFS_LIST_TRANSACTIONS_ENTRY;
typedef struct _TXFS_LIST_TRANSACTIONS {
	DWORDLONG NumberOfTransactions;
	DWORDLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, * PTXFS_LIST_TRANSACTIONS;
typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
	union {
		DWORD BufferLength;
		BYTE  Buffer[1];
	};
} TXFS_READ_BACKUP_INFORMATION_OUT, * PTXFS_READ_BACKUP_INFORMATION_OUT;
typedef struct _TXFS_WRITE_BACKUP_INFORMATION {
	BYTE  Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, * PTXFS_WRITE_BACKUP_INFORMATION;
typedef struct _TXFS_GET_TRANSACTED_VERSION {
	DWORD ThisBaseVersion;
	DWORD LatestVersion;
	WORD   ThisMiniVersion;
	WORD   FirstMiniVersion;
	WORD   LatestMiniVersion;
} TXFS_GET_TRANSACTED_VERSION, * PTXFS_GET_TRANSACTED_VERSION;
typedef struct _TXFS_SAVEPOINT_INFORMATION {
	HANDLE KtmTransaction;
	DWORD ActionCode;
	DWORD SavepointId;
} TXFS_SAVEPOINT_INFORMATION, * PTXFS_SAVEPOINT_INFORMATION;
typedef struct _TXFS_CREATE_MINIVERSION_INFO {
	WORD   StructureVersion;
	WORD   StructureLength;
	DWORD BaseVersion;
	WORD   MiniVersion;
} TXFS_CREATE_MINIVERSION_INFO, * PTXFS_CREATE_MINIVERSION_INFO;
typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {
	BOOLEAN TransactionsActiveAtSnapshot;
} TXFS_TRANSACTION_ACTIVE_INFO, * PTXFS_TRANSACTION_ACTIVE_INFO;
typedef struct _BOOT_AREA_INFO {
	DWORD               BootSectorCount;
	struct {
		LARGE_INTEGER   Offset;
	} BootSectors[2];
} BOOT_AREA_INFO, * PBOOT_AREA_INFO;
typedef struct _RETRIEVAL_POINTER_BASE {
	LARGE_INTEGER       FileAreaOffset;
} RETRIEVAL_POINTER_BASE, * PRETRIEVAL_POINTER_BASE;
typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {
	DWORD VolumeFlags;
	DWORD FlagMask;
	DWORD Version;
	DWORD Reserved;
} FILE_FS_PERSISTENT_VOLUME_INFORMATION, * PFILE_FS_PERSISTENT_VOLUME_INFORMATION;
typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {
	CHAR FileSystem[9];
} FILE_SYSTEM_RECOGNITION_INFORMATION, * PFILE_SYSTEM_RECOGNITION_INFORMATION;
typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {
	WORD   StructureVersion;
	WORD   StructureLength;
	DWORD RequestedOplockLevel;
	DWORD Flags;
} REQUEST_OPLOCK_INPUT_BUFFER, * PREQUEST_OPLOCK_INPUT_BUFFER;
typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {
	WORD   StructureVersion;
	WORD   StructureLength;
	DWORD OriginalOplockLevel;
	DWORD NewOplockLevel;
	DWORD Flags;
	ACCESS_MASK AccessMode;
	WORD   ShareMode;
} REQUEST_OPLOCK_OUTPUT_BUFFER, * PREQUEST_OPLOCK_OUTPUT_BUFFER;
typedef struct _VIRTUAL_STORAGE_TYPE
{
	DWORD DeviceId;
	GUID  VendorId;
} VIRTUAL_STORAGE_TYPE, * PVIRTUAL_STORAGE_TYPE;
typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
	DWORD   RequestLevel;
	DWORD   RequestFlags;
} STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST, * PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;
typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
	DWORD   EntryLength;
	DWORD   DependencyTypeFlags;
	DWORD   ProviderSpecificFlags;
	VIRTUAL_STORAGE_TYPE VirtualStorageType;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY, * PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;
typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
	DWORD   EntryLength;
	DWORD   DependencyTypeFlags;
	DWORD   ProviderSpecificFlags;
	VIRTUAL_STORAGE_TYPE VirtualStorageType;
	DWORD   AncestorLevel;
	DWORD   HostVolumeNameOffset;
	DWORD   HostVolumeNameSize;
	DWORD   DependentVolumeNameOffset;
	DWORD   DependentVolumeNameSize;
	DWORD   RelativePathOffset;
	DWORD   RelativePathSize;
	DWORD   DependentDeviceNameOffset;
	DWORD   DependentDeviceNameSize;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY, * PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;
typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
	DWORD   ResponseLevel;
	DWORD   NumberEntries;
	union {
		STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
		STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
	};
} STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE, * PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;
typedef struct _SD_CHANGE_MACHINE_SID_INPUT {
	WORD   CurrentMachineSIDOffset;
	WORD   CurrentMachineSIDLength;
	WORD   NewMachineSIDOffset;
	WORD   NewMachineSIDLength;
} SD_CHANGE_MACHINE_SID_INPUT, * PSD_CHANGE_MACHINE_SID_INPUT;
typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {
	DWORDLONG NumSDChangedSuccess;
	DWORDLONG NumSDChangedFail;
	DWORDLONG NumSDUnused;
	DWORDLONG NumSDTotal;
	DWORDLONG NumMftSDChangedSuccess;
	DWORDLONG NumMftSDChangedFail;
	DWORDLONG NumMftSDTotal;
} SD_CHANGE_MACHINE_SID_OUTPUT, * PSD_CHANGE_MACHINE_SID_OUTPUT;
typedef struct _SD_QUERY_STATS_INPUT {
	DWORD Reserved;
} SD_QUERY_STATS_INPUT, * PSD_QUERY_STATS_INPUT;
typedef struct _SD_QUERY_STATS_OUTPUT {
	DWORDLONG SdsStreamSize;
	DWORDLONG SdsAllocationSize;
	DWORDLONG SiiStreamSize;
	DWORDLONG SiiAllocationSize;
	DWORDLONG SdhStreamSize;
	DWORDLONG SdhAllocationSize;
	DWORDLONG NumSDTotal;
	DWORDLONG NumSDUnused;
} SD_QUERY_STATS_OUTPUT, * PSD_QUERY_STATS_OUTPUT;
typedef struct _SD_ENUM_SDS_INPUT {
	DWORDLONG StartingOffset;
	DWORDLONG MaxSDEntriesToReturn;
} SD_ENUM_SDS_INPUT, * PSD_ENUM_SDS_INPUT;
typedef struct _SD_ENUM_SDS_ENTRY {
	DWORD Hash;
	DWORD SecurityId;
	DWORDLONG Offset;
	DWORD Length;
	BYTE  Descriptor[1];
} SD_ENUM_SDS_ENTRY, * PSD_ENUM_SDS_ENTRY;
typedef struct _SD_ENUM_SDS_OUTPUT {
	DWORDLONG NextOffset;
	DWORDLONG NumSDEntriesReturned;
	DWORDLONG NumSDBytesReturned;
	SD_ENUM_SDS_ENTRY SDEntry[1];
} SD_ENUM_SDS_OUTPUT, * PSD_ENUM_SDS_OUTPUT;
typedef struct _SD_GLOBAL_CHANGE_INPUT
{
	DWORD Flags;
	DWORD ChangeType;
	union {
		SD_CHANGE_MACHINE_SID_INPUT SdChange;
		SD_QUERY_STATS_INPUT SdQueryStats;
		SD_ENUM_SDS_INPUT SdEnumSds;
	};
} SD_GLOBAL_CHANGE_INPUT, * PSD_GLOBAL_CHANGE_INPUT;
typedef struct _SD_GLOBAL_CHANGE_OUTPUT
{
	DWORD Flags;
	DWORD ChangeType;
	union {
		SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
		SD_QUERY_STATS_OUTPUT SdQueryStats;
		SD_ENUM_SDS_OUTPUT SdEnumSds;
	};
} SD_GLOBAL_CHANGE_OUTPUT, * PSD_GLOBAL_CHANGE_OUTPUT;
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {
	DWORD         Flags;
	DWORD         NumberOfClusters;
	LARGE_INTEGER Cluster[1];
} LOOKUP_STREAM_FROM_CLUSTER_INPUT, * PLOOKUP_STREAM_FROM_CLUSTER_INPUT;
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
	DWORD         Offset;
	DWORD         NumberOfMatches;
	DWORD         BufferSizeRequired;
} LOOKUP_STREAM_FROM_CLUSTER_OUTPUT, * PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;
typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
	DWORD         OffsetToNext;
	DWORD         Flags;
	LARGE_INTEGER Reserved;
	LARGE_INTEGER Cluster;
	WCHAR         FileName[1];
} LOOKUP_STREAM_FROM_CLUSTER_ENTRY, * PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;
typedef struct _FILE_TYPE_NOTIFICATION_INPUT {
	DWORD Flags;
	DWORD NumFileTypeIDs;
	GUID FileTypeID[1];
} FILE_TYPE_NOTIFICATION_INPUT, * PFILE_TYPE_NOTIFICATION_INPUT;
extern const GUID  FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE = { 0x0d0a64a1, 0x38fc, 0x4db8, { 0x9f, 0xe7, 0x3f, 0x43, 0x52, 0xcd, 0x7c, 0x5c } };
extern const GUID  FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE = { 0xb7624d64, 0xb9a3, 0x4cf8, { 0x80, 0x11, 0x5b, 0x86, 0xc9, 0x40, 0xe7, 0xb7 } };
extern const GUID  FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE = { 0x9d453eb7, 0xd2a6, 0x4dbd, { 0xa2, 0xe3, 0xfb, 0xd0, 0xed, 0x91, 0x09, 0xa9 } };
typedef struct _CSV_MGMT_LOCK {
	DWORD      Flags;
}CSV_MGMT_LOCK, * PCSV_MGMT_LOCK;
typedef struct _CSV_NAMESPACE_INFO {
	DWORD         Version;
	DWORD         DeviceNumber;
	LARGE_INTEGER StartingOffset;
	DWORD         SectorSize;
} CSV_NAMESPACE_INFO, * PCSV_NAMESPACE_INFO;
typedef enum _CSV_CONTROL_OP {
	CsvControlStartRedirectFile = 0x02,
	CsvControlStopRedirectFile = 0x03,
	CsvControlQueryRedirectState = 0x04,
	CsvControlQueryFileRevision = 0x06,
	CsvControlQueryMdsPath = 0x08,
	CsvControlQueryFileRevisionFileId128 = 0x09,
	CsvControlQueryVolumeRedirectState = 0x0a,
	CsvControlEnableUSNRangeModificationTracking = 0x0d,
	CsvControlMarkHandleLocalVolumeMount = 0x0e,
	CsvControlUnmarkHandleLocalVolumeMount = 0x0f,
	CsvControlGetCsvFsMdsPathV2 = 0x12,
	CsvControlDisableCaching = 0x13,
	CsvControlEnableCaching = 0x14,
	CsvControlStartForceDFO = 0x15,
	CsvControlStopForceDFO = 0x16,
} CSV_CONTROL_OP, * PCSV_CONTROL_OP;
typedef struct _CSV_CONTROL_PARAM {
	CSV_CONTROL_OP Operation;
	LONGLONG Unused;
} CSV_CONTROL_PARAM, * PCSV_CONTROL_PARAM;
typedef struct _CSV_QUERY_REDIRECT_STATE {
	DWORD MdsNodeId;
	DWORD DsNodeId;
	BOOLEAN FileRedirected;
} CSV_QUERY_REDIRECT_STATE, * PCSV_QUERY_REDIRECT_STATE;
typedef struct _CSV_QUERY_FILE_REVISION {
	LONGLONG FileId;
	LONGLONG FileRevision[3];
} CSV_QUERY_FILE_REVISION, * PCSV_QUERY_FILE_REVISION;
typedef struct _CSV_QUERY_FILE_REVISION_FILE_ID_128 {
	FILE_ID_128 FileId;
	LONGLONG FileRevision[3];
} CSV_QUERY_FILE_REVISION_FILE_ID_128, * PCSV_QUERY_FILE_REVISION_FILE_ID_128;
typedef struct _CSV_QUERY_MDS_PATH {
	DWORD MdsNodeId;
	DWORD DsNodeId;
	DWORD PathLength;
	WCHAR Path[1];
} CSV_QUERY_MDS_PATH, * PCSV_QUERY_MDS_PATH;
typedef enum _CSVFS_DISK_CONNECTIVITY
{
	CsvFsDiskConnectivityNone = 0,
	CsvFsDiskConnectivityMdsNodeOnly = 1,
	CsvFsDiskConnectivitySubsetOfNodes = 2,
	CsvFsDiskConnectivityAllNodes = 3
} CSVFS_DISK_CONNECTIVITY, * PCSVFS_DISK_CONNECTIVITY;
typedef struct _CSV_QUERY_VOLUME_REDIRECT_STATE {
	DWORD MdsNodeId;
	DWORD DsNodeId;
	BOOLEAN IsDiskConnected;
	BOOLEAN ClusterEnableDirectIo;
	CSVFS_DISK_CONNECTIVITY DiskConnectivity;
} CSV_QUERY_VOLUME_REDIRECT_STATE, * PCSV_QUERY_VOLUME_REDIRECT_STATE;
typedef struct _CSV_QUERY_MDS_PATH_V2 {
	LONGLONG Version;
	DWORD RequiredSize;
	DWORD MdsNodeId;
	DWORD DsNodeId;
	DWORD Flags;
	CSVFS_DISK_CONNECTIVITY DiskConnectivity;
	GUID VolumeId;
	DWORD IpAddressOffset;
	DWORD IpAddressLength;
	DWORD PathOffset;
	DWORD PathLength;
} CSV_QUERY_MDS_PATH_V2, * PCSV_QUERY_MDS_PATH_V2;
typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
	DWORDLONG VetoedFromAltitudeIntegral;
	DWORDLONG VetoedFromAltitudeDecimal;
	WCHAR   Reason[256];
} CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT, * PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;
typedef enum _STORAGE_RESERVE_ID {
	StorageReserveIdNone = 0,
	StorageReserveIdHard,
	StorageReserveIdSoft,
	StorageReserveIdUpdateScratch,
	StorageReserveIdMax
} STORAGE_RESERVE_ID, * PSTORAGE_RESERVE_ID;
typedef struct _CSV_IS_OWNED_BY_CSVFS {
	BOOLEAN OwnedByCSVFS;
}CSV_IS_OWNED_BY_CSVFS, * PCSV_IS_OWNED_BY_CSVFS;
typedef struct _FILE_LEVEL_TRIM_RANGE {
	DWORDLONG Offset;
	DWORDLONG Length;
} FILE_LEVEL_TRIM_RANGE, * PFILE_LEVEL_TRIM_RANGE;
typedef struct _FILE_LEVEL_TRIM {
	DWORD Key;
	DWORD NumRanges;
	FILE_LEVEL_TRIM_RANGE Ranges[1];
} FILE_LEVEL_TRIM, * PFILE_LEVEL_TRIM;
typedef struct _FILE_LEVEL_TRIM_OUTPUT {
	DWORD NumRangesProcessed;
} FILE_LEVEL_TRIM_OUTPUT, * PFILE_LEVEL_TRIM_OUTPUT;
typedef enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
	QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
	QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
	QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
	QUERY_FILE_LAYOUT_FILTER_TYPE_STORAGE_RESERVE_ID = 3,
	QUERY_FILE_LAYOUT_NUM_FILTER_TYPES
} QUERY_FILE_LAYOUT_FILTER_TYPE;
typedef struct _CLUSTER_RANGE {
	LARGE_INTEGER       StartingCluster;
	LARGE_INTEGER       ClusterCount;
} CLUSTER_RANGE, * PCLUSTER_RANGE;
typedef struct _FILE_REFERENCE_RANGE {
	DWORDLONG           StartingFileReferenceNumber;
	DWORDLONG           EndingFileReferenceNumber;
} FILE_REFERENCE_RANGE, * PFILE_REFERENCE_RANGE;
typedef struct _QUERY_FILE_LAYOUT_INPUT {
	union {
		DWORD           FilterEntryCount;
		DWORD           NumberOfPairs;
	};
	DWORD               Flags;
	QUERY_FILE_LAYOUT_FILTER_TYPE   FilterType;
	DWORD               Reserved;
	union {
		CLUSTER_RANGE ClusterRanges[1];
		FILE_REFERENCE_RANGE FileReferenceRanges[1];
		STORAGE_RESERVE_ID StorageReserveIds[1];
	} Filter;
} QUERY_FILE_LAYOUT_INPUT, * PQUERY_FILE_LAYOUT_INPUT;
typedef struct _QUERY_FILE_LAYOUT_OUTPUT {
	DWORD               FileEntryCount;
	DWORD               FirstFileOffset;
	DWORD               Flags;
	DWORD               Reserved;
} QUERY_FILE_LAYOUT_OUTPUT, * PQUERY_FILE_LAYOUT_OUTPUT;
typedef struct _FILE_LAYOUT_ENTRY {
	DWORD         Version;
	DWORD         NextFileOffset;
	DWORD         Flags;
	DWORD         FileAttributes;
	DWORDLONG     FileReferenceNumber;
	DWORD         FirstNameOffset;
	DWORD         FirstStreamOffset;
	DWORD         ExtraInfoOffset;
	DWORD         ExtraInfoLength;
} FILE_LAYOUT_ENTRY, * PFILE_LAYOUT_ENTRY;
typedef struct _FILE_LAYOUT_NAME_ENTRY {
	DWORD         NextNameOffset;
	DWORD         Flags;
	DWORDLONG     ParentFileReferenceNumber;
	DWORD         FileNameLength;
	DWORD         Reserved;
	WCHAR         FileName[1];
} FILE_LAYOUT_NAME_ENTRY, * PFILE_LAYOUT_NAME_ENTRY;
typedef struct _FILE_LAYOUT_INFO_ENTRY {
	struct {
		LARGE_INTEGER CreationTime;
		LARGE_INTEGER LastAccessTime;
		LARGE_INTEGER LastWriteTime;
		LARGE_INTEGER ChangeTime;
		DWORD FileAttributes;
	} BasicInformation;
	DWORD                       OwnerId;
	DWORD                       SecurityId;
	USN                         Usn;
	STORAGE_RESERVE_ID  StorageReserveId;
} FILE_LAYOUT_INFO_ENTRY, * PFILE_LAYOUT_INFO_ENTRY;
typedef struct _STREAM_LAYOUT_ENTRY {
	DWORD         Version;
	DWORD         NextStreamOffset;
	DWORD         Flags;
	DWORD         ExtentInformationOffset;
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	DWORD         StreamInformationOffset;
	DWORD         AttributeTypeCode;
	DWORD         AttributeFlags;
	DWORD         StreamIdentifierLength;
	WCHAR         StreamIdentifier[1];
} STREAM_LAYOUT_ENTRY, * PSTREAM_LAYOUT_ENTRY;
typedef struct _STREAM_EXTENT_ENTRY {
	DWORD        Flags;
	union {
		RETRIEVAL_POINTERS_BUFFER        RetrievalPointers;
	} ExtentInformation;
} STREAM_EXTENT_ENTRY, * PSTREAM_EXTENT_ENTRY;
typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
	WORD   ChecksumAlgorithm;
	WORD   Reserved;
	DWORD Flags;
	DWORD ChecksumChunkSizeInBytes;
	DWORD ClusterSizeInBytes;
} FSCTL_GET_INTEGRITY_INFORMATION_BUFFER, * PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER;
typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
	WORD   ChecksumAlgorithm;
	WORD   Reserved;
	DWORD Flags;
} FSCTL_SET_INTEGRITY_INFORMATION_BUFFER, * PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER;
typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX {
	BYTE  EnableIntegrity;
	BYTE  KeepIntegrityStateUnchanged;
	WORD   Reserved;
	DWORD Flags;
	BYTE  Version;
	BYTE  Reserved2[7];
} FSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX, * PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER_EX;
typedef struct _FSCTL_OFFLOAD_READ_INPUT {
	DWORD Size;
	DWORD Flags;
	DWORD TokenTimeToLive;
	DWORD Reserved;
	DWORDLONG FileOffset;
	DWORDLONG CopyLength;
} FSCTL_OFFLOAD_READ_INPUT, * PFSCTL_OFFLOAD_READ_INPUT;
typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
	DWORD Size;
	DWORD Flags;
	DWORDLONG TransferLength;
	BYTE  Token[512];
} FSCTL_OFFLOAD_READ_OUTPUT, * PFSCTL_OFFLOAD_READ_OUTPUT;
typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
	DWORD Size;
	DWORD Flags;
	DWORDLONG FileOffset;
	DWORDLONG CopyLength;
	DWORDLONG TransferOffset;
	BYTE  Token[512];
} FSCTL_OFFLOAD_WRITE_INPUT, * PFSCTL_OFFLOAD_WRITE_INPUT;
typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
	DWORD Size;
	DWORD Flags;
	DWORDLONG LengthWritten;
} FSCTL_OFFLOAD_WRITE_OUTPUT, * PFSCTL_OFFLOAD_WRITE_OUTPUT;
typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
	DWORD Flags;
} SET_PURGE_FAILURE_MODE_INPUT, * PSET_PURGE_FAILURE_MODE_INPUT;
typedef struct _REPAIR_COPIES_INPUT {
	DWORD Size;
	DWORD Flags;
	LARGE_INTEGER FileOffset;
	DWORD Length;
	DWORD SourceCopy;
	DWORD NumberOfRepairCopies;
	DWORD RepairCopies[1];
} REPAIR_COPIES_INPUT, * PREPAIR_COPIES_INPUT;
typedef struct _REPAIR_COPIES_OUTPUT {
	DWORD Size;
	DWORD    Status;
	LARGE_INTEGER ResumeFileOffset;
} REPAIR_COPIES_OUTPUT, * PREPAIR_COPIES_OUTPUT;
typedef struct _FILE_REGION_INFO {
	LONGLONG FileOffset;
	LONGLONG Length;
	DWORD Usage;
	DWORD Reserved;
} FILE_REGION_INFO, * PFILE_REGION_INFO;
typedef struct _FILE_REGION_OUTPUT {
	DWORD Flags;
	DWORD TotalRegionEntryCount;
	DWORD RegionEntryCount;
	DWORD Reserved;
	FILE_REGION_INFO Region[1];
} FILE_REGION_OUTPUT, * PFILE_REGION_OUTPUT;
typedef struct _FILE_REGION_INPUT {
	LONGLONG FileOffset;
	LONGLONG Length;
	DWORD DesiredUsage;
} FILE_REGION_INPUT, * PFILE_REGION_INPUT;
typedef struct _WRITE_USN_REASON_INPUT {
	DWORD Flags;
	DWORD UsnReasonToWrite;
} WRITE_USN_REASON_INPUT, * PWRITE_USN_REASON_INPUT;
typedef enum _FILE_STORAGE_TIER_MEDIA_TYPE {
	FileStorageTierMediaTypeUnspecified = 0,
	FileStorageTierMediaTypeDisk = 1,
	FileStorageTierMediaTypeSsd = 2,
	FileStorageTierMediaTypeScm = 4,
	FileStorageTierMediaTypeMax
} FILE_STORAGE_TIER_MEDIA_TYPE, * PFILE_STORAGE_TIER_MEDIA_TYPE;
typedef enum _FILE_STORAGE_TIER_CLASS {
	FileStorageTierClassUnspecified = 0,
	FileStorageTierClassCapacity,
	FileStorageTierClassPerformance,
	FileStorageTierClassMax
} FILE_STORAGE_TIER_CLASS, * PFILE_STORAGE_TIER_CLASS;
typedef struct _FILE_STORAGE_TIER {
	GUID Id;
	WCHAR Name[(256)];
	WCHAR Description[(256)];
	DWORDLONG Flags;
	DWORDLONG ProvisionedCapacity;
	FILE_STORAGE_TIER_MEDIA_TYPE MediaType;
	FILE_STORAGE_TIER_CLASS Class;
} FILE_STORAGE_TIER, * PFILE_STORAGE_TIER;
typedef   struct _FSCTL_QUERY_STORAGE_CLASSES_OUTPUT {
	DWORD Version;
	DWORD Size;
	DWORD Flags;
	DWORD TotalNumberOfTiers;
	DWORD NumberOfTiersReturned;
	FILE_STORAGE_TIER Tiers[1];
} FSCTL_QUERY_STORAGE_CLASSES_OUTPUT, * PFSCTL_QUERY_STORAGE_CLASSES_OUTPUT;
typedef struct _STREAM_INFORMATION_ENTRY {
	DWORD         Version;
	DWORD         Flags;
	union _StreamInformation {
		struct _DesiredStorageClass {
			FILE_STORAGE_TIER_CLASS          Class;
			DWORD                            Flags;
		} DesiredStorageClass;
		struct _DataStream {
			WORD        Length;
			WORD        Flags;
			DWORD       Reserved;
			DWORDLONG   Vdl;
		} DataStream;
		struct _Reparse {
			WORD   Length;
			WORD   Flags;
			DWORD ReparseDataSize;
			DWORD ReparseDataOffset;
		} Reparse;
		struct _Ea {
			WORD   Length;
			WORD   Flags;
			DWORD EaSize;
			DWORD EaInformationOffset;
		} Ea;
	} StreamInformation;
} STREAM_INFORMATION_ENTRY, * PSTREAM_INFORMATION_ENTRY;
typedef struct _FSCTL_QUERY_REGION_INFO_INPUT {
	DWORD     Version;
	DWORD     Size;
	DWORD     Flags;
	DWORD     NumberOfTierIds;
	GUID      TierIds[1];
} FSCTL_QUERY_REGION_INFO_INPUT, * PFSCTL_QUERY_REGION_INFO_INPUT;
typedef struct _FILE_STORAGE_TIER_REGION {
	GUID        TierId;
	DWORDLONG   Offset;
	DWORDLONG   Length;
} FILE_STORAGE_TIER_REGION, * PFILE_STORAGE_TIER_REGION;
typedef struct _FSCTL_QUERY_REGION_INFO_OUTPUT {
	DWORD     Version;
	DWORD     Size;
	DWORD     Flags;
	DWORD     Reserved;
	DWORDLONG Alignment;
	DWORD     TotalNumberOfRegions;
	DWORD     NumberOfRegionsReturned;
	FILE_STORAGE_TIER_REGION Regions[1];
} FSCTL_QUERY_REGION_INFO_OUTPUT, * PFSCTL_QUERY_REGION_INFO_OUTPUT;
typedef struct _FILE_DESIRED_STORAGE_CLASS_INFORMATION {
	FILE_STORAGE_TIER_CLASS Class;
	DWORD Flags;
} FILE_DESIRED_STORAGE_CLASS_INFORMATION, * PFILE_DESIRED_STORAGE_CLASS_INFORMATION;
typedef struct _DUPLICATE_EXTENTS_DATA {
	HANDLE FileHandle;
	LARGE_INTEGER SourceFileOffset;
	LARGE_INTEGER TargetFileOffset;
	LARGE_INTEGER ByteCount;
} DUPLICATE_EXTENTS_DATA, * PDUPLICATE_EXTENTS_DATA;
typedef struct _DUPLICATE_EXTENTS_DATA32 {
	UINT32 FileHandle;
	LARGE_INTEGER SourceFileOffset;
	LARGE_INTEGER TargetFileOffset;
	LARGE_INTEGER ByteCount;
} DUPLICATE_EXTENTS_DATA32, * PDUPLICATE_EXTENTS_DATA32;
typedef struct _DUPLICATE_EXTENTS_DATA_EX {
	SIZE_T Size;
	HANDLE FileHandle;
	LARGE_INTEGER SourceFileOffset;
	LARGE_INTEGER TargetFileOffset;
	LARGE_INTEGER ByteCount;
	DWORD Flags;
} DUPLICATE_EXTENTS_DATA_EX, * PDUPLICATE_EXTENTS_DATA_EX;
typedef struct _DUPLICATE_EXTENTS_DATA_EX32 {
	DWORD32 Size;
	DWORD32 FileHandle;
	LARGE_INTEGER SourceFileOffset;
	LARGE_INTEGER TargetFileOffset;
	LARGE_INTEGER ByteCount;
	DWORD Flags;
} DUPLICATE_EXTENTS_DATA_EX32, * PDUPLICATE_EXTENTS_DATA_EX32;
typedef enum _REFS_SMR_VOLUME_GC_STATE {
	SmrGcStateInactive = 0,
	SmrGcStatePaused = 1,
	SmrGcStateActive = 2,
	SmrGcStateActiveFullSpeed = 3,
} REFS_SMR_VOLUME_GC_STATE, * PREFS_SMR_VOLUME_GC_STATE;
typedef struct _REFS_SMR_VOLUME_INFO_OUTPUT {
	DWORD Version;
	DWORD Flags;
	LARGE_INTEGER SizeOfRandomlyWritableTier;
	LARGE_INTEGER FreeSpaceInRandomlyWritableTier;
	LARGE_INTEGER SizeofSMRTier;
	LARGE_INTEGER FreeSpaceInSMRTier;
	LARGE_INTEGER UsableFreeSpaceInSMRTier;
	REFS_SMR_VOLUME_GC_STATE VolumeGcState;
	DWORD    VolumeGcLastStatus;
	DWORDLONG Unused[7];
} REFS_SMR_VOLUME_INFO_OUTPUT, * PREFS_SMR_VOLUME_INFO_OUTPUT;
typedef enum _REFS_SMR_VOLUME_GC_ACTION {
	SmrGcActionStart = 1,
	SmrGcActionStartFullSpeed = 2,
	SmrGcActionPause = 3,
	SmrGcActionStop = 4,
} REFS_SMR_VOLUME_GC_ACTION, * PREFS_SMR_VOLUME_GC_ACTION;
typedef enum _REFS_SMR_VOLUME_GC_METHOD {
	SmrGcMethodCompaction = 1,
	SmrGcMethodCompression = 2,
	SmrGcMethodRotation = 3,
} REFS_SMR_VOLUME_GC_METHOD, * PREFS_SMR_VOLUME_GC_METHOD;
typedef struct _REFS_SMR_VOLUME_GC_PARAMETERS {
	DWORD Version;
	DWORD Flags;
	REFS_SMR_VOLUME_GC_ACTION Action;
	REFS_SMR_VOLUME_GC_METHOD Method;
	DWORD IoGranularity;
	DWORD CompressionFormat;
	DWORDLONG Unused[8];
} REFS_SMR_VOLUME_GC_PARAMETERS, * PREFS_SMR_VOLUME_GC_PARAMETERS;
typedef struct _STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER {
	DWORD OptimalWriteSize;
	DWORD StreamGranularitySize;
	DWORD StreamIdMin;
	DWORD StreamIdMax;
} STREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER, * PSTREAMS_QUERY_PARAMETERS_OUTPUT_BUFFER;
typedef struct _STREAMS_ASSOCIATE_ID_INPUT_BUFFER {
	DWORD Flags;
	DWORD StreamId;
} STREAMS_ASSOCIATE_ID_INPUT_BUFFER, * PSTREAMS_ASSOCIATE_ID_INPUT_BUFFER;
typedef struct _STREAMS_QUERY_ID_OUTPUT_BUFFER {
	DWORD StreamId;
} STREAMS_QUERY_ID_OUTPUT_BUFFER, * PSTREAMS_QUERY_ID_OUTPUT_BUFFER;
typedef struct _QUERY_BAD_RANGES_INPUT_RANGE {
	DWORDLONG StartOffset;
	DWORDLONG LengthInBytes;
} QUERY_BAD_RANGES_INPUT_RANGE, * PQUERY_BAD_RANGES_INPUT_RANGE;
typedef struct _QUERY_BAD_RANGES_INPUT {
	DWORD Flags;
	DWORD NumRanges;
	QUERY_BAD_RANGES_INPUT_RANGE Ranges[1];
} QUERY_BAD_RANGES_INPUT, * PQUERY_BAD_RANGES_INPUT;
typedef struct _QUERY_BAD_RANGES_OUTPUT_RANGE {
	DWORD Flags;
	DWORD Reserved;
	DWORDLONG StartOffset;
	DWORDLONG LengthInBytes;
} QUERY_BAD_RANGES_OUTPUT_RANGE, * PQUERY_BAD_RANGES_OUTPUT_RANGE;
typedef struct _QUERY_BAD_RANGES_OUTPUT {
	DWORD Flags;
	DWORD NumBadRanges;
	DWORDLONG NextOffsetToLookUp;
	QUERY_BAD_RANGES_OUTPUT_RANGE BadRanges[1];
} QUERY_BAD_RANGES_OUTPUT, * PQUERY_BAD_RANGES_OUTPUT;
typedef struct _SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT {
	DWORD Flags;
	DWORD AlignmentShift;
	DWORDLONG FileOffsetToAlign;
	DWORD FallbackAlignmentShift;
} SET_DAX_ALLOC_ALIGNMENT_HINT_INPUT, * PSET_DAX_ALLOC_ALIGNMENT_HINT_INPUT;
typedef enum _VIRTUAL_STORAGE_BEHAVIOR_CODE {
	VirtualStorageBehaviorUndefined = 0,
	VirtualStorageBehaviorCacheWriteThrough = 1,
	VirtualStorageBehaviorCacheWriteBack = 2
} VIRTUAL_STORAGE_BEHAVIOR_CODE, * PVIRTUAL_STORAGE_BEHAVIOR_CODE;
typedef struct _VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT {
	DWORD Size;
	VIRTUAL_STORAGE_BEHAVIOR_CODE BehaviorCode;
} VIRTUAL_STORAGE_SET_BEHAVIOR_INPUT, * PVIRTUAL_STORAGE_SET_BEHAVIOR_INPUT;
typedef struct _ENCRYPTION_KEY_CTRL_INPUT {
	DWORD HeaderSize;
	DWORD StructureSize;
	WORD   KeyOffset;
	WORD   KeySize;
	DWORD DplLock;
	DWORDLONG DplUserId;
	DWORDLONG DplCredentialId;
} ENCRYPTION_KEY_CTRL_INPUT, * PENCRYPTION_KEY_CTRL_INPUT;
typedef struct _WOF_EXTERNAL_INFO {
	DWORD Version;
	DWORD Provider;
} WOF_EXTERNAL_INFO, * PWOF_EXTERNAL_INFO;
typedef struct _WOF_EXTERNAL_FILE_ID {
	FILE_ID_128 FileId;
} WOF_EXTERNAL_FILE_ID, * PWOF_EXTERNAL_FILE_ID;
typedef struct _WOF_VERSION_INFO {
	DWORD WofVersion;
} WOF_VERSION_INFO, * PWOF_VERSION_INFO;
typedef struct _WIM_PROVIDER_EXTERNAL_INFO {
	DWORD Version;
	DWORD Flags;
	LARGE_INTEGER DataSourceId;
	BYTE  ResourceHash[20];
} WIM_PROVIDER_EXTERNAL_INFO, * PWIM_PROVIDER_EXTERNAL_INFO;
typedef struct _WIM_PROVIDER_ADD_OVERLAY_INPUT {
	DWORD WimType;
	DWORD WimIndex;
	DWORD WimFileNameOffset;
	DWORD WimFileNameLength;
} WIM_PROVIDER_ADD_OVERLAY_INPUT, * PWIM_PROVIDER_ADD_OVERLAY_INPUT;
typedef struct _WIM_PROVIDER_UPDATE_OVERLAY_INPUT {
	LARGE_INTEGER DataSourceId;
	DWORD WimFileNameOffset;
	DWORD WimFileNameLength;
} WIM_PROVIDER_UPDATE_OVERLAY_INPUT, * PWIM_PROVIDER_UPDATE_OVERLAY_INPUT;
typedef struct _WIM_PROVIDER_REMOVE_OVERLAY_INPUT {
	LARGE_INTEGER DataSourceId;
} WIM_PROVIDER_REMOVE_OVERLAY_INPUT, * PWIM_PROVIDER_REMOVE_OVERLAY_INPUT;
typedef struct _WIM_PROVIDER_SUSPEND_OVERLAY_INPUT {
	LARGE_INTEGER DataSourceId;
} WIM_PROVIDER_SUSPEND_OVERLAY_INPUT, * PWIM_PROVIDER_SUSPEND_OVERLAY_INPUT;
typedef struct _WIM_PROVIDER_OVERLAY_ENTRY {
	DWORD NextEntryOffset;
	LARGE_INTEGER DataSourceId;
	GUID WimGuid;
	DWORD WimFileNameOffset;
	DWORD WimType;
	DWORD WimIndex;
	DWORD Flags;
} WIM_PROVIDER_OVERLAY_ENTRY, * PWIM_PROVIDER_OVERLAY_ENTRY;
typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V0 {
	DWORD Version;
	DWORD Algorithm;
} FILE_PROVIDER_EXTERNAL_INFO_V0, * PFILE_PROVIDER_EXTERNAL_INFO_V0;
typedef struct _FILE_PROVIDER_EXTERNAL_INFO_V1 {
	DWORD Version;
	DWORD Algorithm;
	DWORD Flags;
} FILE_PROVIDER_EXTERNAL_INFO_V1, * PFILE_PROVIDER_EXTERNAL_INFO_V1;
typedef FILE_PROVIDER_EXTERNAL_INFO_V1  FILE_PROVIDER_EXTERNAL_INFO;
typedef PFILE_PROVIDER_EXTERNAL_INFO_V1 PFILE_PROVIDER_EXTERNAL_INFO;
typedef struct _CONTAINER_VOLUME_STATE {
	DWORD Flags;
} CONTAINER_VOLUME_STATE, * PCONTAINER_VOLUME_STATE;
typedef struct _CONTAINER_ROOT_INFO_INPUT {
	DWORD Flags;
} CONTAINER_ROOT_INFO_INPUT, * PCONTAINER_ROOT_INFO_INPUT;
typedef struct _CONTAINER_ROOT_INFO_OUTPUT {
	WORD   ContainerRootIdLength;
	BYTE  ContainerRootId[1];
} CONTAINER_ROOT_INFO_OUTPUT, * PCONTAINER_ROOT_INFO_OUTPUT;
typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT {
	DWORD NumberOfWorkerThreads;
	DWORD Flags;
} VIRTUALIZATION_INSTANCE_INFO_INPUT, * PVIRTUALIZATION_INSTANCE_INFO_INPUT;
typedef struct _VIRTUALIZATION_INSTANCE_INFO_INPUT_EX {
	WORD   HeaderSize;
	DWORD Flags;
	DWORD NotificationInfoSize;
	WORD   NotificationInfoOffset;
	WORD   ProviderMajorVersion;
} VIRTUALIZATION_INSTANCE_INFO_INPUT_EX, * PVIRTUALIZATION_INSTANCE_INFO_INPUT_EX;
typedef struct _VIRTUALIZATION_INSTANCE_INFO_OUTPUT {
	GUID VirtualizationInstanceID;
} VIRTUALIZATION_INSTANCE_INFO_OUTPUT, * PVIRTUALIZATION_INSTANCE_INFO_OUTPUT;
typedef struct _GET_FILTER_FILE_IDENTIFIER_INPUT {
	WORD   AltitudeLength;
	WCHAR Altitude[1];
} GET_FILTER_FILE_IDENTIFIER_INPUT, * PGET_FILTER_FILE_IDENTIFIER_INPUT;
typedef struct _GET_FILTER_FILE_IDENTIFIER_OUTPUT {
	WORD   FilterFileIdentifierLength;
	BYTE  FilterFileIdentifier[1];
} GET_FILTER_FILE_IDENTIFIER_OUTPUT, * PGET_FILTER_FILE_IDENTIFIER_OUTPUT;
typedef struct _DISK_EXTENT {
	DWORD DiskNumber;
	LARGE_INTEGER StartingOffset;
	LARGE_INTEGER ExtentLength;
} DISK_EXTENT, * PDISK_EXTENT;
typedef struct _VOLUME_DISK_EXTENTS {
	DWORD NumberOfDiskExtents;
	DISK_EXTENT Extents[1];
} VOLUME_DISK_EXTENTS, * PVOLUME_DISK_EXTENTS;
typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {
	DWORDLONG GptAttributes;
} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, * PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;
struct _IO_IRP_EXT_TRACK_OFFSET_HEADER;
typedef void
(*PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK)(
	struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* SourceContext,
	struct _IO_IRP_EXT_TRACK_OFFSET_HEADER* TargetContext,
	LONGLONG RelativeOffset
	);
typedef struct _IO_IRP_EXT_TRACK_OFFSET_HEADER {
	WORD   Validation;
	WORD   Flags;
	PIO_IRP_EXT_PROCESS_TRACKED_OFFSET_CALLBACK TrackedOffsetCallback;
} IO_IRP_EXT_TRACK_OFFSET_HEADER, * PIO_IRP_EXT_TRACK_OFFSET_HEADER;
typedef double DOUBLE;
typedef GUID* PGUID;
typedef struct _QUAD
{
	union
	{
		__int64 UseThisFieldToCopy;
		double DoNotUseThisField;
	};
} QUAD, * PQUAD;
typedef struct  _QUAD_PTR
{
	ULONG_PTR DoNotUseThisField1;
	ULONG_PTR DoNotUseThisField2;
} QUAD_PTR, * PQUAD_PTR;
typedef ULONG LOGICAL;
typedef ULONG* PLOGICAL;
typedef   LONG NTSTATUS;
typedef NTSTATUS* PNTSTATUS;
typedef char CCHAR;
typedef short CSHORT;
typedef ULONG CLONG;
typedef CCHAR* PCCHAR;
typedef CSHORT* PCSHORT;
typedef CLONG* PCLONG;
typedef PCSTR PCSZ;
typedef UCHAR KIRQL, * PKIRQL;
typedef LONG KPRIORITY;
typedef USHORT RTL_ATOM, * PRTL_ATOM;
typedef LARGE_INTEGER PHYSICAL_ADDRESS, * PPHYSICAL_ADDRESS;
typedef struct _LARGE_INTEGER_128
{
	LONGLONG QuadPart[2];
} LARGE_INTEGER_128, * PLARGE_INTEGER_128;
typedef enum _EVENT_TYPE
{
	NotificationEvent,
	SynchronizationEvent
} EVENT_TYPE;
typedef enum _TIMER_TYPE
{
	NotificationTimer,
	SynchronizationTimer
} TIMER_TYPE;
typedef enum _WAIT_TYPE
{
	WaitAll,
	WaitAny,
	WaitNotification
} WAIT_TYPE;
typedef struct _STRING
{
	USHORT Length;
	USHORT MaximumLength;
	PCHAR Buffer;
} STRING, * PSTRING, ANSI_STRING, * PANSI_STRING, OEM_STRING, * POEM_STRING;
typedef const STRING* PCSTRING;
typedef const ANSI_STRING* PCANSI_STRING;
typedef const OEM_STRING* PCOEM_STRING;
typedef struct _UNICODE_STRING
{
	USHORT Length;
	USHORT MaximumLength;
	PWCH Buffer;
} UNICODE_STRING, * PUNICODE_STRING;
typedef const UNICODE_STRING* PCUNICODE_STRING;
typedef struct _RTL_BALANCED_NODE
{
	union
	{
		struct _RTL_BALANCED_NODE* Children[2];
		struct
		{
			struct _RTL_BALANCED_NODE* Left;
			struct _RTL_BALANCED_NODE* Right;
		};
	};
	union
	{
		UCHAR Red : 1;
		UCHAR Balance : 2;
		ULONG_PTR ParentValue;
	};
} RTL_BALANCED_NODE, * PRTL_BALANCED_NODE;
typedef struct _SINGLE_LIST_ENTRY32
{
	ULONG Next;
} SINGLE_LIST_ENTRY32, * PSINGLE_LIST_ENTRY32;
typedef struct _STRING32
{
	USHORT Length;
	USHORT MaximumLength;
	ULONG Buffer;
} STRING32, * PSTRING32;
typedef STRING32 UNICODE_STRING32, * PUNICODE_STRING32;
typedef STRING32 ANSI_STRING32, * PANSI_STRING32;
typedef struct _STRING64
{
	USHORT Length;
	USHORT MaximumLength;
	ULONGLONG Buffer;
} STRING64, * PSTRING64;
typedef STRING64 UNICODE_STRING64, * PUNICODE_STRING64;
typedef STRING64 ANSI_STRING64, * PANSI_STRING64;
typedef struct _OBJECT_ATTRIBUTES
{
	ULONG Length;
	HANDLE RootDirectory;
	PUNICODE_STRING ObjectName;
	ULONG Attributes;
	PVOID SecurityDescriptor;
	PVOID SecurityQualityOfService;
} OBJECT_ATTRIBUTES, * POBJECT_ATTRIBUTES;
typedef const OBJECT_ATTRIBUTES* PCOBJECT_ATTRIBUTES;
typedef struct _OBJECT_ATTRIBUTES64
{
	ULONG Length;
	ULONG64 RootDirectory;
	ULONG64 ObjectName;
	ULONG Attributes;
	ULONG64 SecurityDescriptor;
	ULONG64 SecurityQualityOfService;
} OBJECT_ATTRIBUTES64, * POBJECT_ATTRIBUTES64;
typedef const OBJECT_ATTRIBUTES64* PCOBJECT_ATTRIBUTES64;
typedef struct _OBJECT_ATTRIBUTES32
{
	ULONG Length;
	ULONG RootDirectory;
	ULONG ObjectName;
	ULONG Attributes;
	ULONG SecurityDescriptor;
	ULONG SecurityQualityOfService;
} OBJECT_ATTRIBUTES32, * POBJECT_ATTRIBUTES32;
typedef const OBJECT_ATTRIBUTES32* PCOBJECT_ATTRIBUTES32;
typedef enum _NT_PRODUCT_TYPE
{
	NtProductWinNt = 1,
	NtProductLanManNt,
	NtProductServer
} NT_PRODUCT_TYPE, * PNT_PRODUCT_TYPE;
typedef enum _SUITE_TYPE
{
	SmallBusiness,
	Enterprise,
	BackOffice,
	CommunicationServer,
	TerminalServer,
	SmallBusinessRestricted,
	EmbeddedNT,
	DataCenter,
	SingleUserTS,
	Personal,
	Blade,
	EmbeddedRestricted,
	SecurityAppliance,
	StorageServer,
	ComputeServer,
	WHServer,
	PhoneNT,
	MaxSuiteType
} SUITE_TYPE;
typedef struct _CLIENT_ID
{
	HANDLE UniqueProcess;
	HANDLE UniqueThread;
} CLIENT_ID, * PCLIENT_ID;
typedef struct _CLIENT_ID32
{
	ULONG UniqueProcess;
	ULONG UniqueThread;
} CLIENT_ID32, * PCLIENT_ID32;
typedef struct _CLIENT_ID64
{
	ULONGLONG UniqueProcess;
	ULONGLONG UniqueThread;
} CLIENT_ID64, * PCLIENT_ID64;
typedef struct _KSYSTEM_TIME
{
	ULONG LowPart;
	LONG High1Time;
	LONG High2Time;
} KSYSTEM_TIME, * PKSYSTEM_TIME;
typedef struct _CPTABLEINFO
{
	USHORT CodePage;
	USHORT MaximumCharacterSize;
	USHORT DefaultChar;
	USHORT UniDefaultChar;
	USHORT TransDefaultChar;
	USHORT TransUniDefaultChar;
	USHORT DBCSCodePage;
	UCHAR LeadByte[12];
	PUSHORT MultiByteTable;
	PVOID WideCharTable;
	PUSHORT DBCSRanges;
	PUSHORT DBCSOffsets;
} CPTABLEINFO, * PCPTABLEINFO;
typedef struct _NLSTABLEINFO
{
	CPTABLEINFO OemTableInfo;
	CPTABLEINFO AnsiTableInfo;
	PUSHORT UpperCaseTable;
	PUSHORT LowerCaseTable;
} NLSTABLEINFO, * PNLSTABLEINFO;
USHORT NlsAnsiCodePage;
BOOLEAN NlsMbCodePageTag;
BOOLEAN NlsMbOemCodePageTag;
typedef enum _KTHREAD_STATE
{
	Initialized,
	Ready,
	Running,
	Standby,
	Terminated,
	Waiting,
	Transition,
	DeferredReady,
	GateWaitObsolete,
	WaitingForProcessInSwap,
	MaximumThreadState
} KTHREAD_STATE, * PKTHREAD_STATE;
typedef enum _KHETERO_CPU_POLICY
{
	KHeteroCpuPolicyAll,
	KHeteroCpuPolicyLarge,
	KHeteroCpuPolicyLargeOrIdle,
	KHeteroCpuPolicySmall,
	KHeteroCpuPolicySmallOrIdle,
	KHeteroCpuPolicyDynamic,
	KHeteroCpuPolicyStaticMax,
	KHeteroCpuPolicyBiasedSmall,
	KHeteroCpuPolicyBiasedLarge,
	KHeteroCpuPolicyDefault,
	KHeteroCpuPolicyMax
} KHETERO_CPU_POLICY, * PKHETERO_CPU_POLICY;
typedef enum _KWAIT_REASON
{
	Executive,
	FreePage,
	PageIn,
	PoolAllocation,
	DelayExecution,
	Suspended,
	UserRequest,
	WrExecutive,
	WrFreePage,
	WrPageIn,
	WrPoolAllocation,
	WrDelayExecution,
	WrSuspended,
	WrUserRequest,
	WrEventPair,
	WrQueue,
	WrLpcReceive,
	WrLpcReply,
	WrVirtualMemory,
	WrPageOut,
	WrRendezvous,
	WrKeyedEvent,
	WrTerminated,
	WrProcessInSwap,
	WrCpuRateControl,
	WrCalloutStack,
	WrKernel,
	WrResource,
	WrPushLock,
	WrMutex,
	WrQuantumEnd,
	WrDispatchInt,
	WrPreempted,
	WrYieldExecution,
	WrFastMutex,
	WrGuardedMutex,
	WrRundown,
	WrAlertByThreadId,
	WrDeferredPreempt,
	WrPhysicalFault,
	MaximumWaitReason
} KWAIT_REASON, * PKWAIT_REASON;
typedef enum _KPROFILE_SOURCE
{
	ProfileTime,
	ProfileAlignmentFixup,
	ProfileTotalIssues,
	ProfilePipelineDry,
	ProfileLoadInstructions,
	ProfilePipelineFrozen,
	ProfileBranchInstructions,
	ProfileTotalNonissues,
	ProfileDcacheMisses,
	ProfileIcacheMisses,
	ProfileCacheMisses,
	ProfileBranchMispredictions,
	ProfileStoreInstructions,
	ProfileFpInstructions,
	ProfileIntegerInstructions,
	Profile2Issue,
	Profile3Issue,
	Profile4Issue,
	ProfileSpecialInstructions,
	ProfileTotalCycles,
	ProfileIcacheIssues,
	ProfileDcacheAccesses,
	ProfileMemoryBarrierCycles,
	ProfileLoadLinkedIssues,
	ProfileMaximum
} KPROFILE_SOURCE;

NTSTATUS
__stdcall
NtCallbackReturn(
	PVOID OutputBuffer,
	ULONG OutputLength,
	NTSTATUS Status
);

void
__stdcall
NtFlushProcessWriteBuffers(
	void
);

NTSTATUS
__stdcall
NtQueryDebugFilterState(
	ULONG ComponentId,
	ULONG Level
);

NTSTATUS
__stdcall
NtSetDebugFilterState(
	ULONG ComponentId,
	ULONG Level,
	BOOLEAN State
);

NTSTATUS
__stdcall
NtYieldExecution(
	void
);
typedef BOOLEAN(__stdcall* PLDR_INIT_ROUTINE)(
	PVOID DllHandle,
	ULONG Reason,
	PVOID Context
	);
typedef struct _LDR_SERVICE_TAG_RECORD
{
	struct _LDR_SERVICE_TAG_RECORD* Next;
	ULONG ServiceTag;
} LDR_SERVICE_TAG_RECORD, * PLDR_SERVICE_TAG_RECORD;
typedef struct _LDRP_CSLIST
{
	PSINGLE_LIST_ENTRY Tail;
} LDRP_CSLIST, * PLDRP_CSLIST;
typedef enum _LDR_DDAG_STATE
{
	LdrModulesMerged = -5,
	LdrModulesInitError = -4,
	LdrModulesSnapError = -3,
	LdrModulesUnloaded = -2,
	LdrModulesUnloading = -1,
	LdrModulesPlaceHolder = 0,
	LdrModulesMapping = 1,
	LdrModulesMapped = 2,
	LdrModulesWaitingForDependencies = 3,
	LdrModulesSnapping = 4,
	LdrModulesSnapped = 5,
	LdrModulesCondensed = 6,
	LdrModulesReadyToInit = 7,
	LdrModulesInitializing = 8,
	LdrModulesReadyToRun = 9
} LDR_DDAG_STATE;
typedef struct _LDR_DDAG_NODE
{
	LIST_ENTRY Modules;
	PLDR_SERVICE_TAG_RECORD ServiceTagList;
	ULONG LoadCount;
	ULONG LoadWhileUnloadingCount;
	ULONG LowestLink;
	union
	{
		LDRP_CSLIST Dependencies;
		SINGLE_LIST_ENTRY RemovalLink;
	};
	LDRP_CSLIST IncomingDependencies;
	LDR_DDAG_STATE State;
	SINGLE_LIST_ENTRY CondenseLink;
	ULONG PreorderNumber;
} LDR_DDAG_NODE, * PLDR_DDAG_NODE;
typedef struct _LDR_DEPENDENCY_RECORD
{
	SINGLE_LIST_ENTRY DependencyLink;
	PLDR_DDAG_NODE DependencyNode;
	SINGLE_LIST_ENTRY IncomingDependencyLink;
	PLDR_DDAG_NODE IncomingDependencyNode;
} LDR_DEPENDENCY_RECORD, * PLDR_DEPENDENCY_RECORD;
typedef enum _LDR_DLL_LOAD_REASON
{
	LoadReasonStaticDependency,
	LoadReasonStaticForwarderDependency,
	LoadReasonDynamicForwarderDependency,
	LoadReasonDelayloadDependency,
	LoadReasonDynamicLoad,
	LoadReasonAsImageLoad,
	LoadReasonAsDataLoad,
	LoadReasonEnclavePrimary,
	LoadReasonEnclaveDependency,
	LoadReasonUnknown = -1
} LDR_DLL_LOAD_REASON, * PLDR_DLL_LOAD_REASON;
typedef struct _LDR_DATA_TABLE_ENTRY
{
	LIST_ENTRY InLoadOrderLinks;
	LIST_ENTRY InMemoryOrderLinks;
	union
	{
		LIST_ENTRY InInitializationOrderLinks;
		LIST_ENTRY InProgressLinks;
	};
	PVOID DllBase;
	PLDR_INIT_ROUTINE EntryPoint;
	ULONG SizeOfImage;
	UNICODE_STRING FullDllName;
	UNICODE_STRING BaseDllName;
	union
	{
		UCHAR FlagGroup[4];
		ULONG Flags;
		struct
		{
			ULONG PackagedBinary : 1;
			ULONG MarkedForRemoval : 1;
			ULONG ImageDll : 1;
			ULONG LoadNotificationsSent : 1;
			ULONG TelemetryEntryProcessed : 1;
			ULONG ProcessStaticImport : 1;
			ULONG InLegacyLists : 1;
			ULONG InIndexes : 1;
			ULONG ShimDll : 1;
			ULONG InExceptionTable : 1;
			ULONG ReservedFlags1 : 2;
			ULONG LoadInProgress : 1;
			ULONG LoadConfigProcessed : 1;
			ULONG EntryProcessed : 1;
			ULONG ProtectDelayLoad : 1;
			ULONG ReservedFlags3 : 2;
			ULONG DontCallForThreads : 1;
			ULONG ProcessAttachCalled : 1;
			ULONG ProcessAttachFailed : 1;
			ULONG CorDeferredValidate : 1;
			ULONG CorImage : 1;
			ULONG DontRelocate : 1;
			ULONG CorILOnly : 1;
			ULONG ChpeImage : 1;
			ULONG ReservedFlags5 : 2;
			ULONG Redirected : 1;
			ULONG ReservedFlags6 : 2;
			ULONG CompatDatabaseProcessed : 1;
		};
	};
	USHORT ObsoleteLoadCount;
	USHORT TlsIndex;
	LIST_ENTRY HashLinks;
	ULONG TimeDateStamp;
	struct _ACTIVATION_CONTEXT* EntryPointActivationContext;
	PVOID Lock;
	PLDR_DDAG_NODE DdagNode;
	LIST_ENTRY NodeModuleLink;
	struct _LDRP_LOAD_CONTEXT* LoadContext;
	PVOID ParentDllBase;
	PVOID SwitchBackContext;
	RTL_BALANCED_NODE BaseAddressIndexNode;
	RTL_BALANCED_NODE MappingInfoIndexNode;
	ULONG_PTR OriginalBase;
	LARGE_INTEGER LoadTime;
	ULONG BaseNameHashValue;
	LDR_DLL_LOAD_REASON LoadReason;
	ULONG ImplicitPathOptions;
	ULONG ReferenceCount;
	ULONG DependentLoadFlags;
	UCHAR SigningLevel;
} LDR_DATA_TABLE_ENTRY, * PLDR_DATA_TABLE_ENTRY;

NTSTATUS
__stdcall
LdrLoadDll(
	PWSTR DllPath,
	PULONG DllCharacteristics,
	PUNICODE_STRING DllName,
	PVOID* DllHandle
);

NTSTATUS
__stdcall
LdrUnloadDll(
	PVOID DllHandle
);

NTSTATUS
__stdcall
LdrGetDllHandle(
	PWSTR DllPath,
	PULONG DllCharacteristics,
	PUNICODE_STRING DllName,
	PVOID* DllHandle
);

NTSTATUS
__stdcall
LdrGetDllHandleEx(
	ULONG Flags,
	PWSTR DllPath,
	PULONG DllCharacteristics,
	PUNICODE_STRING DllName,
	PVOID* DllHandle
);

NTSTATUS
__stdcall
LdrGetDllHandleByMapping(
	PVOID BaseAddress,
	PVOID* DllHandle
);

NTSTATUS
__stdcall
LdrGetDllHandleByName(
	PUNICODE_STRING BaseDllName,
	PUNICODE_STRING FullDllName,
	PVOID* DllHandle
);

NTSTATUS
__stdcall
LdrAddRefDll(
	ULONG Flags,
	PVOID DllHandle
);

NTSTATUS
__stdcall
LdrGetProcedureAddress(
	PVOID DllHandle,
	PANSI_STRING ProcedureName,
	ULONG ProcedureNumber,
	PVOID* ProcedureAddress
);

NTSTATUS
__stdcall
LdrGetProcedureAddressEx(
	PVOID DllHandle,
	PANSI_STRING ProcedureName,
	ULONG ProcedureNumber,
	PVOID* ProcedureAddress,
	ULONG Flags
);

NTSTATUS
__stdcall
LdrGetKnownDllSectionHandle(
	PCWSTR DllName,
	BOOLEAN KnownDlls32,
	PHANDLE Section
);

NTSTATUS
__stdcall
LdrLockLoaderLock(
	ULONG Flags,
	ULONG* Disposition,
	PVOID* Cookie
);

NTSTATUS
__stdcall
LdrUnlockLoaderLock(
	ULONG Flags,
	PVOID Cookie
);

NTSTATUS
__stdcall
LdrRelocateImage(
	PVOID NewBase,
	PSTR LoaderName,
	NTSTATUS Success,
	NTSTATUS Conflict,
	NTSTATUS Invalid
);

NTSTATUS
__stdcall
LdrRelocateImageWithBias(
	PVOID NewBase,
	LONGLONG Bias,
	PSTR LoaderName,
	NTSTATUS Success,
	NTSTATUS Conflict,
	NTSTATUS Invalid
);

PIMAGE_BASE_RELOCATION
__stdcall
LdrProcessRelocationBlock(
	ULONG_PTR VA,
	ULONG SizeOfBlock,
	PUSHORT NextOffset,
	LONG_PTR Diff
);

BOOLEAN
__stdcall
LdrVerifyMappedImageMatchesChecksum(
	PVOID BaseAddress,
	SIZE_T NumberOfBytes,
	ULONG FileLength
);
typedef void(__stdcall* PLDR_IMPORT_MODULE_CALLBACK)(
	PVOID Parameter,
	PSTR ModuleName
	);

NTSTATUS
__stdcall
LdrVerifyImageMatchesChecksum(
	HANDLE ImageFileHandle,
	PLDR_IMPORT_MODULE_CALLBACK ImportCallbackRoutine,
	PVOID ImportCallbackParameter,
	PUSHORT ImageCharacteristics
);
typedef struct _LDR_IMPORT_CALLBACK_INFO
{
	PLDR_IMPORT_MODULE_CALLBACK ImportCallbackRoutine;
	PVOID ImportCallbackParameter;
} LDR_IMPORT_CALLBACK_INFO, * PLDR_IMPORT_CALLBACK_INFO;
typedef struct _LDR_SECTION_INFO
{
	HANDLE SectionHandle;
	ACCESS_MASK DesiredAccess;
	POBJECT_ATTRIBUTES ObjA;
	ULONG SectionPageProtection;
	ULONG AllocationAttributes;
} LDR_SECTION_INFO, * PLDR_SECTION_INFO;
typedef struct _LDR_VERIFY_IMAGE_INFO
{
	ULONG Size;
	ULONG Flags;
	LDR_IMPORT_CALLBACK_INFO CallbackInfo;
	LDR_SECTION_INFO SectionInfo;
	USHORT ImageCharacteristics;
} LDR_VERIFY_IMAGE_INFO, * PLDR_VERIFY_IMAGE_INFO;

NTSTATUS
__stdcall
LdrVerifyImageMatchesChecksumEx(
	HANDLE ImageFileHandle,
	PLDR_VERIFY_IMAGE_INFO VerifyInfo
);

NTSTATUS
__stdcall
LdrQueryModuleServiceTags(
	PVOID DllHandle,
	PULONG ServiceTagBuffer,
	PULONG BufferSize
);
typedef struct _LDR_DLL_LOADED_NOTIFICATION_DATA
{
	ULONG Flags;
	PUNICODE_STRING FullDllName;
	PUNICODE_STRING BaseDllName;
	PVOID DllBase;
	ULONG SizeOfImage;
} LDR_DLL_LOADED_NOTIFICATION_DATA, * PLDR_DLL_LOADED_NOTIFICATION_DATA;
typedef struct _LDR_DLL_UNLOADED_NOTIFICATION_DATA
{
	ULONG Flags;
	PCUNICODE_STRING FullDllName;
	PCUNICODE_STRING BaseDllName;
	PVOID DllBase;
	ULONG SizeOfImage;
} LDR_DLL_UNLOADED_NOTIFICATION_DATA, * PLDR_DLL_UNLOADED_NOTIFICATION_DATA;
typedef union _LDR_DLL_NOTIFICATION_DATA
{
	LDR_DLL_LOADED_NOTIFICATION_DATA Loaded;
	LDR_DLL_UNLOADED_NOTIFICATION_DATA Unloaded;
} LDR_DLL_NOTIFICATION_DATA, * PLDR_DLL_NOTIFICATION_DATA;
typedef void(__stdcall* PLDR_DLL_NOTIFICATION_FUNCTION)(
	ULONG NotificationReason,
	PLDR_DLL_NOTIFICATION_DATA NotificationData,
	PVOID Context
	);

NTSTATUS
__stdcall
LdrRegisterDllNotification(
	ULONG Flags,
	PLDR_DLL_NOTIFICATION_FUNCTION NotificationFunction,
	PVOID Context,
	PVOID* Cookie
);

NTSTATUS
__stdcall
LdrUnregisterDllNotification(
	PVOID Cookie
);

PUNICODE_STRING
__stdcall
LdrStandardizeSystemPath(
	PUNICODE_STRING SystemPath
);
typedef struct _PS_MITIGATION_OPTIONS_MAP
{
	ULONG_PTR Map[3];
} PS_MITIGATION_OPTIONS_MAP, * PPS_MITIGATION_OPTIONS_MAP;
typedef struct _PS_MITIGATION_AUDIT_OPTIONS_MAP
{
	ULONG_PTR Map[3];
} PS_MITIGATION_AUDIT_OPTIONS_MAP, * PPS_MITIGATION_AUDIT_OPTIONS_MAP;
typedef struct _PS_SYSTEM_DLL_INIT_BLOCK
{
	ULONG Size;
	ULONG_PTR SystemDllWowRelocation;
	ULONG_PTR SystemDllNativeRelocation;
	ULONG_PTR Wow64SharedInformation[16];
	ULONG RngData;
	union
	{
		ULONG Flags;
		struct
		{
			ULONG CfgOverride : 1;
			ULONG Reserved : 31;
		};
	};
	PS_MITIGATION_OPTIONS_MAP MitigationOptionsMap;
	ULONG_PTR CfgBitMap;
	ULONG_PTR CfgBitMapSize;
	ULONG_PTR Wow64CfgBitMap;
	ULONG_PTR Wow64CfgBitMapSize;
	PS_MITIGATION_AUDIT_OPTIONS_MAP MitigationAuditOptionsMap;
} PS_SYSTEM_DLL_INIT_BLOCK, * PPS_SYSTEM_DLL_INIT_BLOCK;

NTSTATUS
__stdcall
LdrAddLoadAsDataTable(
	PVOID Module,
	PWSTR FilePath,
	SIZE_T Size,
	HANDLE Handle
);

NTSTATUS
__stdcall
LdrRemoveLoadAsDataTable(
	PVOID InitModule,
	PVOID* BaseModule,
	PSIZE_T Size,
	ULONG Flags
);

NTSTATUS
__stdcall
LdrGetFileNameFromLoadAsDataTable(
	PVOID Module,
	PVOID* pFileNamePrt
);

NTSTATUS
__stdcall
LdrDisableThreadCalloutsForDll(
	PVOID DllImageBase
);

NTSTATUS
__stdcall
LdrAccessResource(
	PVOID DllHandle,
	PIMAGE_RESOURCE_DATA_ENTRY ResourceDataEntry,
	PVOID* ResourceBuffer,
	ULONG* ResourceLength
);
typedef struct _LDR_RESOURCE_INFO
{
	ULONG_PTR Type;
	ULONG_PTR Name;
	ULONG_PTR Language;
} LDR_RESOURCE_INFO, * PLDR_RESOURCE_INFO;

NTSTATUS
__stdcall
LdrFindResource_U(
	PVOID DllHandle,
	PLDR_RESOURCE_INFO ResourceInfo,
	ULONG Level,
	PIMAGE_RESOURCE_DATA_ENTRY* ResourceDataEntry
);

NTSTATUS
__stdcall
LdrFindResourceEx_U(
	ULONG Flags,
	PVOID DllHandle,
	PLDR_RESOURCE_INFO ResourceInfo,
	ULONG Level,
	PIMAGE_RESOURCE_DATA_ENTRY* ResourceDataEntry
);

NTSTATUS
__stdcall
LdrFindResourceDirectory_U(
	PVOID DllHandle,
	PLDR_RESOURCE_INFO ResourceInfo,
	ULONG Level,
	PIMAGE_RESOURCE_DIRECTORY* ResourceDirectory
);
typedef struct _LDR_ENUM_RESOURCE_ENTRY
{
	union
	{
		ULONG_PTR NameOrId;
		PIMAGE_RESOURCE_DIRECTORY_STRING Name;
		struct
		{
			USHORT Id;
			USHORT NameIsPresent;
		};
	} Path[3];
	PVOID Data;
	ULONG Size;
	ULONG Reserved;
} LDR_ENUM_RESOURCE_ENTRY, * PLDR_ENUM_RESOURCE_ENTRY;

NTSTATUS
__stdcall
LdrEnumResources(
	PVOID DllHandle,
	PLDR_RESOURCE_INFO ResourceInfo,
	ULONG Level,
	ULONG* ResourceCount,
	PLDR_ENUM_RESOURCE_ENTRY Resources
);

NTSTATUS
__stdcall
LdrFindEntryForAddress(
	PVOID DllHandle,
	PLDR_DATA_TABLE_ENTRY* Entry
);
typedef struct _RTL_PROCESS_MODULE_INFORMATION
{
	HANDLE Section;
	PVOID MappedBase;
	PVOID ImageBase;
	ULONG ImageSize;
	ULONG Flags;
	USHORT LoadOrderIndex;
	USHORT InitOrderIndex;
	USHORT LoadCount;
	USHORT OffsetToFileName;
	UCHAR FullPathName[256];
} RTL_PROCESS_MODULE_INFORMATION, * PRTL_PROCESS_MODULE_INFORMATION;
typedef struct _RTL_PROCESS_MODULES
{
	ULONG NumberOfModules;
	RTL_PROCESS_MODULE_INFORMATION Modules[1];
} RTL_PROCESS_MODULES, * PRTL_PROCESS_MODULES;
typedef struct _RTL_PROCESS_MODULE_INFORMATION_EX
{
	USHORT NextOffset;
	RTL_PROCESS_MODULE_INFORMATION BaseInfo;
	ULONG ImageChecksum;
	ULONG TimeDateStamp;
	PVOID DefaultBase;
} RTL_PROCESS_MODULE_INFORMATION_EX, * PRTL_PROCESS_MODULE_INFORMATION_EX;

NTSTATUS
__stdcall
LdrQueryProcessModuleInformation(
	PRTL_PROCESS_MODULES ModuleInformation,
	ULONG Size,
	PULONG ReturnedSize
);
typedef void(__stdcall* PLDR_ENUM_CALLBACK)(
	PLDR_DATA_TABLE_ENTRY ModuleInformation,
	PVOID Parameter,
	BOOLEAN* Stop
	);

NTSTATUS
__stdcall
LdrEnumerateLoadedModules(
	BOOLEAN ReservedFlag,
	PLDR_ENUM_CALLBACK EnumProc,
	PVOID Context
);

NTSTATUS
__stdcall
LdrOpenImageFileOptionsKey(
	PUNICODE_STRING SubKey,
	BOOLEAN Wow64,
	PHANDLE NewKeyHandle
);

NTSTATUS
__stdcall
LdrQueryImageFileKeyOption(
	HANDLE KeyHandle,
	PCWSTR ValueName,
	ULONG Type,
	PVOID Buffer,
	ULONG BufferSize,
	PULONG ReturnedLength
);

NTSTATUS
__stdcall
LdrQueryImageFileExecutionOptions(
	PUNICODE_STRING SubKey,
	PCWSTR ValueName,
	ULONG ValueSize,
	PVOID Buffer,
	ULONG BufferSize,
	PULONG ReturnedLength
);

NTSTATUS
__stdcall
LdrQueryImageFileExecutionOptionsEx(
	PUNICODE_STRING SubKey,
	PCWSTR ValueName,
	ULONG Type,
	PVOID Buffer,
	ULONG BufferSize,
	PULONG ReturnedLength,
	BOOLEAN Wow64
);
typedef struct _DELAYLOAD_PROC_DESCRIPTOR
{
	ULONG ImportDescribedByName;
	union
	{
		PCSTR Name;
		ULONG Ordinal;
	} Description;
} DELAYLOAD_PROC_DESCRIPTOR, * PDELAYLOAD_PROC_DESCRIPTOR;
typedef struct _DELAYLOAD_INFO
{
	ULONG Size;
	PCIMAGE_DELAYLOAD_DESCRIPTOR DelayloadDescriptor;
	PIMAGE_THUNK_DATA ThunkAddress;
	PCSTR TargetDllName;
	DELAYLOAD_PROC_DESCRIPTOR TargetApiDescriptor;
	PVOID TargetModuleBase;
	PVOID Unused;
	ULONG LastError;
} DELAYLOAD_INFO, * PDELAYLOAD_INFO;
typedef PVOID(__stdcall* PDELAYLOAD_FAILURE_DLL_CALLBACK)(
	ULONG NotificationReason,
	PDELAYLOAD_INFO DelayloadInfo
	);
typedef PVOID(__stdcall* PDELAYLOAD_FAILURE_SYSTEM_ROUTINE)(
	PCSTR DllName,
	PCSTR ProcName
	);

PVOID
__stdcall
LdrResolveDelayLoadedAPI(
	PVOID ParentModuleBase,
	PCIMAGE_DELAYLOAD_DESCRIPTOR DelayloadDescriptor,
	PDELAYLOAD_FAILURE_DLL_CALLBACK FailureDllHook,
	PDELAYLOAD_FAILURE_SYSTEM_ROUTINE FailureSystemHook,
	PIMAGE_THUNK_DATA ThunkAddress,
	ULONG Flags
);

NTSTATUS
__stdcall
LdrResolveDelayLoadsFromDll(
	PVOID ParentBase,
	PCSTR TargetDllName,
	ULONG Flags
);

NTSTATUS
__stdcall
LdrSetDefaultDllDirectories(
	ULONG DirectoryFlags
);

NTSTATUS
__stdcall
LdrShutdownProcess(
	void
);

NTSTATUS
__stdcall
LdrShutdownThread(
	void
);

NTSTATUS
__stdcall
LdrSetImplicitPathOptions(
	ULONG ImplicitPathOptions
);

BOOLEAN
__stdcall
LdrControlFlowGuardEnforced(
	void
);

NTSTATUS
__stdcall
NtDelayExecution(
	BOOLEAN Alertable,
	PLARGE_INTEGER DelayInterval
);

NTSTATUS
__stdcall
NtQuerySystemEnvironmentValue(
	PUNICODE_STRING VariableName,
	PWSTR VariableValue,
	USHORT ValueLength,
	PUSHORT ReturnLength
);

NTSTATUS
__stdcall
NtSetSystemEnvironmentValue(
	PUNICODE_STRING VariableName,
	PUNICODE_STRING VariableValue
);

NTSTATUS
__stdcall
NtQuerySystemEnvironmentValueEx(
	PUNICODE_STRING VariableName,
	LPGUID VendorGuid,
	PVOID Value,
	PULONG ValueLength,
	PULONG Attributes
);

NTSTATUS
__stdcall
NtSetSystemEnvironmentValueEx(
	PUNICODE_STRING VariableName,
	LPGUID VendorGuid,
	PVOID Value,
	ULONG ValueLength,
	ULONG Attributes
);

NTSTATUS
__stdcall
NtEnumerateSystemEnvironmentValuesEx(
	ULONG InformationClass,
	PVOID Buffer,
	PULONG BufferLength
);
typedef struct _BOOT_ENTRY
{
	ULONG Version;
	ULONG Length;
	ULONG Id;
	ULONG Attributes;
	ULONG FriendlyNameOffset;
	ULONG BootFilePathOffset;
	ULONG OsOptionsLength;
	UCHAR OsOptions[1];
} BOOT_ENTRY, * PBOOT_ENTRY;
typedef struct _BOOT_ENTRY_LIST
{
	ULONG NextEntryOffset;
	BOOT_ENTRY BootEntry;
} BOOT_ENTRY_LIST, * PBOOT_ENTRY_LIST;
typedef struct _BOOT_OPTIONS
{
	ULONG Version;
	ULONG Length;
	ULONG Timeout;
	ULONG CurrentBootEntryId;
	ULONG NextBootEntryId;
	WCHAR HeadlessRedirection[1];
} BOOT_OPTIONS, * PBOOT_OPTIONS;
typedef struct _FILE_PATH
{
	ULONG Version;
	ULONG Length;
	ULONG Type;
	UCHAR FilePath[1];
} FILE_PATH, * PFILE_PATH;
typedef struct _EFI_DRIVER_ENTRY
{
	ULONG Version;
	ULONG Length;
	ULONG Id;
	ULONG FriendlyNameOffset;
	ULONG DriverFilePathOffset;
} EFI_DRIVER_ENTRY, * PEFI_DRIVER_ENTRY;
typedef struct _EFI_DRIVER_ENTRY_LIST
{
	ULONG NextEntryOffset;
	EFI_DRIVER_ENTRY DriverEntry;
} EFI_DRIVER_ENTRY_LIST, * PEFI_DRIVER_ENTRY_LIST;

NTSTATUS
__stdcall
NtAddBootEntry(
	PBOOT_ENTRY BootEntry,
	PULONG Id
);

NTSTATUS
__stdcall
NtDeleteBootEntry(
	ULONG Id
);

NTSTATUS
__stdcall
NtModifyBootEntry(
	PBOOT_ENTRY BootEntry
);

NTSTATUS
__stdcall
NtEnumerateBootEntries(
	PVOID Buffer,
	PULONG BufferLength
);

NTSTATUS
__stdcall
NtQueryBootEntryOrder(
	PULONG Ids,
	PULONG Count
);

NTSTATUS
__stdcall
NtSetBootEntryOrder(
	PULONG Ids,
	ULONG Count
);

NTSTATUS
__stdcall
NtQueryBootOptions(
	PBOOT_OPTIONS BootOptions,
	PULONG BootOptionsLength
);

NTSTATUS
__stdcall
NtSetBootOptions(
	PBOOT_OPTIONS BootOptions,
	ULONG FieldsToChange
);

NTSTATUS
__stdcall
NtTranslateFilePath(
	PFILE_PATH InputFilePath,
	ULONG OutputType,
	PFILE_PATH OutputFilePath,
	PULONG OutputFilePathLength
);

NTSTATUS
__stdcall
NtAddDriverEntry(
	PEFI_DRIVER_ENTRY DriverEntry,
	PULONG Id
);

NTSTATUS
__stdcall
NtDeleteDriverEntry(
	ULONG Id
);

NTSTATUS
__stdcall
NtModifyDriverEntry(
	PEFI_DRIVER_ENTRY DriverEntry
);

NTSTATUS
__stdcall
NtEnumerateDriverEntries(
	PVOID Buffer,
	PULONG BufferLength
);

NTSTATUS
__stdcall
NtQueryDriverEntryOrder(
	PULONG Ids,
	PULONG Count
);

NTSTATUS
__stdcall
NtSetDriverEntryOrder(
	PULONG Ids,
	ULONG Count
);
typedef enum _FILTER_BOOT_OPTION_OPERATION
{
	FilterBootOptionOperationOpenSystemStore,
	FilterBootOptionOperationSetElement,
	FilterBootOptionOperationDeleteElement,
	FilterBootOptionOperationMax
} FILTER_BOOT_OPTION_OPERATION;
typedef enum _EVENT_INFORMATION_CLASS
{
	EventBasicInformation
} EVENT_INFORMATION_CLASS;
typedef struct _EVENT_BASIC_INFORMATION
{
	EVENT_TYPE EventType;
	LONG EventState;
} EVENT_BASIC_INFORMATION, * PEVENT_BASIC_INFORMATION;

NTSTATUS
__stdcall
NtCreateEvent(
	PHANDLE EventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	EVENT_TYPE EventType,
	BOOLEAN InitialState
);

NTSTATUS
__stdcall
NtOpenEvent(
	PHANDLE EventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtSetEvent(
	HANDLE EventHandle,
	PLONG PreviousState
);

NTSTATUS
__stdcall
NtSetEventBoostPriority(
	HANDLE EventHandle
);

NTSTATUS
__stdcall
NtClearEvent(
	HANDLE EventHandle
);

NTSTATUS
__stdcall
NtResetEvent(
	HANDLE EventHandle,
	PLONG PreviousState
);

NTSTATUS
__stdcall
NtPulseEvent(
	HANDLE EventHandle,
	PLONG PreviousState
);

NTSTATUS
__stdcall
NtQueryEvent(
	HANDLE EventHandle,
	EVENT_INFORMATION_CLASS EventInformationClass,
	PVOID EventInformation,
	ULONG EventInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtCreateEventPair(
	PHANDLE EventPairHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtOpenEventPair(
	PHANDLE EventPairHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtSetLowEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
NtSetHighEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
NtWaitLowEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
NtWaitHighEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
NtSetLowWaitHighEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
NtSetHighWaitLowEventPair(
	HANDLE EventPairHandle
);
typedef enum _MUTANT_INFORMATION_CLASS
{
	MutantBasicInformation,
	MutantOwnerInformation
} MUTANT_INFORMATION_CLASS;
typedef struct _MUTANT_BASIC_INFORMATION
{
	LONG CurrentCount;
	BOOLEAN OwnedByCaller;
	BOOLEAN AbandonedState;
} MUTANT_BASIC_INFORMATION, * PMUTANT_BASIC_INFORMATION;
typedef struct _MUTANT_OWNER_INFORMATION
{
	CLIENT_ID ClientId;
} MUTANT_OWNER_INFORMATION, * PMUTANT_OWNER_INFORMATION;

NTSTATUS
__stdcall
NtCreateMutant(
	PHANDLE MutantHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	BOOLEAN InitialOwner
);

NTSTATUS
__stdcall
NtOpenMutant(
	PHANDLE MutantHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtReleaseMutant(
	HANDLE MutantHandle,
	PLONG PreviousCount
);

NTSTATUS
__stdcall
NtQueryMutant(
	HANDLE MutantHandle,
	MUTANT_INFORMATION_CLASS MutantInformationClass,
	PVOID MutantInformation,
	ULONG MutantInformationLength,
	PULONG ReturnLength
);
typedef enum _SEMAPHORE_INFORMATION_CLASS
{
	SemaphoreBasicInformation
} SEMAPHORE_INFORMATION_CLASS;
typedef struct _SEMAPHORE_BASIC_INFORMATION
{
	LONG CurrentCount;
	LONG MaximumCount;
} SEMAPHORE_BASIC_INFORMATION, * PSEMAPHORE_BASIC_INFORMATION;

NTSTATUS
__stdcall
NtCreateSemaphore(
	PHANDLE SemaphoreHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	LONG InitialCount,
	LONG MaximumCount
);

NTSTATUS
__stdcall
NtOpenSemaphore(
	PHANDLE SemaphoreHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtReleaseSemaphore(
	HANDLE SemaphoreHandle,
	LONG ReleaseCount,
	PLONG PreviousCount
);

NTSTATUS
__stdcall
NtQuerySemaphore(
	HANDLE SemaphoreHandle,
	SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,
	PVOID SemaphoreInformation,
	ULONG SemaphoreInformationLength,
	PULONG ReturnLength
);
typedef enum _TIMER_INFORMATION_CLASS
{
	TimerBasicInformation
} TIMER_INFORMATION_CLASS;
typedef struct _TIMER_BASIC_INFORMATION
{
	LARGE_INTEGER RemainingTime;
	BOOLEAN TimerState;
} TIMER_BASIC_INFORMATION, * PTIMER_BASIC_INFORMATION;
typedef void(__stdcall* PTIMER_APC_ROUTINE)(
	PVOID TimerContext,
	ULONG TimerLowValue,
	LONG TimerHighValue
	);
typedef enum _TIMER_SET_INFORMATION_CLASS
{
	TimerSetCoalescableTimer,
	MaxTimerInfoClass
} TIMER_SET_INFORMATION_CLASS;
struct _COUNTED_REASON_CONTEXT;
typedef struct _TIMER_SET_COALESCABLE_TIMER_INFO
{
	LARGE_INTEGER DueTime;
	PTIMER_APC_ROUTINE TimerApcRoutine;
	PVOID TimerContext;
	struct _COUNTED_REASON_CONTEXT* WakeContext;
	ULONG Period;
	ULONG TolerableDelay;
	PBOOLEAN PreviousState;
} TIMER_SET_COALESCABLE_TIMER_INFO, * PTIMER_SET_COALESCABLE_TIMER_INFO;

NTSTATUS
__stdcall
NtCreateTimer(
	PHANDLE TimerHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	TIMER_TYPE TimerType
);

NTSTATUS
__stdcall
NtOpenTimer(
	PHANDLE TimerHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtSetTimer(
	HANDLE TimerHandle,
	PLARGE_INTEGER DueTime,
	PTIMER_APC_ROUTINE TimerApcRoutine,
	PVOID TimerContext,
	BOOLEAN ResumeTimer,
	LONG Period,
	PBOOLEAN PreviousState
);

NTSTATUS
__stdcall
NtSetTimerEx(
	HANDLE TimerHandle,
	TIMER_SET_INFORMATION_CLASS TimerSetInformationClass,
	PVOID TimerSetInformation,
	ULONG TimerSetInformationLength
);

NTSTATUS
__stdcall
NtCancelTimer(
	HANDLE TimerHandle,
	PBOOLEAN CurrentState
);

NTSTATUS
__stdcall
NtQueryTimer(
	HANDLE TimerHandle,
	TIMER_INFORMATION_CLASS TimerInformationClass,
	PVOID TimerInformation,
	ULONG TimerInformationLength,
	PULONG ReturnLength
);
typedef struct _T2_SET_PARAMETERS_V0
{
	ULONG Version;
	ULONG Reserved;
	LONGLONG NoWakeTolerance;
} T2_SET_PARAMETERS, * PT2_SET_PARAMETERS;
typedef PVOID PT2_CANCEL_PARAMETERS;

NTSTATUS
__stdcall
NtCreateProfile(
	PHANDLE ProfileHandle,
	HANDLE Process,
	PVOID ProfileBase,
	SIZE_T ProfileSize,
	ULONG BucketSize,
	PULONG Buffer,
	ULONG BufferSize,
	KPROFILE_SOURCE ProfileSource,
	KAFFINITY Affinity
);

NTSTATUS
__stdcall
NtCreateProfileEx(
	PHANDLE ProfileHandle,
	HANDLE Process,
	PVOID ProfileBase,
	SIZE_T ProfileSize,
	ULONG BucketSize,
	PULONG Buffer,
	ULONG BufferSize,
	KPROFILE_SOURCE ProfileSource,
	USHORT GroupCount,
	PGROUP_AFFINITY GroupAffinity
);

NTSTATUS
__stdcall
NtStartProfile(
	HANDLE ProfileHandle
);

NTSTATUS
__stdcall
NtStopProfile(
	HANDLE ProfileHandle
);

NTSTATUS
__stdcall
NtQueryIntervalProfile(
	KPROFILE_SOURCE ProfileSource,
	PULONG Interval
);

NTSTATUS
__stdcall
NtSetIntervalProfile(
	ULONG Interval,
	KPROFILE_SOURCE Source
);

NTSTATUS
__stdcall
NtCreateKeyedEvent(
	PHANDLE KeyedEventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG Flags
);

NTSTATUS
__stdcall
NtOpenKeyedEvent(
	PHANDLE KeyedEventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtReleaseKeyedEvent(
	HANDLE KeyedEventHandle,
	PVOID KeyValue,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtWaitForKeyedEvent(
	HANDLE KeyedEventHandle,
	PVOID KeyValue,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtUmsThreadYield(
	PVOID SchedulerParam
);
typedef struct _WNF_STATE_NAME
{
	ULONG Data[2];
} WNF_STATE_NAME, * PWNF_STATE_NAME;
typedef const WNF_STATE_NAME* PCWNF_STATE_NAME;
typedef enum _WNF_STATE_NAME_LIFETIME
{
	WnfWellKnownStateName,
	WnfPermanentStateName,
	WnfPersistentStateName,
	WnfTemporaryStateName
} WNF_STATE_NAME_LIFETIME;
typedef enum _WNF_STATE_NAME_INFORMATION
{
	WnfInfoStateNameExist,
	WnfInfoSubscribersPresent,
	WnfInfoIsQuiescent
} WNF_STATE_NAME_INFORMATION;
typedef enum _WNF_DATA_SCOPE
{
	WnfDataScopeSystem,
	WnfDataScopeSession,
	WnfDataScopeUser,
	WnfDataScopeProcess,
	WnfDataScopeMachine
} WNF_DATA_SCOPE;
typedef struct _WNF_TYPE_ID
{
	GUID TypeId;
} WNF_TYPE_ID, * PWNF_TYPE_ID;
typedef const WNF_TYPE_ID* PCWNF_TYPE_ID;
typedef ULONG WNF_CHANGE_STAMP, * PWNF_CHANGE_STAMP;
typedef struct _WNF_DELIVERY_DESCRIPTOR
{
	ULONGLONG SubscriptionId;
	WNF_STATE_NAME StateName;
	WNF_CHANGE_STAMP ChangeStamp;
	ULONG StateDataSize;
	ULONG EventMask;
	WNF_TYPE_ID TypeId;
	ULONG StateDataOffset;
} WNF_DELIVERY_DESCRIPTOR, * PWNF_DELIVERY_DESCRIPTOR;
typedef enum _WORKERFACTORYINFOCLASS
{
	WorkerFactoryTimeout,
	WorkerFactoryRetryTimeout,
	WorkerFactoryIdleTimeout,
	WorkerFactoryBindingCount,
	WorkerFactoryThreadMinimum,
	WorkerFactoryThreadMaximum,
	WorkerFactoryPaused,
	WorkerFactoryBasicInformation,
	WorkerFactoryAdjustThreadGoal,
	WorkerFactoryCallbackType,
	WorkerFactoryStackInformation,
	WorkerFactoryThreadBasePriority,
	WorkerFactoryTimeoutWaiters,
	WorkerFactoryFlags,
	WorkerFactoryThreadSoftMaximum,
	WorkerFactoryThreadCpuSets,
	MaxWorkerFactoryInfoClass
} WORKERFACTORYINFOCLASS, * PWORKERFACTORYINFOCLASS;
typedef struct _WORKER_FACTORY_BASIC_INFORMATION
{
	LARGE_INTEGER Timeout;
	LARGE_INTEGER RetryTimeout;
	LARGE_INTEGER IdleTimeout;
	BOOLEAN Paused;
	BOOLEAN TimerSet;
	BOOLEAN QueuedToExWorker;
	BOOLEAN MayCreate;
	BOOLEAN CreateInProgress;
	BOOLEAN InsertedIntoQueue;
	BOOLEAN Shutdown;
	ULONG BindingCount;
	ULONG ThreadMinimum;
	ULONG ThreadMaximum;
	ULONG PendingWorkerCount;
	ULONG WaitingWorkerCount;
	ULONG TotalWorkerCount;
	ULONG ReleaseCount;
	LONGLONG InfiniteWaitGoal;
	PVOID StartRoutine;
	PVOID StartParameter;
	HANDLE ProcessId;
	SIZE_T StackReserve;
	SIZE_T StackCommit;
	NTSTATUS LastThreadCreationStatus;
} WORKER_FACTORY_BASIC_INFORMATION, * PWORKER_FACTORY_BASIC_INFORMATION;

NTSTATUS
__stdcall
NtCreateWorkerFactory(
	PHANDLE WorkerFactoryHandleReturn,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE CompletionPortHandle,
	HANDLE WorkerProcessHandle,
	PVOID StartRoutine,
	PVOID StartParameter,
	ULONG MaxThreadCount,
	SIZE_T StackReserve,
	SIZE_T StackCommit
);

NTSTATUS
__stdcall
NtQueryInformationWorkerFactory(
	HANDLE WorkerFactoryHandle,
	WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
	PVOID WorkerFactoryInformation,
	ULONG WorkerFactoryInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationWorkerFactory(
	HANDLE WorkerFactoryHandle,
	WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
	PVOID WorkerFactoryInformation,
	ULONG WorkerFactoryInformationLength
);

NTSTATUS
__stdcall
NtShutdownWorkerFactory(
	HANDLE WorkerFactoryHandle,
	volatile LONG* PendingWorkerCount
);

NTSTATUS
__stdcall
NtReleaseWorkerFactoryWorker(
	HANDLE WorkerFactoryHandle
);

NTSTATUS
__stdcall
NtWorkerFactoryWorkerReady(
	HANDLE WorkerFactoryHandle
);
struct _FILE_IO_COMPLETION_INFORMATION;

NTSTATUS
__stdcall
NtWaitForWorkViaWorkerFactory(
	HANDLE WorkerFactoryHandle,
	struct _FILE_IO_COMPLETION_INFORMATION* MiniPacket
);

NTSTATUS
__stdcall
NtQuerySystemTime(
	PLARGE_INTEGER SystemTime
);

NTSTATUS
__stdcall
NtSetSystemTime(
	PLARGE_INTEGER SystemTime,
	PLARGE_INTEGER PreviousTime
);

NTSTATUS
__stdcall
NtQueryTimerResolution(
	PULONG MaximumTime,
	PULONG MinimumTime,
	PULONG CurrentTime
);

NTSTATUS
__stdcall
NtSetTimerResolution(
	ULONG DesiredTime,
	BOOLEAN SetResolution,
	PULONG ActualTime
);

NTSTATUS
__stdcall
NtQueryPerformanceCounter(
	PLARGE_INTEGER PerformanceCounter,
	PLARGE_INTEGER PerformanceFrequency
);

NTSTATUS
__stdcall
NtAllocateLocallyUniqueId(
	PLUID Luid
);

NTSTATUS
__stdcall
NtSetUuidSeed(
	PCHAR Seed
);

NTSTATUS
__stdcall
NtAllocateUuids(
	PULARGE_INTEGER Time,
	PULONG Range,
	PULONG Sequence,
	PCHAR Seed
);
typedef enum _SYSTEM_INFORMATION_CLASS
{
	SystemBasicInformation,
	SystemProcessorInformation,
	SystemPerformanceInformation,
	SystemTimeOfDayInformation,
	SystemPathInformation,
	SystemProcessInformation,
	SystemCallCountInformation,
	SystemDeviceInformation,
	SystemProcessorPerformanceInformation,
	SystemFlagsInformation,
	SystemCallTimeInformation,
	SystemModuleInformation,
	SystemLocksInformation,
	SystemStackTraceInformation,
	SystemPagedPoolInformation,
	SystemNonPagedPoolInformation,
	SystemHandleInformation,
	SystemObjectInformation,
	SystemPageFileInformation,
	SystemVdmInstemulInformation,
	SystemVdmBopInformation,
	SystemFileCacheInformation,
	SystemPoolTagInformation,
	SystemInterruptInformation,
	SystemDpcBehaviorInformation,
	SystemFullMemoryInformation,
	SystemLoadGdiDriverInformation,
	SystemUnloadGdiDriverInformation,
	SystemTimeAdjustmentInformation,
	SystemSummaryMemoryInformation,
	SystemMirrorMemoryInformation,
	SystemPerformanceTraceInformation,
	SystemObsolete0,
	SystemExceptionInformation,
	SystemCrashDumpStateInformation,
	SystemKernelDebuggerInformation,
	SystemContextSwitchInformation,
	SystemRegistryQuotaInformation,
	SystemExtendServiceTableInformation,
	SystemPrioritySeperation,
	SystemVerifierAddDriverInformation,
	SystemVerifierRemoveDriverInformation,
	SystemProcessorIdleInformation,
	SystemLegacyDriverInformation,
	SystemCurrentTimeZoneInformation,
	SystemLookasideInformation,
	SystemTimeSlipNotification,
	SystemSessionCreate,
	SystemSessionDetach,
	SystemSessionInformation,
	SystemRangeStartInformation,
	SystemVerifierInformation,
	SystemVerifierThunkExtend,
	SystemSessionProcessInformation,
	SystemLoadGdiDriverInSystemSpace,
	SystemNumaProcessorMap,
	SystemPrefetcherInformation,
	SystemExtendedProcessInformation,
	SystemRecommendedSharedDataAlignment,
	SystemComPlusPackage,
	SystemNumaAvailableMemory,
	SystemProcessorPowerInformation,
	SystemEmulationBasicInformation,
	SystemEmulationProcessorInformation,
	SystemExtendedHandleInformation,
	SystemLostDelayedWriteInformation,
	SystemBigPoolInformation,
	SystemSessionPoolTagInformation,
	SystemSessionMappedViewInformation,
	SystemHotpatchInformation,
	SystemObjectSecurityMode,
	SystemWatchdogTimerHandler,
	SystemWatchdogTimerInformation,
	SystemLogicalProcessorInformation,
	SystemWow64SharedInformationObsolete,
	SystemRegisterFirmwareTableInformationHandler,
	SystemFirmwareTableInformation,
	SystemModuleInformationEx,
	SystemVerifierTriageInformation,
	SystemSuperfetchInformation,
	SystemMemoryListInformation,
	SystemFileCacheInformationEx,
	SystemThreadPriorityClientIdInformation,
	SystemProcessorIdleCycleTimeInformation,
	SystemVerifierCancellationInformation,
	SystemProcessorPowerInformationEx,
	SystemRefTraceInformation,
	SystemSpecialPoolInformation,
	SystemProcessIdInformation,
	SystemErrorPortInformation,
	SystemBootEnvironmentInformation,
	SystemHypervisorInformation,
	SystemVerifierInformationEx,
	SystemTimeZoneInformation,
	SystemImageFileExecutionOptionsInformation,
	SystemCoverageInformation,
	SystemPrefetchPatchInformation,
	SystemVerifierFaultsInformation,
	SystemSystemPartitionInformation,
	SystemSystemDiskInformation,
	SystemProcessorPerformanceDistribution,
	SystemNumaProximityNodeInformation,
	SystemDynamicTimeZoneInformation,
	SystemCodeIntegrityInformation,
	SystemProcessorMicrocodeUpdateInformation,
	SystemProcessorBrandString,
	SystemVirtualAddressInformation,
	SystemLogicalProcessorAndGroupInformation,
	SystemProcessorCycleTimeInformation,
	SystemStoreInformation,
	SystemRegistryAppendString,
	SystemAitSamplingValue,
	SystemVhdBootInformation,
	SystemCpuQuotaInformation,
	SystemNativeBasicInformation,
	SystemErrorPortTimeouts,
	SystemLowPriorityIoInformation,
	SystemTpmBootEntropyInformation,
	SystemVerifierCountersInformation,
	SystemPagedPoolInformationEx,
	SystemSystemPtesInformationEx,
	SystemNodeDistanceInformation,
	SystemAcpiAuditInformation,
	SystemBasicPerformanceInformation,
	SystemQueryPerformanceCounterInformation,
	SystemSessionBigPoolInformation,
	SystemBootGraphicsInformation,
	SystemScrubPhysicalMemoryInformation,
	SystemBadPageInformation,
	SystemProcessorProfileControlArea,
	SystemCombinePhysicalMemoryInformation,
	SystemEntropyInterruptTimingInformation,
	SystemConsoleInformation,
	SystemPlatformBinaryInformation,
	SystemPolicyInformation,
	SystemHypervisorProcessorCountInformation,
	SystemDeviceDataInformation,
	SystemDeviceDataEnumerationInformation,
	SystemMemoryTopologyInformation,
	SystemMemoryChannelInformation,
	SystemBootLogoInformation,
	SystemProcessorPerformanceInformationEx,
	SystemCriticalProcessErrorLogInformation,
	SystemSecureBootPolicyInformation,
	SystemPageFileInformationEx,
	SystemSecureBootInformation,
	SystemEntropyInterruptTimingRawInformation,
	SystemPortableWorkspaceEfiLauncherInformation,
	SystemFullProcessInformation,
	SystemKernelDebuggerInformationEx,
	SystemBootMetadataInformation,
	SystemSoftRebootInformation,
	SystemElamCertificateInformation,
	SystemOfflineDumpConfigInformation,
	SystemProcessorFeaturesInformation,
	SystemRegistryReconciliationInformation,
	SystemEdidInformation,
	SystemManufacturingInformation,
	SystemEnergyEstimationConfigInformation,
	SystemHypervisorDetailInformation,
	SystemProcessorCycleStatsInformation,
	SystemVmGenerationCountInformation,
	SystemTrustedPlatformModuleInformation,
	SystemKernelDebuggerFlags,
	SystemCodeIntegrityPolicyInformation,
	SystemIsolatedUserModeInformation,
	SystemHardwareSecurityTestInterfaceResultsInformation,
	SystemSingleModuleInformation,
	SystemAllowedCpuSetsInformation,
	SystemVsmProtectionInformation,
	SystemInterruptCpuSetsInformation,
	SystemSecureBootPolicyFullInformation,
	SystemCodeIntegrityPolicyFullInformation,
	SystemAffinitizedInterruptProcessorInformation,
	SystemRootSiloInformation,
	SystemCpuSetInformation,
	SystemCpuSetTagInformation,
	SystemWin32WerStartCallout,
	SystemSecureKernelProfileInformation,
	SystemCodeIntegrityPlatformManifestInformation,
	SystemInterruptSteeringInformation,
	SystemSupportedProcessorArchitectures,
	SystemMemoryUsageInformation,
	SystemCodeIntegrityCertificateInformation,
	SystemPhysicalMemoryInformation,
	SystemControlFlowTransition,
	SystemKernelDebuggingAllowed,
	SystemActivityModerationExeState,
	SystemActivityModerationUserSettings,
	SystemCodeIntegrityPoliciesFullInformation,
	SystemCodeIntegrityUnlockInformation,
	SystemIntegrityQuotaInformation,
	SystemFlushInformation,
	SystemProcessorIdleMaskInformation,
	SystemSecureDumpEncryptionInformation,
	SystemWriteConstraintInformation,
	SystemKernelVaShadowInformation,
	SystemHypervisorSharedPageInformation,
	SystemFirmwareBootPerformanceInformation,
	SystemCodeIntegrityVerificationInformation,
	SystemFirmwarePartitionInformation,
	SystemSpeculationControlInformation,
	SystemDmaGuardPolicyInformation,
	SystemEnclaveLaunchControlInformation,
	SystemWorkloadAllowedCpuSetsInformation,
	SystemCodeIntegrityUnlockModeInformation,
	SystemLeapSecondInformation,
	SystemFlags2Information,
	SystemSecurityModelInformation,
	SystemCodeIntegritySyntheticCacheInformation,
	SystemFeatureConfigurationInformation,
	SystemFeatureConfigurationSectionInformation,
	SystemFeatureUsageSubscriptionInformation,
	SystemSecureSpeculationControlInformation,
	SystemSpacesBootInformation,
	SystemFwRamdiskInformation,
	SystemWheaIpmiHardwareInformation,
	SystemDifSetRuleClassInformation,
	SystemDifClearRuleClassInformation,
	SystemDifApplyPluginVerificationOnDriver,
	SystemDifRemovePluginVerificationOnDriver,
	SystemShadowStackInformation,
	SystemBuildVersionInformation,
	SystemPoolLimitInformation,
	SystemCodeIntegrityAddDynamicStore,
	SystemCodeIntegrityClearDynamicStores,
	SystemDifPoolTrackingInformation,
	SystemPoolZeroingInformation,
	MaxSystemInfoClass
} SYSTEM_INFORMATION_CLASS;
typedef struct _SYSTEM_BASIC_INFORMATION
{
	ULONG Reserved;
	ULONG TimerResolution;
	ULONG PageSize;
	ULONG NumberOfPhysicalPages;
	ULONG LowestPhysicalPageNumber;
	ULONG HighestPhysicalPageNumber;
	ULONG AllocationGranularity;
	ULONG_PTR MinimumUserModeAddress;
	ULONG_PTR MaximumUserModeAddress;
	ULONG_PTR ActiveProcessorsAffinityMask;
	CCHAR NumberOfProcessors;
} SYSTEM_BASIC_INFORMATION, * PSYSTEM_BASIC_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_INFORMATION
{
	USHORT ProcessorArchitecture;
	USHORT ProcessorLevel;
	USHORT ProcessorRevision;
	USHORT MaximumProcessors;
	ULONG ProcessorFeatureBits;
} SYSTEM_PROCESSOR_INFORMATION, * PSYSTEM_PROCESSOR_INFORMATION;
typedef struct _SYSTEM_PERFORMANCE_INFORMATION
{
	LARGE_INTEGER IdleProcessTime;
	LARGE_INTEGER IoReadTransferCount;
	LARGE_INTEGER IoWriteTransferCount;
	LARGE_INTEGER IoOtherTransferCount;
	ULONG IoReadOperationCount;
	ULONG IoWriteOperationCount;
	ULONG IoOtherOperationCount;
	ULONG AvailablePages;
	ULONG CommittedPages;
	ULONG CommitLimit;
	ULONG PeakCommitment;
	ULONG PageFaultCount;
	ULONG CopyOnWriteCount;
	ULONG TransitionCount;
	ULONG CacheTransitionCount;
	ULONG DemandZeroCount;
	ULONG PageReadCount;
	ULONG PageReadIoCount;
	ULONG CacheReadCount;
	ULONG CacheIoCount;
	ULONG DirtyPagesWriteCount;
	ULONG DirtyWriteIoCount;
	ULONG MappedPagesWriteCount;
	ULONG MappedWriteIoCount;
	ULONG PagedPoolPages;
	ULONG NonPagedPoolPages;
	ULONG PagedPoolAllocs;
	ULONG PagedPoolFrees;
	ULONG NonPagedPoolAllocs;
	ULONG NonPagedPoolFrees;
	ULONG FreeSystemPtes;
	ULONG ResidentSystemCodePage;
	ULONG TotalSystemDriverPages;
	ULONG TotalSystemCodePages;
	ULONG NonPagedPoolLookasideHits;
	ULONG PagedPoolLookasideHits;
	ULONG AvailablePagedPoolPages;
	ULONG ResidentSystemCachePage;
	ULONG ResidentPagedPoolPage;
	ULONG ResidentSystemDriverPage;
	ULONG CcFastReadNoWait;
	ULONG CcFastReadWait;
	ULONG CcFastReadResourceMiss;
	ULONG CcFastReadNotPossible;
	ULONG CcFastMdlReadNoWait;
	ULONG CcFastMdlReadWait;
	ULONG CcFastMdlReadResourceMiss;
	ULONG CcFastMdlReadNotPossible;
	ULONG CcMapDataNoWait;
	ULONG CcMapDataWait;
	ULONG CcMapDataNoWaitMiss;
	ULONG CcMapDataWaitMiss;
	ULONG CcPinMappedDataCount;
	ULONG CcPinReadNoWait;
	ULONG CcPinReadWait;
	ULONG CcPinReadNoWaitMiss;
	ULONG CcPinReadWaitMiss;
	ULONG CcCopyReadNoWait;
	ULONG CcCopyReadWait;
	ULONG CcCopyReadNoWaitMiss;
	ULONG CcCopyReadWaitMiss;
	ULONG CcMdlReadNoWait;
	ULONG CcMdlReadWait;
	ULONG CcMdlReadNoWaitMiss;
	ULONG CcMdlReadWaitMiss;
	ULONG CcReadAheadIos;
	ULONG CcLazyWriteIos;
	ULONG CcLazyWritePages;
	ULONG CcDataFlushes;
	ULONG CcDataPages;
	ULONG ContextSwitches;
	ULONG FirstLevelTbFills;
	ULONG SecondLevelTbFills;
	ULONG SystemCalls;
	ULONGLONG CcTotalDirtyPages;
	ULONGLONG CcDirtyPageThreshold;
	LONGLONG ResidentAvailablePages;
	ULONGLONG SharedCommittedPages;
} SYSTEM_PERFORMANCE_INFORMATION, * PSYSTEM_PERFORMANCE_INFORMATION;
typedef struct _SYSTEM_TIMEOFDAY_INFORMATION
{
	LARGE_INTEGER BootTime;
	LARGE_INTEGER CurrentTime;
	LARGE_INTEGER TimeZoneBias;
	ULONG TimeZoneId;
	ULONG Reserved;
	ULONGLONG BootTimeBias;
	ULONGLONG SleepTimeBias;
} SYSTEM_TIMEOFDAY_INFORMATION, * PSYSTEM_TIMEOFDAY_INFORMATION;
typedef struct _SYSTEM_THREAD_INFORMATION
{
	LARGE_INTEGER KernelTime;
	LARGE_INTEGER UserTime;
	LARGE_INTEGER CreateTime;
	ULONG WaitTime;
	PVOID StartAddress;
	CLIENT_ID ClientId;
	KPRIORITY Priority;
	LONG BasePriority;
	ULONG ContextSwitches;
	KTHREAD_STATE ThreadState;
	KWAIT_REASON WaitReason;
} SYSTEM_THREAD_INFORMATION, * PSYSTEM_THREAD_INFORMATION;
typedef struct _TEB* PTEB;
typedef struct _SYSTEM_EXTENDED_THREAD_INFORMATION
{
	SYSTEM_THREAD_INFORMATION ThreadInfo;
	PVOID StackBase;
	PVOID StackLimit;
	PVOID Win32StartAddress;
	PTEB TebBase;
	ULONG_PTR Reserved2;
	ULONG_PTR Reserved3;
	ULONG_PTR Reserved4;
} SYSTEM_EXTENDED_THREAD_INFORMATION, * PSYSTEM_EXTENDED_THREAD_INFORMATION;
typedef struct _SYSTEM_PROCESS_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG NumberOfThreads;
	LARGE_INTEGER WorkingSetPrivateSize;
	ULONG HardFaultCount;
	ULONG NumberOfThreadsHighWatermark;
	ULONGLONG CycleTime;
	LARGE_INTEGER CreateTime;
	LARGE_INTEGER UserTime;
	LARGE_INTEGER KernelTime;
	UNICODE_STRING ImageName;
	KPRIORITY BasePriority;
	HANDLE UniqueProcessId;
	HANDLE InheritedFromUniqueProcessId;
	ULONG HandleCount;
	ULONG SessionId;
	ULONG_PTR UniqueProcessKey;
	SIZE_T PeakVirtualSize;
	SIZE_T VirtualSize;
	ULONG PageFaultCount;
	SIZE_T PeakWorkingSetSize;
	SIZE_T WorkingSetSize;
	SIZE_T QuotaPeakPagedPoolUsage;
	SIZE_T QuotaPagedPoolUsage;
	SIZE_T QuotaPeakNonPagedPoolUsage;
	SIZE_T QuotaNonPagedPoolUsage;
	SIZE_T PagefileUsage;
	SIZE_T PeakPagefileUsage;
	SIZE_T PrivatePageCount;
	LARGE_INTEGER ReadOperationCount;
	LARGE_INTEGER WriteOperationCount;
	LARGE_INTEGER OtherOperationCount;
	LARGE_INTEGER ReadTransferCount;
	LARGE_INTEGER WriteTransferCount;
	LARGE_INTEGER OtherTransferCount;
	SYSTEM_THREAD_INFORMATION Threads[1];
} SYSTEM_PROCESS_INFORMATION, * PSYSTEM_PROCESS_INFORMATION;
typedef struct _SYSTEM_CALL_COUNT_INFORMATION
{
	ULONG Length;
	ULONG NumberOfTables;
} SYSTEM_CALL_COUNT_INFORMATION, * PSYSTEM_CALL_COUNT_INFORMATION;
typedef struct _SYSTEM_DEVICE_INFORMATION
{
	ULONG NumberOfDisks;
	ULONG NumberOfFloppies;
	ULONG NumberOfCdRoms;
	ULONG NumberOfTapes;
	ULONG NumberOfSerialPorts;
	ULONG NumberOfParallelPorts;
} SYSTEM_DEVICE_INFORMATION, * PSYSTEM_DEVICE_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION
{
	LARGE_INTEGER IdleTime;
	LARGE_INTEGER KernelTime;
	LARGE_INTEGER UserTime;
	LARGE_INTEGER DpcTime;
	LARGE_INTEGER InterruptTime;
	ULONG InterruptCount;
} SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION, * PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION;
typedef struct _SYSTEM_FLAGS_INFORMATION
{
	ULONG Flags;
} SYSTEM_FLAGS_INFORMATION, * PSYSTEM_FLAGS_INFORMATION;
typedef struct _SYSTEM_CALL_TIME_INFORMATION
{
	ULONG Length;
	ULONG TotalCalls;
	LARGE_INTEGER TimeOfCalls[1];
} SYSTEM_CALL_TIME_INFORMATION, * PSYSTEM_CALL_TIME_INFORMATION;
typedef struct _RTL_PROCESS_LOCK_INFORMATION
{
	PVOID Address;
	USHORT Type;
	USHORT CreatorBackTraceIndex;
	HANDLE OwningThread;
	LONG LockCount;
	ULONG ContentionCount;
	ULONG EntryCount;
	LONG RecursionCount;
	ULONG NumberOfWaitingShared;
	ULONG NumberOfWaitingExclusive;
} RTL_PROCESS_LOCK_INFORMATION, * PRTL_PROCESS_LOCK_INFORMATION;
typedef struct _RTL_PROCESS_LOCKS
{
	ULONG NumberOfLocks;
	RTL_PROCESS_LOCK_INFORMATION Locks[1];
} RTL_PROCESS_LOCKS, * PRTL_PROCESS_LOCKS;
typedef struct _RTL_PROCESS_BACKTRACE_INFORMATION
{
	PCHAR SymbolicBackTrace;
	ULONG TraceCount;
	USHORT Index;
	USHORT Depth;
	PVOID BackTrace[32];
} RTL_PROCESS_BACKTRACE_INFORMATION, * PRTL_PROCESS_BACKTRACE_INFORMATION;
typedef struct _RTL_PROCESS_BACKTRACES
{
	ULONG CommittedMemory;
	ULONG ReservedMemory;
	ULONG NumberOfBackTraceLookups;
	ULONG NumberOfBackTraces;
	RTL_PROCESS_BACKTRACE_INFORMATION BackTraces[1];
} RTL_PROCESS_BACKTRACES, * PRTL_PROCESS_BACKTRACES;
typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO
{
	USHORT UniqueProcessId;
	USHORT CreatorBackTraceIndex;
	UCHAR ObjectTypeIndex;
	UCHAR HandleAttributes;
	USHORT HandleValue;
	PVOID Object;
	ULONG GrantedAccess;
} SYSTEM_HANDLE_TABLE_ENTRY_INFO, * PSYSTEM_HANDLE_TABLE_ENTRY_INFO;
typedef struct _SYSTEM_HANDLE_INFORMATION
{
	ULONG NumberOfHandles;
	SYSTEM_HANDLE_TABLE_ENTRY_INFO Handles[1];
} SYSTEM_HANDLE_INFORMATION, * PSYSTEM_HANDLE_INFORMATION;
typedef struct _SYSTEM_OBJECTTYPE_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG NumberOfObjects;
	ULONG NumberOfHandles;
	ULONG TypeIndex;
	ULONG InvalidAttributes;
	GENERIC_MAPPING GenericMapping;
	ULONG ValidAccessMask;
	ULONG PoolType;
	BOOLEAN SecurityRequired;
	BOOLEAN WaitableObject;
	UNICODE_STRING TypeName;
} SYSTEM_OBJECTTYPE_INFORMATION, * PSYSTEM_OBJECTTYPE_INFORMATION;
typedef struct _SYSTEM_OBJECT_INFORMATION
{
	ULONG NextEntryOffset;
	PVOID Object;
	HANDLE CreatorUniqueProcess;
	USHORT CreatorBackTraceIndex;
	USHORT Flags;
	LONG PointerCount;
	LONG HandleCount;
	ULONG PagedPoolCharge;
	ULONG NonPagedPoolCharge;
	HANDLE ExclusiveProcessId;
	PVOID SecurityDescriptor;
	UNICODE_STRING NameInfo;
} SYSTEM_OBJECT_INFORMATION, * PSYSTEM_OBJECT_INFORMATION;
typedef struct _SYSTEM_PAGEFILE_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG TotalSize;
	ULONG TotalInUse;
	ULONG PeakUsage;
	UNICODE_STRING PageFileName;
} SYSTEM_PAGEFILE_INFORMATION, * PSYSTEM_PAGEFILE_INFORMATION;
typedef struct _SYSTEM_VDM_INSTEMUL_INFO
{
	ULONG SegmentNotPresent;
	ULONG VdmOpcode0F;
	ULONG OpcodeESPrefix;
	ULONG OpcodeCSPrefix;
	ULONG OpcodeSSPrefix;
	ULONG OpcodeDSPrefix;
	ULONG OpcodeFSPrefix;
	ULONG OpcodeGSPrefix;
	ULONG OpcodeOPER32Prefix;
	ULONG OpcodeADDR32Prefix;
	ULONG OpcodeINSB;
	ULONG OpcodeINSW;
	ULONG OpcodeOUTSB;
	ULONG OpcodeOUTSW;
	ULONG OpcodePUSHF;
	ULONG OpcodePOPF;
	ULONG OpcodeINTnn;
	ULONG OpcodeINTO;
	ULONG OpcodeIRET;
	ULONG OpcodeINBimm;
	ULONG OpcodeINWimm;
	ULONG OpcodeOUTBimm;
	ULONG OpcodeOUTWimm;
	ULONG OpcodeINB;
	ULONG OpcodeINW;
	ULONG OpcodeOUTB;
	ULONG OpcodeOUTW;
	ULONG OpcodeLOCKPrefix;
	ULONG OpcodeREPNEPrefix;
	ULONG OpcodeREPPrefix;
	ULONG OpcodeHLT;
	ULONG OpcodeCLI;
	ULONG OpcodeSTI;
	ULONG BopCount;
} SYSTEM_VDM_INSTEMUL_INFO, * PSYSTEM_VDM_INSTEMUL_INFO;
typedef struct _SYSTEM_FILECACHE_INFORMATION
{
	SIZE_T CurrentSize;
	SIZE_T PeakSize;
	ULONG PageFaultCount;
	SIZE_T MinimumWorkingSet;
	SIZE_T MaximumWorkingSet;
	SIZE_T CurrentSizeIncludingTransitionInPages;
	SIZE_T PeakSizeIncludingTransitionInPages;
	ULONG TransitionRePurposeCount;
	ULONG Flags;
} SYSTEM_FILECACHE_INFORMATION, * PSYSTEM_FILECACHE_INFORMATION;
typedef struct _SYSTEM_BASIC_WORKING_SET_INFORMATION
{
	SIZE_T CurrentSize;
	SIZE_T PeakSize;
	ULONG PageFaultCount;
} SYSTEM_BASIC_WORKING_SET_INFORMATION, * PSYSTEM_BASIC_WORKING_SET_INFORMATION;
typedef struct _SYSTEM_POOLTAG
{
	union
	{
		UCHAR Tag[4];
		ULONG TagUlong;
	};
	ULONG PagedAllocs;
	ULONG PagedFrees;
	SIZE_T PagedUsed;
	ULONG NonPagedAllocs;
	ULONG NonPagedFrees;
	SIZE_T NonPagedUsed;
} SYSTEM_POOLTAG, * PSYSTEM_POOLTAG;
typedef struct _SYSTEM_POOLTAG_INFORMATION
{
	ULONG Count;
	SYSTEM_POOLTAG TagInfo[1];
} SYSTEM_POOLTAG_INFORMATION, * PSYSTEM_POOLTAG_INFORMATION;
typedef struct _SYSTEM_INTERRUPT_INFORMATION
{
	ULONG ContextSwitches;
	ULONG DpcCount;
	ULONG DpcRate;
	ULONG TimeIncrement;
	ULONG DpcBypassCount;
	ULONG ApcBypassCount;
} SYSTEM_INTERRUPT_INFORMATION, * PSYSTEM_INTERRUPT_INFORMATION;
typedef struct _SYSTEM_DPC_BEHAVIOR_INFORMATION
{
	ULONG Spare;
	ULONG DpcQueueDepth;
	ULONG MinimumDpcRate;
	ULONG AdjustDpcThreshold;
	ULONG IdealDpcRate;
} SYSTEM_DPC_BEHAVIOR_INFORMATION, * PSYSTEM_DPC_BEHAVIOR_INFORMATION;
typedef struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION
{
	ULONG TimeAdjustment;
	ULONG TimeIncrement;
	BOOLEAN Enable;
} SYSTEM_QUERY_TIME_ADJUST_INFORMATION, * PSYSTEM_QUERY_TIME_ADJUST_INFORMATION;
typedef struct _SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE
{
	ULONGLONG TimeAdjustment;
	ULONGLONG TimeIncrement;
	BOOLEAN Enable;
} SYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE, * PSYSTEM_QUERY_TIME_ADJUST_INFORMATION_PRECISE;
typedef struct _SYSTEM_SET_TIME_ADJUST_INFORMATION
{
	ULONG TimeAdjustment;
	BOOLEAN Enable;
} SYSTEM_SET_TIME_ADJUST_INFORMATION, * PSYSTEM_SET_TIME_ADJUST_INFORMATION;
typedef struct _SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE
{
	ULONGLONG TimeAdjustment;
	BOOLEAN Enable;
} SYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE, * PSYSTEM_SET_TIME_ADJUST_INFORMATION_PRECISE;
typedef ULONG64 TRACEHANDLE, * PTRACEHANDLE;
typedef enum _EVENT_TRACE_INFORMATION_CLASS
{
	EventTraceKernelVersionInformation,
	EventTraceGroupMaskInformation,
	EventTracePerformanceInformation,
	EventTraceTimeProfileInformation,
	EventTraceSessionSecurityInformation,
	EventTraceSpinlockInformation,
	EventTraceStackTracingInformation,
	EventTraceExecutiveResourceInformation,
	EventTraceHeapTracingInformation,
	EventTraceHeapSummaryTracingInformation,
	EventTracePoolTagFilterInformation,
	EventTracePebsTracingInformation,
	EventTraceProfileConfigInformation,
	EventTraceProfileSourceListInformation,
	EventTraceProfileEventListInformation,
	EventTraceProfileCounterListInformation,
	EventTraceStackCachingInformation,
	EventTraceObjectTypeFilterInformation,
	EventTraceSoftRestartInformation,
	EventTraceLastBranchConfigurationInformation,
	EventTraceLastBranchEventListInformation,
	EventTraceProfileSourceAddInformation,
	EventTraceProfileSourceRemoveInformation,
	EventTraceProcessorTraceConfigurationInformation,
	EventTraceProcessorTraceEventListInformation,
	EventTraceCoverageSamplerInformation,
	EventTraceUnifiedStackCachingInformation,
	MaxEventTraceInfoClass
} EVENT_TRACE_INFORMATION_CLASS;
typedef struct _EVENT_TRACE_VERSION_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG EventTraceKernelVersion;
} EVENT_TRACE_VERSION_INFORMATION, * PEVENT_TRACE_VERSION_INFORMATION;
typedef ULONG PERFINFO_MASK;
typedef struct _PERFINFO_GROUPMASK
{
	ULONG Masks[8];
} PERFINFO_GROUPMASK, * PPERFINFO_GROUPMASK;
typedef struct _EVENT_TRACE_GROUPMASK_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	TRACEHANDLE TraceHandle;
	PERFINFO_GROUPMASK EventTraceGroupMasks;
} EVENT_TRACE_GROUPMASK_INFORMATION, * PEVENT_TRACE_GROUPMASK_INFORMATION;
typedef struct _EVENT_TRACE_PERFORMANCE_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	LARGE_INTEGER LogfileBytesWritten;
} EVENT_TRACE_PERFORMANCE_INFORMATION, * PEVENT_TRACE_PERFORMANCE_INFORMATION;
typedef struct _EVENT_TRACE_TIME_PROFILE_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG ProfileInterval;
} EVENT_TRACE_TIME_PROFILE_INFORMATION, * PEVENT_TRACE_TIME_PROFILE_INFORMATION;
typedef struct _EVENT_TRACE_SESSION_SECURITY_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG SecurityInformation;
	TRACEHANDLE TraceHandle;
	UCHAR SecurityDescriptor[1];
} EVENT_TRACE_SESSION_SECURITY_INFORMATION, * PEVENT_TRACE_SESSION_SECURITY_INFORMATION;
typedef struct _EVENT_TRACE_SPINLOCK_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG SpinLockSpinThreshold;
	ULONG SpinLockAcquireSampleRate;
	ULONG SpinLockContentionSampleRate;
	ULONG SpinLockHoldThreshold;
} EVENT_TRACE_SPINLOCK_INFORMATION, * PEVENT_TRACE_SPINLOCK_INFORMATION;
typedef struct _EVENT_TRACE_SYSTEM_EVENT_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	TRACEHANDLE TraceHandle;
	ULONG HookId[1];
} EVENT_TRACE_SYSTEM_EVENT_INFORMATION, * PEVENT_TRACE_SYSTEM_EVENT_INFORMATION;
typedef struct _EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG ReleaseSamplingRate;
	ULONG ContentionSamplingRate;
	ULONG NumberOfExcessiveTimeouts;
} EVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION, * PEVENT_TRACE_EXECUTIVE_RESOURCE_INFORMATION;
typedef struct _EVENT_TRACE_HEAP_TRACING_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG ProcessId;
} EVENT_TRACE_HEAP_TRACING_INFORMATION, * PEVENT_TRACE_HEAP_TRACING_INFORMATION;
typedef struct _EVENT_TRACE_TAG_FILTER_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	TRACEHANDLE TraceHandle;
	ULONG Filter[1];
} EVENT_TRACE_TAG_FILTER_INFORMATION, * PEVENT_TRACE_TAG_FILTER_INFORMATION;
typedef struct _EVENT_TRACE_PROFILE_COUNTER_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	TRACEHANDLE TraceHandle;
	ULONG ProfileSource[1];
} EVENT_TRACE_PROFILE_COUNTER_INFORMATION, * PEVENT_TRACE_PROFILE_COUNTER_INFORMATION;
typedef struct _EVENT_TRACE_PROFILE_LIST_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	ULONG Spare;
	struct _PROFILE_SOURCE_INFO* Profile[1];
} EVENT_TRACE_PROFILE_LIST_INFORMATION, * PEVENT_TRACE_PROFILE_LIST_INFORMATION;
typedef struct _EVENT_TRACE_STACK_CACHING_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	TRACEHANDLE TraceHandle;
	BOOLEAN Enabled;
	UCHAR Reserved[3];
	ULONG CacheSize;
	ULONG BucketCount;
} EVENT_TRACE_STACK_CACHING_INFORMATION, * PEVENT_TRACE_STACK_CACHING_INFORMATION;
typedef struct _EVENT_TRACE_SOFT_RESTART_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	TRACEHANDLE TraceHandle;
	BOOLEAN PersistTraceBuffers;
	WCHAR FileName[1];
} EVENT_TRACE_SOFT_RESTART_INFORMATION, * PEVENT_TRACE_SOFT_RESTART_INFORMATION;
typedef struct _EVENT_TRACE_PROFILE_ADD_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	BOOLEAN PerfEvtEventSelect;
	BOOLEAN PerfEvtUnitSelect;
	ULONG PerfEvtType;
	ULONG CpuInfoHierarchy[0x3];
	ULONG InitialInterval;
	BOOLEAN AllowsHalt;
	BOOLEAN Persist;
	WCHAR ProfileSourceDescription[0x1];
} EVENT_TRACE_PROFILE_ADD_INFORMATION, * PEVENT_TRACE_PROFILE_ADD_INFORMATION;
typedef struct _EVENT_TRACE_PROFILE_REMOVE_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	KPROFILE_SOURCE ProfileSource;
	ULONG CpuInfoHierarchy[0x3];
} EVENT_TRACE_PROFILE_REMOVE_INFORMATION, * PEVENT_TRACE_PROFILE_REMOVE_INFORMATION;
typedef struct _EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION
{
	EVENT_TRACE_INFORMATION_CLASS EventTraceInformationClass;
	BOOLEAN CoverageSamplerInformationClass;
	UCHAR MajorVersion;
	UCHAR MinorVersion;
	UCHAR Reserved;
	HANDLE SamplerHandle;
} EVENT_TRACE_COVERAGE_SAMPLER_INFORMATION, * PEVENT_TRACE_COVERAGE_SAMPLER_INFORMATION;
typedef struct _SYSTEM_EXCEPTION_INFORMATION
{
	ULONG AlignmentFixupCount;
	ULONG ExceptionDispatchCount;
	ULONG FloatingEmulationCount;
	ULONG ByteWordEmulationCount;
} SYSTEM_EXCEPTION_INFORMATION, * PSYSTEM_EXCEPTION_INFORMATION;
typedef enum _SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS
{
	SystemCrashDumpDisable,
	SystemCrashDumpReconfigure,
	SystemCrashDumpInitializationComplete
} SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS, * PSYSTEM_CRASH_DUMP_CONFIGURATION_CLASS;
typedef struct _SYSTEM_CRASH_DUMP_STATE_INFORMATION
{
	SYSTEM_CRASH_DUMP_CONFIGURATION_CLASS CrashDumpConfigurationClass;
} SYSTEM_CRASH_DUMP_STATE_INFORMATION, * PSYSTEM_CRASH_DUMP_STATE_INFORMATION;
typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION
{
	BOOLEAN KernelDebuggerEnabled;
	BOOLEAN KernelDebuggerNotPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION, * PSYSTEM_KERNEL_DEBUGGER_INFORMATION;
typedef struct _SYSTEM_CONTEXT_SWITCH_INFORMATION
{
	ULONG ContextSwitches;
	ULONG FindAny;
	ULONG FindLast;
	ULONG FindIdeal;
	ULONG IdleAny;
	ULONG IdleCurrent;
	ULONG IdleLast;
	ULONG IdleIdeal;
	ULONG PreemptAny;
	ULONG PreemptCurrent;
	ULONG PreemptLast;
	ULONG SwitchToIdle;
} SYSTEM_CONTEXT_SWITCH_INFORMATION, * PSYSTEM_CONTEXT_SWITCH_INFORMATION;
typedef struct _SYSTEM_REGISTRY_QUOTA_INFORMATION
{
	ULONG RegistryQuotaAllowed;
	ULONG RegistryQuotaUsed;
	SIZE_T PagedPoolSize;
} SYSTEM_REGISTRY_QUOTA_INFORMATION, * PSYSTEM_REGISTRY_QUOTA_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_IDLE_INFORMATION
{
	ULONGLONG IdleTime;
	ULONGLONG C1Time;
	ULONGLONG C2Time;
	ULONGLONG C3Time;
	ULONG C1Transitions;
	ULONG C2Transitions;
	ULONG C3Transitions;
	ULONG Padding;
} SYSTEM_PROCESSOR_IDLE_INFORMATION, * PSYSTEM_PROCESSOR_IDLE_INFORMATION;
typedef struct _SYSTEM_LEGACY_DRIVER_INFORMATION
{
	ULONG VetoType;
	UNICODE_STRING VetoList;
} SYSTEM_LEGACY_DRIVER_INFORMATION, * PSYSTEM_LEGACY_DRIVER_INFORMATION;
typedef struct _SYSTEM_LOOKASIDE_INFORMATION
{
	USHORT CurrentDepth;
	USHORT MaximumDepth;
	ULONG TotalAllocates;
	ULONG AllocateMisses;
	ULONG TotalFrees;
	ULONG FreeMisses;
	ULONG Type;
	ULONG Tag;
	ULONG Size;
} SYSTEM_LOOKASIDE_INFORMATION, * PSYSTEM_LOOKASIDE_INFORMATION;
typedef struct _SYSTEM_RANGE_START_INFORMATION
{
	PVOID SystemRangeStart;
} SYSTEM_RANGE_START_INFORMATION, * PSYSTEM_RANGE_START_INFORMATION;
typedef struct _SYSTEM_VERIFIER_INFORMATION_LEGACY
{
	ULONG NextEntryOffset;
	ULONG Level;
	UNICODE_STRING DriverName;
	ULONG RaiseIrqls;
	ULONG AcquireSpinLocks;
	ULONG SynchronizeExecutions;
	ULONG AllocationsAttempted;
	ULONG AllocationsSucceeded;
	ULONG AllocationsSucceededSpecialPool;
	ULONG AllocationsWithNoTag;
	ULONG TrimRequests;
	ULONG Trims;
	ULONG AllocationsFailed;
	ULONG AllocationsFailedDeliberately;
	ULONG Loads;
	ULONG Unloads;
	ULONG UnTrackedPool;
	ULONG CurrentPagedPoolAllocations;
	ULONG CurrentNonPagedPoolAllocations;
	ULONG PeakPagedPoolAllocations;
	ULONG PeakNonPagedPoolAllocations;
	SIZE_T PagedPoolUsageInBytes;
	SIZE_T NonPagedPoolUsageInBytes;
	SIZE_T PeakPagedPoolUsageInBytes;
	SIZE_T PeakNonPagedPoolUsageInBytes;
} SYSTEM_VERIFIER_INFORMATION_LEGACY, * PSYSTEM_VERIFIER_INFORMATION_LEGACY;
typedef struct _SYSTEM_VERIFIER_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG Level;
	ULONG RuleClasses[2];
	ULONG TriageContext;
	ULONG AreAllDriversBeingVerified;
	UNICODE_STRING DriverName;
	ULONG RaiseIrqls;
	ULONG AcquireSpinLocks;
	ULONG SynchronizeExecutions;
	ULONG AllocationsAttempted;
	ULONG AllocationsSucceeded;
	ULONG AllocationsSucceededSpecialPool;
	ULONG AllocationsWithNoTag;
	ULONG TrimRequests;
	ULONG Trims;
	ULONG AllocationsFailed;
	ULONG AllocationsFailedDeliberately;
	ULONG Loads;
	ULONG Unloads;
	ULONG UnTrackedPool;
	ULONG CurrentPagedPoolAllocations;
	ULONG CurrentNonPagedPoolAllocations;
	ULONG PeakPagedPoolAllocations;
	ULONG PeakNonPagedPoolAllocations;
	SIZE_T PagedPoolUsageInBytes;
	SIZE_T NonPagedPoolUsageInBytes;
	SIZE_T PeakPagedPoolUsageInBytes;
	SIZE_T PeakNonPagedPoolUsageInBytes;
} SYSTEM_VERIFIER_INFORMATION, * PSYSTEM_VERIFIER_INFORMATION;
typedef struct _SYSTEM_SESSION_PROCESS_INFORMATION
{
	ULONG SessionId;
	ULONG SizeOfBuf;
	PVOID Buffer;
} SYSTEM_SESSION_PROCESS_INFORMATION, * PSYSTEM_SESSION_PROCESS_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_POWER_INFORMATION
{
	UCHAR CurrentFrequency;
	UCHAR ThermalLimitFrequency;
	UCHAR ConstantThrottleFrequency;
	UCHAR DegradedThrottleFrequency;
	UCHAR LastBusyFrequency;
	UCHAR LastC3Frequency;
	UCHAR LastAdjustedBusyFrequency;
	UCHAR ProcessorMinThrottle;
	UCHAR ProcessorMaxThrottle;
	ULONG NumberOfFrequencies;
	ULONG PromotionCount;
	ULONG DemotionCount;
	ULONG ErrorCount;
	ULONG RetryCount;
	ULONGLONG CurrentFrequencyTime;
	ULONGLONG CurrentProcessorTime;
	ULONGLONG CurrentProcessorIdleTime;
	ULONGLONG LastProcessorTime;
	ULONGLONG LastProcessorIdleTime;
	ULONGLONG Energy;
} SYSTEM_PROCESSOR_POWER_INFORMATION, * PSYSTEM_PROCESSOR_POWER_INFORMATION;
typedef struct _SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX
{
	PVOID Object;
	ULONG_PTR UniqueProcessId;
	ULONG_PTR HandleValue;
	ULONG GrantedAccess;
	USHORT CreatorBackTraceIndex;
	USHORT ObjectTypeIndex;
	ULONG HandleAttributes;
	ULONG Reserved;
} SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX, * PSYSTEM_HANDLE_TABLE_ENTRY_INFO_EX;
typedef struct _SYSTEM_HANDLE_INFORMATION_EX
{
	ULONG_PTR NumberOfHandles;
	ULONG_PTR Reserved;
	SYSTEM_HANDLE_TABLE_ENTRY_INFO_EX Handles[1];
} SYSTEM_HANDLE_INFORMATION_EX, * PSYSTEM_HANDLE_INFORMATION_EX;
typedef struct _SYSTEM_BIGPOOL_ENTRY
{
	union
	{
		PVOID VirtualAddress;
		ULONG_PTR NonPaged : 1;
	};
	SIZE_T SizeInBytes;
	union
	{
		UCHAR Tag[4];
		ULONG TagUlong;
	};
} SYSTEM_BIGPOOL_ENTRY, * PSYSTEM_BIGPOOL_ENTRY;
typedef struct _SYSTEM_BIGPOOL_INFORMATION
{
	ULONG Count;
	SYSTEM_BIGPOOL_ENTRY AllocatedInfo[1];
} SYSTEM_BIGPOOL_INFORMATION, * PSYSTEM_BIGPOOL_INFORMATION;
typedef struct _SYSTEM_POOL_ENTRY
{
	BOOLEAN Allocated;
	BOOLEAN Spare0;
	USHORT AllocatorBackTraceIndex;
	ULONG Size;
	union
	{
		UCHAR Tag[4];
		ULONG TagUlong;
		PVOID ProcessChargedQuota;
	};
} SYSTEM_POOL_ENTRY, * PSYSTEM_POOL_ENTRY;
typedef struct _SYSTEM_POOL_INFORMATION
{
	SIZE_T TotalSize;
	PVOID FirstEntry;
	USHORT EntryOverhead;
	BOOLEAN PoolTagPresent;
	BOOLEAN Spare0;
	ULONG NumberOfEntries;
	SYSTEM_POOL_ENTRY Entries[1];
} SYSTEM_POOL_INFORMATION, * PSYSTEM_POOL_INFORMATION;
typedef struct _SYSTEM_SESSION_POOLTAG_INFORMATION
{
	SIZE_T NextEntryOffset;
	ULONG SessionId;
	ULONG Count;
	SYSTEM_POOLTAG TagInfo[1];
} SYSTEM_SESSION_POOLTAG_INFORMATION, * PSYSTEM_SESSION_POOLTAG_INFORMATION;
typedef struct _SYSTEM_SESSION_MAPPED_VIEW_INFORMATION
{
	SIZE_T NextEntryOffset;
	ULONG SessionId;
	ULONG ViewFailures;
	SIZE_T NumberOfBytesAvailable;
	SIZE_T NumberOfBytesAvailableContiguous;
} SYSTEM_SESSION_MAPPED_VIEW_INFORMATION, * PSYSTEM_SESSION_MAPPED_VIEW_INFORMATION;
typedef enum _SYSTEM_FIRMWARE_TABLE_ACTION
{
	SystemFirmwareTableEnumerate,
	SystemFirmwareTableGet,
	SystemFirmwareTableMax
} SYSTEM_FIRMWARE_TABLE_ACTION;
typedef struct _SYSTEM_FIRMWARE_TABLE_INFORMATION
{
	ULONG ProviderSignature;
	SYSTEM_FIRMWARE_TABLE_ACTION Action;
	ULONG TableID;
	ULONG TableBufferLength;
	UCHAR TableBuffer[1];
} SYSTEM_FIRMWARE_TABLE_INFORMATION, * PSYSTEM_FIRMWARE_TABLE_INFORMATION;
typedef NTSTATUS(__cdecl* PFNFTH)(
	PSYSTEM_FIRMWARE_TABLE_INFORMATION SystemFirmwareTableInfo
	);
typedef struct _SYSTEM_FIRMWARE_TABLE_HANDLER
{
	ULONG ProviderSignature;
	BOOLEAN Register;
	PFNFTH FirmwareTableHandler;
	PVOID DriverObject;
} SYSTEM_FIRMWARE_TABLE_HANDLER, * PSYSTEM_FIRMWARE_TABLE_HANDLER;
typedef struct _SYSTEM_MEMORY_LIST_INFORMATION
{
	ULONG_PTR ZeroPageCount;
	ULONG_PTR FreePageCount;
	ULONG_PTR ModifiedPageCount;
	ULONG_PTR ModifiedNoWritePageCount;
	ULONG_PTR BadPageCount;
	ULONG_PTR PageCountByPriority[8];
	ULONG_PTR RepurposedPagesByPriority[8];
	ULONG_PTR ModifiedPageCountPageFile;
} SYSTEM_MEMORY_LIST_INFORMATION, * PSYSTEM_MEMORY_LIST_INFORMATION;
typedef enum _SYSTEM_MEMORY_LIST_COMMAND
{
	MemoryCaptureAccessedBits,
	MemoryCaptureAndResetAccessedBits,
	MemoryEmptyWorkingSets,
	MemoryFlushModifiedList,
	MemoryPurgeStandbyList,
	MemoryPurgeLowPriorityStandbyList,
	MemoryCommandMax
} SYSTEM_MEMORY_LIST_COMMAND;
typedef struct _SYSTEM_THREAD_CID_PRIORITY_INFORMATION
{
	CLIENT_ID ClientId;
	KPRIORITY Priority;
} SYSTEM_THREAD_CID_PRIORITY_INFORMATION, * PSYSTEM_THREAD_CID_PRIORITY_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION
{
	ULONGLONG CycleTime;
} SYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION, * PSYSTEM_PROCESSOR_IDLE_CYCLE_TIME_INFORMATION;
typedef struct _SYSTEM_VERIFIER_ISSUE
{
	ULONGLONG IssueType;
	PVOID Address;
	ULONGLONG Parameters[2];
} SYSTEM_VERIFIER_ISSUE, * PSYSTEM_VERIFIER_ISSUE;
typedef struct _SYSTEM_VERIFIER_CANCELLATION_INFORMATION
{
	ULONG CancelProbability;
	ULONG CancelThreshold;
	ULONG CompletionThreshold;
	ULONG CancellationVerifierDisabled;
	ULONG AvailableIssues;
	SYSTEM_VERIFIER_ISSUE Issues[128];
} SYSTEM_VERIFIER_CANCELLATION_INFORMATION, * PSYSTEM_VERIFIER_CANCELLATION_INFORMATION;
typedef struct _SYSTEM_REF_TRACE_INFORMATION
{
	BOOLEAN TraceEnable;
	BOOLEAN TracePermanent;
	UNICODE_STRING TraceProcessName;
	UNICODE_STRING TracePoolTags;
} SYSTEM_REF_TRACE_INFORMATION, * PSYSTEM_REF_TRACE_INFORMATION;
typedef struct _SYSTEM_SPECIAL_POOL_INFORMATION
{
	ULONG PoolTag;
	ULONG Flags;
} SYSTEM_SPECIAL_POOL_INFORMATION, * PSYSTEM_SPECIAL_POOL_INFORMATION;
typedef struct _SYSTEM_PROCESS_ID_INFORMATION
{
	HANDLE ProcessId;
	UNICODE_STRING ImageName;
} SYSTEM_PROCESS_ID_INFORMATION, * PSYSTEM_PROCESS_ID_INFORMATION;
typedef struct _SYSTEM_BOOT_ENVIRONMENT_INFORMATION
{
	GUID BootIdentifier;
	FIRMWARE_TYPE FirmwareType;
	union
	{
		ULONGLONG BootFlags;
		struct
		{
			ULONGLONG DbgMenuOsSelection : 1;
			ULONGLONG DbgHiberBoot : 1;
			ULONGLONG DbgSoftBoot : 1;
			ULONGLONG DbgMeasuredLaunch : 1;
			ULONGLONG DbgMeasuredLaunchCapable : 1;
			ULONGLONG DbgSystemHiveReplace : 1;
			ULONGLONG DbgMeasuredLaunchSmmProtections : 1;
			ULONGLONG DbgMeasuredLaunchSmmLevel : 7;
		};
	};
} SYSTEM_BOOT_ENVIRONMENT_INFORMATION, * PSYSTEM_BOOT_ENVIRONMENT_INFORMATION;
typedef struct _SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION
{
	ULONG FlagsToEnable;
	ULONG FlagsToDisable;
} SYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION, * PSYSTEM_IMAGE_FILE_EXECUTION_OPTIONS_INFORMATION;
typedef struct _SYSTEM_PREFETCH_PATCH_INFORMATION
{
	ULONG PrefetchPatchCount;
} SYSTEM_PREFETCH_PATCH_INFORMATION, * PSYSTEM_PREFETCH_PATCH_INFORMATION;
typedef struct _SYSTEM_VERIFIER_FAULTS_INFORMATION
{
	ULONG Probability;
	ULONG MaxProbability;
	UNICODE_STRING PoolTags;
	UNICODE_STRING Applications;
} SYSTEM_VERIFIER_FAULTS_INFORMATION, * PSYSTEM_VERIFIER_FAULTS_INFORMATION;
typedef struct _SYSTEM_VERIFIER_INFORMATION_EX
{
	ULONG VerifyMode;
	ULONG OptionChanges;
	UNICODE_STRING PreviousBucketName;
	ULONG IrpCancelTimeoutMsec;
	ULONG VerifierExtensionEnabled;
	ULONG Reserved[1];
} SYSTEM_VERIFIER_INFORMATION_EX, * PSYSTEM_VERIFIER_INFORMATION_EX;
typedef struct _SYSTEM_SYSTEM_PARTITION_INFORMATION
{
	UNICODE_STRING SystemPartition;
} SYSTEM_SYSTEM_PARTITION_INFORMATION, * PSYSTEM_SYSTEM_PARTITION_INFORMATION;
typedef struct _SYSTEM_SYSTEM_DISK_INFORMATION
{
	UNICODE_STRING SystemDisk;
} SYSTEM_SYSTEM_DISK_INFORMATION, * PSYSTEM_SYSTEM_DISK_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT
{
	ULONGLONG Hits;
	UCHAR PercentFrequency;
} SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT, * PSYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT;
typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8
{
	ULONG Hits;
	UCHAR PercentFrequency;
} SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8, * PSYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT_WIN8;
typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION
{
	ULONG ProcessorNumber;
	ULONG StateCount;
	SYSTEM_PROCESSOR_PERFORMANCE_HITCOUNT States[1];
} SYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION, * PSYSTEM_PROCESSOR_PERFORMANCE_STATE_DISTRIBUTION;
typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION
{
	ULONG ProcessorCount;
	ULONG Offsets[1];
} SYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION, * PSYSTEM_PROCESSOR_PERFORMANCE_DISTRIBUTION;
typedef struct _SYSTEM_CODEINTEGRITY_INFORMATION
{
	ULONG Length;
	ULONG CodeIntegrityOptions;
} SYSTEM_CODEINTEGRITY_INFORMATION, * PSYSTEM_CODEINTEGRITY_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION
{
	ULONG Operation;
} SYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION, * PSYSTEM_PROCESSOR_MICROCODE_UPDATE_INFORMATION;
typedef enum _SYSTEM_VA_TYPE
{
	SystemVaTypeAll,
	SystemVaTypeNonPagedPool,
	SystemVaTypePagedPool,
	SystemVaTypeSystemCache,
	SystemVaTypeSystemPtes,
	SystemVaTypeSessionSpace,
	SystemVaTypeMax
} SYSTEM_VA_TYPE, * PSYSTEM_VA_TYPE;
typedef struct _SYSTEM_VA_LIST_INFORMATION
{
	SIZE_T VirtualSize;
	SIZE_T VirtualPeak;
	SIZE_T VirtualLimit;
	SIZE_T AllocationFailures;
} SYSTEM_VA_LIST_INFORMATION, * PSYSTEM_VA_LIST_INFORMATION;
typedef enum _SYSTEM_STORE_INFORMATION_CLASS
{
	SystemStoreCompressionInformation = 22
} SYSTEM_STORE_INFORMATION_CLASS;
typedef struct _SYSTEM_STORE_INFORMATION
{
	ULONG Version;
	SYSTEM_STORE_INFORMATION_CLASS StoreInformationClass;
	PVOID Data;
	ULONG Length;
} SYSTEM_STORE_INFORMATION, * PSYSTEM_STORE_INFORMATION;
typedef struct _SYSTEM_STORE_COMPRESSION_INFORMATION
{
	ULONG Version;
	ULONG CompressionPid;
	ULONGLONG CompressionWorkingSetSize;
	ULONGLONG CompressSize;
	ULONGLONG CompressedSize;
	ULONGLONG NonCompressedSize;
} SYSTEM_STORE_COMPRESSION_INFORMATION, * PSYSTEM_STORE_COMPRESSION_INFORMATION;
typedef struct _SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS
{
	HANDLE KeyHandle;
	PUNICODE_STRING ValueNamePointer;
	PULONG RequiredLengthPointer;
	PUCHAR Buffer;
	ULONG BufferLength;
	ULONG Type;
	PUCHAR AppendBuffer;
	ULONG AppendBufferLength;
	BOOLEAN CreateIfDoesntExist;
	BOOLEAN TruncateExistingValue;
} SYSTEM_REGISTRY_APPEND_STRING_PARAMETERS, * PSYSTEM_REGISTRY_APPEND_STRING_PARAMETERS;
typedef struct _SYSTEM_VHD_BOOT_INFORMATION
{
	BOOLEAN OsDiskIsVhd;
	ULONG OsVhdFilePathOffset;
	WCHAR OsVhdParentVolume[1];
} SYSTEM_VHD_BOOT_INFORMATION, * PSYSTEM_VHD_BOOT_INFORMATION;
typedef struct _PS_CPU_QUOTA_QUERY_ENTRY
{
	ULONG SessionId;
	ULONG Weight;
} PS_CPU_QUOTA_QUERY_ENTRY, * PPS_CPU_QUOTA_QUERY_ENTRY;
typedef struct _PS_CPU_QUOTA_QUERY_INFORMATION
{
	ULONG SessionCount;
	PS_CPU_QUOTA_QUERY_ENTRY SessionInformation[1];
} PS_CPU_QUOTA_QUERY_INFORMATION, * PPS_CPU_QUOTA_QUERY_INFORMATION;
typedef struct _SYSTEM_ERROR_PORT_TIMEOUTS
{
	ULONG StartTimeout;
	ULONG CommTimeout;
} SYSTEM_ERROR_PORT_TIMEOUTS, * PSYSTEM_ERROR_PORT_TIMEOUTS;
typedef struct _SYSTEM_LOW_PRIORITY_IO_INFORMATION
{
	ULONG LowPriReadOperations;
	ULONG LowPriWriteOperations;
	ULONG KernelBumpedToNormalOperations;
	ULONG LowPriPagingReadOperations;
	ULONG KernelPagingReadsBumpedToNormal;
	ULONG LowPriPagingWriteOperations;
	ULONG KernelPagingWritesBumpedToNormal;
	ULONG BoostedIrpCount;
	ULONG BoostedPagingIrpCount;
	ULONG BlanketBoostCount;
} SYSTEM_LOW_PRIORITY_IO_INFORMATION, * PSYSTEM_LOW_PRIORITY_IO_INFORMATION;
typedef enum _TPM_BOOT_ENTROPY_RESULT_CODE
{
	TpmBootEntropyStructureUninitialized,
	TpmBootEntropyDisabledByPolicy,
	TpmBootEntropyNoTpmFound,
	TpmBootEntropyTpmError,
	TpmBootEntropySuccess
} TPM_BOOT_ENTROPY_RESULT_CODE;
typedef struct _TPM_BOOT_ENTROPY_NT_RESULT
{
	ULONGLONG Policy;
	TPM_BOOT_ENTROPY_RESULT_CODE ResultCode;
	NTSTATUS ResultStatus;
	ULONGLONG Time;
	ULONG EntropyLength;
	UCHAR EntropyData[40];
} TPM_BOOT_ENTROPY_NT_RESULT, * PTPM_BOOT_ENTROPY_NT_RESULT;
typedef struct _SYSTEM_VERIFIER_COUNTERS_INFORMATION
{
	SYSTEM_VERIFIER_INFORMATION Legacy;
	ULONG RaiseIrqls;
	ULONG AcquireSpinLocks;
	ULONG SynchronizeExecutions;
	ULONG AllocationsWithNoTag;
	ULONG AllocationsFailed;
	ULONG AllocationsFailedDeliberately;
	SIZE_T LockedBytes;
	SIZE_T PeakLockedBytes;
	SIZE_T MappedLockedBytes;
	SIZE_T PeakMappedLockedBytes;
	SIZE_T MappedIoSpaceBytes;
	SIZE_T PeakMappedIoSpaceBytes;
	SIZE_T PagesForMdlBytes;
	SIZE_T PeakPagesForMdlBytes;
	SIZE_T ContiguousMemoryBytes;
	SIZE_T PeakContiguousMemoryBytes;
	ULONG ExecutePoolTypes;
	ULONG ExecutePageProtections;
	ULONG ExecutePageMappings;
	ULONG ExecuteWriteSections;
	ULONG SectionAlignmentFailures;
	ULONG UnsupportedRelocs;
	ULONG IATInExecutableSection;
} SYSTEM_VERIFIER_COUNTERS_INFORMATION, * PSYSTEM_VERIFIER_COUNTERS_INFORMATION;
typedef struct _SYSTEM_ACPI_AUDIT_INFORMATION
{
	ULONG RsdpCount;
	ULONG SameRsdt : 1;
	ULONG SlicPresent : 1;
	ULONG SlicDifferent : 1;
} SYSTEM_ACPI_AUDIT_INFORMATION, * PSYSTEM_ACPI_AUDIT_INFORMATION;
typedef struct _SYSTEM_BASIC_PERFORMANCE_INFORMATION
{
	SIZE_T AvailablePages;
	SIZE_T CommittedPages;
	SIZE_T CommitLimit;
	SIZE_T PeakCommitment;
} SYSTEM_BASIC_PERFORMANCE_INFORMATION, * PSYSTEM_BASIC_PERFORMANCE_INFORMATION;
typedef struct _QUERY_PERFORMANCE_COUNTER_FLAGS
{
	union
	{
		struct
		{
			ULONG KernelTransition : 1;
			ULONG Reserved : 31;
		};
		ULONG ul;
	};
} QUERY_PERFORMANCE_COUNTER_FLAGS;
typedef struct _SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION
{
	ULONG Version;
	QUERY_PERFORMANCE_COUNTER_FLAGS Flags;
	QUERY_PERFORMANCE_COUNTER_FLAGS ValidFlags;
} SYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION, * PSYSTEM_QUERY_PERFORMANCE_COUNTER_INFORMATION;
typedef enum _SYSTEM_PIXEL_FORMAT
{
	SystemPixelFormatUnknown,
	SystemPixelFormatR8G8B8,
	SystemPixelFormatR8G8B8X8,
	SystemPixelFormatB8G8R8,
	SystemPixelFormatB8G8R8X8
} SYSTEM_PIXEL_FORMAT;
typedef struct _SYSTEM_BOOT_GRAPHICS_INFORMATION
{
	LARGE_INTEGER FrameBuffer;
	ULONG Width;
	ULONG Height;
	ULONG PixelStride;
	ULONG Flags;
	SYSTEM_PIXEL_FORMAT Format;
	ULONG DisplayRotation;
} SYSTEM_BOOT_GRAPHICS_INFORMATION, * PSYSTEM_BOOT_GRAPHICS_INFORMATION;
typedef struct _MEMORY_SCRUB_INFORMATION
{
	HANDLE Handle;
	ULONG PagesScrubbed;
} MEMORY_SCRUB_INFORMATION, * PMEMORY_SCRUB_INFORMATION;
typedef struct _PEBS_DS_SAVE_AREA32
{
	ULONG BtsBufferBase;
	ULONG BtsIndex;
	ULONG BtsAbsoluteMaximum;
	ULONG BtsInterruptThreshold;
	ULONG PebsBufferBase;
	ULONG PebsIndex;
	ULONG PebsAbsoluteMaximum;
	ULONG PebsInterruptThreshold;
	ULONG PebsGpCounterReset[8];
	ULONG PebsFixedCounterReset[4];
} PEBS_DS_SAVE_AREA32, * PPEBS_DS_SAVE_AREA32;
typedef struct _PEBS_DS_SAVE_AREA64
{
	ULONGLONG BtsBufferBase;
	ULONGLONG BtsIndex;
	ULONGLONG BtsAbsoluteMaximum;
	ULONGLONG BtsInterruptThreshold;
	ULONGLONG PebsBufferBase;
	ULONGLONG PebsIndex;
	ULONGLONG PebsAbsoluteMaximum;
	ULONGLONG PebsInterruptThreshold;
	ULONGLONG PebsGpCounterReset[8];
	ULONGLONG PebsFixedCounterReset[4];
} PEBS_DS_SAVE_AREA64, * PPEBS_DS_SAVE_AREA64;
typedef union _PEBS_DS_SAVE_AREA
{
	PEBS_DS_SAVE_AREA32 As32Bit;
	PEBS_DS_SAVE_AREA64 As64Bit;
} PEBS_DS_SAVE_AREA, * PPEBS_DS_SAVE_AREA;
typedef struct _PROCESSOR_PROFILE_CONTROL_AREA
{
	PEBS_DS_SAVE_AREA PebsDsSaveArea;
} PROCESSOR_PROFILE_CONTROL_AREA, * PPROCESSOR_PROFILE_CONTROL_AREA;
typedef struct _SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA
{
	PROCESSOR_PROFILE_CONTROL_AREA ProcessorProfileControlArea;
	BOOLEAN Allocate;
} SYSTEM_PROCESSOR_PROFILE_CONTROL_AREA, * PSYSTEM_PROCESSOR_PROFILE_CONTROL_AREA;
typedef struct _MEMORY_COMBINE_INFORMATION
{
	HANDLE Handle;
	ULONG_PTR PagesCombined;
} MEMORY_COMBINE_INFORMATION, * PMEMORY_COMBINE_INFORMATION;
typedef struct _MEMORY_COMBINE_INFORMATION_EX
{
	HANDLE Handle;
	ULONG_PTR PagesCombined;
	ULONG Flags;
} MEMORY_COMBINE_INFORMATION_EX, * PMEMORY_COMBINE_INFORMATION_EX;
typedef struct _MEMORY_COMBINE_INFORMATION_EX2
{
	HANDLE Handle;
	ULONG_PTR PagesCombined;
	ULONG Flags;
	HANDLE ProcessHandle;
} MEMORY_COMBINE_INFORMATION_EX2, * PMEMORY_COMBINE_INFORMATION_EX2;
typedef struct _SYSTEM_CONSOLE_INFORMATION
{
	ULONG DriverLoaded : 1;
	ULONG Spare : 31;
} SYSTEM_CONSOLE_INFORMATION, * PSYSTEM_CONSOLE_INFORMATION;
typedef struct _SYSTEM_PLATFORM_BINARY_INFORMATION
{
	ULONG64 PhysicalAddress;
	PVOID HandoffBuffer;
	PVOID CommandLineBuffer;
	ULONG HandoffBufferSize;
	ULONG CommandLineBufferSize;
} SYSTEM_PLATFORM_BINARY_INFORMATION, * PSYSTEM_PLATFORM_BINARY_INFORMATION;
typedef struct _SYSTEM_POLICY_INFORMATION
{
	PVOID InputData;
	PVOID OutputData;
	ULONG InputDataSize;
	ULONG OutputDataSize;
	ULONG Version;
} SYSTEM_POLICY_INFORMATION, * PSYSTEM_POLICY_INFORMATION;
typedef struct _SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION
{
	ULONG NumberOfLogicalProcessors;
	ULONG NumberOfCores;
} SYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION, * PSYSTEM_HYPERVISOR_PROCESSOR_COUNT_INFORMATION;
typedef struct _SYSTEM_DEVICE_DATA_INFORMATION
{
	UNICODE_STRING DeviceId;
	UNICODE_STRING DataName;
	ULONG DataType;
	ULONG DataBufferLength;
	PVOID DataBuffer;
} SYSTEM_DEVICE_DATA_INFORMATION, * PSYSTEM_DEVICE_DATA_INFORMATION;
typedef struct _PHYSICAL_CHANNEL_RUN
{
	ULONG NodeNumber;
	ULONG ChannelNumber;
	ULONGLONG BasePage;
	ULONGLONG PageCount;
	ULONG Flags;
} PHYSICAL_CHANNEL_RUN, * PPHYSICAL_CHANNEL_RUN;
typedef struct _SYSTEM_MEMORY_TOPOLOGY_INFORMATION
{
	ULONGLONG NumberOfRuns;
	ULONG NumberOfNodes;
	ULONG NumberOfChannels;
	PHYSICAL_CHANNEL_RUN Run[1];
} SYSTEM_MEMORY_TOPOLOGY_INFORMATION, * PSYSTEM_MEMORY_TOPOLOGY_INFORMATION;
typedef struct _SYSTEM_MEMORY_CHANNEL_INFORMATION
{
	ULONG ChannelNumber;
	ULONG ChannelHeatIndex;
	ULONGLONG TotalPageCount;
	ULONGLONG ZeroPageCount;
	ULONGLONG FreePageCount;
	ULONGLONG StandbyPageCount;
} SYSTEM_MEMORY_CHANNEL_INFORMATION, * PSYSTEM_MEMORY_CHANNEL_INFORMATION;
typedef struct _SYSTEM_BOOT_LOGO_INFORMATION
{
	ULONG Flags;
	ULONG BitmapOffset;
} SYSTEM_BOOT_LOGO_INFORMATION, * PSYSTEM_BOOT_LOGO_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX
{
	LARGE_INTEGER IdleTime;
	LARGE_INTEGER KernelTime;
	LARGE_INTEGER UserTime;
	LARGE_INTEGER DpcTime;
	LARGE_INTEGER InterruptTime;
	ULONG InterruptCount;
	ULONG Spare0;
	LARGE_INTEGER AvailableTime;
	LARGE_INTEGER Spare1;
	LARGE_INTEGER Spare2;
} SYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX, * PSYSTEM_PROCESSOR_PERFORMANCE_INFORMATION_EX;
typedef struct _SYSTEM_SECUREBOOT_POLICY_INFORMATION
{
	GUID PolicyPublisher;
	ULONG PolicyVersion;
	ULONG PolicyOptions;
} SYSTEM_SECUREBOOT_POLICY_INFORMATION, * PSYSTEM_SECUREBOOT_POLICY_INFORMATION;
typedef struct _SYSTEM_PAGEFILE_INFORMATION_EX
{
	union
	{
		SYSTEM_PAGEFILE_INFORMATION Info;
		struct
		{
			ULONG NextEntryOffset;
			ULONG TotalSize;
			ULONG TotalInUse;
			ULONG PeakUsage;
			UNICODE_STRING PageFileName;
		};
	};
	ULONG MinimumSize;
	ULONG MaximumSize;
} SYSTEM_PAGEFILE_INFORMATION_EX, * PSYSTEM_PAGEFILE_INFORMATION_EX;
typedef struct _SYSTEM_SECUREBOOT_INFORMATION
{
	BOOLEAN SecureBootEnabled;
	BOOLEAN SecureBootCapable;
} SYSTEM_SECUREBOOT_INFORMATION, * PSYSTEM_SECUREBOOT_INFORMATION;
typedef struct _PROCESS_DISK_COUNTERS
{
	ULONGLONG BytesRead;
	ULONGLONG BytesWritten;
	ULONGLONG ReadOperationCount;
	ULONGLONG WriteOperationCount;
	ULONGLONG FlushOperationCount;
} PROCESS_DISK_COUNTERS, * PPROCESS_DISK_COUNTERS;
typedef union _ENERGY_STATE_DURATION
{
	union
	{
		ULONGLONG Value;
		ULONG LastChangeTime;
	};
	ULONG Duration : 31;
	ULONG IsInState : 1;
} ENERGY_STATE_DURATION, * PENERGY_STATE_DURATION;
typedef struct _PROCESS_ENERGY_VALUES
{
	ULONGLONG Cycles[4][2];
	ULONGLONG DiskEnergy;
	ULONGLONG NetworkTailEnergy;
	ULONGLONG MBBTailEnergy;
	ULONGLONG NetworkTxRxBytes;
	ULONGLONG MBBTxRxBytes;
	union
	{
		ENERGY_STATE_DURATION Durations[3];
		struct
		{
			ENERGY_STATE_DURATION ForegroundDuration;
			ENERGY_STATE_DURATION DesktopVisibleDuration;
			ENERGY_STATE_DURATION PSMForegroundDuration;
		};
	};
	ULONG CompositionRendered;
	ULONG CompositionDirtyGenerated;
	ULONG CompositionDirtyPropagated;
	ULONG Reserved1;
	ULONGLONG AttributedCycles[4][2];
	ULONGLONG WorkOnBehalfCycles[4][2];
} PROCESS_ENERGY_VALUES, * PPROCESS_ENERGY_VALUES;
typedef struct _TIMELINE_BITMAP
{
	ULONGLONG Value;
	ULONG EndTime;
	ULONG Bitmap;
} TIMELINE_BITMAP, * PTIMELINE_BITMAP;
typedef struct _PROCESS_ENERGY_VALUES_EXTENSION
{
	union
	{
		TIMELINE_BITMAP Timelines[14];
		struct
		{
			TIMELINE_BITMAP CpuTimeline;
			TIMELINE_BITMAP DiskTimeline;
			TIMELINE_BITMAP NetworkTimeline;
			TIMELINE_BITMAP MBBTimeline;
			TIMELINE_BITMAP ForegroundTimeline;
			TIMELINE_BITMAP DesktopVisibleTimeline;
			TIMELINE_BITMAP CompositionRenderedTimeline;
			TIMELINE_BITMAP CompositionDirtyGeneratedTimeline;
			TIMELINE_BITMAP CompositionDirtyPropagatedTimeline;
			TIMELINE_BITMAP InputTimeline;
			TIMELINE_BITMAP AudioInTimeline;
			TIMELINE_BITMAP AudioOutTimeline;
			TIMELINE_BITMAP DisplayRequiredTimeline;
			TIMELINE_BITMAP KeyboardInputTimeline;
		};
	};
	union
	{
		ENERGY_STATE_DURATION Durations[5];
		struct
		{
			ENERGY_STATE_DURATION InputDuration;
			ENERGY_STATE_DURATION AudioInDuration;
			ENERGY_STATE_DURATION AudioOutDuration;
			ENERGY_STATE_DURATION DisplayRequiredDuration;
			ENERGY_STATE_DURATION PSMBackgroundDuration;
		};
	};
	ULONG KeyboardInput;
	ULONG MouseInput;
} PROCESS_ENERGY_VALUES_EXTENSION, * PPROCESS_ENERGY_VALUES_EXTENSION;
typedef struct _PROCESS_EXTENDED_ENERGY_VALUES
{
	PROCESS_ENERGY_VALUES Base;
	PROCESS_ENERGY_VALUES_EXTENSION Extension;
} PROCESS_EXTENDED_ENERGY_VALUES, * PPROCESS_EXTENDED_ENERGY_VALUES;
typedef enum _SYSTEM_PROCESS_CLASSIFICATION
{
	SystemProcessClassificationNormal,
	SystemProcessClassificationSystem,
	SystemProcessClassificationSecureSystem,
	SystemProcessClassificationMemCompression,
	SystemProcessClassificationRegistry,
	SystemProcessClassificationMaximum
} SYSTEM_PROCESS_CLASSIFICATION;
typedef struct _SYSTEM_PROCESS_INFORMATION_EXTENSION
{
	PROCESS_DISK_COUNTERS DiskCounters;
	ULONGLONG ContextSwitches;
	union
	{
		ULONG Flags;
		struct
		{
			ULONG HasStrongId : 1;
			ULONG Classification : 4;
			ULONG BackgroundActivityModerated : 1;
			ULONG Spare : 26;
		};
	};
	ULONG UserSidOffset;
	ULONG PackageFullNameOffset;
	PROCESS_ENERGY_VALUES EnergyValues;
	ULONG AppIdOffset;
	SIZE_T SharedCommitCharge;
	ULONG JobObjectId;
	ULONG SpareUlong;
	ULONGLONG ProcessSequenceNumber;
} SYSTEM_PROCESS_INFORMATION_EXTENSION, * PSYSTEM_PROCESS_INFORMATION_EXTENSION;
typedef struct _SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION
{
	BOOLEAN EfiLauncherEnabled;
} SYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION, * PSYSTEM_PORTABLE_WORKSPACE_EFI_LAUNCHER_INFORMATION;
typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX
{
	BOOLEAN DebuggerAllowed;
	BOOLEAN DebuggerEnabled;
	BOOLEAN DebuggerPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION_EX, * PSYSTEM_KERNEL_DEBUGGER_INFORMATION_EX;
typedef struct _SYSTEM_ELAM_CERTIFICATE_INFORMATION
{
	HANDLE ElamDriverFile;
} SYSTEM_ELAM_CERTIFICATE_INFORMATION, * PSYSTEM_ELAM_CERTIFICATE_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_FEATURES_INFORMATION
{
	ULONGLONG ProcessorFeatureBits;
	ULONGLONG Reserved[3];
} SYSTEM_PROCESSOR_FEATURES_INFORMATION, * PSYSTEM_PROCESSOR_FEATURES_INFORMATION;
typedef struct _SYSTEM_MANUFACTURING_INFORMATION
{
	ULONG Options;
	UNICODE_STRING ProfileName;
} SYSTEM_MANUFACTURING_INFORMATION, * PSYSTEM_MANUFACTURING_INFORMATION;
typedef struct _SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION
{
	BOOLEAN Enabled;
} SYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION, * PSYSTEM_ENERGY_ESTIMATION_CONFIG_INFORMATION;
typedef struct _HV_DETAILS
{
	ULONG Data[4];
} HV_DETAILS, * PHV_DETAILS;
typedef struct _SYSTEM_HYPERVISOR_DETAIL_INFORMATION
{
	HV_DETAILS HvVendorAndMaxFunction;
	HV_DETAILS HypervisorInterface;
	HV_DETAILS HypervisorVersion;
	HV_DETAILS HvFeatures;
	HV_DETAILS HwFeatures;
	HV_DETAILS EnlightenmentInfo;
	HV_DETAILS ImplementationLimits;
} SYSTEM_HYPERVISOR_DETAIL_INFORMATION, * PSYSTEM_HYPERVISOR_DETAIL_INFORMATION;
typedef struct _SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION
{
	ULONGLONG Cycles[2][4];
} SYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION, * PSYSTEM_PROCESSOR_CYCLE_STATS_INFORMATION;
typedef struct _SYSTEM_TPM_INFORMATION
{
	ULONG Flags;
} SYSTEM_TPM_INFORMATION, * PSYSTEM_TPM_INFORMATION;
typedef struct _SYSTEM_VSM_PROTECTION_INFORMATION
{
	BOOLEAN DmaProtectionsAvailable;
	BOOLEAN DmaProtectionsInUse;
	BOOLEAN HardwareMbecAvailable;
	BOOLEAN ApicVirtualizationAvailable;
} SYSTEM_VSM_PROTECTION_INFORMATION, * PSYSTEM_VSM_PROTECTION_INFORMATION;
typedef struct _SYSTEM_KERNEL_DEBUGGER_FLAGS
{
	BOOLEAN KernelDebuggerIgnoreUmExceptions;
} SYSTEM_KERNEL_DEBUGGER_FLAGS, * PSYSTEM_KERNEL_DEBUGGER_FLAGS;
typedef struct _SYSTEM_CODEINTEGRITYPOLICY_INFORMATION
{
	ULONG Options;
	ULONG HVCIOptions;
	ULONGLONG Version;
	GUID PolicyGuid;
} SYSTEM_CODEINTEGRITYPOLICY_INFORMATION, * PSYSTEM_CODEINTEGRITYPOLICY_INFORMATION;
typedef struct _SYSTEM_ISOLATED_USER_MODE_INFORMATION
{
	BOOLEAN SecureKernelRunning : 1;
	BOOLEAN HvciEnabled : 1;
	BOOLEAN HvciStrictMode : 1;
	BOOLEAN DebugEnabled : 1;
	BOOLEAN FirmwarePageProtection : 1;
	BOOLEAN EncryptionKeyAvailable : 1;
	BOOLEAN SpareFlags : 2;
	BOOLEAN TrustletRunning : 1;
	BOOLEAN HvciDisableAllowed : 1;
	BOOLEAN SpareFlags2 : 6;
	BOOLEAN Spare0[6];
	ULONGLONG Spare1;
} SYSTEM_ISOLATED_USER_MODE_INFORMATION, * PSYSTEM_ISOLATED_USER_MODE_INFORMATION;
typedef struct _SYSTEM_SINGLE_MODULE_INFORMATION
{
	PVOID TargetModuleAddress;
	RTL_PROCESS_MODULE_INFORMATION_EX ExInfo;
} SYSTEM_SINGLE_MODULE_INFORMATION, * PSYSTEM_SINGLE_MODULE_INFORMATION;
typedef struct _SYSTEM_INTERRUPT_CPU_SET_INFORMATION
{
	ULONG Gsiv;
	USHORT Group;
	ULONGLONG CpuSets;
} SYSTEM_INTERRUPT_CPU_SET_INFORMATION, * PSYSTEM_INTERRUPT_CPU_SET_INFORMATION;
typedef struct _SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION
{
	SYSTEM_SECUREBOOT_POLICY_INFORMATION PolicyInformation;
	ULONG PolicySize;
	UCHAR Policy[1];
} SYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION, * PSYSTEM_SECUREBOOT_POLICY_FULL_INFORMATION;
typedef struct _SYSTEM_ROOT_SILO_INFORMATION
{
	ULONG NumberOfSilos;
	ULONG SiloIdList[1];
} SYSTEM_ROOT_SILO_INFORMATION, * PSYSTEM_ROOT_SILO_INFORMATION;
typedef struct _SYSTEM_CPU_SET_TAG_INFORMATION
{
	ULONGLONG Tag;
	ULONGLONG CpuSets[1];
} SYSTEM_CPU_SET_TAG_INFORMATION, * PSYSTEM_CPU_SET_TAG_INFORMATION;
typedef struct _SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION
{
	ULONG ExtentCount;
	ULONG ValidStructureSize;
	ULONG NextExtentIndex;
	ULONG ExtentRestart;
	ULONG CycleCount;
	ULONG TimeoutCount;
	ULONGLONG CycleTime;
	ULONGLONG CycleTimeMax;
	ULONGLONG ExtentTime;
	ULONG ExtentTimeIndex;
	ULONG ExtentTimeMaxIndex;
	ULONGLONG ExtentTimeMax;
	ULONGLONG HyperFlushTimeMax;
	ULONGLONG TranslateVaTimeMax;
	ULONGLONG DebugExemptionCount;
	ULONGLONG TbHitCount;
	ULONGLONG TbMissCount;
	ULONGLONG VinaPendingYield;
	ULONGLONG HashCycles;
	ULONG HistogramOffset;
	ULONG HistogramBuckets;
	ULONG HistogramShift;
	ULONG Reserved1;
	ULONGLONG PageNotPresentCount;
} SYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION, * PSYSTEM_SECURE_KERNEL_HYPERGUARD_PROFILE_INFORMATION;
typedef struct _SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION
{
	ULONG PlatformManifestSize;
	UCHAR PlatformManifest[1];
} SYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION, * PSYSTEM_SECUREBOOT_PLATFORM_MANIFEST_INFORMATION;
typedef struct _SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT
{
	ULONG Gsiv;
	UCHAR ControllerInterrupt;
	UCHAR EdgeInterrupt;
	UCHAR IsPrimaryInterrupt;
	GROUP_AFFINITY TargetAffinity;
} SYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT, * PSYSTEM_INTERRUPT_STEERING_INFORMATION_INPUT;
typedef struct _SYSTEM_MEMORY_USAGE_INFORMATION
{
	ULONGLONG TotalPhysicalBytes;
	ULONGLONG AvailableBytes;
	LONGLONG ResidentAvailableBytes;
	ULONGLONG CommittedBytes;
	ULONGLONG SharedCommittedBytes;
	ULONGLONG CommitLimitBytes;
	ULONGLONG PeakCommitmentBytes;
} SYSTEM_MEMORY_USAGE_INFORMATION, * PSYSTEM_MEMORY_USAGE_INFORMATION;
typedef struct _SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION
{
	HANDLE ImageFile;
	ULONG Type;
} SYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION, * PSYSTEM_CODEINTEGRITY_CERTIFICATE_INFORMATION;
typedef struct _SYSTEM_PHYSICAL_MEMORY_INFORMATION
{
	ULONGLONG TotalPhysicalBytes;
	ULONGLONG LowestPhysicalAddress;
	ULONGLONG HighestPhysicalAddress;
} SYSTEM_PHYSICAL_MEMORY_INFORMATION, * PSYSTEM_PHYSICAL_MEMORY_INFORMATION;
typedef enum _SYSTEM_ACTIVITY_MODERATION_STATE
{
	SystemActivityModerationStateSystemManaged,
	SystemActivityModerationStateUserManagedAllowThrottling,
	SystemActivityModerationStateUserManagedDisableThrottling,
	MaxSystemActivityModerationState
} SYSTEM_ACTIVITY_MODERATION_STATE;
typedef struct _SYSTEM_ACTIVITY_MODERATION_EXE_STATE
{
	UNICODE_STRING ExePathNt;
	SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
} SYSTEM_ACTIVITY_MODERATION_EXE_STATE, * PSYSTEM_ACTIVITY_MODERATION_EXE_STATE;
typedef enum _SYSTEM_ACTIVITY_MODERATION_APP_TYPE
{
	SystemActivityModerationAppTypeClassic,
	SystemActivityModerationAppTypePackaged,
	MaxSystemActivityModerationAppType
} SYSTEM_ACTIVITY_MODERATION_APP_TYPE;
typedef struct _SYSTEM_ACTIVITY_MODERATION_INFO
{
	UNICODE_STRING Identifier;
	SYSTEM_ACTIVITY_MODERATION_STATE ModerationState;
	SYSTEM_ACTIVITY_MODERATION_APP_TYPE AppType;
} SYSTEM_ACTIVITY_MODERATION_INFO, * PSYSTEM_ACTIVITY_MODERATION_INFO;
typedef struct _SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS
{
	HANDLE UserKeyHandle;
} SYSTEM_ACTIVITY_MODERATION_USER_SETTINGS, * PSYSTEM_ACTIVITY_MODERATION_USER_SETTINGS;
typedef struct _SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION
{
	union
	{
		ULONG Flags;
		struct
		{
			ULONG Locked : 1;
			ULONG UnlockApplied : 1;
			ULONG UnlockIdValid : 1;
			ULONG Reserved : 29;
		};
	};
	UCHAR UnlockId[32];
} SYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION, * PSYSTEM_CODEINTEGRITY_UNLOCK_INFORMATION;
typedef struct _SYSTEM_FLUSH_INFORMATION
{
	ULONG SupportedFlushMethods;
	ULONG ProcessorCacheFlushSize;
	ULONGLONG SystemFlushCapabilities;
	ULONGLONG Reserved[2];
} SYSTEM_FLUSH_INFORMATION, * PSYSTEM_FLUSH_INFORMATION;
typedef struct _SYSTEM_WRITE_CONSTRAINT_INFORMATION
{
	ULONG WriteConstraintPolicy;
	ULONG Reserved;
} SYSTEM_WRITE_CONSTRAINT_INFORMATION, * PSYSTEM_WRITE_CONSTRAINT_INFORMATION;
typedef struct _SYSTEM_KERNEL_VA_SHADOW_INFORMATION
{
	union
	{
		ULONG KvaShadowFlags;
		struct
		{
			ULONG KvaShadowEnabled : 1;
			ULONG KvaShadowUserGlobal : 1;
			ULONG KvaShadowPcid : 1;
			ULONG KvaShadowInvpcid : 1;
			ULONG KvaShadowRequired : 1;
			ULONG KvaShadowRequiredAvailable : 1;
			ULONG InvalidPteBit : 6;
			ULONG L1DataCacheFlushSupported : 1;
			ULONG L1TerminalFaultMitigationPresent : 1;
			ULONG Reserved : 18;
		};
	};
} SYSTEM_KERNEL_VA_SHADOW_INFORMATION, * PSYSTEM_KERNEL_VA_SHADOW_INFORMATION;
typedef struct _SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION
{
	HANDLE FileHandle;
	ULONG ImageSize;
	PVOID Image;
} SYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION, * PSYSTEM_CODEINTEGRITYVERIFICATION_INFORMATION;
typedef struct _SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION
{
	PVOID HypervisorSharedUserVa;
} SYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION, * PSYSTEM_HYPERVISOR_SHARED_PAGE_INFORMATION;
typedef struct _SYSTEM_FIRMWARE_PARTITION_INFORMATION
{
	UNICODE_STRING FirmwarePartition;
} SYSTEM_FIRMWARE_PARTITION_INFORMATION, * PSYSTEM_FIRMWARE_PARTITION_INFORMATION;
typedef struct _SYSTEM_SPECULATION_CONTROL_INFORMATION
{
	union
	{
		ULONG Flags;
		struct
		{
			ULONG BpbEnabled : 1;
			ULONG BpbDisabledSystemPolicy : 1;
			ULONG BpbDisabledNoHardwareSupport : 1;
			ULONG SpecCtrlEnumerated : 1;
			ULONG SpecCmdEnumerated : 1;
			ULONG IbrsPresent : 1;
			ULONG StibpPresent : 1;
			ULONG SmepPresent : 1;
			ULONG SpeculativeStoreBypassDisableAvailable : 1;
			ULONG SpeculativeStoreBypassDisableSupported : 1;
			ULONG SpeculativeStoreBypassDisabledSystemWide : 1;
			ULONG SpeculativeStoreBypassDisabledKernel : 1;
			ULONG SpeculativeStoreBypassDisableRequired : 1;
			ULONG BpbDisabledKernelToUser : 1;
			ULONG SpecCtrlRetpolineEnabled : 1;
			ULONG SpecCtrlImportOptimizationEnabled : 1;
			ULONG EnhancedIbrs : 1;
			ULONG HvL1tfStatusAvailable : 1;
			ULONG HvL1tfProcessorNotAffected : 1;
			ULONG HvL1tfMigitationEnabled : 1;
			ULONG HvL1tfMigitationNotEnabled_Hardware : 1;
			ULONG HvL1tfMigitationNotEnabled_LoadOption : 1;
			ULONG HvL1tfMigitationNotEnabled_CoreScheduler : 1;
			ULONG EnhancedIbrsReported : 1;
			ULONG MdsHardwareProtected : 1;
			ULONG MbClearEnabled : 1;
			ULONG MbClearReported : 1;
			ULONG Reserved : 5;
		};
	};
} SYSTEM_SPECULATION_CONTROL_INFORMATION, * PSYSTEM_SPECULATION_CONTROL_INFORMATION;
typedef struct _SYSTEM_DMA_GUARD_POLICY_INFORMATION
{
	BOOLEAN DmaGuardPolicyEnabled;
} SYSTEM_DMA_GUARD_POLICY_INFORMATION, * PSYSTEM_DMA_GUARD_POLICY_INFORMATION;
typedef struct _SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION
{
	UCHAR EnclaveLaunchSigner[32];
} SYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION, * PSYSTEM_ENCLAVE_LAUNCH_CONTROL_INFORMATION;
typedef struct _SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION
{
	ULONGLONG WorkloadClass;
	ULONGLONG CpuSets[1];
} SYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION, * PSYSTEM_WORKLOAD_ALLOWED_CPU_SET_INFORMATION;
typedef struct _SYSTEM_SECURITY_MODEL_INFORMATION
{
	union
	{
		ULONG SecurityModelFlags;
		struct
		{
			ULONG SModeAdminlessEnabled : 1;
			ULONG AllowDeviceOwnerProtectionDowngrade : 1;
			ULONG Reserved : 30;
		};
	};
} SYSTEM_SECURITY_MODEL_INFORMATION, * PSYSTEM_SECURITY_MODEL_INFORMATION;
typedef struct _SYSTEM_FEATURE_CONFIGURATION_INFORMATION
{
	ULONGLONG ChangeStamp;
	struct _RTL_FEATURE_CONFIGURATION* Configuration;
} SYSTEM_FEATURE_CONFIGURATION_INFORMATION, * PSYSTEM_FEATURE_CONFIGURATION_INFORMATION;
typedef struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY
{
	ULONGLONG ChangeStamp;
	PVOID Section;
	ULONGLONG Size;
} SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY, * PSYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY;
typedef struct _SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION
{
	ULONGLONG OverallChangeStamp;
	SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION_ENTRY Descriptors[3];
} SYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION, * PSYSTEM_FEATURE_CONFIGURATION_SECTIONS_INFORMATION;
typedef union _SECURE_SPECULATION_CONTROL_INFORMATION
{
	ULONG KvaShadowSupported : 1;
	ULONG KvaShadowEnabled : 1;
	ULONG KvaShadowUserGlobal : 1;
	ULONG KvaShadowPcid : 1;
	ULONG MbClearEnabled : 1;
	ULONG L1TFMitigated : 1;
	ULONG BpbEnabled : 1;
	ULONG IbrsPresent : 1;
	ULONG EnhancedIbrs : 1;
	ULONG StibpPresent : 1;
	ULONG SsbdSupported : 1;
	ULONG SsbdRequired : 1;
	ULONG BpbKernelToUser : 1;
	ULONG BpbUserToKernel : 1;
	ULONG Reserved : 18;
} SECURE_SPECULATION_CONTROL_INFORMATION, * PSECURE_SPECULATION_CONTROL_INFORMATION;
typedef struct _SYSTEM_FIRMWARE_RAMDISK_INFORMATION
{
	ULONG Version;
	ULONG BlockSize;
	ULONG_PTR BaseAddress;
	SIZE_T Size;
} SYSTEM_FIRMWARE_RAMDISK_INFORMATION, * PSYSTEM_FIRMWARE_RAMDISK_INFORMATION;
typedef struct _SYSTEM_SHADOW_STACK_INFORMATION
{
	union
	{
		ULONG Flags;
		struct
		{
			ULONG CetCapable : 1;
			ULONG UserCetAllowed : 1;
			ULONG ReservedForUserCet : 6;
			ULONG KernelCetEnabled : 1;
			ULONG KernelCetAuditModeEnabled : 1;
			ULONG ReservedForKernelCet : 6;
			ULONG Reserved : 16;
		};
	};
} SYSTEM_SHADOW_STACK_INFORMATION, * PSYSTEM_SHADOW_STACK_INFORMATION;
typedef union _SYSTEM_BUILD_VERSION_INFORMATION_FLAGS
{
	ULONG Value32;
	struct
	{
		ULONG IsTopLevel : 1;
		ULONG IsChecked : 1;
	};
} SYSTEM_BUILD_VERSION_INFORMATION_FLAGS, * PSYSTEM_BUILD_VERSION_INFORMATION_FLAGS;
typedef struct _SYSTEM_BUILD_VERSION_INFORMATION
{
	USHORT LayerNumber;
	USHORT LayerCount;
	ULONG OsMajorVersion;
	ULONG OsMinorVersion;
	ULONG NtBuildNumber;
	ULONG NtBuildQfe;
	UCHAR LayerName[128];
	UCHAR NtBuildBranch[128];
	UCHAR NtBuildLab[128];
	UCHAR NtBuildLabEx[128];
	UCHAR NtBuildStamp[26];
	UCHAR NtBuildArch[16];
	SYSTEM_BUILD_VERSION_INFORMATION_FLAGS Flags;
} SYSTEM_BUILD_VERSION_INFORMATION, * PSYSTEM_BUILD_VERSION_INFORMATION;
typedef struct _SYSTEM_POOL_LIMIT_MEM_INFO
{
	ULONGLONG MemoryLimit;
	ULONGLONG NotificationLimit;
} SYSTEM_POOL_LIMIT_MEM_INFO, * PSYSTEM_POOL_LIMIT_MEM_INFO;
typedef struct _SYSTEM_POOL_LIMIT_INFO
{
	ULONG PoolTag;
	SYSTEM_POOL_LIMIT_MEM_INFO MemLimits[2];
	WNF_STATE_NAME NotificationHandle;
} SYSTEM_POOL_LIMIT_INFO, * PSYSTEM_POOL_LIMIT_INFO;
typedef struct _SYSTEM_POOL_LIMIT_INFORMATION
{
	ULONG Version;
	ULONG EntryCount;
	SYSTEM_POOL_LIMIT_INFO LimitEntries[1];
} SYSTEM_POOL_LIMIT_INFORMATION, * PSYSTEM_POOL_LIMIT_INFORMATION;

NTSTATUS
__stdcall
NtQuerySystemInformation(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID SystemInformation,
	ULONG SystemInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtQuerySystemInformationEx(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID SystemInformation,
	ULONG SystemInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetSystemInformation(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID SystemInformation,
	ULONG SystemInformationLength
);
typedef enum _SYSDBG_COMMAND
{
	SysDbgQueryModuleInformation,
	SysDbgQueryTraceInformation,
	SysDbgSetTracepoint,
	SysDbgSetSpecialCall,
	SysDbgClearSpecialCalls,
	SysDbgQuerySpecialCalls,
	SysDbgBreakPoint,
	SysDbgQueryVersion,
	SysDbgReadVirtual,
	SysDbgWriteVirtual,
	SysDbgReadPhysical,
	SysDbgWritePhysical,
	SysDbgReadControlSpace,
	SysDbgWriteControlSpace,
	SysDbgReadIoSpace,
	SysDbgWriteIoSpace,
	SysDbgReadMsr,
	SysDbgWriteMsr,
	SysDbgReadBusData,
	SysDbgWriteBusData,
	SysDbgCheckLowMemory,
	SysDbgEnableKernelDebugger,
	SysDbgDisableKernelDebugger,
	SysDbgGetAutoKdEnable,
	SysDbgSetAutoKdEnable,
	SysDbgGetPrintBufferSize,
	SysDbgSetPrintBufferSize,
	SysDbgGetKdUmExceptionEnable,
	SysDbgSetKdUmExceptionEnable,
	SysDbgGetTriageDump,
	SysDbgGetKdBlockEnable,
	SysDbgSetKdBlockEnable,
	SysDbgRegisterForUmBreakInfo,
	SysDbgGetUmBreakPid,
	SysDbgClearUmBreakPid,
	SysDbgGetUmAttachPid,
	SysDbgClearUmAttachPid,
	SysDbgGetLiveKernelDump
} SYSDBG_COMMAND, * PSYSDBG_COMMAND;
typedef struct _SYSDBG_VIRTUAL
{
	PVOID Address;
	PVOID Buffer;
	ULONG Request;
} SYSDBG_VIRTUAL, * PSYSDBG_VIRTUAL;
typedef struct _SYSDBG_PHYSICAL
{
	PHYSICAL_ADDRESS Address;
	PVOID Buffer;
	ULONG Request;
} SYSDBG_PHYSICAL, * PSYSDBG_PHYSICAL;
typedef struct _SYSDBG_CONTROL_SPACE
{
	ULONG64 Address;
	PVOID Buffer;
	ULONG Request;
	ULONG Processor;
} SYSDBG_CONTROL_SPACE, * PSYSDBG_CONTROL_SPACE;
enum _INTERFACE_TYPE;
typedef struct _SYSDBG_IO_SPACE
{
	ULONG64 Address;
	PVOID Buffer;
	ULONG Request;
	enum _INTERFACE_TYPE InterfaceType;
	ULONG BusNumber;
	ULONG AddressSpace;
} SYSDBG_IO_SPACE, * PSYSDBG_IO_SPACE;
typedef struct _SYSDBG_MSR
{
	ULONG Msr;
	ULONG64 Data;
} SYSDBG_MSR, * PSYSDBG_MSR;
enum _BUS_DATA_TYPE;
typedef struct _SYSDBG_BUS_DATA
{
	ULONG Address;
	PVOID Buffer;
	ULONG Request;
	enum _BUS_DATA_TYPE BusDataType;
	ULONG BusNumber;
	ULONG SlotNumber;
} SYSDBG_BUS_DATA, * PSYSDBG_BUS_DATA;
typedef struct _SYSDBG_TRIAGE_DUMP
{
	ULONG Flags;
	ULONG BugCheckCode;
	ULONG_PTR BugCheckParam1;
	ULONG_PTR BugCheckParam2;
	ULONG_PTR BugCheckParam3;
	ULONG_PTR BugCheckParam4;
	ULONG ProcessHandles;
	ULONG ThreadHandles;
	PHANDLE Handles;
} SYSDBG_TRIAGE_DUMP, * PSYSDBG_TRIAGE_DUMP;
typedef union _SYSDBG_LIVEDUMP_CONTROL_FLAGS
{
	struct
	{
		ULONG UseDumpStorageStack : 1;
		ULONG CompressMemoryPagesData : 1;
		ULONG IncludeUserSpaceMemoryPages : 1;
		ULONG AbortIfMemoryPressure : 1;
		ULONG Reserved : 28;
	};
	ULONG AsUlong;
} SYSDBG_LIVEDUMP_CONTROL_FLAGS, * PSYSDBG_LIVEDUMP_CONTROL_FLAGS;
typedef union _SYSDBG_LIVEDUMP_CONTROL_ADDPAGES
{
	struct
	{
		ULONG HypervisorPages : 1;
		ULONG Reserved : 31;
	};
	ULONG AsUlong;
} SYSDBG_LIVEDUMP_CONTROL_ADDPAGES, * PSYSDBG_LIVEDUMP_CONTROL_ADDPAGES;
typedef struct _SYSDBG_LIVEDUMP_CONTROL
{
	ULONG Version;
	ULONG BugCheckCode;
	ULONG_PTR BugCheckParam1;
	ULONG_PTR BugCheckParam2;
	ULONG_PTR BugCheckParam3;
	ULONG_PTR BugCheckParam4;
	HANDLE DumpFileHandle;
	HANDLE CancelEventHandle;
	SYSDBG_LIVEDUMP_CONTROL_FLAGS Flags;
	SYSDBG_LIVEDUMP_CONTROL_ADDPAGES AddPagesControl;
} SYSDBG_LIVEDUMP_CONTROL, * PSYSDBG_LIVEDUMP_CONTROL;

NTSTATUS
__stdcall
NtSystemDebugControl(
	SYSDBG_COMMAND Command,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength,
	PULONG ReturnLength
);
typedef enum _HARDERROR_RESPONSE_OPTION
{
	OptionAbortRetryIgnore,
	OptionOk,
	OptionOkCancel,
	OptionRetryCancel,
	OptionYesNo,
	OptionYesNoCancel,
	OptionShutdownSystem,
	OptionOkNoWait,
	OptionCancelTryContinue
} HARDERROR_RESPONSE_OPTION;
typedef enum _HARDERROR_RESPONSE
{
	ResponseReturnToCaller,
	ResponseNotHandled,
	ResponseAbort,
	ResponseCancel,
	ResponseIgnore,
	ResponseNo,
	ResponseOk,
	ResponseRetry,
	ResponseYes,
	ResponseTryAgain,
	ResponseContinue
} HARDERROR_RESPONSE;

NTSTATUS
__stdcall
NtRaiseHardError(
	NTSTATUS ErrorStatus,
	ULONG NumberOfParameters,
	ULONG UnicodeStringParameterMask,
	PULONG_PTR Parameters,
	ULONG ValidResponseOptions,
	PULONG Response
);
typedef enum _ALTERNATIVE_ARCHITECTURE_TYPE
{
	StandardDesign,
	NEC98x86,
	EndAlternatives
} ALTERNATIVE_ARCHITECTURE_TYPE;
typedef struct _KUSER_SHARED_DATA
{
	ULONG TickCountLowDeprecated;
	ULONG TickCountMultiplier;
	volatile KSYSTEM_TIME InterruptTime;
	volatile KSYSTEM_TIME SystemTime;
	volatile KSYSTEM_TIME TimeZoneBias;
	USHORT ImageNumberLow;
	USHORT ImageNumberHigh;
	WCHAR NtSystemRoot[260];
	ULONG MaxStackTraceDepth;
	ULONG CryptoExponent;
	ULONG TimeZoneId;
	ULONG LargePageMinimum;
	ULONG AitSamplingValue;
	ULONG AppCompatFlag;
	ULONGLONG RNGSeedVersion;
	ULONG GlobalValidationRunlevel;
	LONG TimeZoneBiasStamp;
	ULONG NtBuildNumber;
	NT_PRODUCT_TYPE NtProductType;
	BOOLEAN ProductTypeIsValid;
	UCHAR Reserved0[1];
	USHORT NativeProcessorArchitecture;
	ULONG NtMajorVersion;
	ULONG NtMinorVersion;
	BOOLEAN ProcessorFeatures[64];
	ULONG Reserved1;
	ULONG Reserved3;
	volatile ULONG TimeSlip;
	ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture;
	ULONG BootId;
	LARGE_INTEGER SystemExpirationDate;
	ULONG SuiteMask;
	BOOLEAN KdDebuggerEnabled;
	union
	{
		UCHAR MitigationPolicies;
		struct
		{
			UCHAR NXSupportPolicy : 2;
			UCHAR SEHValidationPolicy : 2;
			UCHAR CurDirDevicesSkippedForDlls : 2;
			UCHAR Reserved : 2;
		};
	};
	USHORT CyclesPerYield;
	volatile ULONG ActiveConsoleId;
	volatile ULONG DismountCount;
	ULONG ComPlusPackage;
	ULONG LastSystemRITEventTickCount;
	ULONG NumberOfPhysicalPages;
	BOOLEAN SafeBootMode;
	UCHAR VirtualizationFlags;
	UCHAR Reserved12[2];
	union
	{
		ULONG SharedDataFlags;
		struct
		{
			ULONG DbgErrorPortPresent : 1;
			ULONG DbgElevationEnabled : 1;
			ULONG DbgVirtEnabled : 1;
			ULONG DbgInstallerDetectEnabled : 1;
			ULONG DbgLkgEnabled : 1;
			ULONG DbgDynProcessorEnabled : 1;
			ULONG DbgConsoleBrokerEnabled : 1;
			ULONG DbgSecureBootEnabled : 1;
			ULONG DbgMultiSessionSku : 1;
			ULONG DbgMultiUsersInSessionSku : 1;
			ULONG DbgStateSeparationEnabled : 1;
			ULONG SpareBits : 21;
		};
	};
	ULONG DataFlagsPad[1];
	ULONGLONG TestRetInstruction;
	LONGLONG QpcFrequency;
	ULONG SystemCall;
	union
	{
		ULONG AllFlags;
		struct
		{
			ULONG Win32Process : 1;
			ULONG Sgx2Enclave : 1;
			ULONG VbsBasicEnclave : 1;
			ULONG SpareBits : 29;
		};
	} UserCetAvailableEnvironments;
	ULONGLONG SystemCallPad[2];
	union
	{
		volatile KSYSTEM_TIME TickCount;
		volatile ULONG64 TickCountQuad;
		struct
		{
			ULONG ReservedTickCountOverlay[3];
			ULONG TickCountPad[1];
		};
	};
	ULONG Cookie;
	ULONG CookiePad[1];
	LONGLONG ConsoleSessionForegroundProcessId;
	ULONGLONG TimeUpdateLock;
	ULONGLONG BaselineSystemTimeQpc;
	ULONGLONG BaselineInterruptTimeQpc;
	ULONGLONG QpcSystemTimeIncrement;
	ULONGLONG QpcInterruptTimeIncrement;
	UCHAR QpcSystemTimeIncrementShift;
	UCHAR QpcInterruptTimeIncrementShift;
	USHORT UnparkedProcessorCount;
	ULONG EnclaveFeatureMask[4];
	ULONG TelemetryCoverageRound;
	USHORT UserModeGlobalLogger[16];
	ULONG ImageFileExecutionOptions;
	ULONG LangGenerationCount;
	ULONGLONG Reserved4;
	volatile ULONG64 InterruptTimeBias;
	volatile ULONG64 QpcBias;
	ULONG ActiveProcessorCount;
	volatile UCHAR ActiveGroupCount;
	UCHAR Reserved9;
	union
	{
		USHORT QpcData;
		struct
		{
			volatile UCHAR QpcBypassEnabled : 1;
			UCHAR QpcShift : 1;
		};
	};
	LARGE_INTEGER TimeZoneBiasEffectiveStart;
	LARGE_INTEGER TimeZoneBiasEffectiveEnd;
	XSTATE_CONFIGURATION XState;
	KSYSTEM_TIME FeatureConfigurationChangeStamp;
	ULONG Spare;
} KUSER_SHARED_DATA, * PKUSER_SHARED_DATA;
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->TickCountMultiplier)) == 0x4) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->InterruptTime)) == 0x8) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->SystemTime)) == 0x14) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->NtSystemRoot)) == 0x30) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->LargePageMinimum)) == 0x244) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->NtProductType)) == 0x264) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->NtMajorVersion)) == 0x26c) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->NtMinorVersion)) == 0x270) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->ProcessorFeatures)) == 0x274) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->KdDebuggerEnabled)) == 0x2d4) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->ActiveConsoleId)) == 0x2d8) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->NumberOfPhysicalPages)) == 0x2e8) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->SafeBootMode)) == 0x2ec) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->TickCount)) == 0x320) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->TickCountQuad)) == 0x320) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((KUSER_SHARED_DATA*)0)->XState)) == 0x3d8) ? 1 : -1];
ULONGLONG NtGetTickCount64();
ULONG NtGetTickCount();

NTSTATUS
__stdcall
NtQueryDefaultLocale(
	BOOLEAN UserProfile,
	PLCID DefaultLocaleId
);

NTSTATUS
__stdcall
NtSetDefaultLocale(
	BOOLEAN UserProfile,
	LCID DefaultLocaleId
);

NTSTATUS
__stdcall
NtQueryInstallUILanguage(
	LANGID* InstallUILanguageId
);

NTSTATUS
__stdcall
NtFlushInstallUILanguage(
	LANGID InstallUILanguage,
	ULONG SetComittedFlag
);

NTSTATUS
__stdcall
NtQueryDefaultUILanguage(
	LANGID* DefaultUILanguageId
);

NTSTATUS
__stdcall
NtSetDefaultUILanguage(
	LANGID DefaultUILanguageId
);

NTSTATUS
__stdcall
NtIsUILanguageComitted(
	void
);

NTSTATUS
__stdcall
NtInitializeNlsFiles(
	PVOID* BaseAddress,
	PLCID DefaultLocaleId,
	PLARGE_INTEGER DefaultCasingTableSize
);

NTSTATUS
__stdcall
NtGetNlsSectionPtr(
	ULONG SectionType,
	ULONG SectionData,
	PVOID ContextData,
	PVOID* SectionPointer,
	PULONG SectionSize
);

NTSTATUS
__stdcall
NtMapCMFModule(
	ULONG What,
	ULONG Index,
	PULONG CacheIndexOut,
	PULONG CacheFlagsOut,
	PULONG ViewSizeOut,
	PVOID* BaseAddress
);

NTSTATUS
__stdcall
NtGetMUIRegistryInfo(
	ULONG Flags,
	PULONG DataSize,
	PVOID Data
);

NTSTATUS
__stdcall
NtAddAtom(
	PWSTR AtomName,
	ULONG Length,
	PRTL_ATOM Atom
);

NTSTATUS
__stdcall
NtFindAtom(
	PWSTR AtomName,
	ULONG Length,
	PRTL_ATOM Atom
);

NTSTATUS
__stdcall
NtDeleteAtom(
	RTL_ATOM Atom
);
typedef enum _ATOM_INFORMATION_CLASS
{
	AtomBasicInformation,
	AtomTableInformation
} ATOM_INFORMATION_CLASS;
typedef struct _ATOM_BASIC_INFORMATION
{
	USHORT UsageCount;
	USHORT Flags;
	USHORT NameLength;
	WCHAR Name[1];
} ATOM_BASIC_INFORMATION, * PATOM_BASIC_INFORMATION;
typedef struct _ATOM_TABLE_INFORMATION
{
	ULONG NumberOfAtoms;
	RTL_ATOM Atoms[1];
} ATOM_TABLE_INFORMATION, * PATOM_TABLE_INFORMATION;

NTSTATUS
__stdcall
NtQueryInformationAtom(
	RTL_ATOM Atom,
	ATOM_INFORMATION_CLASS AtomInformationClass,
	PVOID AtomInformation,
	ULONG AtomInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtQueryLicenseValue(
	PUNICODE_STRING ValueName,
	PULONG Type,
	PVOID Data,
	ULONG DataSize,
	PULONG ResultDataSize
);

NTSTATUS
__stdcall
NtSetDefaultHardErrorPort(
	HANDLE DefaultHardErrorPort
);
typedef enum _SHUTDOWN_ACTION
{
	ShutdownNoReboot,
	ShutdownReboot,
	ShutdownPowerOff
} SHUTDOWN_ACTION;

NTSTATUS
__stdcall
NtShutdownSystem(
	SHUTDOWN_ACTION Action
);

NTSTATUS
__stdcall
NtDisplayString(
	PUNICODE_STRING String
);

NTSTATUS
__stdcall
NtDrawText(
	PUNICODE_STRING Text
);
typedef enum _MEMORY_INFORMATION_CLASS
{
	MemoryBasicInformation,
	MemoryWorkingSetInformation,
	MemoryMappedFilenameInformation,
	MemoryRegionInformation,
	MemoryWorkingSetExInformation,
	MemorySharedCommitInformation,
	MemoryImageInformation,
	MemoryRegionInformationEx,
	MemoryPrivilegedBasicInformation,
	MemoryEnclaveImageInformation,
	MemoryBasicInformationCapped,
	MemoryPhysicalContiguityInformation,
	MaxMemoryInfoClass
} MEMORY_INFORMATION_CLASS;
typedef struct _MEMORY_WORKING_SET_BLOCK
{
	ULONG_PTR Protection : 5;
	ULONG_PTR ShareCount : 3;
	ULONG_PTR Shared : 1;
	ULONG_PTR Node : 3;
	ULONG_PTR VirtualPage : 52;
} MEMORY_WORKING_SET_BLOCK, * PMEMORY_WORKING_SET_BLOCK;
typedef struct _MEMORY_WORKING_SET_INFORMATION
{
	ULONG_PTR NumberOfEntries;
	MEMORY_WORKING_SET_BLOCK WorkingSetInfo[1];
} MEMORY_WORKING_SET_INFORMATION, * PMEMORY_WORKING_SET_INFORMATION;
typedef struct _MEMORY_REGION_INFORMATION
{
	PVOID AllocationBase;
	ULONG AllocationProtect;
	union
	{
		ULONG RegionType;
		struct
		{
			ULONG Private : 1;
			ULONG MappedDataFile : 1;
			ULONG MappedImage : 1;
			ULONG MappedPageFile : 1;
			ULONG MappedPhysical : 1;
			ULONG DirectMapped : 1;
			ULONG SoftwareEnclave : 1;
			ULONG PageSize64K : 1;
			ULONG PlaceholderReservation : 1;
			ULONG Reserved : 23;
		};
	};
	SIZE_T RegionSize;
	SIZE_T CommitSize;
	ULONG_PTR PartitionId;
	ULONG_PTR NodePreference;
} MEMORY_REGION_INFORMATION, * PMEMORY_REGION_INFORMATION;
typedef enum _MEMORY_WORKING_SET_EX_LOCATION
{
	MemoryLocationInvalid,
	MemoryLocationResident,
	MemoryLocationPagefile,
	MemoryLocationReserved
} MEMORY_WORKING_SET_EX_LOCATION;
typedef struct _MEMORY_WORKING_SET_EX_BLOCK
{
	union
	{
		struct
		{
			ULONG_PTR Valid : 1;
			ULONG_PTR ShareCount : 3;
			ULONG_PTR Win32Protection : 11;
			ULONG_PTR Shared : 1;
			ULONG_PTR Node : 6;
			ULONG_PTR Locked : 1;
			ULONG_PTR LargePage : 1;
			ULONG_PTR Priority : 3;
			ULONG_PTR Reserved : 3;
			ULONG_PTR SharedOriginal : 1;
			ULONG_PTR Bad : 1;
			ULONG_PTR Win32GraphicsProtection : 4;
			ULONG_PTR ReservedUlong : 28;
		};
		struct
		{
			ULONG_PTR Valid : 1;
			ULONG_PTR Reserved0 : 14;
			ULONG_PTR Shared : 1;
			ULONG_PTR Reserved1 : 5;
			ULONG_PTR PageTable : 1;
			ULONG_PTR Location : 2;
			ULONG_PTR Priority : 3;
			ULONG_PTR ModifiedList : 1;
			ULONG_PTR Reserved2 : 2;
			ULONG_PTR SharedOriginal : 1;
			ULONG_PTR Bad : 1;
			ULONG_PTR ReservedUlong : 32;
		} Invalid;
	};
} MEMORY_WORKING_SET_EX_BLOCK, * PMEMORY_WORKING_SET_EX_BLOCK;
typedef struct _MEMORY_WORKING_SET_EX_INFORMATION
{
	PVOID VirtualAddress;
	union
	{
		MEMORY_WORKING_SET_EX_BLOCK VirtualAttributes;
		ULONG_PTR Long;
	} u1;
} MEMORY_WORKING_SET_EX_INFORMATION, * PMEMORY_WORKING_SET_EX_INFORMATION;
typedef struct _MEMORY_SHARED_COMMIT_INFORMATION
{
	SIZE_T CommitSize;
} MEMORY_SHARED_COMMIT_INFORMATION, * PMEMORY_SHARED_COMMIT_INFORMATION;
typedef struct _MEMORY_IMAGE_INFORMATION
{
	PVOID ImageBase;
	SIZE_T SizeOfImage;
	union
	{
		ULONG ImageFlags;
		struct
		{
			ULONG ImagePartialMap : 1;
			ULONG ImageNotExecutable : 1;
			ULONG ImageSigningLevel : 4;
			ULONG Reserved : 26;
		};
	};
} MEMORY_IMAGE_INFORMATION, * PMEMORY_IMAGE_INFORMATION;
typedef struct _MEMORY_ENCLAVE_IMAGE_INFORMATION
{
	MEMORY_IMAGE_INFORMATION ImageInfo;
	UCHAR UniqueID[32];
	UCHAR AuthorID[32];
} MEMORY_ENCLAVE_IMAGE_INFORMATION, * PMEMORY_ENCLAVE_IMAGE_INFORMATION;
typedef enum _MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE
{
	MemoryNotContiguous,
	MemoryAlignedAndContiguous,
	MemoryNotResident,
	MemoryNotEligibleToMakeContiguous,
	MemoryContiguityStateMax,
} MEMORY_PHYSICAL_CONTIGUITY_UNIT_STATE;
typedef struct _MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION
{
	union
	{
		ULONG AllInformation;
		struct
		{
			ULONG State : 2;
			ULONG Reserved : 30;
		};
	};
} MEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION, * PMEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION;
typedef struct _MEMORY_PHYSICAL_CONTIGUITY_INFORMATION
{
	PVOID VirtualAddress;
	ULONG_PTR Size;
	ULONG_PTR ContiguityUnitSize;
	ULONG Flags;
	PMEMORY_PHYSICAL_CONTIGUITY_UNIT_INFORMATION ContiguityUnitInformation;
} MEMORY_PHYSICAL_CONTIGUITY_INFORMATION, * PMEMORY_PHYSICAL_CONTIGUITY_INFORMATION;
typedef struct _MEMORY_FRAME_INFORMATION
{
	ULONGLONG UseDescription : 4;
	ULONGLONG ListDescription : 3;
	ULONGLONG Cold : 1;
	ULONGLONG Pinned : 1;
	ULONGLONG DontUse : 48;
	ULONGLONG Priority : 3;
	ULONGLONG Reserved : 4;
} MEMORY_FRAME_INFORMATION;
typedef struct _FILEOFFSET_INFORMATION
{
	ULONGLONG DontUse : 9;
	ULONGLONG Offset : 48;
	ULONGLONG Reserved : 7;
} FILEOFFSET_INFORMATION;
typedef struct _PAGEDIR_INFORMATION
{
	ULONGLONG DontUse : 9;
	ULONGLONG PageDirectoryBase : 48;
	ULONGLONG Reserved : 7;
} PAGEDIR_INFORMATION;
typedef struct _UNIQUE_PROCESS_INFORMATION
{
	ULONGLONG DontUse : 9;
	ULONGLONG UniqueProcessKey : 48;
	ULONGLONG Reserved : 7;
} UNIQUE_PROCESS_INFORMATION, * PUNIQUE_PROCESS_INFORMATION;
typedef struct _MMPFN_IDENTITY
{
	union
	{
		MEMORY_FRAME_INFORMATION e1;
		FILEOFFSET_INFORMATION e2;
		PAGEDIR_INFORMATION e3;
		UNIQUE_PROCESS_INFORMATION e4;
	} u1;
	ULONG_PTR PageFrameIndex;
	union
	{
		struct
		{
			ULONG_PTR Image : 1;
			ULONG_PTR Mismatch : 1;
		} e1;
		struct
		{
			ULONG_PTR CombinedPage;
		} e2;
		ULONG_PTR FileObject;
		ULONG_PTR UniqueFileObjectKey;
		ULONG_PTR ProtoPteAddress;
		ULONG_PTR VirtualAddress;
	} u2;
} MMPFN_IDENTITY, * PMMPFN_IDENTITY;
typedef struct _MMPFN_MEMSNAP_INFORMATION
{
	ULONG_PTR InitialPageFrameIndex;
	ULONG_PTR Count;
} MMPFN_MEMSNAP_INFORMATION, * PMMPFN_MEMSNAP_INFORMATION;
typedef enum _SECTION_INFORMATION_CLASS
{
	SectionBasicInformation,
	SectionImageInformation,
	SectionRelocationInformation,
	SectionOriginalBaseInformation,
	SectionInternalImageInformation,
	MaxSectionInfoClass
} SECTION_INFORMATION_CLASS;
typedef struct _SECTION_BASIC_INFORMATION
{
	PVOID BaseAddress;
	ULONG AllocationAttributes;
	LARGE_INTEGER MaximumSize;
} SECTION_BASIC_INFORMATION, * PSECTION_BASIC_INFORMATION;
typedef struct _SECTION_IMAGE_INFORMATION
{
	PVOID TransferAddress;
	ULONG ZeroBits;
	SIZE_T MaximumStackSize;
	SIZE_T CommittedStackSize;
	ULONG SubSystemType;
	union
	{
		struct
		{
			USHORT SubSystemMinorVersion;
			USHORT SubSystemMajorVersion;
		};
		ULONG SubSystemVersion;
	};
	union
	{
		struct
		{
			USHORT MajorOperatingSystemVersion;
			USHORT MinorOperatingSystemVersion;
		};
		ULONG OperatingSystemVersion;
	};
	USHORT ImageCharacteristics;
	USHORT DllCharacteristics;
	USHORT Machine;
	BOOLEAN ImageContainsCode;
	union
	{
		UCHAR ImageFlags;
		struct
		{
			UCHAR ComPlusNativeReady : 1;
			UCHAR ComPlusILOnly : 1;
			UCHAR ImageDynamicallyRelocated : 1;
			UCHAR ImageMappedFlat : 1;
			UCHAR BaseBelow4gb : 1;
			UCHAR ComPlusPrefer32bit : 1;
			UCHAR Reserved : 2;
		};
	};
	ULONG LoaderFlags;
	ULONG ImageFileSize;
	ULONG CheckSum;
} SECTION_IMAGE_INFORMATION, * PSECTION_IMAGE_INFORMATION;
typedef struct _SECTION_INTERNAL_IMAGE_INFORMATION
{
	SECTION_IMAGE_INFORMATION SectionInformation;
	union
	{
		ULONG ExtendedFlags;
		struct
		{
			ULONG ImageExportSuppressionEnabled : 1;
			ULONG ImageCetShadowStacksReady : 1;
			ULONG ImageXfgEnabled : 1;
			ULONG ImageCetShadowStacksStrictMode : 1;
			ULONG ImageCetSetContextIpValidationRelaxedMode : 1;
			ULONG ImageCetDynamicApisAllowInProc : 1;
			ULONG ImageCetDowngradeReserved1 : 1;
			ULONG ImageCetDowngradeReserved2 : 1;
			ULONG Reserved : 24;
		};
	};
} SECTION_INTERNAL_IMAGE_INFORMATION, * PSECTION_INTERNAL_IMAGE_INFORMATION;
typedef enum _SECTION_INHERIT
{
	ViewShare = 1,
	ViewUnmap = 2
} SECTION_INHERIT;

NTSTATUS
__stdcall
NtAllocateVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	PSIZE_T RegionSize,
	ULONG AllocationType,
	ULONG Protect
);

NTSTATUS
__stdcall
NtFreeVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG FreeType
);

NTSTATUS
__stdcall
NtReadVirtualMemory(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesRead
);

NTSTATUS
__stdcall
NtWriteVirtualMemory(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesWritten
);

NTSTATUS
__stdcall
NtProtectVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG NewProtect,
	PULONG OldProtect
);

NTSTATUS
__stdcall
NtQueryVirtualMemory(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	MEMORY_INFORMATION_CLASS MemoryInformationClass,
	PVOID MemoryInformation,
	SIZE_T MemoryInformationLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
NtFlushVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	struct _IO_STATUS_BLOCK* IoStatus
);
typedef enum _VIRTUAL_MEMORY_INFORMATION_CLASS
{
	VmPrefetchInformation,
	VmPagePriorityInformation,
	VmCfgCallTargetInformation,
	VmPageDirtyStateInformation,
	VmImageHotPatchInformation,
	VmPhysicalContiguityInformation,
	VmVirtualMachinePrepopulateInformation,
	MaxVmInfoClass
} VIRTUAL_MEMORY_INFORMATION_CLASS;
typedef struct _MEMORY_RANGE_ENTRY
{
	PVOID VirtualAddress;
	SIZE_T NumberOfBytes;
} MEMORY_RANGE_ENTRY, * PMEMORY_RANGE_ENTRY;
typedef struct _CFG_CALL_TARGET_LIST_INFORMATION
{
	ULONG NumberOfEntries;
	ULONG Reserved;
	PULONG NumberOfEntriesProcessed;
	PCFG_CALL_TARGET_INFO CallTargetInfo;
	PVOID Section;
	ULONGLONG FileOffset;
} CFG_CALL_TARGET_LIST_INFORMATION, * PCFG_CALL_TARGET_LIST_INFORMATION;

NTSTATUS
__stdcall
NtLockVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG MapType
);

NTSTATUS
__stdcall
NtUnlockVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG MapType
);

NTSTATUS
__stdcall
NtCreateSection(
	PHANDLE SectionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PLARGE_INTEGER MaximumSize,
	ULONG SectionPageProtection,
	ULONG AllocationAttributes,
	HANDLE FileHandle
);

NTSTATUS
__stdcall
NtOpenSection(
	PHANDLE SectionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtMapViewOfSection(
	HANDLE SectionHandle,
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	SIZE_T CommitSize,
	PLARGE_INTEGER SectionOffset,
	PSIZE_T ViewSize,
	SECTION_INHERIT InheritDisposition,
	ULONG AllocationType,
	ULONG Win32Protect
);

NTSTATUS
__stdcall
NtUnmapViewOfSection(
	HANDLE ProcessHandle,
	PVOID BaseAddress
);

NTSTATUS
__stdcall
NtExtendSection(
	HANDLE SectionHandle,
	PLARGE_INTEGER NewSectionSize
);

NTSTATUS
__stdcall
NtQuerySection(
	HANDLE SectionHandle,
	SECTION_INFORMATION_CLASS SectionInformationClass,
	PVOID SectionInformation,
	SIZE_T SectionInformationLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
NtAreMappedFilesTheSame(
	PVOID File1MappedAsAnImage,
	PVOID File2MappedAsFile
);
typedef enum _MEMORY_PARTITION_INFORMATION_CLASS
{
	SystemMemoryPartitionInformation,
	SystemMemoryPartitionMoveMemory,
	SystemMemoryPartitionAddPagefile,
	SystemMemoryPartitionCombineMemory,
	SystemMemoryPartitionInitialAddMemory,
	SystemMemoryPartitionGetMemoryEvents,
	SystemMemoryPartitionMax
} MEMORY_PARTITION_INFORMATION_CLASS;
typedef struct _MEMORY_PARTITION_CONFIGURATION_INFORMATION
{
	ULONG Flags;
	ULONG NumaNode;
	ULONG Channel;
	ULONG NumberOfNumaNodes;
	ULONG_PTR ResidentAvailablePages;
	ULONG_PTR CommittedPages;
	ULONG_PTR CommitLimit;
	ULONG_PTR PeakCommitment;
	ULONG_PTR TotalNumberOfPages;
	ULONG_PTR AvailablePages;
	ULONG_PTR ZeroPages;
	ULONG_PTR FreePages;
	ULONG_PTR StandbyPages;
	ULONG_PTR StandbyPageCountByPriority[8];
	ULONG_PTR RepurposedPagesByPriority[8];
	ULONG_PTR MaximumCommitLimit;
	ULONG_PTR DonatedPagesToPartitions;
	ULONG PartitionId;
} MEMORY_PARTITION_CONFIGURATION_INFORMATION, * PMEMORY_PARTITION_CONFIGURATION_INFORMATION;
typedef struct _MEMORY_PARTITION_TRANSFER_INFORMATION
{
	ULONG_PTR NumberOfPages;
	ULONG NumaNode;
	ULONG Flags;
} MEMORY_PARTITION_TRANSFER_INFORMATION, * PMEMORY_PARTITION_TRANSFER_INFORMATION;
typedef struct _MEMORY_PARTITION_PAGEFILE_INFORMATION
{
	UNICODE_STRING PageFileName;
	LARGE_INTEGER MinimumSize;
	LARGE_INTEGER MaximumSize;
	ULONG Flags;
} MEMORY_PARTITION_PAGEFILE_INFORMATION, * PMEMORY_PARTITION_PAGEFILE_INFORMATION;
typedef struct _MEMORY_PARTITION_PAGE_COMBINE_INFORMATION
{
	HANDLE StopHandle;
	ULONG Flags;
	ULONG_PTR TotalNumberOfPages;
} MEMORY_PARTITION_PAGE_COMBINE_INFORMATION, * PMEMORY_PARTITION_PAGE_COMBINE_INFORMATION;
typedef struct _MEMORY_PARTITION_PAGE_RANGE
{
	ULONG_PTR StartPage;
	ULONG_PTR NumberOfPages;
} MEMORY_PARTITION_PAGE_RANGE, * PMEMORY_PARTITION_PAGE_RANGE;
typedef struct _MEMORY_PARTITION_INITIAL_ADD_INFORMATION
{
	ULONG Flags;
	ULONG NumberOfRanges;
	ULONG_PTR NumberOfPagesAdded;
	MEMORY_PARTITION_PAGE_RANGE PartitionRanges[1];
} MEMORY_PARTITION_INITIAL_ADD_INFORMATION, * PMEMORY_PARTITION_INITIAL_ADD_INFORMATION;
typedef struct _MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION
{
	union
	{
		struct
		{
			ULONG CommitEvents : 1;
			ULONG Spare : 31;
		};
		ULONG AllFlags;
	} Flags;
	ULONG HandleAttributes;
	ULONG DesiredAccess;
	HANDLE LowCommitCondition;
	HANDLE HighCommitCondition;
	HANDLE MaximumCommitCondition;
} MEMORY_PARTITION_MEMORY_EVENTS_INFORMATION, * PMEMORY_PARTITION_MEMORY_EVENTS_INFORMATION;

NTSTATUS
__stdcall
NtMapUserPhysicalPages(
	PVOID VirtualAddress,
	ULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
NtMapUserPhysicalPagesScatter(
	PVOID* VirtualAddresses,
	ULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
NtAllocateUserPhysicalPages(
	HANDLE ProcessHandle,
	PULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
NtFreeUserPhysicalPages(
	HANDLE ProcessHandle,
	PULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
NtGetWriteWatch(
	HANDLE ProcessHandle,
	ULONG Flags,
	PVOID BaseAddress,
	SIZE_T RegionSize,
	PVOID* UserAddressArray,
	PULONG_PTR EntriesInUserAddressArray,
	PULONG Granularity
);

NTSTATUS
__stdcall
NtResetWriteWatch(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	SIZE_T RegionSize
);

NTSTATUS
__stdcall
NtCreatePagingFile(
	PUNICODE_STRING PageFileName,
	PLARGE_INTEGER MinimumSize,
	PLARGE_INTEGER MaximumSize,
	ULONG Priority
);

NTSTATUS
__stdcall
NtFlushInstructionCache(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	SIZE_T Length
);

NTSTATUS
__stdcall
NtFlushWriteBuffer(
	void
);

NTSTATUS
__stdcall
NtCreateEnclave(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	SIZE_T Size,
	SIZE_T InitialCommitment,
	ULONG EnclaveType,
	PVOID EnclaveInformation,
	ULONG EnclaveInformationLength,
	PULONG EnclaveError
);

NTSTATUS
__stdcall
NtLoadEnclaveData(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID Buffer,
	SIZE_T BufferSize,
	ULONG Protect,
	PVOID PageInformation,
	ULONG PageInformationLength,
	PSIZE_T NumberOfBytesWritten,
	PULONG EnclaveError
);

NTSTATUS
__stdcall
NtInitializeEnclave(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID EnclaveInformation,
	ULONG EnclaveInformationLength,
	PULONG EnclaveError
);

NTSTATUS
__stdcall
NtTerminateEnclave(
	PVOID BaseAddress,
	BOOLEAN WaitForThread
);

NTSTATUS
__stdcall
NtCallEnclave(
	PENCLAVE_ROUTINE Routine,
	PVOID Parameter,
	BOOLEAN WaitForThread,
	PVOID* ReturnValue
);
typedef enum _OBJECT_INFORMATION_CLASS
{
	ObjectBasicInformation,
	ObjectNameInformation,
	ObjectTypeInformation,
	ObjectTypesInformation,
	ObjectHandleFlagInformation,
	ObjectSessionInformation,
	ObjectSessionObjectInformation,
	MaxObjectInfoClass
} OBJECT_INFORMATION_CLASS;
typedef struct _OBJECT_BASIC_INFORMATION
{
	ULONG Attributes;
	ACCESS_MASK GrantedAccess;
	ULONG HandleCount;
	ULONG PointerCount;
	ULONG PagedPoolCharge;
	ULONG NonPagedPoolCharge;
	ULONG Reserved[3];
	ULONG NameInfoSize;
	ULONG TypeInfoSize;
	ULONG SecurityDescriptorSize;
	LARGE_INTEGER CreationTime;
} OBJECT_BASIC_INFORMATION, * POBJECT_BASIC_INFORMATION;
typedef struct _OBJECT_NAME_INFORMATION
{
	UNICODE_STRING Name;
} OBJECT_NAME_INFORMATION, * POBJECT_NAME_INFORMATION;
typedef struct _OBJECT_TYPE_INFORMATION
{
	UNICODE_STRING TypeName;
	ULONG TotalNumberOfObjects;
	ULONG TotalNumberOfHandles;
	ULONG TotalPagedPoolUsage;
	ULONG TotalNonPagedPoolUsage;
	ULONG TotalNamePoolUsage;
	ULONG TotalHandleTableUsage;
	ULONG HighWaterNumberOfObjects;
	ULONG HighWaterNumberOfHandles;
	ULONG HighWaterPagedPoolUsage;
	ULONG HighWaterNonPagedPoolUsage;
	ULONG HighWaterNamePoolUsage;
	ULONG HighWaterHandleTableUsage;
	ULONG InvalidAttributes;
	GENERIC_MAPPING GenericMapping;
	ULONG ValidAccessMask;
	BOOLEAN SecurityRequired;
	BOOLEAN MaintainHandleCount;
	UCHAR TypeIndex;
	CHAR ReservedByte;
	ULONG PoolType;
	ULONG DefaultPagedPoolCharge;
	ULONG DefaultNonPagedPoolCharge;
} OBJECT_TYPE_INFORMATION, * POBJECT_TYPE_INFORMATION;
typedef struct _OBJECT_TYPES_INFORMATION
{
	ULONG NumberOfTypes;
} OBJECT_TYPES_INFORMATION, * POBJECT_TYPES_INFORMATION;
typedef struct _OBJECT_HANDLE_FLAG_INFORMATION
{
	BOOLEAN Inherit;
	BOOLEAN ProtectFromClose;
} OBJECT_HANDLE_FLAG_INFORMATION, * POBJECT_HANDLE_FLAG_INFORMATION;

NTSTATUS
__stdcall
NtQueryObject(
	HANDLE Handle,
	OBJECT_INFORMATION_CLASS ObjectInformationClass,
	PVOID ObjectInformation,
	ULONG ObjectInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationObject(
	HANDLE Handle,
	OBJECT_INFORMATION_CLASS ObjectInformationClass,
	PVOID ObjectInformation,
	ULONG ObjectInformationLength
);

NTSTATUS
__stdcall
NtDuplicateObject(
	HANDLE SourceProcessHandle,
	HANDLE SourceHandle,
	HANDLE TargetProcessHandle,
	PHANDLE TargetHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	ULONG Options
);

NTSTATUS
__stdcall
NtMakeTemporaryObject(
	HANDLE Handle
);

NTSTATUS
__stdcall
NtMakePermanentObject(
	HANDLE Handle
);

NTSTATUS
__stdcall
NtSignalAndWaitForSingleObject(
	HANDLE SignalHandle,
	HANDLE WaitHandle,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtWaitForSingleObject(
	HANDLE Handle,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtWaitForMultipleObjects(
	ULONG Count,
	HANDLE Handles[],
	WAIT_TYPE WaitType,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtWaitForMultipleObjects32(
	ULONG Count,
	LONG Handles[],
	WAIT_TYPE WaitType,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtSetSecurityObject(
	HANDLE Handle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor
);

NTSTATUS
__stdcall
NtQuerySecurityObject(
	HANDLE Handle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	ULONG Length,
	PULONG LengthNeeded
);

NTSTATUS
__stdcall
NtClose(
	HANDLE Handle
);

NTSTATUS
__stdcall
NtCreateDirectoryObject(
	PHANDLE DirectoryHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtOpenDirectoryObject(
	PHANDLE DirectoryHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);
typedef struct _OBJECT_DIRECTORY_INFORMATION
{
	UNICODE_STRING Name;
	UNICODE_STRING TypeName;
} OBJECT_DIRECTORY_INFORMATION, * POBJECT_DIRECTORY_INFORMATION;

NTSTATUS
__stdcall
NtQueryDirectoryObject(
	HANDLE DirectoryHandle,
	PVOID Buffer,
	ULONG Length,
	BOOLEAN ReturnSingleEntry,
	BOOLEAN RestartScan,
	PULONG Context,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtCreatePrivateNamespace(
	PHANDLE NamespaceHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PVOID BoundaryDescriptor
);

NTSTATUS
__stdcall
NtOpenPrivateNamespace(
	PHANDLE NamespaceHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PVOID BoundaryDescriptor
);

NTSTATUS
__stdcall
NtDeletePrivateNamespace(
	HANDLE NamespaceHandle
);

NTSTATUS
__stdcall
NtCreateSymbolicLinkObject(
	PHANDLE LinkHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PUNICODE_STRING LinkTarget
);

NTSTATUS
__stdcall
NtOpenSymbolicLinkObject(
	PHANDLE LinkHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtQuerySymbolicLinkObject(
	HANDLE LinkHandle,
	PUNICODE_STRING LinkTarget,
	PULONG ReturnedLength
);
typedef enum _SYMBOLIC_LINK_INFO_CLASS
{
	SymbolicLinkGlobalInformation = 1,
	SymbolicLinkAccessMask,
	MaxnSymbolicLinkInfoClass
} SYMBOLIC_LINK_INFO_CLASS;

NTSTATUS
__stdcall
NtSetInformationSymbolicLink(
	HANDLE LinkHandle,
	SYMBOLIC_LINK_INFO_CLASS SymbolicLinkInformationClass,
	PVOID SymbolicLinkInformation,
	ULONG SymbolicLinkInformationLength
);
typedef ULONG GDI_HANDLE_BUFFER[60];
typedef ULONG GDI_HANDLE_BUFFER32[34];
typedef ULONG GDI_HANDLE_BUFFER64[60];
typedef struct _PEB_LDR_DATA
{
	ULONG Length;
	BOOLEAN Initialized;
	HANDLE SsHandle;
	LIST_ENTRY InLoadOrderModuleList;
	LIST_ENTRY InMemoryOrderModuleList;
	LIST_ENTRY InInitializationOrderModuleList;
	PVOID EntryInProgress;
	BOOLEAN ShutdownInProgress;
	HANDLE ShutdownThreadId;
} PEB_LDR_DATA, * PPEB_LDR_DATA;
typedef struct _INITIAL_TEB
{
	struct
	{
		PVOID OldStackBase;
		PVOID OldStackLimit;
	} OldInitialTeb;
	PVOID StackBase;
	PVOID StackLimit;
	PVOID StackAllocationBase;
} INITIAL_TEB, * PINITIAL_TEB;
typedef struct _WOW64_PROCESS
{
	PVOID Wow64;
} WOW64_PROCESS, * PWOW64_PROCESS;
typedef struct _RTL_USER_PROCESS_PARAMETERS* PRTL_USER_PROCESS_PARAMETERS;
typedef struct _RTL_CRITICAL_SECTION* PRTL_CRITICAL_SECTION;
typedef struct _ACTIVATION_CONTEXT_STACK
{
	struct _RTL_ACTIVATION_CONTEXT_STACK_FRAME* ActiveFrame;
	LIST_ENTRY FrameListCache;
	ULONG Flags;
	ULONG NextCookieSequenceNumber;
	ULONG StackId;
} ACTIVATION_CONTEXT_STACK, * PACTIVATION_CONTEXT_STACK;
typedef struct _API_SET_NAMESPACE
{
	ULONG Version;
	ULONG Size;
	ULONG Flags;
	ULONG Count;
	ULONG EntryOffset;
	ULONG HashOffset;
	ULONG HashFactor;
} API_SET_NAMESPACE, * PAPI_SET_NAMESPACE;
typedef struct _API_SET_HASH_ENTRY
{
	ULONG Hash;
	ULONG Index;
} API_SET_HASH_ENTRY, * PAPI_SET_HASH_ENTRY;
typedef struct _API_SET_NAMESPACE_ENTRY
{
	ULONG Flags;
	ULONG NameOffset;
	ULONG NameLength;
	ULONG HashedLength;
	ULONG ValueOffset;
	ULONG ValueCount;
} API_SET_NAMESPACE_ENTRY, * PAPI_SET_NAMESPACE_ENTRY;
typedef struct _API_SET_VALUE_ENTRY
{
	ULONG Flags;
	ULONG NameOffset;
	ULONG NameLength;
	ULONG ValueOffset;
	ULONG ValueLength;
} API_SET_VALUE_ENTRY, * PAPI_SET_VALUE_ENTRY;
typedef struct _PEB
{
	BOOLEAN InheritedAddressSpace;
	BOOLEAN ReadImageFileExecOptions;
	BOOLEAN BeingDebugged;
	union
	{
		BOOLEAN BitField;
		struct
		{
			BOOLEAN ImageUsesLargePages : 1;
			BOOLEAN IsProtectedProcess : 1;
			BOOLEAN IsImageDynamicallyRelocated : 1;
			BOOLEAN SkipPatchingUser32Forwarders : 1;
			BOOLEAN IsPackagedProcess : 1;
			BOOLEAN IsAppContainer : 1;
			BOOLEAN IsProtectedProcessLight : 1;
			BOOLEAN IsLongPathAwareProcess : 1;
		};
	};
	HANDLE Mutant;
	PVOID ImageBaseAddress;
	PPEB_LDR_DATA Ldr;
	PRTL_USER_PROCESS_PARAMETERS ProcessParameters;
	PVOID SubSystemData;
	PVOID ProcessHeap;
	PRTL_CRITICAL_SECTION FastPebLock;
	PSLIST_HEADER AtlThunkSListPtr;
	PVOID IFEOKey;
	union
	{
		ULONG CrossProcessFlags;
		struct
		{
			ULONG ProcessInJob : 1;
			ULONG ProcessInitializing : 1;
			ULONG ProcessUsingVEH : 1;
			ULONG ProcessUsingVCH : 1;
			ULONG ProcessUsingFTH : 1;
			ULONG ProcessPreviouslyThrottled : 1;
			ULONG ProcessCurrentlyThrottled : 1;
			ULONG ProcessImagesHotPatched : 1;
			ULONG ReservedBits0 : 24;
		};
	};
	union
	{
		PVOID KernelCallbackTable;
		PVOID UserSharedInfoPtr;
	};
	ULONG SystemReserved;
	ULONG AtlThunkSListPtr32;
	PAPI_SET_NAMESPACE ApiSetMap;
	ULONG TlsExpansionCounter;
	PVOID TlsBitmap;
	ULONG TlsBitmapBits[2];
	PVOID ReadOnlySharedMemoryBase;
	PVOID SharedData;
	PVOID* ReadOnlyStaticServerData;
	PVOID AnsiCodePageData;
	PVOID OemCodePageData;
	PVOID UnicodeCaseTableData;
	ULONG NumberOfProcessors;
	ULONG NtGlobalFlag;
	ULARGE_INTEGER CriticalSectionTimeout;
	SIZE_T HeapSegmentReserve;
	SIZE_T HeapSegmentCommit;
	SIZE_T HeapDeCommitTotalFreeThreshold;
	SIZE_T HeapDeCommitFreeBlockThreshold;
	ULONG NumberOfHeaps;
	ULONG MaximumNumberOfHeaps;
	PVOID* ProcessHeaps;
	PVOID GdiSharedHandleTable;
	PVOID ProcessStarterHelper;
	ULONG GdiDCAttributeList;
	PRTL_CRITICAL_SECTION LoaderLock;
	ULONG OSMajorVersion;
	ULONG OSMinorVersion;
	USHORT OSBuildNumber;
	USHORT OSCSDVersion;
	ULONG OSPlatformId;
	ULONG ImageSubsystem;
	ULONG ImageSubsystemMajorVersion;
	ULONG ImageSubsystemMinorVersion;
	ULONG_PTR ActiveProcessAffinityMask;
	GDI_HANDLE_BUFFER GdiHandleBuffer;
	PVOID PostProcessInitRoutine;
	PVOID TlsExpansionBitmap;
	ULONG TlsExpansionBitmapBits[32];
	ULONG SessionId;
	ULARGE_INTEGER AppCompatFlags;
	ULARGE_INTEGER AppCompatFlagsUser;
	PVOID pShimData;
	PVOID AppCompatInfo;
	UNICODE_STRING CSDVersion;
	PVOID ActivationContextData;
	PVOID ProcessAssemblyStorageMap;
	PVOID SystemDefaultActivationContextData;
	PVOID SystemAssemblyStorageMap;
	SIZE_T MinimumStackCommit;
	PVOID SparePointers[4];
	ULONG SpareUlongs[5];
	PVOID WerRegistrationData;
	PVOID WerShipAssertPtr;
	PVOID pUnused;
	PVOID pImageHeaderHash;
	union
	{
		ULONG TracingFlags;
		struct
		{
			ULONG HeapTracingEnabled : 1;
			ULONG CritSecTracingEnabled : 1;
			ULONG LibLoaderTracingEnabled : 1;
			ULONG SpareTracingBits : 29;
		};
	};
	ULONGLONG CsrServerReadOnlySharedMemoryBase;
	PRTL_CRITICAL_SECTION TppWorkerpListLock;
	LIST_ENTRY TppWorkerpList;
	PVOID WaitOnAddressHashTable[128];
	PVOID TelemetryCoverageHeader;
	ULONG CloudFileFlags;
	ULONG CloudFileDiagFlags;
	CHAR PlaceholderCompatibilityMode;
	CHAR PlaceholderCompatibilityModeReserved[7];
	struct _LEAP_SECOND_DATA* LeapSecondData;
	union
	{
		ULONG LeapSecondFlags;
		struct
		{
			ULONG SixtySecondEnabled : 1;
			ULONG Reserved : 31;
		};
	};
	ULONG NtGlobalFlag2;
} PEB, * PPEB;
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((PEB*)0)->SessionId)) == 0x2C0) ? 1 : -1];
typedef char __C_ASSERT__[(sizeof(PEB) == 0x7C8) ? 1 : -1];
typedef struct _GDI_TEB_BATCH
{
	ULONG Offset;
	ULONG_PTR HDC;
	ULONG Buffer[310];
} GDI_TEB_BATCH, * PGDI_TEB_BATCH;
typedef struct _TEB_ACTIVE_FRAME_CONTEXT
{
	ULONG Flags;
	PSTR FrameName;
} TEB_ACTIVE_FRAME_CONTEXT, * PTEB_ACTIVE_FRAME_CONTEXT;
typedef struct _TEB_ACTIVE_FRAME
{
	ULONG Flags;
	struct _TEB_ACTIVE_FRAME* Previous;
	PTEB_ACTIVE_FRAME_CONTEXT Context;
} TEB_ACTIVE_FRAME, * PTEB_ACTIVE_FRAME;
typedef struct _TEB
{
	NT_TIB NtTib;
	PVOID EnvironmentPointer;
	CLIENT_ID ClientId;
	PVOID ActiveRpcHandle;
	PVOID ThreadLocalStoragePointer;
	PPEB ProcessEnvironmentBlock;
	ULONG LastErrorValue;
	ULONG CountOfOwnedCriticalSections;
	PVOID CsrClientThread;
	PVOID Win32ThreadInfo;
	ULONG User32Reserved[26];
	ULONG UserReserved[5];
	PVOID WOW32Reserved;
	LCID CurrentLocale;
	ULONG FpSoftwareStatusRegister;
	PVOID ReservedForDebuggerInstrumentation[16];
	PVOID SystemReserved1[30];
	CHAR PlaceholderCompatibilityMode;
	BOOLEAN PlaceholderHydrationAlwaysExplicit;
	CHAR PlaceholderReserved[10];
	ULONG ProxiedProcessId;
	ACTIVATION_CONTEXT_STACK ActivationStack;
	UCHAR WorkingOnBehalfTicket[8];
	NTSTATUS ExceptionCode;
	PACTIVATION_CONTEXT_STACK ActivationContextStackPointer;
	ULONG_PTR InstrumentationCallbackSp;
	ULONG_PTR InstrumentationCallbackPreviousPc;
	ULONG_PTR InstrumentationCallbackPreviousSp;
	ULONG TxFsContext;
	BOOLEAN InstrumentationCallbackDisabled;
	BOOLEAN UnalignedLoadStoreExceptions;
	GDI_TEB_BATCH GdiTebBatch;
	CLIENT_ID RealClientId;
	HANDLE GdiCachedProcessHandle;
	ULONG GdiClientPID;
	ULONG GdiClientTID;
	PVOID GdiThreadLocalInfo;
	ULONG_PTR Win32ClientInfo[62];
	PVOID glDispatchTable[233];
	ULONG_PTR glReserved1[29];
	PVOID glReserved2;
	PVOID glSectionInfo;
	PVOID glSection;
	PVOID glTable;
	PVOID glCurrentRC;
	PVOID glContext;
	NTSTATUS LastStatusValue;
	UNICODE_STRING StaticUnicodeString;
	WCHAR StaticUnicodeBuffer[261];
	PVOID DeallocationStack;
	PVOID TlsSlots[64];
	LIST_ENTRY TlsLinks;
	PVOID Vdm;
	PVOID ReservedForNtRpc;
	PVOID DbgSsReserved[2];
	ULONG HardErrorMode;
	PVOID Instrumentation[11];
	GUID ActivityId;
	PVOID SubProcessTag;
	PVOID PerflibData;
	PVOID EtwTraceData;
	PVOID WinSockData;
	ULONG GdiBatchCount;
	union
	{
		PROCESSOR_NUMBER CurrentIdealProcessor;
		ULONG IdealProcessorValue;
		struct
		{
			UCHAR ReservedPad0;
			UCHAR ReservedPad1;
			UCHAR ReservedPad2;
			UCHAR IdealProcessor;
		};
	};
	ULONG GuaranteedStackBytes;
	PVOID ReservedForPerf;
	PVOID ReservedForOle;
	ULONG WaitingOnLoaderLock;
	PVOID SavedPriorityState;
	ULONG_PTR ReservedForCodeCoverage;
	PVOID ThreadPoolData;
	PVOID* TlsExpansionSlots;
	PVOID DeallocationBStore;
	PVOID BStoreLimit;
	ULONG MuiGeneration;
	ULONG IsImpersonating;
	PVOID NlsCache;
	PVOID pShimData;
	ULONG HeapData;
	HANDLE CurrentTransactionHandle;
	PTEB_ACTIVE_FRAME ActiveFrame;
	PVOID FlsData;
	PVOID PreferredLanguages;
	PVOID UserPrefLanguages;
	PVOID MergedPrefLanguages;
	ULONG MuiImpersonation;
	union
	{
		USHORT CrossTebFlags;
		USHORT SpareCrossTebBits : 16;
	};
	union
	{
		USHORT SameTebFlags;
		struct
		{
			USHORT SafeThunkCall : 1;
			USHORT InDebugPrint : 1;
			USHORT HasFiberData : 1;
			USHORT SkipThreadAttach : 1;
			USHORT WerInShipAssertCode : 1;
			USHORT RanProcessInit : 1;
			USHORT ClonedThread : 1;
			USHORT SuppressDebugMsg : 1;
			USHORT DisableUserStackWalk : 1;
			USHORT RtlExceptionAttached : 1;
			USHORT InitialThread : 1;
			USHORT SessionAware : 1;
			USHORT LoadOwner : 1;
			USHORT LoaderWorker : 1;
			USHORT SkipLoaderInit : 1;
			USHORT SpareSameTebBits : 1;
		};
	};
	PVOID TxnScopeEnterCallback;
	PVOID TxnScopeExitCallback;
	PVOID TxnScopeContext;
	ULONG LockCount;
	LONG WowTebOffset;
	PVOID ResourceRetValue;
	PVOID ReservedForWdf;
	ULONGLONG ReservedForCrt;
	GUID EffectiveContainerId;
} TEB, * PTEB;
typedef enum _PROCESSINFOCLASS
{
	ProcessBasicInformation,
	ProcessQuotaLimits,
	ProcessIoCounters,
	ProcessVmCounters,
	ProcessTimes,
	ProcessBasePriority,
	ProcessRaisePriority,
	ProcessDebugPort,
	ProcessExceptionPort,
	ProcessAccessToken,
	ProcessLdtInformation,
	ProcessLdtSize,
	ProcessDefaultHardErrorMode,
	ProcessIoPortHandlers,
	ProcessPooledUsageAndLimits,
	ProcessWorkingSetWatch,
	ProcessUserModeIOPL,
	ProcessEnableAlignmentFaultFixup,
	ProcessPriorityClass,
	ProcessWx86Information,
	ProcessHandleCount,
	ProcessAffinityMask,
	ProcessPriorityBoost,
	ProcessDeviceMap,
	ProcessSessionInformation,
	ProcessForegroundInformation,
	ProcessWow64Information,
	ProcessImageFileName,
	ProcessLUIDDeviceMapsEnabled,
	ProcessBreakOnTermination,
	ProcessDebugObjectHandle,
	ProcessDebugFlags,
	ProcessHandleTracing,
	ProcessIoPriority,
	ProcessExecuteFlags,
	ProcessTlsInformation,
	ProcessCookie,
	ProcessImageInformation,
	ProcessCycleTime,
	ProcessPagePriority,
	ProcessInstrumentationCallback,
	ProcessThreadStackAllocation,
	ProcessWorkingSetWatchEx,
	ProcessImageFileNameWin32,
	ProcessImageFileMapping,
	ProcessAffinityUpdateMode,
	ProcessMemoryAllocationMode,
	ProcessGroupInformation,
	ProcessTokenVirtualizationEnabled,
	ProcessConsoleHostProcess,
	ProcessWindowInformation,
	ProcessHandleInformation,
	ProcessMitigationPolicy,
	ProcessDynamicFunctionTableInformation,
	ProcessHandleCheckingMode,
	ProcessKeepAliveCount,
	ProcessRevokeFileHandles,
	ProcessWorkingSetControl,
	ProcessHandleTable,
	ProcessCheckStackExtentsMode,
	ProcessCommandLineInformation,
	ProcessProtectionInformation,
	ProcessMemoryExhaustion,
	ProcessFaultInformation,
	ProcessTelemetryIdInformation,
	ProcessCommitReleaseInformation,
	ProcessDefaultCpuSetsInformation,
	ProcessAllowedCpuSetsInformation,
	ProcessSubsystemProcess,
	ProcessJobMemoryInformation,
	ProcessInPrivate,
	ProcessRaiseUMExceptionOnInvalidHandleClose,
	ProcessIumChallengeResponse,
	ProcessChildProcessInformation,
	ProcessHighGraphicsPriorityInformation,
	ProcessSubsystemInformation,
	ProcessEnergyValues,
	ProcessPowerThrottlingState,
	ProcessReserved3Information,
	ProcessWin32kSyscallFilterInformation,
	ProcessDisableSystemAllowedCpuSets,
	ProcessWakeInformation,
	ProcessEnergyTrackingState,
	ProcessManageWritesToExecutableMemory,
	ProcessCaptureTrustletLiveDump,
	ProcessTelemetryCoverage,
	ProcessEnclaveInformation,
	ProcessEnableReadWriteVmLogging,
	ProcessUptimeInformation,
	ProcessImageSection,
	ProcessDebugAuthInformation,
	ProcessSystemResourceManagement,
	ProcessSequenceNumber,
	ProcessLoaderDetour,
	ProcessSecurityDomainInformation,
	ProcessCombineSecurityDomainsInformation,
	ProcessEnableLogging,
	ProcessLeapSecondInformation,
	ProcessFiberShadowStackAllocation,
	ProcessFreeFiberShadowStackAllocation,
	ProcessAltSystemCallInformation,
	ProcessDynamicEHContinuationTargets,
	ProcessDynamicEnforcedCetCompatibleRanges,
	MaxProcessInfoClass
} PROCESSINFOCLASS;
typedef enum _THREADINFOCLASS
{
	ThreadBasicInformation,
	ThreadTimes,
	ThreadPriority,
	ThreadBasePriority,
	ThreadAffinityMask,
	ThreadImpersonationToken,
	ThreadDescriptorTableEntry,
	ThreadEnableAlignmentFaultFixup,
	ThreadEventPair,
	ThreadQuerySetWin32StartAddress,
	ThreadZeroTlsCell,
	ThreadPerformanceCount,
	ThreadAmILastThread,
	ThreadIdealProcessor,
	ThreadPriorityBoost,
	ThreadSetTlsArrayAddress,
	ThreadIsIoPending,
	ThreadHideFromDebugger,
	ThreadBreakOnTermination,
	ThreadSwitchLegacyState,
	ThreadIsTerminated,
	ThreadLastSystemCall,
	ThreadIoPriority,
	ThreadCycleTime,
	ThreadPagePriority,
	ThreadActualBasePriority,
	ThreadTebInformation,
	ThreadCSwitchMon,
	ThreadCSwitchPmu,
	ThreadWow64Context,
	ThreadGroupInformation,
	ThreadUmsInformation,
	ThreadCounterProfiling,
	ThreadIdealProcessorEx,
	ThreadCpuAccountingInformation,
	ThreadSuspendCount,
	ThreadHeterogeneousCpuPolicy,
	ThreadContainerId,
	ThreadNameInformation,
	ThreadSelectedCpuSets,
	ThreadSystemThreadInformation,
	ThreadActualGroupAffinity,
	ThreadDynamicCodePolicyInfo,
	ThreadExplicitCaseSensitivity,
	ThreadWorkOnBehalfTicket,
	ThreadSubsystemInformation,
	ThreadDbgkWerReportActive,
	ThreadAttachContainer,
	ThreadManageWritesToExecutableMemory,
	ThreadPowerThrottlingState,
	ThreadWorkloadClass,
	MaxThreadInfoClass
} THREADINFOCLASS;
typedef struct _PAGE_PRIORITY_INFORMATION
{
	ULONG PagePriority;
} PAGE_PRIORITY_INFORMATION, * PPAGE_PRIORITY_INFORMATION;
typedef struct _PROCESS_BASIC_INFORMATION
{
	NTSTATUS ExitStatus;
	PPEB PebBaseAddress;
	ULONG_PTR AffinityMask;
	KPRIORITY BasePriority;
	HANDLE UniqueProcessId;
	HANDLE InheritedFromUniqueProcessId;
} PROCESS_BASIC_INFORMATION, * PPROCESS_BASIC_INFORMATION;
typedef struct _PROCESS_EXTENDED_BASIC_INFORMATION
{
	SIZE_T Size;
	PROCESS_BASIC_INFORMATION BasicInfo;
	union
	{
		ULONG Flags;
		struct
		{
			ULONG IsProtectedProcess : 1;
			ULONG IsWow64Process : 1;
			ULONG IsProcessDeleting : 1;
			ULONG IsCrossSessionCreate : 1;
			ULONG IsFrozen : 1;
			ULONG IsBackground : 1;
			ULONG IsStronglyNamed : 1;
			ULONG IsSecureProcess : 1;
			ULONG IsSubsystemProcess : 1;
			ULONG SpareBits : 23;
		};
	};
} PROCESS_EXTENDED_BASIC_INFORMATION, * PPROCESS_EXTENDED_BASIC_INFORMATION;
typedef struct _VM_COUNTERS
{
	SIZE_T PeakVirtualSize;
	SIZE_T VirtualSize;
	ULONG PageFaultCount;
	SIZE_T PeakWorkingSetSize;
	SIZE_T WorkingSetSize;
	SIZE_T QuotaPeakPagedPoolUsage;
	SIZE_T QuotaPagedPoolUsage;
	SIZE_T QuotaPeakNonPagedPoolUsage;
	SIZE_T QuotaNonPagedPoolUsage;
	SIZE_T PagefileUsage;
	SIZE_T PeakPagefileUsage;
} VM_COUNTERS, * PVM_COUNTERS;
typedef struct _VM_COUNTERS_EX
{
	SIZE_T PeakVirtualSize;
	SIZE_T VirtualSize;
	ULONG PageFaultCount;
	SIZE_T PeakWorkingSetSize;
	SIZE_T WorkingSetSize;
	SIZE_T QuotaPeakPagedPoolUsage;
	SIZE_T QuotaPagedPoolUsage;
	SIZE_T QuotaPeakNonPagedPoolUsage;
	SIZE_T QuotaNonPagedPoolUsage;
	SIZE_T PagefileUsage;
	SIZE_T PeakPagefileUsage;
	SIZE_T PrivateUsage;
} VM_COUNTERS_EX, * PVM_COUNTERS_EX;
typedef struct _VM_COUNTERS_EX2
{
	VM_COUNTERS_EX CountersEx;
	SIZE_T PrivateWorkingSetSize;
	SIZE_T SharedCommitUsage;
} VM_COUNTERS_EX2, * PVM_COUNTERS_EX2;
typedef struct _KERNEL_USER_TIMES
{
	LARGE_INTEGER CreateTime;
	LARGE_INTEGER ExitTime;
	LARGE_INTEGER KernelTime;
	LARGE_INTEGER UserTime;
} KERNEL_USER_TIMES, * PKERNEL_USER_TIMES;
typedef struct _POOLED_USAGE_AND_LIMITS
{
	SIZE_T PeakPagedPoolUsage;
	SIZE_T PagedPoolUsage;
	SIZE_T PagedPoolLimit;
	SIZE_T PeakNonPagedPoolUsage;
	SIZE_T NonPagedPoolUsage;
	SIZE_T NonPagedPoolLimit;
	SIZE_T PeakPagefileUsage;
	SIZE_T PagefileUsage;
	SIZE_T PagefileLimit;
} POOLED_USAGE_AND_LIMITS, * PPOOLED_USAGE_AND_LIMITS;
typedef struct _PROCESS_EXCEPTION_PORT
{
	HANDLE ExceptionPortHandle;
	ULONG StateFlags;
} PROCESS_EXCEPTION_PORT, * PPROCESS_EXCEPTION_PORT;
typedef struct _PROCESS_ACCESS_TOKEN
{
	HANDLE Token;
	HANDLE Thread;
} PROCESS_ACCESS_TOKEN, * PPROCESS_ACCESS_TOKEN;
typedef struct _PROCESS_LDT_INFORMATION
{
	ULONG Start;
	ULONG Length;
	LDT_ENTRY LdtEntries[1];
} PROCESS_LDT_INFORMATION, * PPROCESS_LDT_INFORMATION;
typedef struct _PROCESS_LDT_SIZE
{
	ULONG Length;
} PROCESS_LDT_SIZE, * PPROCESS_LDT_SIZE;
typedef struct _PROCESS_WS_WATCH_INFORMATION
{
	PVOID FaultingPc;
	PVOID FaultingVa;
} PROCESS_WS_WATCH_INFORMATION, * PPROCESS_WS_WATCH_INFORMATION;
typedef struct _PROCESS_WS_WATCH_INFORMATION_EX
{
	PROCESS_WS_WATCH_INFORMATION BasicInfo;
	ULONG_PTR FaultingThreadId;
	ULONG_PTR Flags;
} PROCESS_WS_WATCH_INFORMATION_EX, * PPROCESS_WS_WATCH_INFORMATION_EX;
typedef struct _PROCESS_PRIORITY_CLASS
{
	BOOLEAN Foreground;
	UCHAR PriorityClass;
} PROCESS_PRIORITY_CLASS, * PPROCESS_PRIORITY_CLASS;
typedef struct _PROCESS_FOREGROUND_BACKGROUND
{
	BOOLEAN Foreground;
} PROCESS_FOREGROUND_BACKGROUND, * PPROCESS_FOREGROUND_BACKGROUND;
typedef struct _PROCESS_DEVICEMAP_INFORMATION
{
	union
	{
		struct
		{
			HANDLE DirectoryHandle;
		} Set;
		struct
		{
			ULONG DriveMap;
			UCHAR DriveType[32];
		} Query;
	};
} PROCESS_DEVICEMAP_INFORMATION, * PPROCESS_DEVICEMAP_INFORMATION;
typedef struct _PROCESS_DEVICEMAP_INFORMATION_EX
{
	union
	{
		struct
		{
			HANDLE DirectoryHandle;
		} Set;
		struct
		{
			ULONG DriveMap;
			UCHAR DriveType[32];
		} Query;
	};
	ULONG Flags;
} PROCESS_DEVICEMAP_INFORMATION_EX, * PPROCESS_DEVICEMAP_INFORMATION_EX;
typedef struct _PROCESS_SESSION_INFORMATION
{
	ULONG SessionId;
} PROCESS_SESSION_INFORMATION, * PPROCESS_SESSION_INFORMATION;
typedef struct _PROCESS_HANDLE_TRACING_ENABLE
{
	ULONG Flags;
} PROCESS_HANDLE_TRACING_ENABLE, * PPROCESS_HANDLE_TRACING_ENABLE;
typedef struct _PROCESS_HANDLE_TRACING_ENABLE_EX
{
	ULONG Flags;
	ULONG TotalSlots;
} PROCESS_HANDLE_TRACING_ENABLE_EX, * PPROCESS_HANDLE_TRACING_ENABLE_EX;
typedef struct _PROCESS_HANDLE_TRACING_ENTRY
{
	HANDLE Handle;
	CLIENT_ID ClientId;
	ULONG Type;
	PVOID Stacks[16];
} PROCESS_HANDLE_TRACING_ENTRY, * PPROCESS_HANDLE_TRACING_ENTRY;
typedef struct _PROCESS_HANDLE_TRACING_QUERY
{
	HANDLE Handle;
	ULONG TotalTraces;
	PROCESS_HANDLE_TRACING_ENTRY HandleTrace[1];
} PROCESS_HANDLE_TRACING_QUERY, * PPROCESS_HANDLE_TRACING_QUERY;
typedef struct _THREAD_TLS_INFORMATION
{
	ULONG Flags;
	PVOID NewTlsData;
	PVOID OldTlsData;
	HANDLE ThreadId;
} THREAD_TLS_INFORMATION, * PTHREAD_TLS_INFORMATION;
typedef enum _PROCESS_TLS_INFORMATION_TYPE
{
	ProcessTlsReplaceIndex,
	ProcessTlsReplaceVector,
	MaxProcessTlsOperation
} PROCESS_TLS_INFORMATION_TYPE, * PPROCESS_TLS_INFORMATION_TYPE;
typedef struct _PROCESS_TLS_INFORMATION
{
	ULONG Flags;
	ULONG OperationType;
	ULONG ThreadDataCount;
	ULONG TlsIndex;
	ULONG PreviousCount;
	THREAD_TLS_INFORMATION ThreadData[1];
} PROCESS_TLS_INFORMATION, * PPROCESS_TLS_INFORMATION;
typedef struct _PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION
{
	ULONG Version;
	ULONG Reserved;
	PVOID Callback;
} PROCESS_INSTRUMENTATION_CALLBACK_INFORMATION, * PPROCESS_INSTRUMENTATION_CALLBACK_INFORMATION;
typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION
{
	SIZE_T ReserveSize;
	SIZE_T ZeroBits;
	PVOID StackBase;
} PROCESS_STACK_ALLOCATION_INFORMATION, * PPROCESS_STACK_ALLOCATION_INFORMATION;
typedef struct _PROCESS_STACK_ALLOCATION_INFORMATION_EX
{
	ULONG PreferredNode;
	ULONG Reserved0;
	ULONG Reserved1;
	ULONG Reserved2;
	PROCESS_STACK_ALLOCATION_INFORMATION AllocInfo;
} PROCESS_STACK_ALLOCATION_INFORMATION_EX, * PPROCESS_STACK_ALLOCATION_INFORMATION_EX;
typedef union _PROCESS_AFFINITY_UPDATE_MODE
{
	ULONG Flags;
	struct
	{
		ULONG EnableAutoUpdate : 1;
		ULONG Permanent : 1;
		ULONG Reserved : 30;
	};
} PROCESS_AFFINITY_UPDATE_MODE, * PPROCESS_AFFINITY_UPDATE_MODE;
typedef union _PROCESS_MEMORY_ALLOCATION_MODE
{
	ULONG Flags;
	struct
	{
		ULONG TopDown : 1;
		ULONG Reserved : 31;
	};
} PROCESS_MEMORY_ALLOCATION_MODE, * PPROCESS_MEMORY_ALLOCATION_MODE;
typedef struct _PROCESS_HANDLE_INFORMATION
{
	ULONG HandleCount;
	ULONG HandleCountHighWatermark;
} PROCESS_HANDLE_INFORMATION, * PPROCESS_HANDLE_INFORMATION;
typedef struct _PROCESS_CYCLE_TIME_INFORMATION
{
	ULONGLONG AccumulatedCycles;
	ULONGLONG CurrentCycleCount;
} PROCESS_CYCLE_TIME_INFORMATION, * PPROCESS_CYCLE_TIME_INFORMATION;
typedef struct _PROCESS_WINDOW_INFORMATION
{
	ULONG WindowFlags;
	USHORT WindowTitleLength;
	WCHAR WindowTitle[1];
} PROCESS_WINDOW_INFORMATION, * PPROCESS_WINDOW_INFORMATION;
typedef struct _PROCESS_HANDLE_TABLE_ENTRY_INFO
{
	HANDLE HandleValue;
	ULONG_PTR HandleCount;
	ULONG_PTR PointerCount;
	ULONG GrantedAccess;
	ULONG ObjectTypeIndex;
	ULONG HandleAttributes;
	ULONG Reserved;
} PROCESS_HANDLE_TABLE_ENTRY_INFO, * PPROCESS_HANDLE_TABLE_ENTRY_INFO;
typedef struct _PROCESS_HANDLE_SNAPSHOT_INFORMATION
{
	ULONG_PTR NumberOfHandles;
	ULONG_PTR Reserved;
	PROCESS_HANDLE_TABLE_ENTRY_INFO Handles[1];
} PROCESS_HANDLE_SNAPSHOT_INFORMATION, * PPROCESS_HANDLE_SNAPSHOT_INFORMATION;
typedef struct _PROCESS_MITIGATION_POLICY_INFORMATION
{
	PROCESS_MITIGATION_POLICY Policy;
	union
	{
		PROCESS_MITIGATION_ASLR_POLICY ASLRPolicy;
		PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY StrictHandleCheckPolicy;
		PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY SystemCallDisablePolicy;
		PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY ExtensionPointDisablePolicy;
		PROCESS_MITIGATION_DYNAMIC_CODE_POLICY DynamicCodePolicy;
		PROCESS_MITIGATION_CONTROL_FLOW_GUARD_POLICY ControlFlowGuardPolicy;
		PROCESS_MITIGATION_BINARY_SIGNATURE_POLICY SignaturePolicy;
		PROCESS_MITIGATION_FONT_DISABLE_POLICY FontDisablePolicy;
		PROCESS_MITIGATION_IMAGE_LOAD_POLICY ImageLoadPolicy;
		PROCESS_MITIGATION_SYSTEM_CALL_FILTER_POLICY SystemCallFilterPolicy;
		PROCESS_MITIGATION_PAYLOAD_RESTRICTION_POLICY PayloadRestrictionPolicy;
		PROCESS_MITIGATION_CHILD_PROCESS_POLICY ChildProcessPolicy;
		PROCESS_MITIGATION_SIDE_CHANNEL_ISOLATION_POLICY SideChannelIsolationPolicy;
		PROCESS_MITIGATION_USER_SHADOW_STACK_POLICY UserShadowStackPolicy;
	};
} PROCESS_MITIGATION_POLICY_INFORMATION, * PPROCESS_MITIGATION_POLICY_INFORMATION;
typedef struct _PROCESS_KEEPALIVE_COUNT_INFORMATION
{
	ULONG WakeCount;
	ULONG NoWakeCount;
} PROCESS_KEEPALIVE_COUNT_INFORMATION, * PPROCESS_KEEPALIVE_COUNT_INFORMATION;
typedef struct _PROCESS_REVOKE_FILE_HANDLES_INFORMATION
{
	UNICODE_STRING TargetDevicePath;
} PROCESS_REVOKE_FILE_HANDLES_INFORMATION, * PPROCESS_REVOKE_FILE_HANDLES_INFORMATION;
typedef enum _PROCESS_WORKING_SET_OPERATION
{
	ProcessWorkingSetSwap,
	ProcessWorkingSetEmpty,
	ProcessWorkingSetOperationMax
} PROCESS_WORKING_SET_OPERATION;
typedef struct _PROCESS_WORKING_SET_CONTROL
{
	ULONG Version;
	PROCESS_WORKING_SET_OPERATION Operation;
	ULONG Flags;
} PROCESS_WORKING_SET_CONTROL, * PPROCESS_WORKING_SET_CONTROL;
typedef enum _PS_PROTECTED_TYPE
{
	PsProtectedTypeNone,
	PsProtectedTypeProtectedLight,
	PsProtectedTypeProtected,
	PsProtectedTypeMax
} PS_PROTECTED_TYPE;
typedef enum _PS_PROTECTED_SIGNER
{
	PsProtectedSignerNone,
	PsProtectedSignerAuthenticode,
	PsProtectedSignerCodeGen,
	PsProtectedSignerAntimalware,
	PsProtectedSignerLsa,
	PsProtectedSignerWindows,
	PsProtectedSignerWinTcb,
	PsProtectedSignerWinSystem,
	PsProtectedSignerApp,
	PsProtectedSignerMax
} PS_PROTECTED_SIGNER;
typedef struct _PS_PROTECTION
{
	union
	{
		UCHAR Level;
		struct
		{
			UCHAR Type : 3;
			UCHAR Audit : 1;
			UCHAR Signer : 4;
		};
	};
} PS_PROTECTION, * PPS_PROTECTION;
typedef struct _PROCESS_FAULT_INFORMATION
{
	ULONG FaultFlags;
	ULONG AdditionalInfo;
} PROCESS_FAULT_INFORMATION, * PPROCESS_FAULT_INFORMATION;
typedef struct _PROCESS_TELEMETRY_ID_INFORMATION
{
	ULONG HeaderSize;
	ULONG ProcessId;
	ULONGLONG ProcessStartKey;
	ULONGLONG CreateTime;
	ULONGLONG CreateInterruptTime;
	ULONGLONG CreateUnbiasedInterruptTime;
	ULONGLONG ProcessSequenceNumber;
	ULONGLONG SessionCreateTime;
	ULONG SessionId;
	ULONG BootId;
	ULONG ImageChecksum;
	ULONG ImageTimeDateStamp;
	ULONG UserSidOffset;
	ULONG ImagePathOffset;
	ULONG PackageNameOffset;
	ULONG RelativeAppNameOffset;
	ULONG CommandLineOffset;
} PROCESS_TELEMETRY_ID_INFORMATION, * PPROCESS_TELEMETRY_ID_INFORMATION;
typedef struct _PROCESS_COMMIT_RELEASE_INFORMATION
{
	ULONG Version;
	struct
	{
		ULONG Eligible : 1;
		ULONG ReleaseRepurposedMemResetCommit : 1;
		ULONG ForceReleaseMemResetCommit : 1;
		ULONG Spare : 29;
	};
	SIZE_T CommitDebt;
	SIZE_T CommittedMemResetSize;
	SIZE_T RepurposedMemResetSize;
} PROCESS_COMMIT_RELEASE_INFORMATION, * PPROCESS_COMMIT_RELEASE_INFORMATION;
typedef struct _PROCESS_JOB_MEMORY_INFO
{
	ULONGLONG SharedCommitUsage;
	ULONGLONG PrivateCommitUsage;
	ULONGLONG PeakPrivateCommitUsage;
	ULONGLONG PrivateCommitLimit;
	ULONGLONG TotalCommitLimit;
} PROCESS_JOB_MEMORY_INFO, * PPROCESS_JOB_MEMORY_INFO;
typedef struct _PROCESS_CHILD_PROCESS_INFORMATION
{
	BOOLEAN ProhibitChildProcesses;
	BOOLEAN AlwaysAllowSecureChildProcess;
	BOOLEAN AuditProhibitChildProcesses;
} PROCESS_CHILD_PROCESS_INFORMATION, * PPROCESS_CHILD_PROCESS_INFORMATION;
typedef struct _POWER_THROTTLING_PROCESS_STATE
{
	ULONG Version;
	ULONG ControlMask;
	ULONG StateMask;
} POWER_THROTTLING_PROCESS_STATE, * PPOWER_THROTTLING_PROCESS_STATE;
typedef struct _WIN32K_SYSCALL_FILTER
{
	ULONG FilterState;
	ULONG FilterSet;
} WIN32K_SYSCALL_FILTER, * PWIN32K_SYSCALL_FILTER;
typedef struct _PROCESS_WAKE_INFORMATION
{
	ULONGLONG NotificationChannel;
	ULONG WakeCounters[7];
	struct _JOBOBJECT_WAKE_FILTER* WakeFilter;
} PROCESS_WAKE_INFORMATION, * PPROCESS_WAKE_INFORMATION;
typedef struct _PROCESS_ENERGY_TRACKING_STATE
{
	ULONG StateUpdateMask;
	ULONG StateDesiredValue;
	ULONG StateSequence;
	ULONG UpdateTag : 1;
	WCHAR Tag[64];
} PROCESS_ENERGY_TRACKING_STATE, * PPROCESS_ENERGY_TRACKING_STATE;
typedef struct _MANAGE_WRITES_TO_EXECUTABLE_MEMORY
{
	ULONG Version : 8;
	ULONG ProcessEnableWriteExceptions : 1;
	ULONG ThreadAllowWrites : 1;
	ULONG Spare : 22;
	PVOID KernelWriteToExecutableSignal;
} MANAGE_WRITES_TO_EXECUTABLE_MEMORY, * PMANAGE_WRITES_TO_EXECUTABLE_MEMORY;
typedef struct _POWER_THROTTLING_THREAD_STATE
{
	ULONG Version;
	ULONG ControlMask;
	ULONG StateMask;
} POWER_THROTTLING_THREAD_STATE, * PPOWER_THROTTLING_THREAD_STATE;
typedef union _PROCESS_READWRITEVM_LOGGING_INFORMATION
{
	UCHAR Flags;
	struct
	{
		UCHAR EnableReadVmLogging : 1;
		UCHAR EnableWriteVmLogging : 1;
		UCHAR Unused : 6;
	};
} PROCESS_READWRITEVM_LOGGING_INFORMATION, * PPROCESS_READWRITEVM_LOGGING_INFORMATION;
typedef struct _PROCESS_UPTIME_INFORMATION
{
	ULONGLONG QueryInterruptTime;
	ULONGLONG QueryUnbiasedTime;
	ULONGLONG EndInterruptTime;
	ULONGLONG TimeSinceCreation;
	ULONGLONG Uptime;
	ULONGLONG SuspendedTime;
	union
	{
		ULONG HangCount : 4;
		ULONG GhostCount : 4;
		ULONG Crashed : 1;
		ULONG Terminated : 1;
	};
} PROCESS_UPTIME_INFORMATION, * PPROCESS_UPTIME_INFORMATION;
typedef union _PROCESS_SYSTEM_RESOURCE_MANAGEMENT
{
	ULONG Flags;
	struct
	{
		ULONG Foreground : 1;
		ULONG Reserved : 31;
	};
} PROCESS_SYSTEM_RESOURCE_MANAGEMENT, * PPROCESS_SYSTEM_RESOURCE_MANAGEMENT;
typedef struct _PROCESS_SECURITY_DOMAIN_INFORMATION
{
	ULONGLONG SecurityDomain;
} PROCESS_SECURITY_DOMAIN_INFORMATION, * PPROCESS_SECURITY_DOMAIN_INFORMATION;
typedef struct _PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION
{
	HANDLE ProcessHandle;
} PROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION, * PPROCESS_COMBINE_SECURITY_DOMAINS_INFORMATION;
typedef struct _PROCESS_LOGGING_INFORMATION
{
	ULONG Flags;
	struct
	{
		ULONG EnableReadVmLogging : 1;
		ULONG EnableWriteVmLogging : 1;
		ULONG EnableProcessSuspendResumeLogging : 1;
		ULONG EnableThreadSuspendResumeLogging : 1;
		ULONG Reserved : 28;
	};
} PROCESS_LOGGING_INFORMATION, * PPROCESS_LOGGING_INFORMATION;
typedef struct _PROCESS_LEAP_SECOND_INFORMATION
{
	ULONG Flags;
	ULONG Reserved;
} PROCESS_LEAP_SECOND_INFORMATION, * PPROCESS_LEAP_SECOND_INFORMATION;
typedef struct _PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION
{
	ULONGLONG ReserveSize;
	ULONGLONG CommitSize;
	ULONG PreferredNode;
	ULONG Reserved;
	PVOID Ssp;
} PROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION, * PPROCESS_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
typedef struct _PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION
{
	PVOID Ssp;
} PROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION, * PPROCESS_FREE_FIBER_SHADOW_STACK_ALLOCATION_INFORMATION;
typedef struct _THREAD_BASIC_INFORMATION
{
	NTSTATUS ExitStatus;
	PTEB TebBaseAddress;
	CLIENT_ID ClientId;
	ULONG_PTR AffinityMask;
	KPRIORITY Priority;
	LONG BasePriority;
} THREAD_BASIC_INFORMATION, * PTHREAD_BASIC_INFORMATION;
typedef struct _THREAD_LAST_SYSCALL_INFORMATION
{
	PVOID FirstArgument;
	USHORT SystemCallNumber;
	USHORT Pad[0x1];
	ULONG64 WaitTime;
} THREAD_LAST_SYSCALL_INFORMATION, * PTHREAD_LAST_SYSCALL_INFORMATION;
typedef struct _THREAD_CYCLE_TIME_INFORMATION
{
	ULONGLONG AccumulatedCycles;
	ULONGLONG CurrentCycleCount;
} THREAD_CYCLE_TIME_INFORMATION, * PTHREAD_CYCLE_TIME_INFORMATION;
typedef struct _THREAD_TEB_INFORMATION
{
	PVOID TebInformation;
	ULONG TebOffset;
	ULONG BytesToRead;
} THREAD_TEB_INFORMATION, * PTHREAD_TEB_INFORMATION;
typedef struct _COUNTER_READING
{
	HARDWARE_COUNTER_TYPE Type;
	ULONG Index;
	ULONG64 Start;
	ULONG64 Total;
} COUNTER_READING, * PCOUNTER_READING;
typedef struct _THREAD_PERFORMANCE_DATA
{
	USHORT Size;
	USHORT Version;
	PROCESSOR_NUMBER ProcessorNumber;
	ULONG ContextSwitches;
	ULONG HwCountersCount;
	ULONG64 UpdateCount;
	ULONG64 WaitReasonBitMap;
	ULONG64 HardwareCounters;
	COUNTER_READING CycleTime;
	COUNTER_READING HwCounters[16];
} THREAD_PERFORMANCE_DATA, * PTHREAD_PERFORMANCE_DATA;
typedef struct _THREAD_PROFILING_INFORMATION
{
	ULONG64 HardwareCounters;
	ULONG Flags;
	ULONG Enable;
	PTHREAD_PERFORMANCE_DATA PerformanceData;
} THREAD_PROFILING_INFORMATION, * PTHREAD_PROFILING_INFORMATION;
typedef struct _RTL_UMS_CONTEXT
{
	SINGLE_LIST_ENTRY Link;
	CONTEXT Context;
	PVOID Teb;
	PVOID UserContext;
	volatile ULONG ScheduledThread;
	volatile ULONG Suspended;
	volatile ULONG VolatileContext;
	volatile ULONG Terminated;
	volatile ULONG DebugActive;
	volatile ULONG RunningOnSelfThread;
	volatile ULONG DenyRunningOnSelfThread;
	volatile LONG Flags;
	volatile ULONG64 KernelUpdateLock;
	volatile ULONG64 PrimaryClientID;
	volatile ULONG64 ContextLock;
	struct _RTL_UMS_CONTEXT* PrimaryUmsContext;
	ULONG SwitchCount;
	ULONG KernelYieldCount;
	ULONG MixedYieldCount;
	ULONG YieldCount;
} RTL_UMS_CONTEXT, * PRTL_UMS_CONTEXT;
typedef enum _THREAD_UMS_INFORMATION_COMMAND
{
	UmsInformationCommandInvalid,
	UmsInformationCommandAttach,
	UmsInformationCommandDetach,
	UmsInformationCommandQuery
} THREAD_UMS_INFORMATION_COMMAND;
typedef struct _RTL_UMS_COMPLETION_LIST
{
	PSINGLE_LIST_ENTRY ThreadListHead;
	PVOID CompletionEvent;
	ULONG CompletionFlags;
	SINGLE_LIST_ENTRY InternalListHead;
} RTL_UMS_COMPLETION_LIST, * PRTL_UMS_COMPLETION_LIST;
typedef struct _THREAD_UMS_INFORMATION
{
	THREAD_UMS_INFORMATION_COMMAND Command;
	PRTL_UMS_COMPLETION_LIST CompletionList;
	PRTL_UMS_CONTEXT UmsContext;
	union
	{
		ULONG Flags;
		struct
		{
			ULONG IsUmsSchedulerThread : 1;
			ULONG IsUmsWorkerThread : 1;
			ULONG SpareBits : 30;
		};
	};
} THREAD_UMS_INFORMATION, * PTHREAD_UMS_INFORMATION;
typedef struct _THREAD_NAME_INFORMATION
{
	UNICODE_STRING ThreadName;
} THREAD_NAME_INFORMATION, * PTHREAD_NAME_INFORMATION;
typedef struct _ALPC_WORK_ON_BEHALF_TICKET
{
	ULONG ThreadId;
	ULONG ThreadCreationTimeLow;
} ALPC_WORK_ON_BEHALF_TICKET, * PALPC_WORK_ON_BEHALF_TICKET;
typedef struct _RTL_WORK_ON_BEHALF_TICKET_EX
{
	ALPC_WORK_ON_BEHALF_TICKET Ticket;
	union
	{
		ULONG Flags;
		struct
		{
			ULONG CurrentThread : 1;
			ULONG Reserved1 : 31;
		};
	};
	ULONG Reserved2;
} RTL_WORK_ON_BEHALF_TICKET_EX, * PRTL_WORK_ON_BEHALF_TICKET_EX;
typedef enum _SUBSYSTEM_INFORMATION_TYPE
{
	SubsystemInformationTypeWin32,
	SubsystemInformationTypeWSL,
	MaxSubsystemInformationType
} SUBSYSTEM_INFORMATION_TYPE;
typedef enum _THREAD_WORKLOAD_CLASS
{
	ThreadWorkloadClassDefault,
	ThreadWorkloadClassGraphics,
	MaxThreadWorkloadClass
} THREAD_WORKLOAD_CLASS;

NTSTATUS
__stdcall
NtCreateProcess(
	PHANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ParentProcess,
	BOOLEAN InheritObjectTable,
	HANDLE SectionHandle,
	HANDLE DebugPort,
	HANDLE ExceptionPort
);

NTSTATUS
__stdcall
NtCreateProcessEx(
	PHANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ParentProcess,
	ULONG Flags,
	HANDLE SectionHandle,
	HANDLE DebugPort,
	HANDLE ExceptionPort,
	ULONG JobMemberLevel
);

NTSTATUS
__stdcall
NtOpenProcess(
	PHANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PCLIENT_ID ClientId
);

NTSTATUS
__stdcall
NtTerminateProcess(
	HANDLE ProcessHandle,
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
NtSuspendProcess(
	HANDLE ProcessHandle
);

NTSTATUS
__stdcall
NtResumeProcess(
	HANDLE ProcessHandle
);

NTSTATUS
__stdcall
NtQueryInformationProcess(
	HANDLE ProcessHandle,
	PROCESSINFOCLASS ProcessInformationClass,
	PVOID ProcessInformation,
	ULONG ProcessInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtGetNextProcess(
	HANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	ULONG Flags,
	PHANDLE NewProcessHandle
);

NTSTATUS
__stdcall
NtGetNextThread(
	HANDLE ProcessHandle,
	HANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	ULONG Flags,
	PHANDLE NewThreadHandle
);

NTSTATUS
__stdcall
NtSetInformationProcess(
	HANDLE ProcessHandle,
	PROCESSINFOCLASS ProcessInformationClass,
	PVOID ProcessInformation,
	ULONG ProcessInformationLength
);

NTSTATUS
__stdcall
NtQueryPortInformationProcess(
	void
);

NTSTATUS
__stdcall
NtCreateThread(
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ProcessHandle,
	PCLIENT_ID ClientId,
	PCONTEXT ThreadContext,
	PINITIAL_TEB InitialTeb,
	BOOLEAN CreateSuspended
);

NTSTATUS
__stdcall
NtOpenThread(
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PCLIENT_ID ClientId
);

NTSTATUS
__stdcall
NtTerminateThread(
	HANDLE ThreadHandle,
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
NtSuspendThread(
	HANDLE ThreadHandle,
	PULONG PreviousSuspendCount
);

NTSTATUS
__stdcall
NtResumeThread(
	HANDLE ThreadHandle,
	PULONG PreviousSuspendCount
);

ULONG
__stdcall
NtGetCurrentProcessorNumber(
	void
);

ULONG
__stdcall
NtGetCurrentProcessorNumberEx(
	PPROCESSOR_NUMBER ProcNumber
);

NTSTATUS
__stdcall
NtGetContextThread(
	HANDLE ThreadHandle,
	PCONTEXT ThreadContext
);

NTSTATUS
__stdcall
NtSetContextThread(
	HANDLE ThreadHandle,
	PCONTEXT ThreadContext
);

NTSTATUS
__stdcall
NtQueryInformationThread(
	HANDLE ThreadHandle,
	THREADINFOCLASS ThreadInformationClass,
	PVOID ThreadInformation,
	ULONG ThreadInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationThread(
	HANDLE ThreadHandle,
	THREADINFOCLASS ThreadInformationClass,
	PVOID ThreadInformation,
	ULONG ThreadInformationLength
);

NTSTATUS
__stdcall
NtAlertThread(
	HANDLE ThreadHandle
);

NTSTATUS
__stdcall
NtAlertResumeThread(
	HANDLE ThreadHandle,
	PULONG PreviousSuspendCount
);

NTSTATUS
__stdcall
NtTestAlert(
	void
);

NTSTATUS
__stdcall
NtImpersonateThread(
	HANDLE ServerThreadHandle,
	HANDLE ClientThreadHandle,
	PSECURITY_QUALITY_OF_SERVICE SecurityQos
);

NTSTATUS
__stdcall
NtRegisterThreadTerminatePort(
	HANDLE PortHandle
);

NTSTATUS
__stdcall
NtSetLdtEntries(
	ULONG Selector0,
	ULONG Entry0Low,
	ULONG Entry0Hi,
	ULONG Selector1,
	ULONG Entry1Low,
	ULONG Entry1Hi
);
typedef void (*PPS_APC_ROUTINE)(
	PVOID ApcArgument1,
	PVOID ApcArgument2,
	PVOID ApcArgument3
	);

NTSTATUS
__stdcall
NtQueueApcThread(
	HANDLE ThreadHandle,
	PPS_APC_ROUTINE ApcRoutine,
	PVOID ApcArgument1,
	PVOID ApcArgument2,
	PVOID ApcArgument3
);

NTSTATUS
__stdcall
NtQueueApcThreadEx(
	HANDLE ThreadHandle,
	HANDLE ReserveHandle,
	PPS_APC_ROUTINE ApcRoutine,
	PVOID ApcArgument1,
	PVOID ApcArgument2,
	PVOID ApcArgument3
);
typedef enum _PS_ATTRIBUTE_NUM
{
	PsAttributeParentProcess,
	PsAttributeDebugPort,
	PsAttributeToken,
	PsAttributeClientId,
	PsAttributeTebAddress,
	PsAttributeImageName,
	PsAttributeImageInfo,
	PsAttributeMemoryReserve,
	PsAttributePriorityClass,
	PsAttributeErrorMode,
	PsAttributeStdHandleInfo,
	PsAttributeHandleList,
	PsAttributeGroupAffinity,
	PsAttributePreferredNode,
	PsAttributeIdealProcessor,
	PsAttributeUmsThread,
	PsAttributeMitigationOptions,
	PsAttributeProtectionLevel,
	PsAttributeSecureProcess,
	PsAttributeJobList,
	PsAttributeChildProcessPolicy,
	PsAttributeAllApplicationPackagesPolicy,
	PsAttributeWin32kFilter,
	PsAttributeSafeOpenPromptOriginClaim,
	PsAttributeBnoIsolation,
	PsAttributeDesktopAppPolicy,
	PsAttributeChpe,
	PsAttributeMax
} PS_ATTRIBUTE_NUM;
typedef struct _PS_ATTRIBUTE
{
	ULONG_PTR Attribute;
	SIZE_T Size;
	union
	{
		ULONG_PTR Value;
		PVOID ValuePtr;
	};
	PSIZE_T ReturnLength;
} PS_ATTRIBUTE, * PPS_ATTRIBUTE;
typedef struct _PS_ATTRIBUTE_LIST
{
	SIZE_T TotalLength;
	PS_ATTRIBUTE Attributes[1];
} PS_ATTRIBUTE_LIST, * PPS_ATTRIBUTE_LIST;
typedef struct _PS_MEMORY_RESERVE
{
	PVOID ReserveAddress;
	SIZE_T ReserveSize;
} PS_MEMORY_RESERVE, * PPS_MEMORY_RESERVE;
typedef enum _PS_STD_HANDLE_STATE
{
	PsNeverDuplicate,
	PsRequestDuplicate,
	PsAlwaysDuplicate,
	PsMaxStdHandleStates
} PS_STD_HANDLE_STATE;
typedef struct _PS_STD_HANDLE_INFO
{
	union
	{
		ULONG Flags;
		struct
		{
			ULONG StdHandleState : 2;
			ULONG PseudoHandleMask : 3;
		};
	};
	ULONG StdHandleSubsystemType;
} PS_STD_HANDLE_INFO, * PPS_STD_HANDLE_INFO;
typedef struct _PS_BNO_ISOLATION_PARAMETERS
{
	UNICODE_STRING IsolationPrefix;
	ULONG HandleCount;
	PVOID* Handles;
	BOOLEAN IsolationEnabled;
} PS_BNO_ISOLATION_PARAMETERS, * PPS_BNO_ISOLATION_PARAMETERS;
typedef enum _PS_MITIGATION_OPTION
{
	PS_MITIGATION_OPTION_NX,
	PS_MITIGATION_OPTION_SEHOP,
	PS_MITIGATION_OPTION_FORCE_RELOCATE_IMAGES,
	PS_MITIGATION_OPTION_HEAP_TERMINATE,
	PS_MITIGATION_OPTION_BOTTOM_UP_ASLR,
	PS_MITIGATION_OPTION_HIGH_ENTROPY_ASLR,
	PS_MITIGATION_OPTION_STRICT_HANDLE_CHECKS,
	PS_MITIGATION_OPTION_WIN32K_SYSTEM_CALL_DISABLE,
	PS_MITIGATION_OPTION_EXTENSION_POINT_DISABLE,
	PS_MITIGATION_OPTION_PROHIBIT_DYNAMIC_CODE,
	PS_MITIGATION_OPTION_CONTROL_FLOW_GUARD,
	PS_MITIGATION_OPTION_BLOCK_NON_MICROSOFT_BINARIES,
	PS_MITIGATION_OPTION_FONT_DISABLE,
	PS_MITIGATION_OPTION_IMAGE_LOAD_NO_REMOTE,
	PS_MITIGATION_OPTION_IMAGE_LOAD_NO_LOW_LABEL,
	PS_MITIGATION_OPTION_IMAGE_LOAD_PREFER_SYSTEM32,
	PS_MITIGATION_OPTION_RETURN_FLOW_GUARD,
	PS_MITIGATION_OPTION_LOADER_INTEGRITY_CONTINUITY,
	PS_MITIGATION_OPTION_STRICT_CONTROL_FLOW_GUARD,
	PS_MITIGATION_OPTION_RESTRICT_SET_THREAD_CONTEXT,
	PS_MITIGATION_OPTION_ROP_STACKPIVOT,
	PS_MITIGATION_OPTION_ROP_CALLER_CHECK,
	PS_MITIGATION_OPTION_ROP_SIMEXEC,
	PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER,
	PS_MITIGATION_OPTION_EXPORT_ADDRESS_FILTER_PLUS,
	PS_MITIGATION_OPTION_RESTRICT_CHILD_PROCESS_CREATION,
	PS_MITIGATION_OPTION_IMPORT_ADDRESS_FILTER,
	PS_MITIGATION_OPTION_MODULE_TAMPERING_PROTECTION,
	PS_MITIGATION_OPTION_RESTRICT_INDIRECT_BRANCH_PREDICTION,
	PS_MITIGATION_OPTION_SPECULATIVE_STORE_BYPASS_DISABLE,
	PS_MITIGATION_OPTION_ALLOW_DOWNGRADE_DYNAMIC_CODE_POLICY,
	PS_MITIGATION_OPTION_CET_SHADOW_STACKS
} PS_MITIGATION_OPTION;
typedef enum _PS_CREATE_STATE
{
	PsCreateInitialState,
	PsCreateFailOnFileOpen,
	PsCreateFailOnSectionCreate,
	PsCreateFailExeFormat,
	PsCreateFailMachineMismatch,
	PsCreateFailExeName,
	PsCreateSuccess,
	PsCreateMaximumStates
} PS_CREATE_STATE;
typedef struct _PS_CREATE_INFO
{
	SIZE_T Size;
	PS_CREATE_STATE State;
	union
	{
		struct
		{
			union
			{
				ULONG InitFlags;
				struct
				{
					UCHAR WriteOutputOnExit : 1;
					UCHAR DetectManifest : 1;
					UCHAR IFEOSkipDebugger : 1;
					UCHAR IFEODoNotPropagateKeyState : 1;
					UCHAR SpareBits1 : 4;
					UCHAR SpareBits2 : 8;
					USHORT ProhibitedImageCharacteristics : 16;
				};
			};
			ACCESS_MASK AdditionalFileAccess;
		} InitState;
		struct
		{
			HANDLE FileHandle;
		} FailSection;
		struct
		{
			USHORT DllCharacteristics;
		} ExeFormat;
		struct
		{
			HANDLE IFEOKey;
		} ExeName;
		struct
		{
			union
			{
				ULONG OutputFlags;
				struct
				{
					UCHAR ProtectedProcess : 1;
					UCHAR AddressSpaceOverride : 1;
					UCHAR DevOverrideEnabled : 1;
					UCHAR ManifestDetected : 1;
					UCHAR ProtectedProcessLight : 1;
					UCHAR SpareBits1 : 3;
					UCHAR SpareBits2 : 8;
					USHORT SpareBits3 : 16;
				};
			};
			HANDLE FileHandle;
			HANDLE SectionHandle;
			ULONGLONG UserProcessParametersNative;
			ULONG UserProcessParametersWow64;
			ULONG CurrentParameterFlags;
			ULONGLONG PebAddressNative;
			ULONG PebAddressWow64;
			ULONGLONG ManifestAddress;
			ULONG ManifestSize;
		} SuccessState;
	};
} PS_CREATE_INFO, * PPS_CREATE_INFO;

NTSTATUS
__stdcall
NtCreateUserProcess(
	PHANDLE ProcessHandle,
	PHANDLE ThreadHandle,
	ACCESS_MASK ProcessDesiredAccess,
	ACCESS_MASK ThreadDesiredAccess,
	POBJECT_ATTRIBUTES ProcessObjectAttributes,
	POBJECT_ATTRIBUTES ThreadObjectAttributes,
	ULONG ProcessFlags,
	ULONG ThreadFlags,
	PVOID ProcessParameters,
	PPS_CREATE_INFO CreateInfo,
	PPS_ATTRIBUTE_LIST AttributeList
);

NTSTATUS
__stdcall
NtCreateThreadEx(
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ProcessHandle,
	PVOID StartRoutine,
	PVOID Argument,
	ULONG CreateFlags,
	SIZE_T ZeroBits,
	SIZE_T StackSize,
	SIZE_T MaximumStackSize,
	PPS_ATTRIBUTE_LIST AttributeList
);
typedef struct _JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION
{
	JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
	IO_COUNTERS IoInfo;
	PROCESS_DISK_COUNTERS DiskIoInfo;
	ULONG64 ContextSwitches;
	LARGE_INTEGER TotalCycleTime;
	ULONG64 ReadyTime;
	PROCESS_ENERGY_VALUES EnergyValues;
} JOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION, * PJOBOBJECT_EXTENDED_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_WAKE_INFORMATION
{
	HANDLE NotificationChannel;
	ULONG64 WakeCounters[7];
} JOBOBJECT_WAKE_INFORMATION, * PJOBOBJECT_WAKE_INFORMATION;
typedef struct _JOBOBJECT_WAKE_INFORMATION_V1
{
	HANDLE NotificationChannel;
	ULONG64 WakeCounters[4];
} JOBOBJECT_WAKE_INFORMATION_V1, * PJOBOBJECT_WAKE_INFORMATION_V1;
typedef struct _JOBOBJECT_INTERFERENCE_INFORMATION
{
	ULONG64 Count;
} JOBOBJECT_INTERFERENCE_INFORMATION, * PJOBOBJECT_INTERFERENCE_INFORMATION;
typedef struct _JOBOBJECT_WAKE_FILTER
{
	ULONG HighEdgeFilter;
	ULONG LowEdgeFilter;
} JOBOBJECT_WAKE_FILTER, * PJOBOBJECT_WAKE_FILTER;
typedef struct _JOBOBJECT_FREEZE_INFORMATION
{
	union
	{
		ULONG Flags;
		struct
		{
			ULONG FreezeOperation : 1;
			ULONG FilterOperation : 1;
			ULONG SwapOperation : 1;
			ULONG Reserved : 29;
		};
	};
	BOOLEAN Freeze;
	BOOLEAN Swap;
	UCHAR Reserved0[2];
	JOBOBJECT_WAKE_FILTER WakeFilter;
} JOBOBJECT_FREEZE_INFORMATION, * PJOBOBJECT_FREEZE_INFORMATION;
typedef struct _JOBOBJECT_MEMORY_USAGE_INFORMATION
{
	ULONG64 JobMemory;
	ULONG64 PeakJobMemoryUsed;
} JOBOBJECT_MEMORY_USAGE_INFORMATION, * PJOBOBJECT_MEMORY_USAGE_INFORMATION;
typedef struct _JOBOBJECT_MEMORY_USAGE_INFORMATION_V2
{
	JOBOBJECT_MEMORY_USAGE_INFORMATION BasicInfo;
	ULONG64 JobSharedMemory;
	ULONG64 Reserved[2];
} JOBOBJECT_MEMORY_USAGE_INFORMATION_V2, * PJOBOBJECT_MEMORY_USAGE_INFORMATION_V2;
typedef struct _SILO_USER_SHARED_DATA
{
	ULONG64 ServiceSessionId;
	ULONG ActiveConsoleId;
	LONGLONG ConsoleSessionForegroundProcessId;
	NT_PRODUCT_TYPE NtProductType;
	ULONG SuiteMask;
	ULONG SharedUserSessionId;
	BOOLEAN IsMultiSessionSku;
	WCHAR NtSystemRoot[260];
	USHORT UserModeGlobalLogger[16];
} SILO_USER_SHARED_DATA, * PSILO_USER_SHARED_DATA;
typedef struct _SILOOBJECT_ROOT_DIRECTORY
{
	ULONG ControlFlags;
	UNICODE_STRING Path;
} SILOOBJECT_ROOT_DIRECTORY, * PSILOOBJECT_ROOT_DIRECTORY;
typedef struct _JOBOBJECT_ENERGY_TRACKING_STATE
{
	ULONG64 Value;
	ULONG UpdateMask;
	ULONG DesiredState;
} JOBOBJECT_ENERGY_TRACKING_STATE, * PJOBOBJECT_ENERGY_TRACKING_STATE;

NTSTATUS
__stdcall
NtCreateJobObject(
	PHANDLE JobHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtOpenJobObject(
	PHANDLE JobHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtAssignProcessToJobObject(
	HANDLE JobHandle,
	HANDLE ProcessHandle
);

NTSTATUS
__stdcall
NtTerminateJobObject(
	HANDLE JobHandle,
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
NtIsProcessInJob(
	HANDLE ProcessHandle,
	HANDLE JobHandle
);

NTSTATUS
__stdcall
NtQueryInformationJobObject(
	HANDLE JobHandle,
	JOBOBJECTINFOCLASS JobObjectInformationClass,
	PVOID JobObjectInformation,
	ULONG JobObjectInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationJobObject(
	HANDLE JobHandle,
	JOBOBJECTINFOCLASS JobObjectInformationClass,
	PVOID JobObjectInformation,
	ULONG JobObjectInformationLength
);

NTSTATUS
__stdcall
NtCreateJobSet(
	ULONG NumJob,
	PJOB_SET_ARRAY UserJobSet,
	ULONG Flags
);
typedef enum _MEMORY_RESERVE_TYPE
{
	MemoryReserveUserApc,
	MemoryReserveIoCompletion,
	MemoryReserveTypeMax
} MEMORY_RESERVE_TYPE;

NTSTATUS
__stdcall
NtAllocateReserveObject(
	PHANDLE MemoryReserveHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	MEMORY_RESERVE_TYPE Type
);
typedef enum _PNP_VETO_TYPE {
	PNP_VetoTypeUnknown,
	PNP_VetoLegacyDevice,
	PNP_VetoPendingClose,
	PNP_VetoWindowsApp,
	PNP_VetoWindowsService,
	PNP_VetoOutstandingOpen,
	PNP_VetoDevice,
	PNP_VetoDriver,
	PNP_VetoIllegalDeviceRequest,
	PNP_VetoInsufficientPower,
	PNP_VetoNonDisableable,
	PNP_VetoLegacyDriver,
	PNP_VetoInsufficientRights,
	PNP_VetoAlreadyRemoved,
} PNP_VETO_TYPE, * PPNP_VETO_TYPE;

void
__stdcall
DbgUserBreakPoint(
	void
);

void
__stdcall
DbgBreakPoint(
	void
);

void
__stdcall
DbgBreakPointWithStatus(
	ULONG Status
);

ULONG
__cdecl
DbgPrint(
	PCSTR Format,
	...
);

ULONG
__cdecl
DbgPrintEx(
	ULONG ComponentId,
	ULONG Level,
	PCSTR Format,
	...
);

ULONG
__stdcall
vDbgPrintEx(
	ULONG ComponentId,
	ULONG Level,
	PCCH Format,
	va_list arglist
);

ULONG
__stdcall
vDbgPrintExWithPrefix(
	PCCH Prefix,
	ULONG ComponentId,
	ULONG Level,
	PCCH Format,
	va_list arglist
);

NTSTATUS
__stdcall
DbgQueryDebugFilterState(
	ULONG ComponentId,
	ULONG Level
);

NTSTATUS
__stdcall
DbgSetDebugFilterState(
	ULONG ComponentId,
	ULONG Level,
	BOOLEAN State
);

ULONG
__stdcall
DbgPrompt(
	PCCH Prompt,
	PCH Response,
	ULONG Length
);
typedef struct _DBGKM_EXCEPTION
{
	EXCEPTION_RECORD ExceptionRecord;
	ULONG FirstChance;
} DBGKM_EXCEPTION, * PDBGKM_EXCEPTION;
typedef struct _DBGKM_CREATE_THREAD
{
	ULONG SubSystemKey;
	PVOID StartAddress;
} DBGKM_CREATE_THREAD, * PDBGKM_CREATE_THREAD;
typedef struct _DBGKM_CREATE_PROCESS
{
	ULONG SubSystemKey;
	HANDLE FileHandle;
	PVOID BaseOfImage;
	ULONG DebugInfoFileOffset;
	ULONG DebugInfoSize;
	DBGKM_CREATE_THREAD InitialThread;
} DBGKM_CREATE_PROCESS, * PDBGKM_CREATE_PROCESS;
typedef struct _DBGKM_EXIT_THREAD
{
	NTSTATUS ExitStatus;
} DBGKM_EXIT_THREAD, * PDBGKM_EXIT_THREAD;
typedef struct _DBGKM_EXIT_PROCESS
{
	NTSTATUS ExitStatus;
} DBGKM_EXIT_PROCESS, * PDBGKM_EXIT_PROCESS;
typedef struct _DBGKM_LOAD_DLL
{
	HANDLE FileHandle;
	PVOID BaseOfDll;
	ULONG DebugInfoFileOffset;
	ULONG DebugInfoSize;
	PVOID NamePointer;
} DBGKM_LOAD_DLL, * PDBGKM_LOAD_DLL;
typedef struct _DBGKM_UNLOAD_DLL
{
	PVOID BaseAddress;
} DBGKM_UNLOAD_DLL, * PDBGKM_UNLOAD_DLL;
typedef enum _DBG_STATE
{
	DbgIdle,
	DbgReplyPending,
	DbgCreateThreadStateChange,
	DbgCreateProcessStateChange,
	DbgExitThreadStateChange,
	DbgExitProcessStateChange,
	DbgExceptionStateChange,
	DbgBreakpointStateChange,
	DbgSingleStepStateChange,
	DbgLoadDllStateChange,
	DbgUnloadDllStateChange
} DBG_STATE, * PDBG_STATE;
typedef struct _DBGUI_CREATE_THREAD
{
	HANDLE HandleToThread;
	DBGKM_CREATE_THREAD NewThread;
} DBGUI_CREATE_THREAD, * PDBGUI_CREATE_THREAD;
typedef struct _DBGUI_CREATE_PROCESS
{
	HANDLE HandleToProcess;
	HANDLE HandleToThread;
	DBGKM_CREATE_PROCESS NewProcess;
} DBGUI_CREATE_PROCESS, * PDBGUI_CREATE_PROCESS;
typedef struct _DBGUI_WAIT_STATE_CHANGE
{
	DBG_STATE NewState;
	CLIENT_ID AppClientId;
	union
	{
		DBGKM_EXCEPTION Exception;
		DBGUI_CREATE_THREAD CreateThread;
		DBGUI_CREATE_PROCESS CreateProcessInfo;
		DBGKM_EXIT_THREAD ExitThread;
		DBGKM_EXIT_PROCESS ExitProcess;
		DBGKM_LOAD_DLL LoadDll;
		DBGKM_UNLOAD_DLL UnloadDll;
	} StateInfo;
} DBGUI_WAIT_STATE_CHANGE, * PDBGUI_WAIT_STATE_CHANGE;
typedef enum _DEBUGOBJECTINFOCLASS
{
	DebugObjectUnusedInformation,
	DebugObjectKillProcessOnExitInformation,
	MaxDebugObjectInfoClass
} DEBUGOBJECTINFOCLASS, * PDEBUGOBJECTINFOCLASS;

NTSTATUS
__stdcall
NtCreateDebugObject(
	PHANDLE DebugObjectHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG Flags
);

NTSTATUS
__stdcall
NtDebugActiveProcess(
	HANDLE ProcessHandle,
	HANDLE DebugObjectHandle
);

NTSTATUS
__stdcall
NtDebugContinue(
	HANDLE DebugObjectHandle,
	PCLIENT_ID ClientId,
	NTSTATUS ContinueStatus
);

NTSTATUS
__stdcall
NtRemoveProcessDebug(
	HANDLE ProcessHandle,
	HANDLE DebugObjectHandle
);

NTSTATUS
__stdcall
NtSetInformationDebugObject(
	HANDLE DebugObjectHandle,
	DEBUGOBJECTINFOCLASS DebugObjectInformationClass,
	PVOID DebugInformation,
	ULONG DebugInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtWaitForDebugEvent(
	HANDLE DebugObjectHandle,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout,
	PDBGUI_WAIT_STATE_CHANGE WaitStateChange
);

NTSTATUS
__stdcall
DbgUiConnectToDbg(
	void
);

HANDLE
__stdcall
DbgUiGetThreadDebugObject(
	void
);

void
__stdcall
DbgUiSetThreadDebugObject(
	HANDLE DebugObject
);

NTSTATUS
__stdcall
DbgUiWaitStateChange(
	PDBGUI_WAIT_STATE_CHANGE StateChange,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
DbgUiContinue(
	PCLIENT_ID AppClientId,
	NTSTATUS ContinueStatus
);

NTSTATUS
__stdcall
DbgUiStopDebugging(
	HANDLE Process
);

NTSTATUS
__stdcall
DbgUiDebugActiveProcess(
	HANDLE Process
);

void
__stdcall
DbgUiRemoteBreakin(
	PVOID Context
);

NTSTATUS
__stdcall
DbgUiIssueRemoteBreakin(
	HANDLE Process
);

NTSTATUS
__stdcall
DbgUiConvertStateChangeStructure(
	PDBGUI_WAIT_STATE_CHANGE StateChange,
	LPDEBUG_EVENT DebugEvent
);
struct _EVENT_FILTER_DESCRIPTOR;
typedef void(__stdcall* PENABLECALLBACK)(
	LPCGUID SourceId,
	ULONG IsEnabled,
	UCHAR Level,
	ULONGLONG MatchAnyKeyword,
	ULONGLONG MatchAllKeyword,
	struct _EVENT_FILTER_DESCRIPTOR* FilterData,
	PVOID CallbackContext
	);
typedef ULONGLONG REGHANDLE, * PREGHANDLE;

NTSTATUS
__stdcall
EtwEventRegister(
	LPCGUID ProviderId,
	PENABLECALLBACK EnableCallback,
	PVOID CallbackContext,
	PREGHANDLE RegHandle
);
typedef struct _IO_STATUS_BLOCK
{
	union
	{
		NTSTATUS Status;
		PVOID Pointer;
	};
	ULONG_PTR Information;
} IO_STATUS_BLOCK, * PIO_STATUS_BLOCK;
typedef void(__stdcall* PIO_APC_ROUTINE)(
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG Reserved
	);
typedef struct _FILE_IO_COMPLETION_INFORMATION
{
	PVOID KeyContext;
	PVOID ApcContext;
	IO_STATUS_BLOCK IoStatusBlock;
} FILE_IO_COMPLETION_INFORMATION, * PFILE_IO_COMPLETION_INFORMATION;
typedef enum _FILE_INFORMATION_CLASS
{
	FileDirectoryInformation = 1,
	FileFullDirectoryInformation,
	FileBothDirectoryInformation,
	FileBasicInformation,
	FileStandardInformation,
	FileInternalInformation,
	FileEaInformation,
	FileAccessInformation,
	FileNameInformation,
	FileRenameInformation,
	FileLinkInformation,
	FileNamesInformation,
	FileDispositionInformation,
	FilePositionInformation,
	FileFullEaInformation,
	FileModeInformation,
	FileAlignmentInformation,
	FileAllInformation,
	FileAllocationInformation,
	FileEndOfFileInformation,
	FileAlternateNameInformation,
	FileStreamInformation,
	FilePipeInformation,
	FilePipeLocalInformation,
	FilePipeRemoteInformation,
	FileMailslotQueryInformation,
	FileMailslotSetInformation,
	FileCompressionInformation,
	FileObjectIdInformation,
	FileCompletionInformation,
	FileMoveClusterInformation,
	FileQuotaInformation,
	FileReparsePointInformation,
	FileNetworkOpenInformation,
	FileAttributeTagInformation,
	FileTrackingInformation,
	FileIdBothDirectoryInformation,
	FileIdFullDirectoryInformation,
	FileValidDataLengthInformation,
	FileShortNameInformation,
	FileIoCompletionNotificationInformation,
	FileIoStatusBlockRangeInformation,
	FileIoPriorityHintInformation,
	FileSfioReserveInformation,
	FileSfioVolumeInformation,
	FileHardLinkInformation,
	FileProcessIdsUsingFileInformation,
	FileNormalizedNameInformation,
	FileNetworkPhysicalNameInformation,
	FileIdGlobalTxDirectoryInformation,
	FileIsRemoteDeviceInformation,
	FileUnusedInformation,
	FileNumaNodeInformation,
	FileStandardLinkInformation,
	FileRemoteProtocolInformation,
	FileRenameInformationBypassAccessCheck,
	FileLinkInformationBypassAccessCheck,
	FileVolumeNameInformation,
	FileIdInformation,
	FileIdExtdDirectoryInformation,
	FileReplaceCompletionInformation,
	FileHardLinkFullIdInformation,
	FileIdExtdBothDirectoryInformation,
	FileDispositionInformationEx,
	FileRenameInformationEx,
	FileRenameInformationExBypassAccessCheck,
	FileDesiredStorageClassInformation,
	FileStatInformation,
	FileMemoryPartitionInformation,
	FileStatLxInformation,
	FileCaseSensitiveInformation,
	FileLinkInformationEx,
	FileLinkInformationExBypassAccessCheck,
	FileStorageReserveIdInformation,
	FileCaseSensitiveInformationForceAccessCheck,
	FileMaximumInformation
} FILE_INFORMATION_CLASS, * PFILE_INFORMATION_CLASS;
typedef struct _FILE_BASIC_INFORMATION
{
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	ULONG FileAttributes;
} FILE_BASIC_INFORMATION, * PFILE_BASIC_INFORMATION;
typedef struct _FILE_STANDARD_INFORMATION
{
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	ULONG NumberOfLinks;
	BOOLEAN DeletePending;
	BOOLEAN Directory;
} FILE_STANDARD_INFORMATION, * PFILE_STANDARD_INFORMATION;
typedef struct _FILE_STANDARD_INFORMATION_EX
{
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	ULONG NumberOfLinks;
	BOOLEAN DeletePending;
	BOOLEAN Directory;
	BOOLEAN AlternateStream;
	BOOLEAN MetadataAttribute;
} FILE_STANDARD_INFORMATION_EX, * PFILE_STANDARD_INFORMATION_EX;
typedef struct _FILE_INTERNAL_INFORMATION
{
	LARGE_INTEGER IndexNumber;
} FILE_INTERNAL_INFORMATION, * PFILE_INTERNAL_INFORMATION;
typedef struct _FILE_EA_INFORMATION
{
	ULONG EaSize;
} FILE_EA_INFORMATION, * PFILE_EA_INFORMATION;
typedef struct _FILE_ACCESS_INFORMATION
{
	ACCESS_MASK AccessFlags;
} FILE_ACCESS_INFORMATION, * PFILE_ACCESS_INFORMATION;
typedef struct _FILE_POSITION_INFORMATION
{
	LARGE_INTEGER CurrentByteOffset;
} FILE_POSITION_INFORMATION, * PFILE_POSITION_INFORMATION;
typedef struct _FILE_MODE_INFORMATION
{
	ULONG Mode;
} FILE_MODE_INFORMATION, * PFILE_MODE_INFORMATION;
typedef struct _FILE_ALIGNMENT_INFORMATION
{
	ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFORMATION, * PFILE_ALIGNMENT_INFORMATION;
typedef struct _FILE_NAME_INFORMATION
{
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_NAME_INFORMATION, * PFILE_NAME_INFORMATION;
typedef struct _FILE_ALL_INFORMATION
{
	FILE_BASIC_INFORMATION BasicInformation;
	FILE_STANDARD_INFORMATION StandardInformation;
	FILE_INTERNAL_INFORMATION InternalInformation;
	FILE_EA_INFORMATION EaInformation;
	FILE_ACCESS_INFORMATION AccessInformation;
	FILE_POSITION_INFORMATION PositionInformation;
	FILE_MODE_INFORMATION ModeInformation;
	FILE_ALIGNMENT_INFORMATION AlignmentInformation;
	FILE_NAME_INFORMATION NameInformation;
} FILE_ALL_INFORMATION, * PFILE_ALL_INFORMATION;
typedef struct _FILE_NETWORK_OPEN_INFORMATION
{
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	ULONG FileAttributes;
} FILE_NETWORK_OPEN_INFORMATION, * PFILE_NETWORK_OPEN_INFORMATION;
typedef struct _FILE_ATTRIBUTE_TAG_INFORMATION
{
	ULONG FileAttributes;
	ULONG ReparseTag;
} FILE_ATTRIBUTE_TAG_INFORMATION, * PFILE_ATTRIBUTE_TAG_INFORMATION;
typedef struct _FILE_ALLOCATION_INFORMATION
{
	LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFORMATION, * PFILE_ALLOCATION_INFORMATION;
typedef struct _FILE_COMPRESSION_INFORMATION
{
	LARGE_INTEGER CompressedFileSize;
	USHORT CompressionFormat;
	UCHAR CompressionUnitShift;
	UCHAR ChunkShift;
	UCHAR ClusterShift;
	UCHAR Reserved[3];
} FILE_COMPRESSION_INFORMATION, * PFILE_COMPRESSION_INFORMATION;
typedef struct _FILE_DISPOSITION_INFORMATION
{
	BOOLEAN DeleteFileW;
} FILE_DISPOSITION_INFORMATION, * PFILE_DISPOSITION_INFORMATION;
typedef struct _FILE_END_OF_FILE_INFORMATION
{
	LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFORMATION, * PFILE_END_OF_FILE_INFORMATION;
typedef struct _FILE_VALID_DATA_LENGTH_INFORMATION
{
	LARGE_INTEGER ValidDataLength;
} FILE_VALID_DATA_LENGTH_INFORMATION, * PFILE_VALID_DATA_LENGTH_INFORMATION;
typedef struct _FILE_LINK_INFORMATION
{
	BOOLEAN ReplaceIfExists;
	HANDLE RootDirectory;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_LINK_INFORMATION, * PFILE_LINK_INFORMATION;
typedef struct _FILE_LINK_INFORMATION_EX
{
	ULONG Flags;
	HANDLE RootDirectory;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_LINK_INFORMATION_EX, * PFILE_LINK_INFORMATION_EX;
typedef struct _FILE_MOVE_CLUSTER_INFORMATION
{
	ULONG ClusterCount;
	HANDLE RootDirectory;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_MOVE_CLUSTER_INFORMATION, * PFILE_MOVE_CLUSTER_INFORMATION;
typedef struct _FILE_RENAME_INFORMATION
{
	BOOLEAN ReplaceIfExists;
	HANDLE RootDirectory;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_RENAME_INFORMATION, * PFILE_RENAME_INFORMATION;
typedef struct _FILE_RENAME_INFORMATION_EX
{
	ULONG Flags;
	HANDLE RootDirectory;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_RENAME_INFORMATION_EX, * PFILE_RENAME_INFORMATION_EX;
typedef struct _FILE_STREAM_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG StreamNameLength;
	LARGE_INTEGER StreamSize;
	LARGE_INTEGER StreamAllocationSize;
	WCHAR StreamName[1];
} FILE_STREAM_INFORMATION, * PFILE_STREAM_INFORMATION;
typedef struct _FILE_TRACKING_INFORMATION
{
	HANDLE DestinationFile;
	ULONG ObjectInformationLength;
	CHAR ObjectInformation[1];
} FILE_TRACKING_INFORMATION, * PFILE_TRACKING_INFORMATION;
typedef struct _FILE_COMPLETION_INFORMATION
{
	HANDLE Port;
	PVOID Key;
} FILE_COMPLETION_INFORMATION, * PFILE_COMPLETION_INFORMATION;
typedef struct _FILE_PIPE_INFORMATION
{
	ULONG ReadMode;
	ULONG CompletionMode;
} FILE_PIPE_INFORMATION, * PFILE_PIPE_INFORMATION;
typedef struct _FILE_PIPE_LOCAL_INFORMATION
{
	ULONG NamedPipeType;
	ULONG NamedPipeConfiguration;
	ULONG MaximumInstances;
	ULONG CurrentInstances;
	ULONG InboundQuota;
	ULONG ReadDataAvailable;
	ULONG OutboundQuota;
	ULONG WriteQuotaAvailable;
	ULONG NamedPipeState;
	ULONG NamedPipeEnd;
} FILE_PIPE_LOCAL_INFORMATION, * PFILE_PIPE_LOCAL_INFORMATION;
typedef struct _FILE_PIPE_REMOTE_INFORMATION
{
	LARGE_INTEGER CollectDataTime;
	ULONG MaximumCollectionCount;
} FILE_PIPE_REMOTE_INFORMATION, * PFILE_PIPE_REMOTE_INFORMATION;
typedef struct _FILE_MAILSLOT_QUERY_INFORMATION
{
	ULONG MaximumMessageSize;
	ULONG MailslotQuota;
	ULONG NextMessageSize;
	ULONG MessagesAvailable;
	LARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_QUERY_INFORMATION, * PFILE_MAILSLOT_QUERY_INFORMATION;
typedef struct _FILE_MAILSLOT_SET_INFORMATION
{
	PLARGE_INTEGER ReadTimeout;
} FILE_MAILSLOT_SET_INFORMATION, * PFILE_MAILSLOT_SET_INFORMATION;
typedef struct _FILE_REPARSE_POINT_INFORMATION
{
	LONGLONG FileReference;
	ULONG Tag;
} FILE_REPARSE_POINT_INFORMATION, * PFILE_REPARSE_POINT_INFORMATION;
typedef struct _FILE_LINK_ENTRY_INFORMATION
{
	ULONG NextEntryOffset;
	LONGLONG ParentFileId;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_LINK_ENTRY_INFORMATION, * PFILE_LINK_ENTRY_INFORMATION;
typedef struct _FILE_LINKS_INFORMATION
{
	ULONG BytesNeeded;
	ULONG EntriesReturned;
	FILE_LINK_ENTRY_INFORMATION Entry;
} FILE_LINKS_INFORMATION, * PFILE_LINKS_INFORMATION;
typedef struct _FILE_NETWORK_PHYSICAL_NAME_INFORMATION
{
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_NETWORK_PHYSICAL_NAME_INFORMATION, * PFILE_NETWORK_PHYSICAL_NAME_INFORMATION;
typedef struct _FILE_STANDARD_LINK_INFORMATION
{
	ULONG NumberOfAccessibleLinks;
	ULONG TotalNumberOfLinks;
	BOOLEAN DeletePending;
	BOOLEAN Directory;
} FILE_STANDARD_LINK_INFORMATION, * PFILE_STANDARD_LINK_INFORMATION;
typedef struct _FILE_SFIO_RESERVE_INFORMATION
{
	ULONG RequestsPerPeriod;
	ULONG Period;
	BOOLEAN RetryFailures;
	BOOLEAN Discardable;
	ULONG RequestSize;
	ULONG NumOutstandingRequests;
} FILE_SFIO_RESERVE_INFORMATION, * PFILE_SFIO_RESERVE_INFORMATION;
typedef struct _FILE_SFIO_VOLUME_INFORMATION
{
	ULONG MaximumRequestsPerPeriod;
	ULONG MinimumPeriod;
	ULONG MinimumTransferSize;
} FILE_SFIO_VOLUME_INFORMATION, * PFILE_SFIO_VOLUME_INFORMATION;
typedef enum _IO_PRIORITY_HINT
{
	IoPriorityVeryLow = 0,
	IoPriorityLow,
	IoPriorityNormal,
	IoPriorityHigh,
	IoPriorityCritical,
	MaxIoPriorityTypes
} IO_PRIORITY_HINT;
typedef  struct _FILE_IO_PRIORITY_HINT_INFORMATION
{
	IO_PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFORMATION, * PFILE_IO_PRIORITY_HINT_INFORMATION;
typedef struct _FILE_IO_PRIORITY_HINT_INFORMATION_EX
{
	IO_PRIORITY_HINT PriorityHint;
	BOOLEAN BoostOutstanding;
} FILE_IO_PRIORITY_HINT_INFORMATION_EX, * PFILE_IO_PRIORITY_HINT_INFORMATION_EX;
typedef struct _FILE_IO_COMPLETION_NOTIFICATION_INFORMATION
{
	ULONG Flags;
} FILE_IO_COMPLETION_NOTIFICATION_INFORMATION, * PFILE_IO_COMPLETION_NOTIFICATION_INFORMATION;
typedef struct _FILE_PROCESS_IDS_USING_FILE_INFORMATION
{
	ULONG NumberOfProcessIdsInList;
	ULONG_PTR ProcessIdList[1];
} FILE_PROCESS_IDS_USING_FILE_INFORMATION, * PFILE_PROCESS_IDS_USING_FILE_INFORMATION;
typedef struct _FILE_IS_REMOTE_DEVICE_INFORMATION
{
	BOOLEAN IsRemote;
} FILE_IS_REMOTE_DEVICE_INFORMATION, * PFILE_IS_REMOTE_DEVICE_INFORMATION;
typedef struct _FILE_NUMA_NODE_INFORMATION
{
	USHORT NodeNumber;
} FILE_NUMA_NODE_INFORMATION, * PFILE_NUMA_NODE_INFORMATION;
typedef struct _FILE_IOSTATUSBLOCK_RANGE_INFORMATION
{
	PUCHAR IoStatusBlockRange;
	ULONG Length;
} FILE_IOSTATUSBLOCK_RANGE_INFORMATION, * PFILE_IOSTATUSBLOCK_RANGE_INFORMATION;
typedef struct _FILE_REMOTE_PROTOCOL_INFORMATION
{
	USHORT StructureVersion;
	USHORT StructureSize;
	ULONG Protocol;
	USHORT ProtocolMajorVersion;
	USHORT ProtocolMinorVersion;
	USHORT ProtocolRevision;
	USHORT Reserved;
	ULONG Flags;
	struct
	{
		ULONG Reserved[8];
	} GenericReserved;
	struct
	{
		ULONG Reserved[16];
	} ProtocolSpecificReserved;
} FILE_REMOTE_PROTOCOL_INFORMATION, * PFILE_REMOTE_PROTOCOL_INFORMATION;
typedef struct _FILE_INTEGRITY_STREAM_INFORMATION
{
	USHORT ChecksumAlgorithm;
	UCHAR ChecksumChunkShift;
	UCHAR ClusterShift;
	ULONG Flags;
} FILE_INTEGRITY_STREAM_INFORMATION, * PFILE_INTEGRITY_STREAM_INFORMATION;
typedef struct _FILE_VOLUME_NAME_INFORMATION
{
	ULONG DeviceNameLength;
	WCHAR DeviceName[1];
} FILE_VOLUME_NAME_INFORMATION, * PFILE_VOLUME_NAME_INFORMATION;
typedef struct _FILE_ID_INFORMATION
{
	ULONGLONG VolumeSerialNumber;
	FILE_ID_128 FileId;
} FILE_ID_INFORMATION, * PFILE_ID_INFORMATION;
typedef struct _FILE_ID_EXTD_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	ULONG ReparsePointTag;
	FILE_ID_128 FileId;
	WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFORMATION, * PFILE_ID_EXTD_DIR_INFORMATION;
typedef struct _FILE_LINK_ENTRY_FULL_ID_INFORMATION
{
	ULONG NextEntryOffset;
	FILE_ID_128 ParentFileId;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_LINK_ENTRY_FULL_ID_INFORMATION, * PFILE_LINK_ENTRY_FULL_ID_INFORMATION;
typedef struct _FILE_ID_EXTD_BOTH_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	ULONG ReparsePointTag;
	FILE_ID_128 FileId;
	CCHAR ShortNameLength;
	WCHAR ShortName[12];
	WCHAR FileName[1];
} FILE_ID_EXTD_BOTH_DIR_INFORMATION, * PFILE_ID_EXTD_BOTH_DIR_INFORMATION;
typedef struct _FILE_STAT_INFORMATION
{
	LARGE_INTEGER FileId;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	ULONG FileAttributes;
	ULONG ReparseTag;
	ULONG NumberOfLinks;
	ULONG EffectiveAccess;
} FILE_STAT_INFORMATION, * PFILE_STAT_INFORMATION;
typedef struct _FILE_MEMORY_PARTITION_INFORMATION
{
	HANDLE OwnerPartitionHandle;
	union
	{
		struct
		{
			UCHAR NoCrossPartitionAccess;
			UCHAR Spare[3];
		};
		ULONG AllFlags;
	} Flags;
} FILE_MEMORY_PARTITION_INFORMATION, * PFILE_MEMORY_PARTITION_INFORMATION;
typedef struct _FILE_STAT_LX_INFORMATION
{
	LARGE_INTEGER FileId;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER AllocationSize;
	LARGE_INTEGER EndOfFile;
	ULONG FileAttributes;
	ULONG ReparseTag;
	ULONG NumberOfLinks;
	ULONG EffectiveAccess;
	ULONG LxFlags;
	ULONG LxUid;
	ULONG LxGid;
	ULONG LxMode;
	ULONG LxDeviceIdMajor;
	ULONG LxDeviceIdMinor;
} FILE_STAT_LX_INFORMATION, * PFILE_STAT_LX_INFORMATION;
typedef struct _FILE_CASE_SENSITIVE_INFORMATION
{
	ULONG Flags;
} FILE_CASE_SENSITIVE_INFORMATION, * PFILE_CASE_SENSITIVE_INFORMATION;
typedef struct _FILE_DIRECTORY_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_DIRECTORY_INFORMATION, * PFILE_DIRECTORY_INFORMATION;
typedef struct _FILE_FULL_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	WCHAR FileName[1];
} FILE_FULL_DIR_INFORMATION, * PFILE_FULL_DIR_INFORMATION;
typedef struct _FILE_ID_FULL_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	LARGE_INTEGER FileId;
	WCHAR FileName[1];
} FILE_ID_FULL_DIR_INFORMATION, * PFILE_ID_FULL_DIR_INFORMATION;
typedef struct _FILE_BOTH_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	CCHAR ShortNameLength;
	WCHAR ShortName[12];
	WCHAR FileName[1];
} FILE_BOTH_DIR_INFORMATION, * PFILE_BOTH_DIR_INFORMATION;
typedef struct _FILE_ID_BOTH_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	ULONG EaSize;
	CCHAR ShortNameLength;
	WCHAR ShortName[12];
	LARGE_INTEGER FileId;
	WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFORMATION, * PFILE_ID_BOTH_DIR_INFORMATION;
typedef struct _FILE_NAMES_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	ULONG FileNameLength;
	WCHAR FileName[1];
} FILE_NAMES_INFORMATION, * PFILE_NAMES_INFORMATION;
typedef struct _FILE_ID_GLOBAL_TX_DIR_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG FileIndex;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER LastAccessTime;
	LARGE_INTEGER LastWriteTime;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER EndOfFile;
	LARGE_INTEGER AllocationSize;
	ULONG FileAttributes;
	ULONG FileNameLength;
	LARGE_INTEGER FileId;
	GUID LockingTransactionId;
	ULONG TxInfoFlags;
	WCHAR FileName[1];
} FILE_ID_GLOBAL_TX_DIR_INFORMATION, * PFILE_ID_GLOBAL_TX_DIR_INFORMATION;
typedef struct _FILE_OBJECTID_INFORMATION
{
	LONGLONG FileReference;
	UCHAR ObjectId[16];
	union
	{
		struct
		{
			UCHAR BirthVolumeId[16];
			UCHAR BirthObjectId[16];
			UCHAR DomainId[16];
		};
		UCHAR ExtendedInfo[48];
	};
} FILE_OBJECTID_INFORMATION, * PFILE_OBJECTID_INFORMATION;
typedef struct _FILE_FULL_EA_INFORMATION
{
	ULONG NextEntryOffset;
	UCHAR Flags;
	UCHAR EaNameLength;
	USHORT EaValueLength;
	CHAR EaName[1];
} FILE_FULL_EA_INFORMATION, * PFILE_FULL_EA_INFORMATION;
typedef struct _FILE_GET_EA_INFORMATION
{
	ULONG NextEntryOffset;
	UCHAR EaNameLength;
	CHAR EaName[1];
} FILE_GET_EA_INFORMATION, * PFILE_GET_EA_INFORMATION;
typedef struct _FILE_GET_QUOTA_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG SidLength;
	SID Sid;
} FILE_GET_QUOTA_INFORMATION, * PFILE_GET_QUOTA_INFORMATION;
typedef struct _FILE_QUOTA_INFORMATION
{
	ULONG NextEntryOffset;
	ULONG SidLength;
	LARGE_INTEGER ChangeTime;
	LARGE_INTEGER QuotaUsed;
	LARGE_INTEGER QuotaThreshold;
	LARGE_INTEGER QuotaLimit;
	SID Sid;
} FILE_QUOTA_INFORMATION, * PFILE_QUOTA_INFORMATION;
typedef enum _FSINFOCLASS
{
	FileFsVolumeInformation = 1,
	FileFsLabelInformation,
	FileFsSizeInformation,
	FileFsDeviceInformation,
	FileFsAttributeInformation,
	FileFsControlInformation,
	FileFsFullSizeInformation,
	FileFsObjectIdInformation,
	FileFsDriverPathInformation,
	FileFsVolumeFlagsInformation,
	FileFsSectorSizeInformation,
	FileFsDataCopyInformation,
	FileFsMetadataSizeInformation,
	FileFsFullSizeInformationEx,
	FileFsMaximumInformation
} FSINFOCLASS, * PFSINFOCLASS;
typedef struct _FILE_FS_VOLUME_INFORMATION
{
	LARGE_INTEGER VolumeCreationTime;
	ULONG VolumeSerialNumber;
	ULONG VolumeLabelLength;
	BOOLEAN SupportsObjects;
	WCHAR VolumeLabel[1];
} FILE_FS_VOLUME_INFORMATION, * PFILE_FS_VOLUME_INFORMATION;
typedef struct _FILE_FS_LABEL_INFORMATION
{
	ULONG VolumeLabelLength;
	WCHAR VolumeLabel[1];
} FILE_FS_LABEL_INFORMATION, * PFILE_FS_LABEL_INFORMATION;
typedef struct _FILE_FS_SIZE_INFORMATION
{
	LARGE_INTEGER TotalAllocationUnits;
	LARGE_INTEGER AvailableAllocationUnits;
	ULONG SectorsPerAllocationUnit;
	ULONG BytesPerSector;
} FILE_FS_SIZE_INFORMATION, * PFILE_FS_SIZE_INFORMATION;
typedef struct _FILE_FS_CONTROL_INFORMATION
{
	LARGE_INTEGER FreeSpaceStartFiltering;
	LARGE_INTEGER FreeSpaceThreshold;
	LARGE_INTEGER FreeSpaceStopFiltering;
	LARGE_INTEGER DefaultQuotaThreshold;
	LARGE_INTEGER DefaultQuotaLimit;
	ULONG FileSystemControlFlags;
} FILE_FS_CONTROL_INFORMATION, * PFILE_FS_CONTROL_INFORMATION;
typedef struct _FILE_FS_FULL_SIZE_INFORMATION
{
	LARGE_INTEGER TotalAllocationUnits;
	LARGE_INTEGER CallerAvailableAllocationUnits;
	LARGE_INTEGER ActualAvailableAllocationUnits;
	ULONG SectorsPerAllocationUnit;
	ULONG BytesPerSector;
} FILE_FS_FULL_SIZE_INFORMATION, * PFILE_FS_FULL_SIZE_INFORMATION;
typedef struct _FILE_FS_OBJECTID_INFORMATION
{
	UCHAR ObjectId[16];
	UCHAR ExtendedInfo[48];
} FILE_FS_OBJECTID_INFORMATION, * PFILE_FS_OBJECTID_INFORMATION;
typedef struct _FILE_FS_DEVICE_INFORMATION
{
	DWORD DeviceType;
	ULONG Characteristics;
} FILE_FS_DEVICE_INFORMATION, * PFILE_FS_DEVICE_INFORMATION;
typedef struct _FILE_FS_ATTRIBUTE_INFORMATION
{
	ULONG FileSystemAttributes;
	LONG MaximumComponentNameLength;
	ULONG FileSystemNameLength;
	WCHAR FileSystemName[1];
} FILE_FS_ATTRIBUTE_INFORMATION, * PFILE_FS_ATTRIBUTE_INFORMATION;
typedef struct _FILE_FS_DRIVER_PATH_INFORMATION
{
	BOOLEAN DriverInPath;
	ULONG DriverNameLength;
	WCHAR DriverName[1];
} FILE_FS_DRIVER_PATH_INFORMATION, * PFILE_FS_DRIVER_PATH_INFORMATION;
typedef struct _FILE_FS_VOLUME_FLAGS_INFORMATION
{
	ULONG Flags;
} FILE_FS_VOLUME_FLAGS_INFORMATION, * PFILE_FS_VOLUME_FLAGS_INFORMATION;
typedef struct _FILE_FS_SECTOR_SIZE_INFORMATION
{
	ULONG LogicalBytesPerSector;
	ULONG PhysicalBytesPerSectorForAtomicity;
	ULONG PhysicalBytesPerSectorForPerformance;
	ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
	ULONG Flags;
	ULONG ByteOffsetForSectorAlignment;
	ULONG ByteOffsetForPartitionAlignment;
} FILE_FS_SECTOR_SIZE_INFORMATION, * PFILE_FS_SECTOR_SIZE_INFORMATION;
typedef struct _FILE_FS_DATA_COPY_INFORMATION
{
	ULONG NumberOfCopies;
} FILE_FS_DATA_COPY_INFORMATION, * PFILE_FS_DATA_COPY_INFORMATION;
typedef struct _FILE_FS_METADATA_SIZE_INFORMATION
{
	LARGE_INTEGER TotalMetadataAllocationUnits;
	ULONG SectorsPerAllocationUnit;
	ULONG BytesPerSector;
} FILE_FS_METADATA_SIZE_INFORMATION, * PFILE_FS_METADATA_SIZE_INFORMATION;
typedef struct _FILE_FS_FULL_SIZE_INFORMATION_EX
{
	ULONGLONG ActualTotalAllocationUnits;
	ULONGLONG ActualAvailableAllocationUnits;
	ULONGLONG ActualPoolUnavailableAllocationUnits;
	ULONGLONG CallerTotalAllocationUnits;
	ULONGLONG CallerAvailableAllocationUnits;
	ULONGLONG CallerPoolUnavailableAllocationUnits;
	ULONGLONG UsedAllocationUnits;
	ULONGLONG TotalReservedAllocationUnits;
	ULONGLONG VolumeStorageReserveAllocationUnits;
	ULONGLONG AvailableCommittedAllocationUnits;
	ULONGLONG PoolAvailableAllocationUnits;
	ULONG SectorsPerAllocationUnit;
	ULONG BytesPerSector;
} FILE_FS_FULL_SIZE_INFORMATION_EX, * PFILE_FS_FULL_SIZE_INFORMATION_EX;

NTSTATUS
__stdcall
NtCreateFile(
	PHANDLE FileHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER AllocationSize,
	ULONG FileAttributes,
	ULONG ShareAccess,
	ULONG CreateDisposition,
	ULONG CreateOptions,
	PVOID EaBuffer,
	ULONG EaLength
);

NTSTATUS
__stdcall
NtCreateNamedPipeFile(
	PHANDLE FileHandle,
	ULONG DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG ShareAccess,
	ULONG CreateDisposition,
	ULONG CreateOptions,
	ULONG NamedPipeType,
	ULONG ReadMode,
	ULONG CompletionMode,
	ULONG MaximumInstances,
	ULONG InboundQuota,
	ULONG OutboundQuota,
	PLARGE_INTEGER DefaultTimeout
);

NTSTATUS
__stdcall
NtCreateMailslotFile(
	PHANDLE FileHandle,
	ULONG DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG CreateOptions,
	ULONG MailslotQuota,
	ULONG MaximumMessageSize,
	PLARGE_INTEGER ReadTimeout
);

NTSTATUS
__stdcall
NtOpenFile(
	PHANDLE FileHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG ShareAccess,
	ULONG OpenOptions
);

NTSTATUS
__stdcall
NtDeleteFile(
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtFlushBuffersFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
NtQueryInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass
);

NTSTATUS
__stdcall
NtSetInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass
);

NTSTATUS
__stdcall
NtQueryDirectoryFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass,
	BOOLEAN ReturnSingleEntry,
	PUNICODE_STRING FileName,
	BOOLEAN RestartScan
);

NTSTATUS
__stdcall
NtQueryEaFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	BOOLEAN ReturnSingleEntry,
	PVOID EaList,
	ULONG EaListLength,
	PULONG EaIndex,
	BOOLEAN RestartScan
);

NTSTATUS
__stdcall
NtSetEaFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length
);

NTSTATUS
__stdcall
NtQueryQuotaInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	BOOLEAN ReturnSingleEntry,
	PVOID SidList,
	ULONG SidListLength,
	PSID StartSid,
	BOOLEAN RestartScan
);

NTSTATUS
__stdcall
NtSetQuotaInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length
);

NTSTATUS
__stdcall
NtQueryVolumeInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FsInformation,
	ULONG Length,
	FSINFOCLASS FsInformationClass
);

NTSTATUS
__stdcall
NtSetVolumeInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FsInformation,
	ULONG Length,
	FSINFOCLASS FsInformationClass
);

NTSTATUS
__stdcall
NtCancelIoFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
NtCancelIoFileEx(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoRequestToCancel,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
NtCancelSynchronousIoFile(
	HANDLE ThreadHandle,
	PIO_STATUS_BLOCK IoRequestToCancel,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
NtDeviceIoControlFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG IoControlCode,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength
);

NTSTATUS
__stdcall
NtFsControlFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG FsControlCode,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength
);

NTSTATUS
__stdcall
NtReadFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
NtWriteFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
NtReadFileScatter(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PFILE_SEGMENT_ELEMENT SegmentArray,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
NtWriteFileGather(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PFILE_SEGMENT_ELEMENT SegmentArray,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
NtLockFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER ByteOffset,
	PLARGE_INTEGER Length,
	ULONG Key,
	BOOLEAN FailImmediately,
	BOOLEAN ExclusiveLock
);

NTSTATUS
__stdcall
NtUnlockFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER ByteOffset,
	PLARGE_INTEGER Length,
	ULONG Key
);

NTSTATUS
__stdcall
NtQueryAttributesFile(
	POBJECT_ATTRIBUTES ObjectAttributes,
	PFILE_BASIC_INFORMATION FileInformation
);

NTSTATUS
__stdcall
NtQueryFullAttributesFile(
	POBJECT_ATTRIBUTES ObjectAttributes,
	PFILE_NETWORK_OPEN_INFORMATION FileInformation
);

NTSTATUS
__stdcall
NtNotifyChangeDirectoryFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	ULONG CompletionFilter,
	BOOLEAN WatchTree
);
typedef enum _DIRECTORY_NOTIFY_INFORMATION_CLASS
{
	DirectoryNotifyInformation,
	DirectoryNotifyExtendedInformation
} DIRECTORY_NOTIFY_INFORMATION_CLASS, * PDIRECTORY_NOTIFY_INFORMATION_CLASS;

NTSTATUS
__stdcall
NtLoadDriver(
	PUNICODE_STRING DriverServiceName
);

NTSTATUS
__stdcall
NtUnloadDriver(
	PUNICODE_STRING DriverServiceName
);
typedef enum _IO_COMPLETION_INFORMATION_CLASS
{
	IoCompletionBasicInformation
} IO_COMPLETION_INFORMATION_CLASS;
typedef struct _IO_COMPLETION_BASIC_INFORMATION
{
	LONG Depth;
} IO_COMPLETION_BASIC_INFORMATION, * PIO_COMPLETION_BASIC_INFORMATION;

NTSTATUS
__stdcall
NtCreateIoCompletion(
	PHANDLE IoCompletionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG Count
);

NTSTATUS
__stdcall
NtOpenIoCompletion(
	PHANDLE IoCompletionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtQueryIoCompletion(
	HANDLE IoCompletionHandle,
	IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,
	PVOID IoCompletionInformation,
	ULONG IoCompletionInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetIoCompletion(
	HANDLE IoCompletionHandle,
	PVOID KeyContext,
	PVOID ApcContext,
	NTSTATUS IoStatus,
	ULONG_PTR IoStatusInformation
);

NTSTATUS
__stdcall
NtSetIoCompletionEx(
	HANDLE IoCompletionHandle,
	HANDLE IoCompletionPacketHandle,
	PVOID KeyContext,
	PVOID ApcContext,
	NTSTATUS IoStatus,
	ULONG_PTR IoStatusInformation
);

NTSTATUS
__stdcall
NtRemoveIoCompletion(
	HANDLE IoCompletionHandle,
	PVOID* KeyContext,
	PVOID* ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtRemoveIoCompletionEx(
	HANDLE IoCompletionHandle,
	PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation,
	ULONG Count,
	PULONG NumEntriesRemoved,
	PLARGE_INTEGER Timeout,
	BOOLEAN Alertable
);
typedef enum _IO_SESSION_EVENT
{
	IoSessionEventIgnore,
	IoSessionEventCreated,
	IoSessionEventTerminated,
	IoSessionEventConnected,
	IoSessionEventDisconnected,
	IoSessionEventLogon,
	IoSessionEventLogoff,
	IoSessionEventMax
} IO_SESSION_EVENT;
typedef enum _IO_SESSION_STATE
{
	IoSessionStateCreated,
	IoSessionStateInitialized,
	IoSessionStateConnected,
	IoSessionStateDisconnected,
	IoSessionStateDisconnectedLoggedOn,
	IoSessionStateLoggedOn,
	IoSessionStateLoggedOff,
	IoSessionStateTerminated,
	IoSessionStateMax
} IO_SESSION_STATE;

NTSTATUS
__stdcall
NtOpenSession(
	PHANDLE SessionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtNotifyChangeSession(
	HANDLE SessionHandle,
	ULONG ChangeSequenceNumber,
	PLARGE_INTEGER ChangeTimeStamp,
	IO_SESSION_EVENT Event,
	IO_SESSION_STATE NewState,
	IO_SESSION_STATE PreviousState,
	PVOID Payload,
	ULONG PayloadSize
);
typedef enum _INTERFACE_TYPE
{
	InterfaceTypeUndefined = -1,
	Internal,
	Isa,
	Eisa,
	MicroChannel,
	TurboChannel,
	PCIBus,
	VMEBus,
	NuBus,
	PCMCIABus,
	CBus,
	MPIBus,
	MPSABus,
	ProcessorInternal,
	InternalPowerBus,
	PNPISABus,
	PNPBus,
	Vmcs,
	MaximumInterfaceType
} INTERFACE_TYPE, * PINTERFACE_TYPE;
typedef enum _DMA_WIDTH
{
	Width8Bits,
	Width16Bits,
	Width32Bits,
	MaximumDmaWidth
} DMA_WIDTH, * PDMA_WIDTH;
typedef enum _DMA_SPEED
{
	Compatible,
	TypeA,
	TypeB,
	TypeC,
	TypeF,
	MaximumDmaSpeed
} DMA_SPEED, * PDMA_SPEED;
typedef enum _BUS_DATA_TYPE
{
	ConfigurationSpaceUndefined = -1,
	Cmos,
	EisaConfiguration,
	Pos,
	CbusConfiguration,
	PCIConfiguration,
	VMEConfiguration,
	NuBusConfiguration,
	PCMCIAConfiguration,
	MPIConfiguration,
	MPSAConfiguration,
	PNPISAConfiguration,
	SgiInternalConfiguration,
	MaximumBusDataType
} BUS_DATA_TYPE, * PBUS_DATA_TYPE;
typedef struct _REPARSE_DATA_BUFFER
{
	ULONG ReparseTag;
	USHORT ReparseDataLength;
	USHORT Reserved;
	union
	{
		struct
		{
			USHORT SubstituteNameOffset;
			USHORT SubstituteNameLength;
			USHORT PrintNameOffset;
			USHORT PrintNameLength;
			ULONG Flags;
			WCHAR PathBuffer[1];
		} SymbolicLinkReparseBuffer;
		struct
		{
			USHORT SubstituteNameOffset;
			USHORT SubstituteNameLength;
			USHORT PrintNameOffset;
			USHORT PrintNameLength;
			WCHAR PathBuffer[1];
		} MountPointReparseBuffer;
		struct
		{
			UCHAR DataBuffer[1];
		} GenericReparseBuffer;
	};
} REPARSE_DATA_BUFFER, * PREPARSE_DATA_BUFFER;
typedef struct _FILE_PIPE_ASSIGN_EVENT_BUFFER
{
	HANDLE EventHandle;
	ULONG KeyValue;
} FILE_PIPE_ASSIGN_EVENT_BUFFER, * PFILE_PIPE_ASSIGN_EVENT_BUFFER;
typedef struct _FILE_PIPE_PEEK_BUFFER
{
	ULONG NamedPipeState;
	ULONG ReadDataAvailable;
	ULONG NumberOfMessages;
	ULONG MessageLength;
	CHAR Data[1];
} FILE_PIPE_PEEK_BUFFER, * PFILE_PIPE_PEEK_BUFFER;
typedef struct _FILE_PIPE_EVENT_BUFFER
{
	ULONG NamedPipeState;
	ULONG EntryType;
	ULONG ByteCount;
	ULONG KeyValue;
	ULONG NumberRequests;
} FILE_PIPE_EVENT_BUFFER, * PFILE_PIPE_EVENT_BUFFER;
typedef struct _FILE_PIPE_WAIT_FOR_BUFFER
{
	LARGE_INTEGER Timeout;
	ULONG NameLength;
	BOOLEAN TimeoutSpecified;
	WCHAR Name[1];
} FILE_PIPE_WAIT_FOR_BUFFER, * PFILE_PIPE_WAIT_FOR_BUFFER;
typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER
{
	PVOID ClientSession;
	PVOID ClientProcess;
} FILE_PIPE_CLIENT_PROCESS_BUFFER, * PFILE_PIPE_CLIENT_PROCESS_BUFFER;
typedef struct _FILE_PIPE_CLIENT_PROCESS_BUFFER_EX
{
	PVOID ClientSession;
	PVOID ClientProcess;
	USHORT ClientComputerNameLength;
	WCHAR ClientComputerBuffer[15 + 1];
} FILE_PIPE_CLIENT_PROCESS_BUFFER_EX, * PFILE_PIPE_CLIENT_PROCESS_BUFFER_EX;
typedef struct _FILE_PIPE_SILO_ARRIVAL_INPUT
{
	HANDLE JobHandle;
} FILE_PIPE_SILO_ARRIVAL_INPUT, * PFILE_PIPE_SILO_ARRIVAL_INPUT;
typedef struct _FILE_PIPE_CREATE_SYMLINK_INPUT
{
	USHORT NameOffset;
	USHORT NameLength;
	USHORT SubstituteNameOffset;
	USHORT SubstituteNameLength;
	ULONG Flags;
} FILE_PIPE_CREATE_SYMLINK_INPUT, * PFILE_PIPE_CREATE_SYMLINK_INPUT;
typedef struct _FILE_PIPE_DELETE_SYMLINK_INPUT
{
	USHORT NameOffset;
	USHORT NameLength;
} FILE_PIPE_DELETE_SYMLINK_INPUT, * PFILE_PIPE_DELETE_SYMLINK_INPUT;
typedef struct _FILE_MAILSLOT_PEEK_BUFFER
{
	ULONG ReadDataAvailable;
	ULONG NumberOfMessages;
	ULONG MessageLength;
} FILE_MAILSLOT_PEEK_BUFFER, * PFILE_MAILSLOT_PEEK_BUFFER;
typedef struct _MOUNTMGR_CREATE_POINT_INPUT
{
	USHORT SymbolicLinkNameOffset;
	USHORT SymbolicLinkNameLength;
	USHORT DeviceNameOffset;
	USHORT DeviceNameLength;
} MOUNTMGR_CREATE_POINT_INPUT, * PMOUNTMGR_CREATE_POINT_INPUT;
typedef struct _MOUNTMGR_MOUNT_POINT
{
	ULONG SymbolicLinkNameOffset;
	USHORT SymbolicLinkNameLength;
	USHORT Reserved1;
	ULONG UniqueIdOffset;
	USHORT UniqueIdLength;
	USHORT Reserved2;
	ULONG DeviceNameOffset;
	USHORT DeviceNameLength;
	USHORT Reserved3;
} MOUNTMGR_MOUNT_POINT, * PMOUNTMGR_MOUNT_POINT;
typedef struct _MOUNTMGR_MOUNT_POINTS
{
	ULONG Size;
	ULONG NumberOfMountPoints;
	MOUNTMGR_MOUNT_POINT MountPoints[1];
} MOUNTMGR_MOUNT_POINTS, * PMOUNTMGR_MOUNT_POINTS;
typedef struct _MOUNTMGR_DRIVE_LETTER_TARGET
{
	USHORT DeviceNameLength;
	WCHAR DeviceName[1];
} MOUNTMGR_DRIVE_LETTER_TARGET, * PMOUNTMGR_DRIVE_LETTER_TARGET;
typedef struct _MOUNTMGR_DRIVE_LETTER_INFORMATION
{
	BOOLEAN DriveLetterWasAssigned;
	UCHAR CurrentDriveLetter;
} MOUNTMGR_DRIVE_LETTER_INFORMATION, * PMOUNTMGR_DRIVE_LETTER_INFORMATION;
typedef struct _MOUNTMGR_VOLUME_MOUNT_POINT
{
	USHORT SourceVolumeNameOffset;
	USHORT SourceVolumeNameLength;
	USHORT TargetVolumeNameOffset;
	USHORT TargetVolumeNameLength;
} MOUNTMGR_VOLUME_MOUNT_POINT, * PMOUNTMGR_VOLUME_MOUNT_POINT;
typedef struct _MOUNTMGR_CHANGE_NOTIFY_INFO
{
	ULONG EpicNumber;
} MOUNTMGR_CHANGE_NOTIFY_INFO, * PMOUNTMGR_CHANGE_NOTIFY_INFO;
typedef struct _MOUNTMGR_TARGET_NAME
{
	USHORT DeviceNameLength;
	WCHAR DeviceName[1];
} MOUNTMGR_TARGET_NAME, * PMOUNTMGR_TARGET_NAME;
typedef struct _MOUNTDEV_NAME
{
	USHORT NameLength;
	WCHAR Name[1];
} MOUNTDEV_NAME, * PMOUNTDEV_NAME;
typedef struct _MOUNTMGR_VOLUME_PATHS
{
	ULONG MultiSzLength;
	WCHAR MultiSz[1];
} MOUNTMGR_VOLUME_PATHS, * PMOUNTMGR_VOLUME_PATHS;
typedef struct _PORT_MESSAGE
{
	union
	{
		struct
		{
			CSHORT DataLength;
			CSHORT TotalLength;
		} s1;
		ULONG Length;
	} u1;
	union
	{
		struct
		{
			CSHORT Type;
			CSHORT DataInfoOffset;
		} s2;
		ULONG ZeroInit;
	} u2;
	union
	{
		CLIENT_ID ClientId;
		double DoNotUseThisField;
	};
	ULONG MessageId;
	union
	{
		SIZE_T ClientViewSize;
		ULONG CallbackId;
	};
} PORT_MESSAGE, * PPORT_MESSAGE;
typedef struct _PORT_DATA_ENTRY
{
	PVOID Base;
	ULONG Size;
} PORT_DATA_ENTRY, * PPORT_DATA_ENTRY;
typedef struct _PORT_DATA_INFORMATION
{
	ULONG CountDataEntries;
	PORT_DATA_ENTRY DataEntries[1];
} PORT_DATA_INFORMATION, * PPORT_DATA_INFORMATION;
typedef struct _LPC_CLIENT_DIED_MSG
{
	PORT_MESSAGE PortMsg;
	LARGE_INTEGER CreateTime;
} LPC_CLIENT_DIED_MSG, * PLPC_CLIENT_DIED_MSG;
typedef struct _PORT_VIEW
{
	ULONG Length;
	HANDLE SectionHandle;
	ULONG SectionOffset;
	SIZE_T ViewSize;
	PVOID ViewBase;
	PVOID ViewRemoteBase;
} PORT_VIEW, * PPORT_VIEW;
typedef struct _REMOTE_PORT_VIEW
{
	ULONG Length;
	SIZE_T ViewSize;
	PVOID ViewBase;
} REMOTE_PORT_VIEW, * PREMOTE_PORT_VIEW;
typedef struct _PORT_MESSAGE64
{
	union
	{
		struct
		{
			CSHORT DataLength;
			CSHORT TotalLength;
		} s1;
		ULONG Length;
	} u1;
	union
	{
		struct
		{
			CSHORT Type;
			CSHORT DataInfoOffset;
		} s2;
		ULONG ZeroInit;
	} u2;
	union
	{
		CLIENT_ID64 ClientId;
		double DoNotUseThisField;
	};
	ULONG MessageId;
	union
	{
		ULONGLONG ClientViewSize;
		ULONG CallbackId;
	};
} PORT_MESSAGE64, * PPORT_MESSAGE64;
typedef struct _LPC_CLIENT_DIED_MSG64
{
	PORT_MESSAGE64 PortMsg;
	LARGE_INTEGER CreateTime;
} LPC_CLIENT_DIED_MSG64, * PLPC_CLIENT_DIED_MSG64;
typedef struct _PORT_VIEW64
{
	ULONG Length;
	ULONGLONG SectionHandle;
	ULONG SectionOffset;
	ULONGLONG ViewSize;
	ULONGLONG ViewBase;
	ULONGLONG ViewRemoteBase;
} PORT_VIEW64, * PPORT_VIEW64;
typedef struct _REMOTE_PORT_VIEW64
{
	ULONG Length;
	ULONGLONG ViewSize;
	ULONGLONG ViewBase;
} REMOTE_PORT_VIEW64, * PREMOTE_PORT_VIEW64;

NTSTATUS
__stdcall
NtCreatePort(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG MaxConnectionInfoLength,
	ULONG MaxMessageLength,
	ULONG MaxPoolUsage
);

NTSTATUS
__stdcall
NtCreateWaitablePort(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG MaxConnectionInfoLength,
	ULONG MaxMessageLength,
	ULONG MaxPoolUsage
);

NTSTATUS
__stdcall
NtConnectPort(
	PHANDLE PortHandle,
	PUNICODE_STRING PortName,
	PSECURITY_QUALITY_OF_SERVICE SecurityQos,
	PPORT_VIEW ClientView,
	PREMOTE_PORT_VIEW ServerView,
	PULONG MaxMessageLength,
	PVOID ConnectionInformation,
	PULONG ConnectionInformationLength
);

NTSTATUS
__stdcall
NtSecureConnectPort(
	PHANDLE PortHandle,
	PUNICODE_STRING PortName,
	PSECURITY_QUALITY_OF_SERVICE SecurityQos,
	PPORT_VIEW ClientView,
	PSID RequiredServerSid,
	PREMOTE_PORT_VIEW ServerView,
	PULONG MaxMessageLength,
	PVOID ConnectionInformation,
	PULONG ConnectionInformationLength
);

NTSTATUS
__stdcall
NtListenPort(
	HANDLE PortHandle,
	PPORT_MESSAGE ConnectionRequest
);

NTSTATUS
__stdcall
NtAcceptConnectPort(
	PHANDLE PortHandle,
	PVOID PortContext,
	PPORT_MESSAGE ConnectionRequest,
	BOOLEAN AcceptConnection,
	PPORT_VIEW ServerView,
	PREMOTE_PORT_VIEW ClientView
);

NTSTATUS
__stdcall
NtCompleteConnectPort(
	HANDLE PortHandle
);

NTSTATUS
__stdcall
NtRequestPort(
	HANDLE PortHandle,
	PPORT_MESSAGE RequestMessage
);

NTSTATUS
__stdcall
NtRequestWaitReplyPort(
	HANDLE PortHandle,
	PPORT_MESSAGE RequestMessage,
	PPORT_MESSAGE ReplyMessage
);

NTSTATUS
__stdcall
NtReplyPort(
	HANDLE PortHandle,
	PPORT_MESSAGE ReplyMessage
);

NTSTATUS
__stdcall
NtReplyWaitReplyPort(
	HANDLE PortHandle,
	PPORT_MESSAGE ReplyMessage
);

NTSTATUS
__stdcall
NtReplyWaitReceivePort(
	HANDLE PortHandle,
	PVOID* PortContext,
	PPORT_MESSAGE ReplyMessage,
	PPORT_MESSAGE ReceiveMessage
);

NTSTATUS
__stdcall
NtReplyWaitReceivePortEx(
	HANDLE PortHandle,
	PVOID* PortContext,
	PPORT_MESSAGE ReplyMessage,
	PPORT_MESSAGE ReceiveMessage,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtImpersonateClientOfPort(
	HANDLE PortHandle,
	PPORT_MESSAGE Message
);

NTSTATUS
__stdcall
NtReadRequestData(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	ULONG DataEntryIndex,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesRead
);

NTSTATUS
__stdcall
NtWriteRequestData(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	ULONG DataEntryIndex,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesWritten
);
typedef enum _PORT_INFORMATION_CLASS
{
	PortBasicInformation,
	PortDumpInformation
} PORT_INFORMATION_CLASS;

NTSTATUS
__stdcall
NtQueryInformationPort(
	HANDLE PortHandle,
	PORT_INFORMATION_CLASS PortInformationClass,
	PVOID PortInformation,
	ULONG Length,
	PULONG ReturnLength
);
typedef HANDLE ALPC_HANDLE, * PALPC_HANDLE;
typedef struct _ALPC_PORT_ATTRIBUTES
{
	ULONG Flags;
	SECURITY_QUALITY_OF_SERVICE SecurityQos;
	SIZE_T MaxMessageLength;
	SIZE_T MemoryBandwidth;
	SIZE_T MaxPoolUsage;
	SIZE_T MaxSectionSize;
	SIZE_T MaxViewSize;
	SIZE_T MaxTotalSectionSize;
	ULONG DupObjectTypes;
	ULONG Reserved;
} ALPC_PORT_ATTRIBUTES, * PALPC_PORT_ATTRIBUTES;
typedef struct _ALPC_MESSAGE_ATTRIBUTES
{
	ULONG AllocatedAttributes;
	ULONG ValidAttributes;
} ALPC_MESSAGE_ATTRIBUTES, * PALPC_MESSAGE_ATTRIBUTES;
typedef struct _ALPC_COMPLETION_LIST_STATE
{
	union
	{
		struct
		{
			ULONG64 Head : 24;
			ULONG64 Tail : 24;
			ULONG64 ActiveThreadCount : 16;
		} s1;
		ULONG64 Value;
	} u1;
} ALPC_COMPLETION_LIST_STATE, * PALPC_COMPLETION_LIST_STATE;
typedef struct  _ALPC_COMPLETION_LIST_HEADER
{
	ULONG64 StartMagic;
	ULONG TotalSize;
	ULONG ListOffset;
	ULONG ListSize;
	ULONG BitmapOffset;
	ULONG BitmapSize;
	ULONG DataOffset;
	ULONG DataSize;
	ULONG AttributeFlags;
	ULONG AttributeSize;
	ALPC_COMPLETION_LIST_STATE State;
	ULONG LastMessageId;
	ULONG LastCallbackId;
	ULONG PostCount;
	ULONG ReturnCount;
	ULONG LogSequenceNumber;
	RTL_SRWLOCK UserLock;
	ULONG64 EndMagic;
} ALPC_COMPLETION_LIST_HEADER, * PALPC_COMPLETION_LIST_HEADER;
typedef struct _ALPC_CONTEXT_ATTR
{
	PVOID PortContext;
	PVOID MessageContext;
	ULONG Sequence;
	ULONG MessageId;
	ULONG CallbackId;
} ALPC_CONTEXT_ATTR, * PALPC_CONTEXT_ATTR;
typedef struct _ALPC_HANDLE_ATTR32
{
	ULONG Flags;
	ULONG Reserved0;
	ULONG SameAccess;
	ULONG SameAttributes;
	ULONG Indirect;
	ULONG Inherit;
	ULONG Reserved1;
	ULONG Handle;
	ULONG ObjectType;
	ULONG DesiredAccess;
	ULONG GrantedAccess;
} ALPC_HANDLE_ATTR32, * PALPC_HANDLE_ATTR32;
typedef struct _ALPC_HANDLE_ATTR
{
	ULONG Flags;
	ULONG Reserved0;
	ULONG SameAccess;
	ULONG SameAttributes;
	ULONG Indirect;
	ULONG Inherit;
	ULONG Reserved1;
	HANDLE Handle;
	PALPC_HANDLE_ATTR32 HandleAttrArray;
	ULONG ObjectType;
	ULONG HandleCount;
	ACCESS_MASK DesiredAccess;
	ACCESS_MASK GrantedAccess;
} ALPC_HANDLE_ATTR, * PALPC_HANDLE_ATTR;
typedef struct _ALPC_SECURITY_ATTR
{
	ULONG Flags;
	PSECURITY_QUALITY_OF_SERVICE QoS;
	ALPC_HANDLE ContextHandle;
} ALPC_SECURITY_ATTR, * PALPC_SECURITY_ATTR;
typedef struct _ALPC_DATA_VIEW_ATTR
{
	ULONG Flags;
	ALPC_HANDLE SectionHandle;
	PVOID ViewBase;
	SIZE_T ViewSize;
} ALPC_DATA_VIEW_ATTR, * PALPC_DATA_VIEW_ATTR;
typedef enum _ALPC_PORT_INFORMATION_CLASS
{
	AlpcBasicInformation,
	AlpcPortInformation,
	AlpcAssociateCompletionPortInformation,
	AlpcConnectedSIDInformation,
	AlpcServerInformation,
	AlpcMessageZoneInformation,
	AlpcRegisterCompletionListInformation,
	AlpcUnregisterCompletionListInformation,
	AlpcAdjustCompletionListConcurrencyCountInformation,
	AlpcRegisterCallbackInformation,
	AlpcCompletionListRundownInformation,
	AlpcWaitForPortReferences,
	AlpcServerSessionInformation
} ALPC_PORT_INFORMATION_CLASS;
typedef struct _ALPC_BASIC_INFORMATION
{
	ULONG Flags;
	ULONG SequenceNo;
	PVOID PortContext;
} ALPC_BASIC_INFORMATION, * PALPC_BASIC_INFORMATION;
typedef struct _ALPC_PORT_ASSOCIATE_COMPLETION_PORT
{
	PVOID CompletionKey;
	HANDLE CompletionPort;
} ALPC_PORT_ASSOCIATE_COMPLETION_PORT, * PALPC_PORT_ASSOCIATE_COMPLETION_PORT;
typedef struct _ALPC_SERVER_INFORMATION
{
	union
	{
		struct
		{
			HANDLE ThreadHandle;
		} In;
		struct
		{
			BOOLEAN ThreadBlocked;
			HANDLE ConnectedProcessId;
			UNICODE_STRING ConnectionPortName;
		} Out;
	};
} ALPC_SERVER_INFORMATION, * PALPC_SERVER_INFORMATION;
typedef struct _ALPC_PORT_MESSAGE_ZONE_INFORMATION
{
	PVOID Buffer;
	ULONG Size;
} ALPC_PORT_MESSAGE_ZONE_INFORMATION, * PALPC_PORT_MESSAGE_ZONE_INFORMATION;
typedef struct _ALPC_PORT_COMPLETION_LIST_INFORMATION
{
	PVOID Buffer;
	ULONG Size;
	ULONG ConcurrencyCount;
	ULONG AttributeFlags;
} ALPC_PORT_COMPLETION_LIST_INFORMATION, * PALPC_PORT_COMPLETION_LIST_INFORMATION;
typedef struct _ALPC_SERVER_SESSION_INFORMATION
{
	ULONG SessionId;
	ULONG ProcessId;
} ALPC_SERVER_SESSION_INFORMATION, * PALPC_SERVER_SESSION_INFORMATION;
typedef enum _ALPC_MESSAGE_INFORMATION_CLASS
{
	AlpcMessageSidInformation,
	AlpcMessageTokenModifiedIdInformation,
	AlpcMessageDirectStatusInformation,
	AlpcMessageHandleInformation,
	MaxAlpcMessageInfoClass
} ALPC_MESSAGE_INFORMATION_CLASS, * PALPC_MESSAGE_INFORMATION_CLASS;
typedef struct _ALPC_MESSAGE_HANDLE_INFORMATION
{
	ULONG Index;
	ULONG Flags;
	ULONG Handle;
	ULONG ObjectType;
	ACCESS_MASK GrantedAccess;
} ALPC_MESSAGE_HANDLE_INFORMATION, * PALPC_MESSAGE_HANDLE_INFORMATION;

NTSTATUS
__stdcall
NtAlpcCreatePort(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes
);

NTSTATUS
__stdcall
NtAlpcDisconnectPort(
	HANDLE PortHandle,
	ULONG Flags
);

NTSTATUS
__stdcall
NtAlpcQueryInformation(
	HANDLE PortHandle,
	ALPC_PORT_INFORMATION_CLASS PortInformationClass,
	PVOID PortInformation,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtAlpcSetInformation(
	HANDLE PortHandle,
	ALPC_PORT_INFORMATION_CLASS PortInformationClass,
	PVOID PortInformation,
	ULONG Length
);

NTSTATUS
__stdcall
NtAlpcCreatePortSection(
	HANDLE PortHandle,
	ULONG Flags,
	HANDLE SectionHandle,
	SIZE_T SectionSize,
	PALPC_HANDLE AlpcSectionHandle,
	PSIZE_T ActualSectionSize
);

NTSTATUS
__stdcall
NtAlpcDeletePortSection(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE SectionHandle
);

NTSTATUS
__stdcall
NtAlpcCreateResourceReserve(
	HANDLE PortHandle,
	ULONG Flags,
	SIZE_T MessageSize,
	PALPC_HANDLE ResourceId
);

NTSTATUS
__stdcall
NtAlpcDeleteResourceReserve(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE ResourceId
);

NTSTATUS
__stdcall
NtAlpcCreateSectionView(
	HANDLE PortHandle,
	ULONG Flags,
	PALPC_DATA_VIEW_ATTR ViewAttributes
);

NTSTATUS
__stdcall
NtAlpcDeleteSectionView(
	HANDLE PortHandle,
	ULONG Flags,
	PVOID ViewBase
);

NTSTATUS
__stdcall
NtAlpcCreateSecurityContext(
	HANDLE PortHandle,
	ULONG Flags,
	PALPC_SECURITY_ATTR SecurityAttribute
);

NTSTATUS
__stdcall
NtAlpcDeleteSecurityContext(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE ContextHandle
);

NTSTATUS
__stdcall
NtAlpcRevokeSecurityContext(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE ContextHandle
);

NTSTATUS
__stdcall
NtAlpcQueryInformationMessage(
	HANDLE PortHandle,
	PPORT_MESSAGE PortMessage,
	ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass,
	PVOID MessageInformation,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtAlpcConnectPort(
	PHANDLE PortHandle,
	PUNICODE_STRING PortName,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes,
	ULONG Flags,
	PSID RequiredServerSid,
	PPORT_MESSAGE ConnectionMessage,
	PULONG BufferLength,
	PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes,
	PALPC_MESSAGE_ATTRIBUTES InMessageAttributes,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtAlpcAcceptConnectPort(
	PHANDLE PortHandle,
	HANDLE ConnectionPortHandle,
	ULONG Flags,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes,
	PVOID PortContext,
	PPORT_MESSAGE ConnectionRequest,
	PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes,
	BOOLEAN AcceptConnection
);

NTSTATUS
__stdcall
NtAlpcSendWaitReceivePort(
	HANDLE PortHandle,
	ULONG Flags,
	PPORT_MESSAGE SendMessageW,
	PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes,
	PPORT_MESSAGE ReceiveMessage,
	PSIZE_T BufferLength,
	PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
NtAlpcCancelMessage(
	HANDLE PortHandle,
	ULONG Flags,
	PALPC_CONTEXT_ATTR MessageContext
);

NTSTATUS
__stdcall
NtAlpcImpersonateClientOfPort(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	PVOID Flags
);

NTSTATUS
__stdcall
NtAlpcOpenSenderProcess(
	PHANDLE ProcessHandle,
	HANDLE PortHandle,
	PPORT_MESSAGE PortMessage,
	ULONG Flags,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtAlpcOpenSenderThread(
	PHANDLE ThreadHandle,
	HANDLE PortHandle,
	PPORT_MESSAGE PortMessage,
	ULONG Flags,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

ULONG
__stdcall
AlpcMaxAllowedMessageLength(
	void
);

ULONG
__stdcall
AlpcGetHeaderSize(
	ULONG Flags
);

NTSTATUS
__stdcall
AlpcInitializeMessageAttribute(
	ULONG AttributeFlags,
	PALPC_MESSAGE_ATTRIBUTES Buffer,
	ULONG BufferSize,
	PULONG RequiredBufferSize
);

PVOID
__stdcall
AlpcGetMessageAttribute(
	PALPC_MESSAGE_ATTRIBUTES Buffer,
	ULONG AttributeFlag
);

NTSTATUS
__stdcall
AlpcRegisterCompletionList(
	HANDLE PortHandle,
	PALPC_COMPLETION_LIST_HEADER Buffer,
	ULONG Size,
	ULONG ConcurrencyCount,
	ULONG AttributeFlags
);

NTSTATUS
__stdcall
AlpcUnregisterCompletionList(
	HANDLE PortHandle
);

NTSTATUS
__stdcall
AlpcRundownCompletionList(
	HANDLE PortHandle
);

NTSTATUS
__stdcall
AlpcAdjustCompletionListConcurrencyCount(
	HANDLE PortHandle,
	ULONG ConcurrencyCount
);

BOOLEAN
__stdcall
AlpcRegisterCompletionListWorkerThread(
	PVOID CompletionList
);

BOOLEAN
__stdcall
AlpcUnregisterCompletionListWorkerThread(
	PVOID CompletionList
);

void
__stdcall
AlpcGetCompletionListLastMessageInformation(
	PVOID CompletionList,
	PULONG LastMessageId,
	PULONG LastCallbackId
);

ULONG
__stdcall
AlpcGetOutstandingCompletionListMessageCount(
	PVOID CompletionList
);

PPORT_MESSAGE
__stdcall
AlpcGetMessageFromCompletionList(
	PVOID CompletionList,
	PALPC_MESSAGE_ATTRIBUTES* MessageAttributes
);

void
__stdcall
AlpcFreeCompletionListMessage(
	PVOID CompletionList,
	PPORT_MESSAGE Message
);

PALPC_MESSAGE_ATTRIBUTES
__stdcall
AlpcGetCompletionListMessageAttributes(
	PVOID CompletionList,
	PPORT_MESSAGE Message
);
typedef enum _PF_BOOT_PHASE_ID
{
	PfKernelInitPhase = 0,
	PfBootDriverInitPhase = 90,
	PfSystemDriverInitPhase = 120,
	PfSessionManagerInitPhase = 150,
	PfSMRegistryInitPhase = 180,
	PfVideoInitPhase = 210,
	PfPostVideoInitPhase = 240,
	PfBootAcceptedRegistryInitPhase = 270,
	PfUserShellReadyPhase = 300,
	PfMaxBootPhaseId = 900
} PF_BOOT_PHASE_ID;
typedef enum _PF_ENABLE_STATUS
{
	PfSvNotSpecified,
	PfSvEnabled,
	PfSvDisabled,
	PfSvMaxEnableStatus
} PF_ENABLE_STATUS;
typedef struct _PF_TRACE_LIMITS
{
	ULONG MaxNumPages;
	ULONG MaxNumSections;
	LONGLONG TimerPeriod;
} PF_TRACE_LIMITS, * PPF_TRACE_LIMITS;
typedef struct _PF_SYSTEM_PREFETCH_PARAMETERS
{
	PF_ENABLE_STATUS EnableStatus[2];
	PF_TRACE_LIMITS TraceLimits[2];
	ULONG MaxNumActiveTraces;
	ULONG MaxNumSavedTraces;
	WCHAR RootDirPath[32];
	WCHAR HostingApplicationList[128];
} PF_SYSTEM_PREFETCH_PARAMETERS, * PPF_SYSTEM_PREFETCH_PARAMETERS;
typedef struct _PF_BOOT_CONTROL
{
	ULONG Version;
	ULONG DisableBootPrefetching;
} PF_BOOT_CONTROL, * PPF_BOOT_CONTROL;
typedef enum _PREFETCHER_INFORMATION_CLASS
{
	PrefetcherRetrieveTrace = 1,
	PrefetcherSystemParameters,
	PrefetcherBootPhase,
	PrefetcherRetrieveBootLoaderTrace,
	PrefetcherBootControl
} PREFETCHER_INFORMATION_CLASS;
typedef struct _PREFETCHER_INFORMATION
{
	ULONG Version;
	ULONG Magic;
	PREFETCHER_INFORMATION_CLASS PrefetcherInformationClass;
	PVOID PrefetcherInformation;
	ULONG PrefetcherInformationLength;
} PREFETCHER_INFORMATION, * PPREFETCHER_INFORMATION;
typedef struct _PF_SYSTEM_SUPERFETCH_PARAMETERS
{
	ULONG EnabledComponents;
	ULONG BootID;
	ULONG SavedSectInfoTracesMax;
	ULONG SavedPageAccessTracesMax;
	ULONG ScenarioPrefetchTimeoutStandby;
	ULONG ScenarioPrefetchTimeoutHibernate;
} PF_SYSTEM_SUPERFETCH_PARAMETERS, * PPF_SYSTEM_SUPERFETCH_PARAMETERS;
typedef struct _PF_PFN_PRIO_REQUEST
{
	ULONG Version;
	ULONG RequestFlags;
	ULONG_PTR PfnCount;
	SYSTEM_MEMORY_LIST_INFORMATION MemInfo;
	MMPFN_IDENTITY PageData[256];
} PF_PFN_PRIO_REQUEST, * PPF_PFN_PRIO_REQUEST;
typedef enum _PFS_PRIVATE_PAGE_SOURCE_TYPE
{
	PfsPrivateSourceKernel,
	PfsPrivateSourceSession,
	PfsPrivateSourceProcess,
	PfsPrivateSourceMax
} PFS_PRIVATE_PAGE_SOURCE_TYPE;
typedef struct _PFS_PRIVATE_PAGE_SOURCE
{
	PFS_PRIVATE_PAGE_SOURCE_TYPE Type;
	union
	{
		ULONG SessionId;
		ULONG ProcessId;
	};
	ULONG ImagePathHash;
	ULONG_PTR UniqueProcessHash;
} PFS_PRIVATE_PAGE_SOURCE, * PPFS_PRIVATE_PAGE_SOURCE;
typedef struct _PF_PRIVSOURCE_INFO
{
	PFS_PRIVATE_PAGE_SOURCE DbInfo;
	PVOID EProcess;
	SIZE_T WsPrivatePages;
	SIZE_T TotalPrivatePages;
	ULONG SessionID;
	CHAR ImageName[16];
	union {
		ULONG_PTR WsSwapPages;
		ULONG_PTR SessionPagedPoolPages;
		ULONG_PTR StoreSizePages;
	};
	ULONG_PTR WsTotalPages;
	ULONG DeepFreezeTimeMs;
	ULONG ModernApp : 1;
	ULONG DeepFrozen : 1;
	ULONG Foreground : 1;
	ULONG PerProcessStore : 1;
	ULONG Spare : 28;
} PF_PRIVSOURCE_INFO, * PPF_PRIVSOURCE_INFO;
typedef struct _PF_PRIVSOURCE_QUERY_REQUEST
{
	ULONG Version;
	ULONG Flags;
	ULONG InfoCount;
	PF_PRIVSOURCE_INFO InfoArray[1];
} PF_PRIVSOURCE_QUERY_REQUEST, * PPF_PRIVSOURCE_QUERY_REQUEST;
typedef enum _PF_PHASED_SCENARIO_TYPE
{
	PfScenarioTypeNone,
	PfScenarioTypeStandby,
	PfScenarioTypeHibernate,
	PfScenarioTypeFUS,
	PfScenarioTypeMax
} PF_PHASED_SCENARIO_TYPE;
typedef struct _PF_SCENARIO_PHASE_INFO
{
	ULONG Version;
	PF_PHASED_SCENARIO_TYPE ScenType;
	ULONG PhaseId;
	ULONG SequenceNumber;
	ULONG Flags;
	ULONG FUSUserId;
} PF_SCENARIO_PHASE_INFO, * PPF_SCENARIO_PHASE_INFO;
typedef struct _PF_MEMORY_LIST_NODE
{
	ULONGLONG Node : 8;
	ULONGLONG Spare : 56;
	ULONGLONG StandbyLowPageCount;
	ULONGLONG StandbyMediumPageCount;
	ULONGLONG StandbyHighPageCount;
	ULONGLONG FreePageCount;
	ULONGLONG ModifiedPageCount;
} PF_MEMORY_LIST_NODE, * PPF_MEMORY_LIST_NODE;
typedef struct _PF_MEMORY_LIST_INFO
{
	ULONG Version;
	ULONG Size;
	ULONG NodeCount;
	PF_MEMORY_LIST_NODE Nodes[1];
} PF_MEMORY_LIST_INFO, * PPF_MEMORY_LIST_INFO;
typedef struct _PF_PHYSICAL_MEMORY_RANGE
{
	ULONG_PTR BasePfn;
	ULONG_PTR PageCount;
} PF_PHYSICAL_MEMORY_RANGE, * PPF_PHYSICAL_MEMORY_RANGE;
typedef struct _PF_PHYSICAL_MEMORY_RANGE_INFO_V1
{
	ULONG Version;
	ULONG RangeCount;
	PF_PHYSICAL_MEMORY_RANGE Ranges[1];
} PF_PHYSICAL_MEMORY_RANGE_INFO_V1, * PPF_PHYSICAL_MEMORY_RANGE_INFO_V1;
typedef struct _PF_PHYSICAL_MEMORY_RANGE_INFO_V2
{
	ULONG Version;
	ULONG Flags;
	ULONG RangeCount;
	PF_PHYSICAL_MEMORY_RANGE Ranges[1];
} PF_PHYSICAL_MEMORY_RANGE_INFO_V2, * PPF_PHYSICAL_MEMORY_RANGE_INFO_V2;
typedef struct _PF_REPURPOSED_BY_PREFETCH_INFO
{
	ULONG Version;
	ULONG RepurposedByPrefetch;
} PF_REPURPOSED_BY_PREFETCH_INFO, * PPF_REPURPOSED_BY_PREFETCH_INFO;
typedef enum _SUPERFETCH_INFORMATION_CLASS
{
	SuperfetchRetrieveTrace = 1,
	SuperfetchSystemParameters,
	SuperfetchLogEvent,
	SuperfetchGenerateTrace,
	SuperfetchPrefetch,
	SuperfetchPfnQuery,
	SuperfetchPfnSetPriority,
	SuperfetchPrivSourceQuery,
	SuperfetchSequenceNumberQuery,
	SuperfetchScenarioPhase,
	SuperfetchWorkerPriority,
	SuperfetchScenarioQuery,
	SuperfetchScenarioPrefetch,
	SuperfetchRobustnessControl,
	SuperfetchTimeControl,
	SuperfetchMemoryListQuery,
	SuperfetchMemoryRangesQuery,
	SuperfetchTracingControl,
	SuperfetchTrimWhileAgingControl,
	SuperfetchRepurposedByPrefetch,
	SuperfetchInformationMax
} SUPERFETCH_INFORMATION_CLASS;
typedef struct _SUPERFETCH_INFORMATION
{
	ULONG Version;
	ULONG Magic;
	SUPERFETCH_INFORMATION_CLASS InfoClass;
	PVOID Data;
	ULONG Length;
} SUPERFETCH_INFORMATION, * PSUPERFETCH_INFORMATION;
typedef enum _PLUGPLAY_EVENT_CATEGORY
{
	HardwareProfileChangeEvent,
	TargetDeviceChangeEvent,
	DeviceClassChangeEvent,
	CustomDeviceEvent,
	DeviceInstallEvent,
	DeviceArrivalEvent,
	PowerEvent,
	VetoEvent,
	BlockedDriverEvent,
	InvalidIDEvent,
	MaxPlugEventCategory
} PLUGPLAY_EVENT_CATEGORY, * PPLUGPLAY_EVENT_CATEGORY;
typedef struct _PLUGPLAY_EVENT_BLOCK
{
	GUID EventGuid;
	PLUGPLAY_EVENT_CATEGORY EventCategory;
	PULONG Result;
	ULONG Flags;
	ULONG TotalSize;
	PVOID DeviceObject;
	union
	{
		struct
		{
			GUID ClassGuid;
			WCHAR SymbolicLinkName[1];
		} DeviceClass;
		struct
		{
			WCHAR DeviceIds[1];
		} TargetDevice;
		struct
		{
			WCHAR DeviceId[1];
		} InstallDevice;
		struct
		{
			PVOID NotificationStructure;
			WCHAR DeviceIds[1];
		} CustomNotification;
		struct
		{
			PVOID Notification;
		} ProfileNotification;
		struct
		{
			ULONG NotificationCode;
			ULONG NotificationData;
		} PowerNotification;
		struct
		{
			PNP_VETO_TYPE VetoType;
			WCHAR DeviceIdVetoNameBuffer[1];
		} VetoNotification;
		struct
		{
			GUID BlockedDriverGuid;
		} BlockedDriverNotification;
		struct
		{
			WCHAR ParentId[1];
		} InvalidIDNotification;
	} u;
} PLUGPLAY_EVENT_BLOCK, * PPLUGPLAY_EVENT_BLOCK;
typedef enum _PLUGPLAY_CONTROL_CLASS
{
	PlugPlayControlEnumerateDevice,
	PlugPlayControlRegisterNewDevice,
	PlugPlayControlDeregisterDevice,
	PlugPlayControlInitializeDevice,
	PlugPlayControlStartDevice,
	PlugPlayControlUnlockDevice,
	PlugPlayControlQueryAndRemoveDevice,
	PlugPlayControlUserResponse,
	PlugPlayControlGenerateLegacyDevice,
	PlugPlayControlGetInterfaceDeviceList,
	PlugPlayControlProperty,
	PlugPlayControlDeviceClassAssociation,
	PlugPlayControlGetRelatedDevice,
	PlugPlayControlGetInterfaceDeviceAlias,
	PlugPlayControlDeviceStatus,
	PlugPlayControlGetDeviceDepth,
	PlugPlayControlQueryDeviceRelations,
	PlugPlayControlTargetDeviceRelation,
	PlugPlayControlQueryConflictList,
	PlugPlayControlRetrieveDock,
	PlugPlayControlResetDevice,
	PlugPlayControlHaltDevice,
	PlugPlayControlGetBlockedDriverList,
	PlugPlayControlGetDeviceInterfaceEnabled,
	MaxPlugPlayControl
} PLUGPLAY_CONTROL_CLASS, * PPLUGPLAY_CONTROL_CLASS;

NTSTATUS
__stdcall
NtGetPlugPlayEvent(
	HANDLE EventHandle,
	PVOID Context,
	PPLUGPLAY_EVENT_BLOCK EventBlock,
	ULONG EventBufferSize
);

NTSTATUS
__stdcall
NtPlugPlayControl(
	PLUGPLAY_CONTROL_CLASS PnPControlClass,
	PVOID PnPControlData,
	ULONG PnPControlDataLength
);

NTSTATUS
__stdcall
NtSerializeBoot(
	void
);

NTSTATUS
__stdcall
NtEnableLastKnownGood(
	void
);

NTSTATUS
__stdcall
NtDisableLastKnownGood(
	void
);

NTSTATUS
__stdcall
NtReplacePartitionUnit(
	PUNICODE_STRING TargetInstancePath,
	PUNICODE_STRING SpareInstancePath,
	ULONG Flags
);
typedef union _POWER_STATE
{
	SYSTEM_POWER_STATE SystemState;
	DEVICE_POWER_STATE DeviceState;
} POWER_STATE, * PPOWER_STATE;
typedef enum _POWER_STATE_TYPE
{
	SystemPowerState = 0,
	DevicePowerState
} POWER_STATE_TYPE, * PPOWER_STATE_TYPE;
typedef struct _SYSTEM_POWER_STATE_CONTEXT
{
	union
	{
		struct
		{
			ULONG Reserved1 : 8;
			ULONG TargetSystemState : 4;
			ULONG EffectiveSystemState : 4;
			ULONG CurrentSystemState : 4;
			ULONG IgnoreHibernationPath : 1;
			ULONG PseudoTransition : 1;
			ULONG Reserved2 : 10;
		};
		ULONG ContextAsUlong;
	};
} SYSTEM_POWER_STATE_CONTEXT, * PSYSTEM_POWER_STATE_CONTEXT;
typedef struct _COUNTED_REASON_CONTEXT
{
	ULONG Version;
	ULONG Flags;
	union
	{
		struct
		{
			UNICODE_STRING ResourceFileName;
			USHORT ResourceReasonId;
			ULONG StringCount;
			PUNICODE_STRING   ReasonStrings;
		};
		UNICODE_STRING SimpleString;
	};
} COUNTED_REASON_CONTEXT, * PCOUNTED_REASON_CONTEXT;
typedef enum _POWER_STATE_HANDLER_TYPE
{
	PowerStateSleeping1 = 0,
	PowerStateSleeping2 = 1,
	PowerStateSleeping3 = 2,
	PowerStateSleeping4 = 3,
	PowerStateShutdownOff = 4,
	PowerStateShutdownReset = 5,
	PowerStateSleeping4Firmware = 6,
	PowerStateMaximum = 7
} POWER_STATE_HANDLER_TYPE, * PPOWER_STATE_HANDLER_TYPE;
typedef NTSTATUS(__stdcall* PENTER_STATE_SYSTEM_HANDLER)(
	PVOID SystemContext
	);
typedef NTSTATUS(__stdcall* PENTER_STATE_HANDLER)(
	PVOID Context,
	PENTER_STATE_SYSTEM_HANDLER SystemHandler,
	PVOID SystemContext,
	LONG NumberProcessors,
	volatile PLONG Number
	);
typedef struct _POWER_STATE_HANDLER
{
	POWER_STATE_HANDLER_TYPE Type;
	BOOLEAN RtcWake;
	UCHAR Spare[3];
	PENTER_STATE_HANDLER Handler;
	PVOID Context;
} POWER_STATE_HANDLER, * PPOWER_STATE_HANDLER;
typedef NTSTATUS(__stdcall* PENTER_STATE_NOTIFY_HANDLER)(
	POWER_STATE_HANDLER_TYPE State,
	PVOID Context,
	BOOLEAN Entering
	);
typedef struct _POWER_STATE_NOTIFY_HANDLER
{
	PENTER_STATE_NOTIFY_HANDLER Handler;
	PVOID Context;
} POWER_STATE_NOTIFY_HANDLER, * PPOWER_STATE_NOTIFY_HANDLER;
typedef struct _POWER_REQUEST_ACTION
{
	HANDLE PowerRequest;
	POWER_REQUEST_TYPE RequestType;
	BOOLEAN Enable;
	HANDLE TargetProcess;
} POWER_REQUEST_ACTION, * PPOWER_REQUEST_ACTION;
typedef struct _POWER_REQUEST_LIST
{
	ULONG_PTR cElements;
	ULONG_PTR OffsetsToRequests[1];
} POWER_REQUEST_LIST, * PPOWER_REQUEST_LIST;
typedef enum _POWER_REQUEST_ORIGIN
{
	POWER_REQUEST_ORIGIN_DRIVER = 0,
	POWER_REQUEST_ORIGIN_PROCESS = 1,
	POWER_REQUEST_ORIGIN_SERVICE = 2
} POWER_REQUEST_ORIGIN;
typedef struct _POWER_REQUEST_BODY
{
	ULONG_PTR cbSize;
	POWER_REQUEST_ORIGIN Origin;
	ULONG_PTR OffsetToRequester;
	union
	{
		struct
		{
			ULONG ProcessId;
			ULONG ServiceTag;
		};
		ULONG_PTR OffsetToDriverName;
	};
	ULONG_PTR OffsetToContext;
} POWER_REQUEST_BODY, * PPOWER_REQUEST_BODY;
typedef struct _POWER_REQUEST
{
	union
	{
		struct
		{
			ULONG Reserved;
			ULONG ActiveCount[3];
			POWER_REQUEST_BODY Body;
		} V1;
	};
} POWER_REQUEST, * PPOWER_REQUEST;
typedef struct _COUNTED_REASON_CONTEXT_RELATIVE
{
	ULONG Flags;
	union
	{
		struct
		{
			ULONG_PTR OffsetToResourceFileName;
			USHORT ResourceReasonId;
			ULONG StringCount;
			ULONG_PTR OffsetToReasonStrings;
		};
		ULONG_PTR OffsetToSimpleString;
	};
} COUNTED_REASON_CONTEXT_RELATIVE, * PCOUNTED_REASON_CONTEXT_RELATIVE;
typedef struct _PROCESSOR_POWER_INFORMATION
{
	ULONG Number;
	ULONG MaxMhz;
	ULONG CurrentMhz;
	ULONG MhzLimit;
	ULONG MaxIdleState;
	ULONG CurrentIdleState;
} PROCESSOR_POWER_INFORMATION, * PPROCESSOR_POWER_INFORMATION;
typedef struct _SYSTEM_POWER_INFORMATION
{
	ULONG MaxIdlenessAllowed;
	ULONG Idleness;
	ULONG TimeRemaining;
	UCHAR CoolingMode;
} SYSTEM_POWER_INFORMATION, * PSYSTEM_POWER_INFORMATION;

NTSTATUS
__stdcall
NtPowerInformation(
	POWER_INFORMATION_LEVEL InformationLevel,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength
);

NTSTATUS
__stdcall
NtSetThreadExecutionState(
	EXECUTION_STATE NewFlags,
	EXECUTION_STATE* PreviousFlags
);

NTSTATUS
__stdcall
NtRequestWakeupLatency(
	LATENCY_TIME latency
);

NTSTATUS
__stdcall
NtInitiatePowerAction(
	POWER_ACTION SystemAction,
	SYSTEM_POWER_STATE LightestSystemState,
	ULONG Flags,
	BOOLEAN Asynchronous
);

NTSTATUS
__stdcall
NtSetSystemPowerState(
	POWER_ACTION SystemAction,
	SYSTEM_POWER_STATE LightestSystemState,
	ULONG Flags
);

NTSTATUS
__stdcall
NtGetDevicePowerState(
	HANDLE Device,
	PDEVICE_POWER_STATE State
);

BOOLEAN
__stdcall
NtIsSystemResumeAutomatic(
	void
);
typedef enum _KEY_INFORMATION_CLASS
{
	KeyBasicInformation,
	KeyNodeInformation,
	KeyFullInformation,
	KeyNameInformation,
	KeyCachedInformation,
	KeyFlagsInformation,
	KeyVirtualizationInformation,
	KeyHandleTagsInformation,
	KeyTrustInformation,
	KeyLayerInformation,
	MaxKeyInfoClass
} KEY_INFORMATION_CLASS;
typedef struct _KEY_BASIC_INFORMATION
{
	LARGE_INTEGER LastWriteTime;
	ULONG TitleIndex;
	ULONG NameLength;
	WCHAR Name[1];
} KEY_BASIC_INFORMATION, * PKEY_BASIC_INFORMATION;
typedef struct _KEY_NODE_INFORMATION
{
	LARGE_INTEGER LastWriteTime;
	ULONG TitleIndex;
	ULONG ClassOffset;
	ULONG ClassLength;
	ULONG NameLength;
	WCHAR Name[1];
} KEY_NODE_INFORMATION, * PKEY_NODE_INFORMATION;
typedef struct _KEY_FULL_INFORMATION
{
	LARGE_INTEGER LastWriteTime;
	ULONG TitleIndex;
	ULONG ClassOffset;
	ULONG ClassLength;
	ULONG SubKeys;
	ULONG MaxNameLen;
	ULONG MaxClassLen;
	ULONG Values;
	ULONG MaxValueNameLen;
	ULONG MaxValueDataLen;
	WCHAR Class[1];
} KEY_FULL_INFORMATION, * PKEY_FULL_INFORMATION;
typedef struct _KEY_NAME_INFORMATION
{
	ULONG NameLength;
	WCHAR Name[1];
} KEY_NAME_INFORMATION, * PKEY_NAME_INFORMATION;
typedef struct _KEY_CACHED_INFORMATION
{
	LARGE_INTEGER LastWriteTime;
	ULONG TitleIndex;
	ULONG SubKeys;
	ULONG MaxNameLen;
	ULONG Values;
	ULONG MaxValueNameLen;
	ULONG MaxValueDataLen;
	ULONG NameLength;
	WCHAR Name[1];
} KEY_CACHED_INFORMATION, * PKEY_CACHED_INFORMATION;
typedef struct _KEY_FLAGS_INFORMATION
{
	ULONG Wow64Flags;
	ULONG KeyFlags;
	ULONG ControlFlags;
} KEY_FLAGS_INFORMATION, * PKEY_FLAGS_INFORMATION;
typedef struct _KEY_VIRTUALIZATION_INFORMATION
{
	ULONG VirtualizationCandidate : 1;
	ULONG VirtualizationEnabled : 1;
	ULONG VirtualTarget : 1;
	ULONG VirtualStore : 1;
	ULONG VirtualSource : 1;
	ULONG Reserved : 27;
} KEY_VIRTUALIZATION_INFORMATION, * PKEY_VIRTUALIZATION_INFORMATION;
typedef struct _KEY_TRUST_INFORMATION
{
	ULONG TrustedKey : 1;
	ULONG Reserved : 31;
} KEY_TRUST_INFORMATION, * PKEY_TRUST_INFORMATION;
typedef struct _KEY_LAYER_INFORMATION
{
	ULONG IsTombstone;
	ULONG IsSupersedeLocal;
	ULONG IsSupersedeTree;
	ULONG ClassIsInherited;
	ULONG Reserved;
} KEY_LAYER_INFORMATION, * PKEY_LAYER_INFORMATION;
typedef enum _KEY_SET_INFORMATION_CLASS
{
	KeyWriteTimeInformation,
	KeyWow64FlagsInformation,
	KeyControlFlagsInformation,
	KeySetVirtualizationInformation,
	KeySetDebugInformation,
	KeySetHandleTagsInformation,
	KeySetLayerInformation,
	MaxKeySetInfoClass
} KEY_SET_INFORMATION_CLASS;
typedef struct _KEY_WRITE_TIME_INFORMATION
{
	LARGE_INTEGER LastWriteTime;
} KEY_WRITE_TIME_INFORMATION, * PKEY_WRITE_TIME_INFORMATION;
typedef struct _KEY_WOW64_FLAGS_INFORMATION
{
	ULONG UserFlags;
} KEY_WOW64_FLAGS_INFORMATION, * PKEY_WOW64_FLAGS_INFORMATION;
typedef struct _KEY_HANDLE_TAGS_INFORMATION
{
	ULONG HandleTags;
} KEY_HANDLE_TAGS_INFORMATION, * PKEY_HANDLE_TAGS_INFORMATION;
typedef struct _KEY_SET_LAYER_INFORMATION
{
	ULONG IsTombstone : 1;
	ULONG IsSupersedeLocal : 1;
	ULONG IsSupersedeTree : 1;
	ULONG ClassIsInherited : 1;
	ULONG Reserved : 28;
} KEY_SET_LAYER_INFORMATION, * PKEY_SET_LAYER_INFORMATION;
typedef struct _KEY_CONTROL_FLAGS_INFORMATION
{
	ULONG ControlFlags;
} KEY_CONTROL_FLAGS_INFORMATION, * PKEY_CONTROL_FLAGS_INFORMATION;
typedef struct _KEY_SET_VIRTUALIZATION_INFORMATION
{
	ULONG VirtualTarget : 1;
	ULONG VirtualStore : 1;
	ULONG VirtualSource : 1;
	ULONG Reserved : 29;
} KEY_SET_VIRTUALIZATION_INFORMATION, * PKEY_SET_VIRTUALIZATION_INFORMATION;
typedef enum _KEY_VALUE_INFORMATION_CLASS
{
	KeyValueBasicInformation,
	KeyValueFullInformation,
	KeyValuePartialInformation,
	KeyValueFullInformationAlign64,
	KeyValuePartialInformationAlign64,
	KeyValueLayerInformation,
	MaxKeyValueInfoClass
} KEY_VALUE_INFORMATION_CLASS;
typedef struct _KEY_VALUE_BASIC_INFORMATION
{
	ULONG TitleIndex;
	ULONG Type;
	ULONG NameLength;
	WCHAR Name[1];
} KEY_VALUE_BASIC_INFORMATION, * PKEY_VALUE_BASIC_INFORMATION;
typedef struct _KEY_VALUE_FULL_INFORMATION
{
	ULONG TitleIndex;
	ULONG Type;
	ULONG DataOffset;
	ULONG DataLength;
	ULONG NameLength;
	WCHAR Name[1];
} KEY_VALUE_FULL_INFORMATION, * PKEY_VALUE_FULL_INFORMATION;
typedef struct _KEY_VALUE_PARTIAL_INFORMATION
{
	ULONG TitleIndex;
	ULONG Type;
	ULONG DataLength;
	UCHAR Data[1];
} KEY_VALUE_PARTIAL_INFORMATION, * PKEY_VALUE_PARTIAL_INFORMATION;
typedef struct _KEY_VALUE_PARTIAL_INFORMATION_ALIGN64
{
	ULONG Type;
	ULONG DataLength;
	UCHAR Data[1];
} KEY_VALUE_PARTIAL_INFORMATION_ALIGN64, * PKEY_VALUE_PARTIAL_INFORMATION_ALIGN64;
typedef struct _KEY_VALUE_LAYER_INFORMATION
{
	ULONG IsTombstone;
	ULONG Reserved;
} KEY_VALUE_LAYER_INFORMATION, * PKEY_VALUE_LAYER_INFORMATION;
typedef enum _KEY_LOAD_ENTRY_TYPE {
	KeyLoadTrustClassKey = 1,
	KeyLoadEvent,
	KeyLoadToken
} KEY_LOAD_ENTRY_TYPE;
typedef struct _KEY_LOAD_ENTRY {
	KEY_LOAD_ENTRY_TYPE EntryType;
	union
	{
		HANDLE Handle;
		ULONG_PTR Value;
	};
} KEY_LOAD_ENTRY, * PKEY_LOAD_ENTRY;
typedef struct _KEY_VALUE_ENTRY
{
	PUNICODE_STRING ValueName;
	ULONG DataLength;
	ULONG DataOffset;
	ULONG Type;
} KEY_VALUE_ENTRY, * PKEY_VALUE_ENTRY;
typedef enum _REG_ACTION
{
	KeyAdded,
	KeyRemoved,
	KeyModified
} REG_ACTION;
typedef struct _REG_NOTIFY_INFORMATION
{
	ULONG NextEntryOffset;
	REG_ACTION Action;
	ULONG KeyLength;
	WCHAR Key[1];
} REG_NOTIFY_INFORMATION, * PREG_NOTIFY_INFORMATION;
typedef struct _KEY_PID_ARRAY
{
	HANDLE ProcessId;
	UNICODE_STRING KeyName;
} KEY_PID_ARRAY, * PKEY_PID_ARRAY;
typedef struct _KEY_OPEN_SUBKEYS_INFORMATION
{
	ULONG Count;
	KEY_PID_ARRAY KeyArray[1];
} KEY_OPEN_SUBKEYS_INFORMATION, * PKEY_OPEN_SUBKEYS_INFORMATION;

NTSTATUS
__stdcall
NtCreateKey(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG TitleIndex,
	PUNICODE_STRING Class,
	ULONG CreateOptions,
	PULONG Disposition
);

NTSTATUS
__stdcall
NtCreateKeyTransacted(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG TitleIndex,
	PUNICODE_STRING Class,
	ULONG CreateOptions,
	HANDLE TransactionHandle,
	PULONG Disposition
);

NTSTATUS
__stdcall
NtOpenKey(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtOpenKeyTransacted(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE TransactionHandle
);

NTSTATUS
__stdcall
NtOpenKeyEx(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG OpenOptions
);

NTSTATUS
__stdcall
NtOpenKeyTransactedEx(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG OpenOptions,
	HANDLE TransactionHandle
);

NTSTATUS
__stdcall
NtDeleteKey(
	HANDLE KeyHandle
);

NTSTATUS
__stdcall
NtRenameKey(
	HANDLE KeyHandle,
	PUNICODE_STRING NewName
);

NTSTATUS
__stdcall
NtDeleteValueKey(
	HANDLE KeyHandle,
	PUNICODE_STRING ValueName
);

NTSTATUS
__stdcall
NtQueryKey(
	HANDLE KeyHandle,
	KEY_INFORMATION_CLASS KeyInformationClass,
	PVOID KeyInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
NtSetInformationKey(
	HANDLE KeyHandle,
	KEY_SET_INFORMATION_CLASS KeySetInformationClass,
	PVOID KeySetInformation,
	ULONG KeySetInformationLength
);

NTSTATUS
__stdcall
NtQueryValueKey(
	HANDLE KeyHandle,
	PUNICODE_STRING ValueName,
	KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
	PVOID KeyValueInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
NtSetValueKey(
	HANDLE KeyHandle,
	PUNICODE_STRING ValueName,
	ULONG TitleIndex,
	ULONG Type,
	PVOID Data,
	ULONG DataSize
);

NTSTATUS
__stdcall
NtQueryMultipleValueKey(
	HANDLE KeyHandle,
	PKEY_VALUE_ENTRY ValueEntries,
	ULONG EntryCount,
	PVOID ValueBuffer,
	PULONG BufferLength,
	PULONG RequiredBufferLength
);

NTSTATUS
__stdcall
NtEnumerateKey(
	HANDLE KeyHandle,
	ULONG Index,
	KEY_INFORMATION_CLASS KeyInformationClass,
	PVOID KeyInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
NtEnumerateValueKey(
	HANDLE KeyHandle,
	ULONG Index,
	KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
	PVOID KeyValueInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
NtFlushKey(
	HANDLE KeyHandle
);

NTSTATUS
__stdcall
NtCompactKeys(
	ULONG Count,
	HANDLE KeyArray[]
);

NTSTATUS
__stdcall
NtCompressKey(
	HANDLE Key
);

NTSTATUS
__stdcall
NtLoadKey(
	POBJECT_ATTRIBUTES TargetKey,
	POBJECT_ATTRIBUTES SourceFile
);

NTSTATUS
__stdcall
NtLoadKey2(
	POBJECT_ATTRIBUTES TargetKey,
	POBJECT_ATTRIBUTES SourceFile,
	ULONG Flags
);

NTSTATUS
__stdcall
NtLoadKeyEx(
	POBJECT_ATTRIBUTES TargetKey,
	POBJECT_ATTRIBUTES SourceFile,
	ULONG Flags,
	HANDLE TrustClassKey,
	HANDLE Event,
	ACCESS_MASK DesiredAccess,
	PHANDLE RootHandle,
	PVOID Reserved
);

NTSTATUS
__stdcall
NtReplaceKey(
	POBJECT_ATTRIBUTES NewFile,
	HANDLE TargetHandle,
	POBJECT_ATTRIBUTES OldFile
);

NTSTATUS
__stdcall
NtSaveKey(
	HANDLE KeyHandle,
	HANDLE FileHandle
);

NTSTATUS
__stdcall
NtSaveKeyEx(
	HANDLE KeyHandle,
	HANDLE FileHandle,
	ULONG Format
);

NTSTATUS
__stdcall
NtSaveMergedKeys(
	HANDLE HighPrecedenceKeyHandle,
	HANDLE LowPrecedenceKeyHandle,
	HANDLE FileHandle
);

NTSTATUS
__stdcall
NtRestoreKey(
	HANDLE KeyHandle,
	HANDLE FileHandle,
	ULONG Flags
);

NTSTATUS
__stdcall
NtUnloadKey(
	POBJECT_ATTRIBUTES TargetKey
);

NTSTATUS
__stdcall
NtUnloadKey2(
	POBJECT_ATTRIBUTES TargetKey,
	ULONG Flags
);

NTSTATUS
__stdcall
NtUnloadKeyEx(
	POBJECT_ATTRIBUTES TargetKey,
	HANDLE Event
);

NTSTATUS
__stdcall
NtNotifyChangeKey(
	HANDLE KeyHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG CompletionFilter,
	BOOLEAN WatchTree,
	PVOID Buffer,
	ULONG BufferSize,
	BOOLEAN Asynchronous
);

NTSTATUS
__stdcall
NtNotifyChangeMultipleKeys(
	HANDLE MasterKeyHandle,
	ULONG Count,
	OBJECT_ATTRIBUTES SubordinateObjects[],
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG CompletionFilter,
	BOOLEAN WatchTree,
	PVOID Buffer,
	ULONG BufferSize,
	BOOLEAN Asynchronous
);

NTSTATUS
__stdcall
NtQueryOpenSubKeys(
	POBJECT_ATTRIBUTES TargetKey,
	PULONG HandleCount
);

NTSTATUS
__stdcall
NtQueryOpenSubKeysEx(
	POBJECT_ATTRIBUTES TargetKey,
	ULONG BufferLength,
	PVOID Buffer,
	PULONG RequiredSize
);

NTSTATUS
__stdcall
NtInitializeRegistry(
	USHORT BootCondition
);

NTSTATUS
__stdcall
NtLockRegistryKey(
	HANDLE KeyHandle
);

NTSTATUS
__stdcall
NtLockProductActivationKeys(
	ULONG* pPrivateVer,
	ULONG* pSafeMode
);

NTSTATUS
__stdcall
NtFreezeRegistry(
	ULONG TimeOutInSeconds
);

NTSTATUS
__stdcall
NtThawRegistry(
	void
);
void InitializeListHead(
	PLIST_ENTRY ListHead
);
BOOLEAN IsListEmpty(
	PLIST_ENTRY ListHead
);
BOOLEAN RemoveEntryList(
	PLIST_ENTRY Entry
);
PLIST_ENTRY RemoveHeadList(
	PLIST_ENTRY ListHead
);
PLIST_ENTRY RemoveTailList(
	PLIST_ENTRY ListHead
);
void InsertTailList(
	PLIST_ENTRY ListHead,
	PLIST_ENTRY Entry
);
void InsertHeadList(
	PLIST_ENTRY ListHead,
	PLIST_ENTRY Entry
);
void AppendTailList(
	PLIST_ENTRY ListHead,
	PLIST_ENTRY ListToAppend
);
PSINGLE_LIST_ENTRY PopEntryList(
	PSINGLE_LIST_ENTRY ListHead
);
void PushEntryList(
	PSINGLE_LIST_ENTRY ListHead,
	PSINGLE_LIST_ENTRY Entry
);
typedef enum _TABLE_SEARCH_RESULT
{
	TableEmptyTree,
	TableFoundNode,
	TableInsertAsLeft,
	TableInsertAsRight
} TABLE_SEARCH_RESULT;
typedef enum _RTL_GENERIC_COMPARE_RESULTS
{
	GenericLessThan,
	GenericGreaterThan,
	GenericEqual
} RTL_GENERIC_COMPARE_RESULTS;
typedef RTL_GENERIC_COMPARE_RESULTS(__stdcall* PRTL_AVL_COMPARE_ROUTINE)(
	struct _RTL_AVL_TABLE* Table,
	PVOID FirstStruct,
	PVOID SecondStruct
	);
typedef PVOID(__stdcall* PRTL_AVL_ALLOCATE_ROUTINE)(
	struct _RTL_AVL_TABLE* Table,
	CLONG ByteSize
	);
typedef void(__stdcall* PRTL_AVL_FREE_ROUTINE)(
	struct _RTL_AVL_TABLE* Table,
	PVOID Buffer
	);
typedef NTSTATUS(__stdcall* PRTL_AVL_MATCH_FUNCTION)(
	struct _RTL_AVL_TABLE* Table,
	PVOID UserData,
	PVOID MatchData
	);
typedef struct _RTL_BALANCED_LINKS
{
	struct _RTL_BALANCED_LINKS* Parent;
	struct _RTL_BALANCED_LINKS* LeftChild;
	struct _RTL_BALANCED_LINKS* RightChild;
	CHAR Balance;
	UCHAR Reserved[3];
} RTL_BALANCED_LINKS, * PRTL_BALANCED_LINKS;
typedef struct _RTL_AVL_TABLE
{
	RTL_BALANCED_LINKS BalancedRoot;
	PVOID OrderedPointer;
	ULONG WhichOrderedElement;
	ULONG NumberGenericTableElements;
	ULONG DepthOfTree;
	PRTL_BALANCED_LINKS RestartKey;
	ULONG DeleteCount;
	PRTL_AVL_COMPARE_ROUTINE CompareRoutine;
	PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine;
	PRTL_AVL_FREE_ROUTINE FreeRoutine;
	PVOID TableContext;
} RTL_AVL_TABLE, * PRTL_AVL_TABLE;

void
__stdcall
RtlInitializeGenericTableAvl(
	PRTL_AVL_TABLE Table,
	PRTL_AVL_COMPARE_ROUTINE CompareRoutine,
	PRTL_AVL_ALLOCATE_ROUTINE AllocateRoutine,
	PRTL_AVL_FREE_ROUTINE FreeRoutine,
	PVOID TableContext
);

PVOID
__stdcall
RtlInsertElementGenericTableAvl(
	PRTL_AVL_TABLE Table,
	PVOID Buffer,
	CLONG BufferSize,
	PBOOLEAN NewElement
);

PVOID
__stdcall
RtlInsertElementGenericTableFullAvl(
	PRTL_AVL_TABLE Table,
	PVOID Buffer,
	CLONG BufferSize,
	PBOOLEAN NewElement,
	PVOID NodeOrParent,
	TABLE_SEARCH_RESULT SearchResult
);

BOOLEAN
__stdcall
RtlDeleteElementGenericTableAvl(
	PRTL_AVL_TABLE Table,
	PVOID Buffer
);

PVOID
__stdcall
RtlLookupElementGenericTableAvl(
	PRTL_AVL_TABLE Table,
	PVOID Buffer
);

PVOID
__stdcall
RtlLookupElementGenericTableFullAvl(
	PRTL_AVL_TABLE Table,
	PVOID Buffer,
	PVOID* NodeOrParent,
	TABLE_SEARCH_RESULT* SearchResult
);

PVOID
__stdcall
RtlEnumerateGenericTableAvl(
	PRTL_AVL_TABLE Table,
	BOOLEAN Restart
);

PVOID
__stdcall
RtlEnumerateGenericTableWithoutSplayingAvl(
	PRTL_AVL_TABLE Table,
	PVOID* RestartKey
);

PVOID
__stdcall
RtlLookupFirstMatchingElementGenericTableAvl(
	PRTL_AVL_TABLE Table,
	PVOID Buffer,
	PVOID* RestartKey
);

PVOID
__stdcall
RtlEnumerateGenericTableLikeADirectory(
	PRTL_AVL_TABLE Table,
	PRTL_AVL_MATCH_FUNCTION MatchFunction,
	PVOID MatchData,
	ULONG NextFlag,
	PVOID* RestartKey,
	PULONG DeleteCount,
	PVOID Buffer
);

PVOID
__stdcall
RtlGetElementGenericTableAvl(
	PRTL_AVL_TABLE Table,
	ULONG I
);

ULONG
__stdcall
RtlNumberGenericTableElementsAvl(
	PRTL_AVL_TABLE Table
);

BOOLEAN
__stdcall
RtlIsGenericTableEmptyAvl(
	PRTL_AVL_TABLE Table
);
typedef struct _RTL_SPLAY_LINKS
{
	struct _RTL_SPLAY_LINKS* Parent;
	struct _RTL_SPLAY_LINKS* LeftChild;
	struct _RTL_SPLAY_LINKS* RightChild;
} RTL_SPLAY_LINKS, * PRTL_SPLAY_LINKS;

PRTL_SPLAY_LINKS
__stdcall
RtlSplay(
	PRTL_SPLAY_LINKS Links
);

PRTL_SPLAY_LINKS
__stdcall
RtlDelete(
	PRTL_SPLAY_LINKS Links
);

void
__stdcall
RtlDeleteNoSplay(
	PRTL_SPLAY_LINKS Links,
	PRTL_SPLAY_LINKS* Root
);

PRTL_SPLAY_LINKS
__stdcall
RtlSubtreeSuccessor(
	PRTL_SPLAY_LINKS Links
);

PRTL_SPLAY_LINKS
__stdcall
RtlSubtreePredecessor(
	PRTL_SPLAY_LINKS Links
);

PRTL_SPLAY_LINKS
__stdcall
RtlRealSuccessor(
	PRTL_SPLAY_LINKS Links
);

PRTL_SPLAY_LINKS
__stdcall
RtlRealPredecessor(
	PRTL_SPLAY_LINKS Links
);
struct _RTL_GENERIC_TABLE;
typedef RTL_GENERIC_COMPARE_RESULTS(__stdcall* PRTL_GENERIC_COMPARE_ROUTINE)(
	struct _RTL_GENERIC_TABLE* Table,
	PVOID FirstStruct,
	PVOID SecondStruct
	);
typedef PVOID(__stdcall* PRTL_GENERIC_ALLOCATE_ROUTINE)(
	struct _RTL_GENERIC_TABLE* Table,
	CLONG ByteSize
	);
typedef void(__stdcall* PRTL_GENERIC_FREE_ROUTINE)(
	struct _RTL_GENERIC_TABLE* Table,
	PVOID Buffer
	);
typedef struct _RTL_GENERIC_TABLE
{
	PRTL_SPLAY_LINKS TableRoot;
	LIST_ENTRY InsertOrderList;
	PLIST_ENTRY OrderedPointer;
	ULONG WhichOrderedElement;
	ULONG NumberGenericTableElements;
	PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine;
	PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine;
	PRTL_GENERIC_FREE_ROUTINE FreeRoutine;
	PVOID TableContext;
} RTL_GENERIC_TABLE, * PRTL_GENERIC_TABLE;

void
__stdcall
RtlInitializeGenericTable(
	PRTL_GENERIC_TABLE Table,
	PRTL_GENERIC_COMPARE_ROUTINE CompareRoutine,
	PRTL_GENERIC_ALLOCATE_ROUTINE AllocateRoutine,
	PRTL_GENERIC_FREE_ROUTINE FreeRoutine,
	PVOID TableContext
);

PVOID
__stdcall
RtlInsertElementGenericTable(
	PRTL_GENERIC_TABLE Table,
	PVOID Buffer,
	CLONG BufferSize,
	PBOOLEAN NewElement
);

PVOID
__stdcall
RtlInsertElementGenericTableFull(
	PRTL_GENERIC_TABLE Table,
	PVOID Buffer,
	CLONG BufferSize,
	PBOOLEAN NewElement,
	PVOID NodeOrParent,
	TABLE_SEARCH_RESULT SearchResult
);

BOOLEAN
__stdcall
RtlDeleteElementGenericTable(
	PRTL_GENERIC_TABLE Table,
	PVOID Buffer
);

PVOID
__stdcall
RtlLookupElementGenericTable(
	PRTL_GENERIC_TABLE Table,
	PVOID Buffer
);

PVOID
__stdcall
RtlLookupElementGenericTableFull(
	PRTL_GENERIC_TABLE Table,
	PVOID Buffer,
	PVOID* NodeOrParent,
	TABLE_SEARCH_RESULT* SearchResult
);

PVOID
__stdcall
RtlEnumerateGenericTable(
	PRTL_GENERIC_TABLE Table,
	BOOLEAN Restart
);

PVOID
__stdcall
RtlEnumerateGenericTableWithoutSplaying(
	PRTL_GENERIC_TABLE Table,
	PVOID* RestartKey
);

PVOID
__stdcall
RtlGetElementGenericTable(
	PRTL_GENERIC_TABLE Table,
	ULONG I
);

ULONG
__stdcall
RtlNumberGenericTableElements(
	PRTL_GENERIC_TABLE Table
);

BOOLEAN
__stdcall
RtlIsGenericTableEmpty(
	PRTL_GENERIC_TABLE Table
);
typedef struct _RTL_RB_TREE
{
	PRTL_BALANCED_NODE Root;
	PRTL_BALANCED_NODE Min;
} RTL_RB_TREE, * PRTL_RB_TREE;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENTRY
{
	LIST_ENTRY Linkage;
	ULONG_PTR Signature;
} RTL_DYNAMIC_HASH_TABLE_ENTRY, * PRTL_DYNAMIC_HASH_TABLE_ENTRY;
typedef struct _RTL_DYNAMIC_HASH_TABLE_CONTEXT
{
	PLIST_ENTRY ChainHead;
	PLIST_ENTRY PrevLinkage;
	ULONG_PTR Signature;
} RTL_DYNAMIC_HASH_TABLE_CONTEXT, * PRTL_DYNAMIC_HASH_TABLE_CONTEXT;
typedef struct _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
{
	RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry;
	PLIST_ENTRY ChainHead;
	ULONG BucketIndex;
} RTL_DYNAMIC_HASH_TABLE_ENUMERATOR, * PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR;
typedef struct _RTL_DYNAMIC_HASH_TABLE
{
	ULONG Flags;
	ULONG Shift;
	ULONG TableSize;
	ULONG Pivot;
	ULONG DivisorMask;
	ULONG NumEntries;
	ULONG NonEmptyBuckets;
	ULONG NumEnumerators;
	PVOID Directory;
} RTL_DYNAMIC_HASH_TABLE, * PRTL_DYNAMIC_HASH_TABLE;

void
RtlInitHashTableContext(
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
);

void
RtlInitHashTableContextFromEnumerator(
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

void
RtlReleaseHashTableContext(
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
);

ULONG
RtlTotalBucketsHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

ULONG
RtlNonEmptyBucketsHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

ULONG
RtlEmptyBucketsHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

ULONG
RtlTotalEntriesHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

ULONG
RtlActiveEnumeratorsHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

BOOLEAN
__stdcall
RtlCreateHashTable(
	PRTL_DYNAMIC_HASH_TABLE* HashTable,
	ULONG Shift,
	ULONG Flags
);

void
__stdcall
RtlDeleteHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

BOOLEAN
__stdcall
RtlInsertEntryHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry,
	ULONG_PTR Signature,
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
);

BOOLEAN
__stdcall
RtlRemoveEntryHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENTRY Entry,
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
);

PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlLookupEntryHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	ULONG_PTR Signature,
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
);

PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlGetNextEntryHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_CONTEXT Context
);

BOOLEAN
__stdcall
RtlInitEnumerationHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlEnumerateEntryHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

void
__stdcall
RtlEndEnumerationHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

BOOLEAN
__stdcall
RtlInitWeakEnumerationHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

PRTL_DYNAMIC_HASH_TABLE_ENTRY
__stdcall
RtlWeaklyEnumerateEntryHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

void
__stdcall
RtlEndWeakEnumerationHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable,
	PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR Enumerator
);

BOOLEAN
__stdcall
RtlExpandHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

BOOLEAN
__stdcall
RtlContractHashTable(
	PRTL_DYNAMIC_HASH_TABLE HashTable
);

NTSTATUS
__stdcall
RtlInitializeCriticalSection(
	PRTL_CRITICAL_SECTION CriticalSection
);

NTSTATUS
__stdcall
RtlInitializeCriticalSectionAndSpinCount(
	PRTL_CRITICAL_SECTION CriticalSection,
	ULONG SpinCount
);

NTSTATUS
__stdcall
RtlDeleteCriticalSection(
	PRTL_CRITICAL_SECTION CriticalSection
);

NTSTATUS
__stdcall
RtlEnterCriticalSection(
	PRTL_CRITICAL_SECTION CriticalSection
);

NTSTATUS
__stdcall
RtlLeaveCriticalSection(
	PRTL_CRITICAL_SECTION CriticalSection
);

LOGICAL
__stdcall
RtlTryEnterCriticalSection(
	PRTL_CRITICAL_SECTION CriticalSection
);

LOGICAL
__stdcall
RtlIsCriticalSectionLocked(
	PRTL_CRITICAL_SECTION CriticalSection
);

LOGICAL
__stdcall
RtlIsCriticalSectionLockedByThread(
	PRTL_CRITICAL_SECTION CriticalSection
);

ULONG
__stdcall
RtlGetCriticalSectionRecursionCount(
	PRTL_CRITICAL_SECTION CriticalSection
);

ULONG
__stdcall
RtlSetCriticalSectionSpinCount(
	PRTL_CRITICAL_SECTION CriticalSection,
	ULONG SpinCount
);

HANDLE
__stdcall
RtlQueryCriticalSectionOwner(
	HANDLE EventHandle
);

void
__stdcall
RtlCheckForOrphanedCriticalSections(
	HANDLE ThreadHandle
);
typedef struct _RTL_RESOURCE
{
	RTL_CRITICAL_SECTION CriticalSection;
	HANDLE SharedSemaphore;
	volatile ULONG NumberOfWaitingShared;
	HANDLE ExclusiveSemaphore;
	volatile ULONG NumberOfWaitingExclusive;
	volatile LONG NumberOfActive;
	HANDLE ExclusiveOwnerThread;
	ULONG Flags;
	PRTL_RESOURCE_DEBUG DebugInfo;
} RTL_RESOURCE, * PRTL_RESOURCE;

void
__stdcall
RtlInitializeResource(
	PRTL_RESOURCE Resource
);

void
__stdcall
RtlDeleteResource(
	PRTL_RESOURCE Resource
);

BOOLEAN
__stdcall
RtlAcquireResourceShared(
	PRTL_RESOURCE Resource,
	BOOLEAN Wait
);

BOOLEAN
__stdcall
RtlAcquireResourceExclusive(
	PRTL_RESOURCE Resource,
	BOOLEAN Wait
);

void
__stdcall
RtlReleaseResource(
	PRTL_RESOURCE Resource
);

void
__stdcall
RtlConvertSharedToExclusive(
	PRTL_RESOURCE Resource
);

void
__stdcall
RtlConvertExclusiveToShared(
	PRTL_RESOURCE Resource
);

void
__stdcall
RtlInitializeSRWLock(
	PRTL_SRWLOCK SRWLock
);

void
__stdcall
RtlAcquireSRWLockExclusive(
	PRTL_SRWLOCK SRWLock
);

void
__stdcall
RtlAcquireSRWLockShared(
	PRTL_SRWLOCK SRWLock
);

void
__stdcall
RtlReleaseSRWLockExclusive(
	PRTL_SRWLOCK SRWLock
);

void
__stdcall
RtlReleaseSRWLockShared(
	PRTL_SRWLOCK SRWLock
);

BOOLEAN
__stdcall
RtlTryAcquireSRWLockExclusive(
	PRTL_SRWLOCK SRWLock
);

BOOLEAN
__stdcall
RtlTryAcquireSRWLockShared(
	PRTL_SRWLOCK SRWLock
);

void
__stdcall
RtlAcquireReleaseSRWLockExclusive(
	PRTL_SRWLOCK SRWLock
);

void
__stdcall
RtlInitializeConditionVariable(
	PRTL_CONDITION_VARIABLE ConditionVariable
);

NTSTATUS
__stdcall
RtlSleepConditionVariableCS(
	PRTL_CONDITION_VARIABLE ConditionVariable,
	PRTL_CRITICAL_SECTION CriticalSection,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
RtlSleepConditionVariableSRW(
	PRTL_CONDITION_VARIABLE ConditionVariable,
	PRTL_SRWLOCK SRWLock,
	PLARGE_INTEGER Timeout,
	ULONG Flags
);

void
__stdcall
RtlWakeConditionVariable(
	PRTL_CONDITION_VARIABLE ConditionVariable
);

void
__stdcall
RtlWakeAllConditionVariable(
	PRTL_CONDITION_VARIABLE ConditionVariable
);

NTSTATUS
__stdcall
RtlInitBarrier(
	PRTL_BARRIER Barrier,
	ULONG TotalThreads,
	ULONG SpinCount
);

NTSTATUS
__stdcall
RtlDeleteBarrier(
	PRTL_BARRIER Barrier
);

BOOLEAN
__stdcall
RtlBarrier(
	PRTL_BARRIER Barrier,
	ULONG Flags
);

BOOLEAN
__stdcall
RtlBarrierForDelete(
	PRTL_BARRIER Barrier,
	ULONG Flags
);
void RtlInitString(
	PSTRING DestinationString,
	PCSTR SourceString
);
void RtlInitAnsiString(
	PANSI_STRING DestinationString,
	PCSTR SourceString
);

NTSTATUS
__stdcall
RtlInitAnsiStringEx(
	PANSI_STRING DestinationString,
	PCSZ SourceString
);

void
__stdcall
RtlFreeAnsiString(
	PANSI_STRING AnsiString
);

void
__stdcall
RtlFreeOemString(
	POEM_STRING OemString
);

void
__stdcall
RtlCopyString(
	PSTRING DestinationString,
	PSTRING SourceString
);

CHAR
__stdcall
RtlUpperChar(
	CHAR Character
);

LONG
__stdcall
RtlCompareString(
	PSTRING String1,
	PSTRING String2,
	BOOLEAN CaseInSensitive
);

BOOLEAN
__stdcall
RtlEqualString(
	PSTRING String1,
	PSTRING String2,
	BOOLEAN CaseInSensitive
);

BOOLEAN
__stdcall
RtlPrefixString(
	PSTRING String1,
	PSTRING String2,
	BOOLEAN CaseInSensitive
);

NTSTATUS
__stdcall
RtlAppendStringToString(
	PSTRING Destination,
	PSTRING Source
);

NTSTATUS
__stdcall
RtlAppendAsciizToString(
	PSTRING Destination,
	PCSTR Source
);

void
__stdcall
RtlUpperString(
	PSTRING DestinationString,
	PSTRING SourceString
);

BOOLEAN
RtlIsNullOrEmptyUnicodeString(
	PUNICODE_STRING String
);

void
__stdcall
RtlInitEmptyUnicodeString(
	PUNICODE_STRING DestinationString,
	PWCHAR Buffer,
	USHORT MaximumLength
);
void RtlInitUnicodeString(
	PUNICODE_STRING DestinationString,
	PCWSTR SourceString
);

NTSTATUS
__stdcall
RtlInitUnicodeStringEx(
	PUNICODE_STRING DestinationString,
	PCWSTR SourceString
);

BOOLEAN
__stdcall
RtlCreateUnicodeString(
	PUNICODE_STRING DestinationString,
	PCWSTR SourceString
);

BOOLEAN
__stdcall
RtlCreateUnicodeStringFromAsciiz(
	PUNICODE_STRING DestinationString,
	PCSTR SourceString
);

void
__stdcall
RtlFreeUnicodeString(
	PUNICODE_STRING UnicodeString
);

NTSTATUS
__stdcall
RtlDuplicateUnicodeString(
	ULONG Flags,
	PUNICODE_STRING StringIn,
	PUNICODE_STRING StringOut
);

void
__stdcall
RtlCopyUnicodeString(
	PUNICODE_STRING DestinationString,
	PUNICODE_STRING SourceString
);

WCHAR
__stdcall
RtlUpcaseUnicodeChar(
	WCHAR SourceCharacter
);

WCHAR
__stdcall
RtlDowncaseUnicodeChar(
	WCHAR SourceCharacter
);

LONG
__stdcall
RtlCompareUnicodeString(
	PUNICODE_STRING String1,
	PUNICODE_STRING String2,
	BOOLEAN CaseInSensitive
);

LONG
__stdcall
RtlCompareUnicodeStrings(
	PCWCH String1,
	SIZE_T String1Length,
	PCWCH String2,
	SIZE_T String2Length,
	BOOLEAN CaseInSensitive
);

BOOLEAN
__stdcall
RtlEqualUnicodeString(
	PUNICODE_STRING String1,
	PUNICODE_STRING String2,
	BOOLEAN CaseInSensitive
);

NTSTATUS
__stdcall
RtlHashUnicodeString(
	PUNICODE_STRING String,
	BOOLEAN CaseInSensitive,
	ULONG HashAlgorithm,
	PULONG HashValue
);

NTSTATUS
__stdcall
RtlValidateUnicodeString(
	ULONG Flags,
	PUNICODE_STRING String
);

BOOLEAN
__stdcall
RtlPrefixUnicodeString(
	PUNICODE_STRING String1,
	PUNICODE_STRING String2,
	BOOLEAN CaseInSensitive
);

NTSTATUS
__stdcall
RtlFindCharInUnicodeString(
	ULONG Flags,
	PUNICODE_STRING StringToSearch,
	PUNICODE_STRING CharSet,
	PUSHORT NonInclusivePrefixLength
);

NTSTATUS
__stdcall
RtlAppendUnicodeStringToString(
	PUNICODE_STRING Destination,
	PUNICODE_STRING Source
);

NTSTATUS
__stdcall
RtlAppendUnicodeToString(
	PUNICODE_STRING Destination,
	PCWSTR Source
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeString(
	PUNICODE_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlDowncaseUnicodeString(
	PUNICODE_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

void
__stdcall
RtlEraseUnicodeString(
	PUNICODE_STRING String
);

NTSTATUS
__stdcall
RtlAnsiStringToUnicodeString(
	PUNICODE_STRING DestinationString,
	PANSI_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlUnicodeStringToAnsiString(
	PANSI_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

WCHAR
__stdcall
RtlAnsiCharToUnicodeChar(
	PUCHAR* SourceCharacter
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToAnsiString(
	PANSI_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlOemStringToUnicodeString(
	PUNICODE_STRING DestinationString,
	POEM_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlUnicodeStringToOemString(
	POEM_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToOemString(
	POEM_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlOemStringToCountedUnicodeString(
	PUNICODE_STRING DestinationString,
	PCOEM_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlUnicodeStringToCountedOemString(
	POEM_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeStringToCountedOemString(
	POEM_STRING DestinationString,
	PUNICODE_STRING SourceString,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlMultiByteToUnicodeN(
	PWCH UnicodeString,
	ULONG MaxBytesInUnicodeString,
	PULONG BytesInUnicodeString,
	PCSTR MultiByteString,
	ULONG BytesInMultiByteString
);

NTSTATUS
__stdcall
RtlMultiByteToUnicodeSize(
	PULONG BytesInUnicodeString,
	PCSTR MultiByteString,
	ULONG BytesInMultiByteString
);

NTSTATUS
__stdcall
RtlUnicodeToMultiByteN(
	PCHAR MultiByteString,
	ULONG MaxBytesInMultiByteString,
	PULONG BytesInMultiByteString,
	PCWCH UnicodeString,
	ULONG BytesInUnicodeString
);

NTSTATUS
__stdcall
RtlUnicodeToMultiByteSize(
	PULONG BytesInMultiByteString,
	PCWCH UnicodeString,
	ULONG BytesInUnicodeString
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeToMultiByteN(
	PCHAR MultiByteString,
	ULONG MaxBytesInMultiByteString,
	PULONG BytesInMultiByteString,
	PCWCH UnicodeString,
	ULONG BytesInUnicodeString
);

NTSTATUS
__stdcall
RtlOemToUnicodeN(
	PWSTR UnicodeString,
	ULONG MaxBytesInUnicodeString,
	PULONG BytesInUnicodeString,
	PCCH OemString,
	ULONG BytesInOemString
);

NTSTATUS
__stdcall
RtlUnicodeToOemN(
	PCHAR OemString,
	ULONG MaxBytesInOemString,
	PULONG BytesInOemString,
	PCWCH UnicodeString,
	ULONG BytesInUnicodeString
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeToOemN(
	PCHAR OemString,
	ULONG MaxBytesInOemString,
	PULONG BytesInOemString,
	PCWCH UnicodeString,
	ULONG BytesInUnicodeString
);

NTSTATUS
__stdcall
RtlConsoleMultiByteToUnicodeN(
	PWCH UnicodeString,
	ULONG MaxBytesInUnicodeString,
	PULONG BytesInUnicodeString,
	PCCH MultiByteString,
	ULONG BytesInMultiByteString,
	PULONG pdwSpecialChar
);

NTSTATUS
__stdcall
RtlUTF8ToUnicodeN(
	PWSTR UnicodeStringDestination,
	ULONG UnicodeStringMaxByteCount,
	PULONG UnicodeStringActualByteCount,
	PCCH UTF8StringSource,
	ULONG UTF8StringByteCount
);

NTSTATUS
__stdcall
RtlUnicodeToUTF8N(
	PCHAR UTF8StringDestination,
	ULONG UTF8StringMaxByteCount,
	PULONG UTF8StringActualByteCount,
	PCWCH UnicodeStringSource,
	ULONG UnicodeStringByteCount
);

NTSTATUS
__stdcall
RtlCustomCPToUnicodeN(
	PCPTABLEINFO CustomCP,
	PWCH UnicodeString,
	ULONG MaxBytesInUnicodeString,
	PULONG BytesInUnicodeString,
	PCH CustomCPString,
	ULONG BytesInCustomCPString
);

NTSTATUS
__stdcall
RtlUnicodeToCustomCPN(
	PCPTABLEINFO CustomCP,
	PCH CustomCPString,
	ULONG MaxBytesInCustomCPString,
	PULONG BytesInCustomCPString,
	PWCH UnicodeString,
	ULONG BytesInUnicodeString
);

NTSTATUS
__stdcall
RtlUpcaseUnicodeToCustomCPN(
	PCPTABLEINFO CustomCP,
	PCH CustomCPString,
	ULONG MaxBytesInCustomCPString,
	PULONG BytesInCustomCPString,
	PWCH UnicodeString,
	ULONG BytesInUnicodeString
);

void
__stdcall
RtlInitCodePageTable(
	PUSHORT TableBase,
	PCPTABLEINFO CodePageTable
);

void
__stdcall
RtlInitNlsTables(
	PUSHORT AnsiNlsBase,
	PUSHORT OemNlsBase,
	PUSHORT LanguageNlsBase,
	PNLSTABLEINFO TableInfo
);

void
__stdcall
RtlResetRtlTranslations(
	PNLSTABLEINFO TableInfo
);

BOOLEAN
__stdcall
RtlIsTextUnicode(
	PVOID Buffer,
	ULONG Size,
	PULONG Result
);
typedef enum _RTL_NORM_FORM
{
	NormOther = 0x0,
	NormC = 0x1,
	NormD = 0x2,
	NormKC = 0x5,
	NormKD = 0x6,
	NormIdna = 0xd,
	DisallowUnassigned = 0x100,
	NormCDisallowUnassigned = 0x101,
	NormDDisallowUnassigned = 0x102,
	NormKCDisallowUnassigned = 0x105,
	NormKDDisallowUnassigned = 0x106,
	NormIdnaDisallowUnassigned = 0x10d
} RTL_NORM_FORM;

NTSTATUS
__stdcall
RtlNormalizeString(
	ULONG NormForm,
	PCWSTR SourceString,
	LONG SourceStringLength,
	PWSTR DestinationString,
	PLONG DestinationStringLength
);

NTSTATUS
__stdcall
RtlIsNormalizedString(
	ULONG NormForm,
	PCWSTR SourceString,
	LONG SourceStringLength,
	PBOOLEAN Normalized
);

BOOLEAN
__stdcall
RtlIsNameInExpression(
	PUNICODE_STRING Expression,
	PUNICODE_STRING Name,
	BOOLEAN IgnoreCase,
	PWCH UpcaseTable
);

BOOLEAN
__stdcall
RtlEqualDomainName(
	PUNICODE_STRING String1,
	PUNICODE_STRING String2
);

BOOLEAN
__stdcall
RtlEqualComputerName(
	PUNICODE_STRING String1,
	PUNICODE_STRING String2
);

NTSTATUS
__stdcall
RtlDnsHostNameToComputerName(
	PUNICODE_STRING ComputerNameString,
	PUNICODE_STRING DnsHostNameString,
	BOOLEAN AllocateComputerNameString
);

NTSTATUS
__stdcall
RtlStringFromGUID(
	PGUID Guid,
	PUNICODE_STRING GuidString
);

NTSTATUS
__stdcall
RtlGUIDFromString(
	PUNICODE_STRING GuidString,
	PGUID Guid
);

LONG
__stdcall
RtlCompareAltitudes(
	PUNICODE_STRING Altitude1,
	PUNICODE_STRING Altitude2
);

NTSTATUS
__stdcall
RtlIdnToAscii(
	ULONG Flags,
	PCWSTR SourceString,
	LONG SourceStringLength,
	PWSTR DestinationString,
	PLONG DestinationStringLength
);

NTSTATUS
__stdcall
RtlIdnToUnicode(
	ULONG Flags,
	PCWSTR SourceString,
	LONG SourceStringLength,
	PWSTR DestinationString,
	PLONG DestinationStringLength
);

NTSTATUS
__stdcall
RtlIdnToNameprepUnicode(
	ULONG Flags,
	PCWSTR SourceString,
	LONG SourceStringLength,
	PWSTR DestinationString,
	PLONG DestinationStringLength
);
typedef struct _PREFIX_TABLE_ENTRY
{
	CSHORT NodeTypeCode;
	CSHORT NameLength;
	struct _PREFIX_TABLE_ENTRY* NextPrefixTree;
	RTL_SPLAY_LINKS Links;
	PSTRING Prefix;
} PREFIX_TABLE_ENTRY, * PPREFIX_TABLE_ENTRY;
typedef struct _PREFIX_TABLE
{
	CSHORT NodeTypeCode;
	CSHORT NameLength;
	PPREFIX_TABLE_ENTRY NextPrefixTree;
} PREFIX_TABLE, * PPREFIX_TABLE;

void
__stdcall
PfxInitialize(
	PPREFIX_TABLE PrefixTable
);

BOOLEAN
__stdcall
PfxInsertPrefix(
	PPREFIX_TABLE PrefixTable,
	PSTRING Prefix,
	PPREFIX_TABLE_ENTRY PrefixTableEntry
);

void
__stdcall
PfxRemovePrefix(
	PPREFIX_TABLE PrefixTable,
	PPREFIX_TABLE_ENTRY PrefixTableEntry
);

PPREFIX_TABLE_ENTRY
__stdcall
PfxFindPrefix(
	PPREFIX_TABLE PrefixTable,
	PSTRING FullName
);
typedef struct _UNICODE_PREFIX_TABLE_ENTRY
{
	CSHORT NodeTypeCode;
	CSHORT NameLength;
	struct _UNICODE_PREFIX_TABLE_ENTRY* NextPrefixTree;
	struct _UNICODE_PREFIX_TABLE_ENTRY* CaseMatch;
	RTL_SPLAY_LINKS Links;
	PUNICODE_STRING Prefix;
} UNICODE_PREFIX_TABLE_ENTRY, * PUNICODE_PREFIX_TABLE_ENTRY;
typedef struct _UNICODE_PREFIX_TABLE
{
	CSHORT NodeTypeCode;
	CSHORT NameLength;
	PUNICODE_PREFIX_TABLE_ENTRY NextPrefixTree;
	PUNICODE_PREFIX_TABLE_ENTRY LastNextEntry;
} UNICODE_PREFIX_TABLE, * PUNICODE_PREFIX_TABLE;

void
__stdcall
RtlInitializeUnicodePrefix(
	PUNICODE_PREFIX_TABLE PrefixTable
);

BOOLEAN
__stdcall
RtlInsertUnicodePrefix(
	PUNICODE_PREFIX_TABLE PrefixTable,
	PUNICODE_STRING Prefix,
	PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry
);

void
__stdcall
RtlRemoveUnicodePrefix(
	PUNICODE_PREFIX_TABLE PrefixTable,
	PUNICODE_PREFIX_TABLE_ENTRY PrefixTableEntry
);

PUNICODE_PREFIX_TABLE_ENTRY
__stdcall
RtlFindUnicodePrefix(
	PUNICODE_PREFIX_TABLE PrefixTable,
	PUNICODE_STRING FullName,
	ULONG CaseInsensitiveIndex
);

PUNICODE_PREFIX_TABLE_ENTRY
__stdcall
RtlNextUnicodePrefix(
	PUNICODE_PREFIX_TABLE PrefixTable,
	BOOLEAN Restart
);
typedef struct _COMPRESSED_DATA_INFO
{
	USHORT CompressionFormatAndEngine;
	UCHAR CompressionUnitShift;
	UCHAR ChunkShift;
	UCHAR ClusterShift;
	UCHAR Reserved;
	USHORT NumberOfChunks;
	ULONG CompressedChunkSizes[1];
} COMPRESSED_DATA_INFO, * PCOMPRESSED_DATA_INFO;

NTSTATUS
__stdcall
RtlGetCompressionWorkSpaceSize(
	USHORT CompressionFormatAndEngine,
	PULONG CompressBufferWorkSpaceSize,
	PULONG CompressFragmentWorkSpaceSize
);

NTSTATUS
__stdcall
RtlCompressBuffer(
	USHORT CompressionFormatAndEngine,
	PUCHAR UncompressedBuffer,
	ULONG UncompressedBufferSize,
	PUCHAR CompressedBuffer,
	ULONG CompressedBufferSize,
	ULONG UncompressedChunkSize,
	PULONG FinalCompressedSize,
	PVOID WorkSpace
);

NTSTATUS
__stdcall
RtlDecompressBuffer(
	USHORT CompressionFormat,
	PUCHAR UncompressedBuffer,
	ULONG UncompressedBufferSize,
	PUCHAR CompressedBuffer,
	ULONG CompressedBufferSize,
	PULONG FinalUncompressedSize
);

NTSTATUS
__stdcall
RtlDecompressFragment(
	USHORT CompressionFormat,
	PUCHAR UncompressedFragment,
	ULONG UncompressedFragmentSize,
	PUCHAR CompressedBuffer,
	ULONG CompressedBufferSize,
	ULONG FragmentOffset,
	PULONG FinalUncompressedSize,
	PVOID WorkSpace
);

NTSTATUS
__stdcall
RtlDescribeChunk(
	USHORT CompressionFormat,
	PUCHAR* CompressedBuffer,
	PUCHAR EndOfCompressedBufferPlus1,
	PUCHAR* ChunkBuffer,
	PULONG ChunkSize
);

NTSTATUS
__stdcall
RtlReserveChunk(
	USHORT CompressionFormat,
	PUCHAR* CompressedBuffer,
	PUCHAR EndOfCompressedBufferPlus1,
	PUCHAR* ChunkBuffer,
	ULONG ChunkSize
);

NTSTATUS
__stdcall
RtlDecompressChunks(
	PUCHAR UncompressedBuffer,
	ULONG UncompressedBufferSize,
	PUCHAR CompressedBuffer,
	ULONG CompressedBufferSize,
	PUCHAR CompressedTail,
	ULONG CompressedTailSize,
	PCOMPRESSED_DATA_INFO CompressedDataInfo
);

NTSTATUS
__stdcall
RtlCompressChunks(
	PUCHAR UncompressedBuffer,
	ULONG UncompressedBufferSize,
	PUCHAR CompressedBuffer,
	ULONG CompressedBufferSize,
	PCOMPRESSED_DATA_INFO CompressedDataInfo,
	ULONG CompressedDataInfoLength,
	PVOID WorkSpace
);

NTSTATUS
__stdcall
RtlConvertLCIDToString(
	LCID LcidValue,
	ULONG Base,
	ULONG Padding,
	PWSTR pResultBuf,
	ULONG Size
);

BOOLEAN
__stdcall
RtlIsValidLocaleName(
	PCWSTR LocaleName,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlGetParentLocaleName(
	PCWSTR LocaleName,
	PUNICODE_STRING ParentLocaleName,
	ULONG Flags,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlLcidToLocaleName(
	LCID lcid,
	PUNICODE_STRING LocaleName,
	ULONG Flags,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlLocaleNameToLcid(
	PCWSTR LocaleName,
	PLCID lcid,
	ULONG Flags
);

BOOLEAN
__stdcall
RtlLCIDToCultureName(
	LCID Lcid,
	PUNICODE_STRING String
);

BOOLEAN
__stdcall
RtlCultureNameToLCID(
	PUNICODE_STRING String,
	PLCID Lcid
);

void
__stdcall
RtlCleanUpTEBLangLists(
	void
);

NTSTATUS
__stdcall
RtlGetLocaleFileMappingAddress(
	PVOID* BaseAddress,
	PLCID DefaultLocaleId,
	PLARGE_INTEGER DefaultCasingTableSize
);

PPEB
__stdcall
RtlGetCurrentPeb(
	void
);

void
__stdcall
RtlAcquirePebLock(
	void
);

void
__stdcall
RtlReleasePebLock(
	void
);

LOGICAL
__stdcall
RtlTryAcquirePebLock(
	void
);

NTSTATUS
__stdcall
RtlAllocateFromPeb(
	ULONG Size,
	PVOID* Block
);

NTSTATUS
__stdcall
RtlFreeToPeb(
	PVOID Block,
	ULONG Size
);
typedef struct _CURDIR
{
	UNICODE_STRING DosPath;
	HANDLE Handle;
} CURDIR, * PCURDIR;
typedef struct _RTL_DRIVE_LETTER_CURDIR
{
	USHORT Flags;
	USHORT Length;
	ULONG TimeStamp;
	STRING DosPath;
} RTL_DRIVE_LETTER_CURDIR, * PRTL_DRIVE_LETTER_CURDIR;
typedef struct _RTL_USER_PROCESS_PARAMETERS
{
	ULONG MaximumLength;
	ULONG Length;
	ULONG Flags;
	ULONG DebugFlags;
	HANDLE ConsoleHandle;
	ULONG ConsoleFlags;
	HANDLE StandardInput;
	HANDLE StandardOutput;
	HANDLE StandardError;
	CURDIR CurrentDirectory;
	UNICODE_STRING DllPath;
	UNICODE_STRING ImagePathName;
	UNICODE_STRING CommandLine;
	PVOID Environment;
	ULONG StartingX;
	ULONG StartingY;
	ULONG CountX;
	ULONG CountY;
	ULONG CountCharsX;
	ULONG CountCharsY;
	ULONG FillAttribute;
	ULONG WindowFlags;
	ULONG ShowWindowFlags;
	UNICODE_STRING WindowTitle;
	UNICODE_STRING DesktopInfo;
	UNICODE_STRING ShellInfo;
	UNICODE_STRING RuntimeData;
	RTL_DRIVE_LETTER_CURDIR CurrentDirectories[32];
	ULONG_PTR EnvironmentSize;
	ULONG_PTR EnvironmentVersion;
	PVOID PackageDependencyData;
	ULONG ProcessGroupId;
	ULONG LoaderThreads;
	UNICODE_STRING RedirectionDllName;
	UNICODE_STRING HeapPartitionName;
	ULONG_PTR DefaultThreadpoolCpuSetMasks;
	ULONG DefaultThreadpoolCpuSetMaskCount;
} RTL_USER_PROCESS_PARAMETERS, * PRTL_USER_PROCESS_PARAMETERS;

NTSTATUS
__stdcall
RtlCreateProcessParameters(
	PRTL_USER_PROCESS_PARAMETERS* pProcessParameters,
	PUNICODE_STRING ImagePathName,
	PUNICODE_STRING DllPath,
	PUNICODE_STRING CurrentDirectory,
	PUNICODE_STRING CommandLine,
	PVOID Environment,
	PUNICODE_STRING WindowTitle,
	PUNICODE_STRING DesktopInfo,
	PUNICODE_STRING ShellInfo,
	PUNICODE_STRING RuntimeData
);

NTSTATUS
__stdcall
RtlCreateProcessParametersEx(
	PRTL_USER_PROCESS_PARAMETERS* pProcessParameters,
	PUNICODE_STRING ImagePathName,
	PUNICODE_STRING DllPath,
	PUNICODE_STRING CurrentDirectory,
	PUNICODE_STRING CommandLine,
	PVOID Environment,
	PUNICODE_STRING WindowTitle,
	PUNICODE_STRING DesktopInfo,
	PUNICODE_STRING ShellInfo,
	PUNICODE_STRING RuntimeData,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlDestroyProcessParameters(
	PRTL_USER_PROCESS_PARAMETERS ProcessParameters
);

PRTL_USER_PROCESS_PARAMETERS
__stdcall
RtlNormalizeProcessParams(
	PRTL_USER_PROCESS_PARAMETERS ProcessParameters
);

PRTL_USER_PROCESS_PARAMETERS
__stdcall
RtlDeNormalizeProcessParams(
	PRTL_USER_PROCESS_PARAMETERS ProcessParameters
);
typedef struct _RTL_USER_PROCESS_INFORMATION
{
	ULONG Length;
	HANDLE ProcessHandle;
	HANDLE ThreadHandle;
	CLIENT_ID ClientId;
	SECTION_IMAGE_INFORMATION ImageInformation;
} RTL_USER_PROCESS_INFORMATION, * PRTL_USER_PROCESS_INFORMATION;

NTSTATUS
__stdcall
RtlCreateUserProcess(
	PUNICODE_STRING NtImagePathName,
	ULONG AttributesDeprecated,
	PRTL_USER_PROCESS_PARAMETERS ProcessParameters,
	PSECURITY_DESCRIPTOR ProcessSecurityDescriptor,
	PSECURITY_DESCRIPTOR ThreadSecurityDescriptor,
	HANDLE ParentProcess,
	BOOLEAN InheritHandles,
	HANDLE DebugPort,
	HANDLE TokenHandle,
	PRTL_USER_PROCESS_INFORMATION ProcessInformation
);
typedef struct _RTL_USER_PROCESS_EXTENDED_PARAMETERS
{
	USHORT Version;
	USHORT NodeNumber;
	PSECURITY_DESCRIPTOR ProcessSecurityDescriptor;
	PSECURITY_DESCRIPTOR ThreadSecurityDescriptor;
	HANDLE ParentProcess;
	HANDLE DebugPort;
	HANDLE TokenHandle;
	HANDLE JobHandle;
} RTL_USER_PROCESS_EXTENDED_PARAMETERS, * PRTL_USER_PROCESS_EXTENDED_PARAMETERS;

NTSTATUS
__stdcall
RtlCreateUserProcessEx(
	PUNICODE_STRING NtImagePathName,
	PRTL_USER_PROCESS_PARAMETERS ProcessParameters,
	BOOLEAN InheritHandles,
	PRTL_USER_PROCESS_EXTENDED_PARAMETERS ProcessExtendedParameters,
	PRTL_USER_PROCESS_INFORMATION ProcessInformation
);


void
__stdcall
RtlExitUserProcess(
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
RtlCloneUserProcess(
	ULONG ProcessFlags,
	PSECURITY_DESCRIPTOR ProcessSecurityDescriptor,
	PSECURITY_DESCRIPTOR ThreadSecurityDescriptor,
	HANDLE DebugPort,
	PRTL_USER_PROCESS_INFORMATION ProcessInformation
);

void
__stdcall
RtlUpdateClonedCriticalSection(
	PRTL_CRITICAL_SECTION CriticalSection
);

void
__stdcall
RtlUpdateClonedSRWLock(
	PRTL_SRWLOCK SRWLock,
	LOGICAL Shared
);
typedef struct _RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION
{
	HANDLE ReflectionProcessHandle;
	HANDLE ReflectionThreadHandle;
	CLIENT_ID ReflectionClientId;
} RTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION, * PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION;

NTSTATUS
__stdcall
RtlCreateProcessReflection(
	HANDLE ProcessHandle,
	ULONG Flags,
	PVOID StartRoutine,
	PVOID StartContext,
	HANDLE EventHandle,
	PRTLP_PROCESS_REFLECTION_REFLECTION_INFORMATION ReflectionInformation
);

NTSTATUS
__cdecl
RtlSetProcessIsCritical(
	BOOLEAN NewValue,
	PBOOLEAN OldValue,
	BOOLEAN CheckFlag
);

NTSTATUS
__cdecl
RtlSetThreadIsCritical(
	BOOLEAN NewValue,
	PBOOLEAN OldValue,
	BOOLEAN CheckFlag
);

BOOLEAN
__stdcall
RtlValidProcessProtection(
	PS_PROTECTION ProcessProtection
);

BOOLEAN
__stdcall
RtlTestProtectedAccess(
	PS_PROTECTION Source,
	PS_PROTECTION Target
);
typedef NTSTATUS(__stdcall* PUSER_THREAD_START_ROUTINE)(
	PVOID ThreadParameter
	);

NTSTATUS
__stdcall
RtlCreateUserThread(
	HANDLE Process,
	PSECURITY_DESCRIPTOR ThreadSecurityDescriptor,
	BOOLEAN CreateSuspended,
	ULONG ZeroBits,
	SIZE_T MaximumStackSize,
	SIZE_T CommittedStackSize,
	PUSER_THREAD_START_ROUTINE StartAddress,
	PVOID Parameter,
	PHANDLE Thread,
	PCLIENT_ID ClientId
);


void
__stdcall
RtlExitUserThread(
	NTSTATUS ExitStatus
);

BOOLEAN
__stdcall
RtlIsCurrentThreadAttachExempt(
	void
);

NTSTATUS
__stdcall
RtlCreateUserStack(
	SIZE_T CommittedStackSize,
	SIZE_T MaximumStackSize,
	ULONG_PTR ZeroBits,
	SIZE_T PageSize,
	ULONG_PTR ReserveAlignment,
	PINITIAL_TEB InitialTeb
);

NTSTATUS
__stdcall
RtlFreeUserStack(
	PVOID AllocationBase
);
typedef struct _CONTEXT_CHUNK
{
	LONG Offset;
	ULONG Length;
} CONTEXT_CHUNK, * PCONTEXT_CHUNK;
typedef struct _CONTEXT_EX
{
	CONTEXT_CHUNK All;
	CONTEXT_CHUNK Legacy;
	CONTEXT_CHUNK XState;
} CONTEXT_EX, * PCONTEXT_EX;

void
__stdcall
RtlInitializeContext(
	HANDLE Process,
	PCONTEXT Context,
	PVOID Parameter,
	PVOID InitialPc,
	PVOID InitialSp
);

ULONG
__stdcall
RtlInitializeExtendedContext(
	PCONTEXT Context,
	ULONG ContextFlags,
	PCONTEXT_EX* ContextEx
);

ULONG
__stdcall
RtlCopyExtendedContext(
	PCONTEXT_EX Destination,
	ULONG ContextFlags,
	PCONTEXT_EX Source
);

ULONG
__stdcall
RtlGetExtendedContextLength(
	ULONG ContextFlags,
	PULONG ContextLength
);

ULONG64
__stdcall
RtlGetExtendedFeaturesMask(
	PCONTEXT_EX ContextEx
);

PVOID
__stdcall
RtlLocateExtendedFeature(
	PCONTEXT_EX ContextEx,
	ULONG FeatureId,
	PULONG Length
);

PCONTEXT
__stdcall
RtlLocateLegacyContext(
	PCONTEXT_EX ContextEx,
	PULONG Length
);

void
__stdcall
RtlSetExtendedFeaturesMask(
	PCONTEXT_EX ContextEx,
	ULONG64 FeatureMask
);

NTSTATUS
__stdcall
RtlWow64GetThreadContext(
	HANDLE ThreadHandle,
	PWOW64_CONTEXT ThreadContext
);

NTSTATUS
__stdcall
RtlWow64SetThreadContext(
	HANDLE ThreadHandle,
	PWOW64_CONTEXT ThreadContext
);

NTSTATUS
__stdcall
RtlRemoteCall(
	HANDLE Process,
	HANDLE Thread,
	PVOID CallSite,
	ULONG ArgumentCount,
	PULONG_PTR Arguments,
	BOOLEAN PassContext,
	BOOLEAN AlreadySuspended
);

PVOID
__stdcall
RtlAddVectoredExceptionHandler(
	ULONG First,
	PVECTORED_EXCEPTION_HANDLER Handler
);

ULONG
__stdcall
RtlRemoveVectoredExceptionHandler(
	PVOID Handle
);

PVOID
__stdcall
RtlAddVectoredContinueHandler(
	ULONG First,
	PVECTORED_EXCEPTION_HANDLER Handler
);

ULONG
__stdcall
RtlRemoveVectoredContinueHandler(
	PVOID Handle
);
typedef ULONG(__stdcall* PRTLP_UNHANDLED_EXCEPTION_FILTER)(
	PEXCEPTION_POINTERS ExceptionInfo
	);

void
__stdcall
RtlSetUnhandledExceptionFilter(
	PRTLP_UNHANDLED_EXCEPTION_FILTER UnhandledExceptionFilter
);

LONG
__stdcall
RtlUnhandledExceptionFilter(
	PEXCEPTION_POINTERS ExceptionPointers
);

LONG
__stdcall
RtlUnhandledExceptionFilter2(
	PEXCEPTION_POINTERS ExceptionPointers,
	ULONG Flags
);

LONG
__stdcall
RtlKnownExceptionFilter(
	PEXCEPTION_POINTERS ExceptionPointers
);
typedef enum _FUNCTION_TABLE_TYPE
{
	RF_SORTED,
	RF_UNSORTED,
	RF_CALLBACK,
	RF_KERNEL_DYNAMIC
} FUNCTION_TABLE_TYPE;
typedef struct _DYNAMIC_FUNCTION_TABLE
{
	LIST_ENTRY ListEntry;
	PRUNTIME_FUNCTION FunctionTable;
	LARGE_INTEGER TimeStamp;
	ULONG64 MinimumAddress;
	ULONG64 MaximumAddress;
	ULONG64 BaseAddress;
	PGET_RUNTIME_FUNCTION_CALLBACK Callback;
	PVOID Context;
	PWSTR OutOfProcessCallbackDll;
	FUNCTION_TABLE_TYPE Type;
	ULONG EntryCount;
	RTL_BALANCED_NODE TreeNode;
} DYNAMIC_FUNCTION_TABLE, * PDYNAMIC_FUNCTION_TABLE;

PLIST_ENTRY
__stdcall
RtlGetFunctionTableListHead(
	void
);

PIMAGE_NT_HEADERS
__stdcall
RtlImageNtHeader(
	PVOID BaseOfImage
);

NTSTATUS
__stdcall
RtlImageNtHeaderEx(
	ULONG Flags,
	PVOID BaseOfImage,
	ULONG64 Size,
	PIMAGE_NT_HEADERS* OutHeaders
);

PVOID
__stdcall
RtlAddressInSectionTable(
	PIMAGE_NT_HEADERS NtHeaders,
	PVOID BaseOfImage,
	ULONG VirtualAddress
);

PIMAGE_SECTION_HEADER
__stdcall
RtlSectionTableFromVirtualAddress(
	PIMAGE_NT_HEADERS NtHeaders,
	PVOID BaseOfImage,
	ULONG VirtualAddress
);

PVOID
__stdcall
RtlImageDirectoryEntryToData(
	PVOID BaseOfImage,
	BOOLEAN MappedAsImage,
	USHORT DirectoryEntry,
	PULONG Size
);

PIMAGE_SECTION_HEADER
__stdcall
RtlImageRvaToSection(
	PIMAGE_NT_HEADERS NtHeaders,
	PVOID BaseOfImage,
	ULONG Rva
);

PVOID
__stdcall
RtlImageRvaToVa(
	PIMAGE_NT_HEADERS NtHeaders,
	PVOID BaseOfImage,
	ULONG Rva,
	PIMAGE_SECTION_HEADER* LastRvaSection
);

SIZE_T
__stdcall
RtlCompareMemoryUlong(
	PVOID Source,
	SIZE_T Length,
	ULONG Pattern
);

void
RtlFillMemoryUlong(
	PVOID Destination,
	SIZE_T Length,
	ULONG Pattern
);

NTSTATUS
__stdcall
RtlCreateEnvironment(
	BOOLEAN CloneCurrentEnvironment,
	PVOID* Environment
);

NTSTATUS
__stdcall
RtlCreateEnvironmentEx(
	PVOID SourceEnv,
	PVOID* Environment,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlDestroyEnvironment(
	PVOID Environment
);

NTSTATUS
__stdcall
RtlSetCurrentEnvironment(
	PVOID Environment,
	PVOID* PreviousEnvironment
);

NTSTATUS
__stdcall
RtlSetEnvironmentVar(
	PVOID* Environment,
	PCWSTR Name,
	SIZE_T NameLength,
	PCWSTR Value,
	SIZE_T ValueLength
);

NTSTATUS
__stdcall
RtlSetEnvironmentVariable(
	PVOID* Environment,
	PUNICODE_STRING Name,
	PUNICODE_STRING Value
);

NTSTATUS
__stdcall
RtlQueryEnvironmentVariable(
	PVOID Environment,
	PCWSTR Name,
	SIZE_T NameLength,
	PWSTR Value,
	SIZE_T ValueLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
RtlQueryEnvironmentVariable_U(
	PVOID Environment,
	PUNICODE_STRING Name,
	PUNICODE_STRING Value
);

NTSTATUS
__stdcall
RtlExpandEnvironmentStrings(
	PVOID Environment,
	PCWSTR Src,
	SIZE_T SrcLength,
	PWSTR Dst,
	SIZE_T DstLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
RtlExpandEnvironmentStrings_U(
	PVOID Environment,
	PUNICODE_STRING Source,
	PUNICODE_STRING Destination,
	PULONG ReturnedLength
);

NTSTATUS
__stdcall
RtlSetEnvironmentStrings(
	PCWCHAR NewEnvironment,
	SIZE_T NewEnvironmentSize
);
typedef struct _RTLP_CURDIR_REF
{
	LONG ReferenceCount;
	HANDLE DirectoryHandle;
} RTLP_CURDIR_REF, * PRTLP_CURDIR_REF;
typedef struct _RTL_RELATIVE_NAME_U
{
	UNICODE_STRING RelativeName;
	HANDLE ContainingDirectory;
	PRTLP_CURDIR_REF CurDirRef;
} RTL_RELATIVE_NAME_U, * PRTL_RELATIVE_NAME_U;
typedef enum _RTL_PATH_TYPE
{
	RtlPathTypeUnknown,
	RtlPathTypeUncAbsolute,
	RtlPathTypeDriveAbsolute,
	RtlPathTypeDriveRelative,
	RtlPathTypeRooted,
	RtlPathTypeRelative,
	RtlPathTypeLocalDevice,
	RtlPathTypeRootLocalDevice
} RTL_PATH_TYPE;
PWSTR RtlNtdllName;
UNICODE_STRING RtlDosPathSeperatorsString;
UNICODE_STRING RtlAlternateDosPathSeperatorString;
UNICODE_STRING RtlNtPathSeperatorString;

RTL_PATH_TYPE
__stdcall
RtlDetermineDosPathNameType_U(
	PCWSTR DosFileName
);

RTL_PATH_TYPE
__stdcall
RtlDetermineDosPathNameType_Ustr(
	PCUNICODE_STRING DosFileName
);

ULONG
__stdcall
RtlIsDosDeviceName_U(
	PCWSTR DosFileName
);

ULONG
__stdcall
RtlIsDosDeviceName_Ustr(
	PUNICODE_STRING DosFileName
);

ULONG
__stdcall
RtlGetFullPathName_U(
	PCWSTR FileName,
	ULONG BufferLength,
	PWSTR Buffer,
	PWSTR* FilePart
);

NTSTATUS
__stdcall
RtlGetFullPathName_UEx(
	PCWSTR FileName,
	ULONG BufferLength,
	PWSTR Buffer,
	PWSTR* FilePart,
	ULONG* BytesRequired
);

NTSTATUS
__stdcall
RtlGetFullPathName_UstrEx(
	PUNICODE_STRING FileName,
	PUNICODE_STRING StaticString,
	PUNICODE_STRING DynamicString,
	PUNICODE_STRING* StringUsed,
	SIZE_T* FilePartPrefixCch,
	PBOOLEAN NameInvalid,
	RTL_PATH_TYPE* InputPathType,
	SIZE_T* BytesRequired
);

ULONG
__stdcall
RtlGetCurrentDirectory_U(
	ULONG BufferLength,
	PWSTR Buffer
);

NTSTATUS
__stdcall
RtlSetCurrentDirectory_U(
	PUNICODE_STRING PathName
);

ULONG
__stdcall
RtlGetLongestNtPathLength(
	void
);

BOOLEAN
__stdcall
RtlDosPathNameToNtPathName_U(
	PCWSTR DosFileName,
	PUNICODE_STRING NtFileName,
	PWSTR* FilePart,
	PRTL_RELATIVE_NAME_U RelativeName
);

NTSTATUS
__stdcall
RtlDosPathNameToNtPathName_U_WithStatus(
	PCWSTR DosFileName,
	PUNICODE_STRING NtFileName,
	PWSTR* FilePart,
	PRTL_RELATIVE_NAME_U RelativeName
);

BOOLEAN
__stdcall
RtlDosPathNameToRelativeNtPathName_U(
	PCWSTR DosFileName,
	PUNICODE_STRING NtFileName,
	PWSTR* FilePart,
	PRTL_RELATIVE_NAME_U RelativeName
);

NTSTATUS
__stdcall
RtlDosPathNameToRelativeNtPathName_U_WithStatus(
	PCWSTR DosFileName,
	PUNICODE_STRING NtFileName,
	PWSTR* FilePart,
	PRTL_RELATIVE_NAME_U RelativeName
);

void
__stdcall
RtlReleaseRelativeName(
	PRTL_RELATIVE_NAME_U RelativeName
);

ULONG
__stdcall
RtlDosSearchPath_U(
	PCWSTR Path,
	PCWSTR FileName,
	PCWSTR Extension,
	ULONG BufferLength,
	PWSTR Buffer,
	PWSTR* FilePart
);

NTSTATUS
__stdcall
RtlDosSearchPath_Ustr(
	ULONG Flags,
	PUNICODE_STRING Path,
	PUNICODE_STRING FileName,
	PUNICODE_STRING DefaultExtension,
	PUNICODE_STRING StaticString,
	PUNICODE_STRING DynamicString,
	PCUNICODE_STRING* FullFileNameOut,
	SIZE_T* FilePartPrefixCch,
	SIZE_T* BytesRequired
);

BOOLEAN
__stdcall
RtlDoesFileExists_U(
	PCWSTR FileName
);

NTSTATUS
__stdcall
RtlGetLengthWithoutLastFullDosOrNtPathElement(
	ULONG Flags,
	PUNICODE_STRING PathString,
	PULONG Length
);

NTSTATUS
__stdcall
RtlGetLengthWithoutTrailingPathSeperators(
	ULONG Flags,
	PUNICODE_STRING PathString,
	PULONG Length
);
typedef struct _GENERATE_NAME_CONTEXT
{
	USHORT Checksum;
	BOOLEAN CheckSumInserted;
	UCHAR NameLength;
	WCHAR NameBuffer[8];
	ULONG ExtensionLength;
	WCHAR ExtensionBuffer[4];
	ULONG LastIndexValue;
} GENERATE_NAME_CONTEXT, * PGENERATE_NAME_CONTEXT;

NTSTATUS
__stdcall
RtlGenerate8dot3Name(
	PUNICODE_STRING Name,
	BOOLEAN AllowExtendedCharacters,
	PGENERATE_NAME_CONTEXT Context,
	PUNICODE_STRING Name8dot3
);

BOOLEAN
__stdcall
RtlIsThreadWithinLoaderCallout(
	void
);

BOOLEAN
__stdcall
RtlDllShutdownInProgress(
	void
);
typedef struct _RTL_HEAP_ENTRY
{
	SIZE_T Size;
	USHORT Flags;
	USHORT AllocatorBackTraceIndex;
	union
	{
		struct
		{
			SIZE_T Settable;
			ULONG Tag;
		} s1;
		struct
		{
			SIZE_T CommittedSize;
			PVOID FirstBlock;
		} s2;
	} u;
} RTL_HEAP_ENTRY, * PRTL_HEAP_ENTRY;
typedef struct _RTL_HEAP_TAG
{
	ULONG NumberOfAllocations;
	ULONG NumberOfFrees;
	SIZE_T BytesAllocated;
	USHORT TagIndex;
	USHORT CreatorBackTraceIndex;
	WCHAR TagName[24];
} RTL_HEAP_TAG, * PRTL_HEAP_TAG;
typedef struct _RTL_HEAP_INFORMATION
{
	PVOID BaseAddress;
	ULONG Flags;
	USHORT EntryOverhead;
	USHORT CreatorBackTraceIndex;
	SIZE_T BytesAllocated;
	SIZE_T BytesCommitted;
	ULONG NumberOfTags;
	ULONG NumberOfEntries;
	ULONG NumberOfPseudoTags;
	ULONG PseudoTagGranularity;
	ULONG Reserved[5];
	PRTL_HEAP_TAG Tags;
	PRTL_HEAP_ENTRY Entries;
} RTL_HEAP_INFORMATION, * PRTL_HEAP_INFORMATION;
typedef struct _RTL_PROCESS_HEAPS
{
	ULONG NumberOfHeaps;
	RTL_HEAP_INFORMATION Heaps[1];
} RTL_PROCESS_HEAPS, * PRTL_PROCESS_HEAPS;
typedef NTSTATUS(__stdcall* PRTL_HEAP_COMMIT_ROUTINE)(
	PVOID Base,
	PVOID* CommitAddress,
	PSIZE_T CommitSize
	);
typedef struct _RTL_HEAP_PARAMETERS
{
	ULONG Length;
	SIZE_T SegmentReserve;
	SIZE_T SegmentCommit;
	SIZE_T DeCommitFreeBlockThreshold;
	SIZE_T DeCommitTotalFreeThreshold;
	SIZE_T MaximumAllocationSize;
	SIZE_T VirtualMemoryThreshold;
	SIZE_T InitialCommit;
	SIZE_T InitialReserve;
	PRTL_HEAP_COMMIT_ROUTINE CommitRoutine;
	SIZE_T Reserved[2];
} RTL_HEAP_PARAMETERS, * PRTL_HEAP_PARAMETERS;

PVOID
__stdcall
RtlCreateHeap(
	ULONG Flags,
	PVOID HeapBase,
	SIZE_T ReserveSize,
	SIZE_T CommitSize,
	PVOID Lock,
	PRTL_HEAP_PARAMETERS Parameters
);

PVOID
__stdcall
RtlDestroyHeap(
	PVOID HeapHandle
);

PVOID
__stdcall
RtlAllocateHeap(
	PVOID HeapHandle,
	ULONG Flags,
	SIZE_T Size
);

BOOLEAN
__stdcall
RtlFreeHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress
);

SIZE_T
__stdcall
RtlSizeHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress
);

NTSTATUS
__stdcall
RtlZeroHeap(
	PVOID HeapHandle,
	ULONG Flags
);

void
__stdcall
RtlProtectHeap(
	PVOID HeapHandle,
	BOOLEAN MakeReadOnly
);

BOOLEAN
__stdcall
RtlLockHeap(
	PVOID HeapHandle
);

BOOLEAN
__stdcall
RtlUnlockHeap(
	PVOID HeapHandle
);

PVOID
__stdcall
RtlReAllocateHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress,
	SIZE_T Size
);

BOOLEAN
__stdcall
RtlGetUserInfoHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress,
	PVOID* UserValue,
	PULONG UserFlags
);

BOOLEAN
__stdcall
RtlSetUserValueHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress,
	PVOID UserValue
);

BOOLEAN
__stdcall
RtlSetUserFlagsHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress,
	ULONG UserFlagsReset,
	ULONG UserFlagsSet
);
typedef struct _RTL_HEAP_TAG_INFO
{
	ULONG NumberOfAllocations;
	ULONG NumberOfFrees;
	SIZE_T BytesAllocated;
} RTL_HEAP_TAG_INFO, * PRTL_HEAP_TAG_INFO;

ULONG
__stdcall
RtlCreateTagHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PWSTR TagPrefix,
	PWSTR TagNames
);

PWSTR
__stdcall
RtlQueryTagHeap(
	PVOID HeapHandle,
	ULONG Flags,
	USHORT TagIndex,
	BOOLEAN ResetCounters,
	PRTL_HEAP_TAG_INFO TagInfo
);

NTSTATUS
__stdcall
RtlExtendHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID Base,
	SIZE_T Size
);

SIZE_T
__stdcall
RtlCompactHeap(
	PVOID HeapHandle,
	ULONG Flags
);

BOOLEAN
__stdcall
RtlValidateHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PVOID BaseAddress
);

BOOLEAN
__stdcall
RtlValidateProcessHeaps(
	void
);

ULONG
__stdcall
RtlGetProcessHeaps(
	ULONG NumberOfHeaps,
	PVOID* ProcessHeaps
);
typedef NTSTATUS(__stdcall* PRTL_ENUM_HEAPS_ROUTINE)(
	PVOID HeapHandle,
	PVOID Parameter
	);

NTSTATUS
__stdcall
RtlEnumProcessHeaps(
	PRTL_ENUM_HEAPS_ROUTINE EnumRoutine,
	PVOID Parameter
);
typedef struct _RTL_HEAP_USAGE_ENTRY
{
	struct _RTL_HEAP_USAGE_ENTRY* Next;
	PVOID Address;
	SIZE_T Size;
	USHORT AllocatorBackTraceIndex;
	USHORT TagIndex;
} RTL_HEAP_USAGE_ENTRY, * PRTL_HEAP_USAGE_ENTRY;
typedef struct _RTL_HEAP_USAGE
{
	ULONG Length;
	SIZE_T BytesAllocated;
	SIZE_T BytesCommitted;
	SIZE_T BytesReserved;
	SIZE_T BytesReservedMaximum;
	PRTL_HEAP_USAGE_ENTRY Entries;
	PRTL_HEAP_USAGE_ENTRY AddedEntries;
	PRTL_HEAP_USAGE_ENTRY RemovedEntries;
	ULONG_PTR Reserved[8];
} RTL_HEAP_USAGE, * PRTL_HEAP_USAGE;

NTSTATUS
__stdcall
RtlUsageHeap(
	PVOID HeapHandle,
	ULONG Flags,
	PRTL_HEAP_USAGE Usage
);
typedef struct _RTL_HEAP_WALK_ENTRY
{
	PVOID DataAddress;
	SIZE_T DataSize;
	UCHAR OverheadBytes;
	UCHAR SegmentIndex;
	USHORT Flags;
	union
	{
		struct
		{
			SIZE_T Settable;
			USHORT TagIndex;
			USHORT AllocatorBackTraceIndex;
			ULONG Reserved[2];
		} Block;
		struct
		{
			ULONG CommittedSize;
			ULONG UnCommittedSize;
			PVOID FirstEntry;
			PVOID LastEntry;
		} Segment;
	};
} RTL_HEAP_WALK_ENTRY, * PRTL_HEAP_WALK_ENTRY;

NTSTATUS
__stdcall
RtlWalkHeap(
	PVOID HeapHandle,
	PRTL_HEAP_WALK_ENTRY Entry
);
typedef enum _HEAP_COMPATIBILITY_MODE
{
	HEAP_COMPATIBILITY_STANDARD = 0UL,
	HEAP_COMPATIBILITY_LAL = 1UL,
	HEAP_COMPATIBILITY_LFH = 2UL,
} HEAP_COMPATIBILITY_MODE;
typedef struct _PROCESS_HEAP_INFORMATION
{
	ULONG_PTR ReserveSize;
	ULONG_PTR CommitSize;
	ULONG NumberOfHeaps;
	ULONG_PTR FirstHeapInformationOffset;
} PROCESS_HEAP_INFORMATION, * PPROCESS_HEAP_INFORMATION;
typedef struct _HEAP_INFORMATION
{
	ULONG_PTR Address;
	ULONG Mode;
	ULONG_PTR ReserveSize;
	ULONG_PTR CommitSize;
	ULONG_PTR FirstRegionInformationOffset;
	ULONG_PTR NextHeapInformationOffset;
} HEAP_INFORMATION, * PHEAP_INFORMATION;
typedef struct _HEAP_EXTENDED_INFORMATION
{
	HANDLE Process;
	ULONG_PTR Heap;
	ULONG Level;
	PVOID CallbackRoutine;
	PVOID CallbackContext;
	union
	{
		PROCESS_HEAP_INFORMATION ProcessHeapInformation;
		HEAP_INFORMATION HeapInformation;
	};
} HEAP_EXTENDED_INFORMATION, * PHEAP_EXTENDED_INFORMATION;
typedef NTSTATUS(__stdcall* PRTL_HEAP_LEAK_ENUMERATION_ROUTINE)(
	LONG Reserved,
	PVOID HeapHandle,
	PVOID BaseAddress,
	SIZE_T BlockSize,
	ULONG StackTraceDepth,
	PVOID* StackTrace
	);
typedef struct _HEAP_DEBUGGING_INFORMATION
{
	PVOID InterceptorFunction;
	USHORT InterceptorValue;
	ULONG ExtendedOptions;
	ULONG StackTraceDepth;
	SIZE_T MinTotalBlockSize;
	SIZE_T MaxTotalBlockSize;
	PRTL_HEAP_LEAK_ENUMERATION_ROUTINE HeapLeakEnumerationRoutine;
} HEAP_DEBUGGING_INFORMATION, * PHEAP_DEBUGGING_INFORMATION;

NTSTATUS
__stdcall
RtlQueryHeapInformation(
	PVOID HeapHandle,
	HEAP_INFORMATION_CLASS HeapInformationClass,
	PVOID HeapInformation,
	SIZE_T HeapInformationLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
RtlSetHeapInformation(
	PVOID HeapHandle,
	HEAP_INFORMATION_CLASS HeapInformationClass,
	PVOID HeapInformation,
	SIZE_T HeapInformationLength
);

ULONG
__stdcall
RtlMultipleAllocateHeap(
	PVOID HeapHandle,
	ULONG Flags,
	SIZE_T Size,
	ULONG Count,
	PVOID* Array
);

ULONG
__stdcall
RtlMultipleFreeHeap(
	PVOID HeapHandle,
	ULONG Flags,
	ULONG Count,
	PVOID* Array
);

void
__stdcall
RtlDetectHeapLeaks(
	void
);

void
__stdcall
RtlFlushHeaps(
	void
);
typedef struct _RTL_MEMORY_ZONE_SEGMENT
{
	struct _RTL_MEMORY_ZONE_SEGMENT* NextSegment;
	SIZE_T Size;
	PVOID Next;
	PVOID Limit;
} RTL_MEMORY_ZONE_SEGMENT, * PRTL_MEMORY_ZONE_SEGMENT;
typedef struct _RTL_MEMORY_ZONE
{
	RTL_MEMORY_ZONE_SEGMENT Segment;
	RTL_SRWLOCK Lock;
	ULONG LockCount;
	PRTL_MEMORY_ZONE_SEGMENT FirstSegment;
} RTL_MEMORY_ZONE, * PRTL_MEMORY_ZONE;

NTSTATUS
__stdcall
RtlCreateMemoryZone(
	PVOID* MemoryZone,
	SIZE_T InitialSize,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlDestroyMemoryZone(
	PVOID MemoryZone
);

NTSTATUS
__stdcall
RtlAllocateMemoryZone(
	PVOID MemoryZone,
	SIZE_T BlockSize,
	PVOID* Block
);

NTSTATUS
__stdcall
RtlResetMemoryZone(
	PVOID MemoryZone
);

NTSTATUS
__stdcall
RtlLockMemoryZone(
	PVOID MemoryZone
);

NTSTATUS
__stdcall
RtlUnlockMemoryZone(
	PVOID MemoryZone
);

NTSTATUS
__stdcall
RtlCreateMemoryBlockLookaside(
	PVOID* MemoryBlockLookaside,
	ULONG Flags,
	ULONG InitialSize,
	ULONG MinimumBlockSize,
	ULONG MaximumBlockSize
);

NTSTATUS
__stdcall
RtlDestroyMemoryBlockLookaside(
	PVOID MemoryBlockLookaside
);

NTSTATUS
__stdcall
RtlAllocateMemoryBlockLookaside(
	PVOID MemoryBlockLookaside,
	ULONG BlockSize,
	PVOID* Block
);

NTSTATUS
__stdcall
RtlFreeMemoryBlockLookaside(
	PVOID MemoryBlockLookaside,
	PVOID Block
);

NTSTATUS
__stdcall
RtlExtendMemoryBlockLookaside(
	PVOID MemoryBlockLookaside,
	ULONG Increment
);

NTSTATUS
__stdcall
RtlResetMemoryBlockLookaside(
	PVOID MemoryBlockLookaside
);

NTSTATUS
__stdcall
RtlLockMemoryBlockLookaside(
	PVOID MemoryBlockLookaside
);

NTSTATUS
__stdcall
RtlUnlockMemoryBlockLookaside(
	PVOID MemoryBlockLookaside
);

HANDLE
__stdcall
RtlGetCurrentTransaction(
	void
);

LOGICAL
__stdcall
RtlSetCurrentTransaction(
	HANDLE TransactionHandle
);
BOOLEAN RtlIsEqualLuid(
	PLUID L1,
	PLUID L2
);
BOOLEAN RtlIsZeroLuid(
	PLUID L1
);
LUID RtlConvertLongToLuid(
	LONG Long
);
LUID RtlConvertUlongToLuid(
	ULONG Ulong
);

void
__stdcall
RtlCopyLuid(
	PLUID DestinationLuid,
	PLUID SourceLuid
);

void
__stdcall
RtlCopyLuidAndAttributesArray(
	ULONG Count,
	PLUID_AND_ATTRIBUTES Src,
	PLUID_AND_ATTRIBUTES Dest
);
typedef struct _RTL_PROCESS_VERIFIER_OPTIONS
{
	ULONG SizeStruct;
	ULONG Option;
	UCHAR OptionData[1];
} RTL_PROCESS_VERIFIER_OPTIONS, * PRTL_PROCESS_VERIFIER_OPTIONS;
typedef struct _RTL_DEBUG_INFORMATION
{
	HANDLE SectionHandleClient;
	PVOID ViewBaseClient;
	PVOID ViewBaseTarget;
	ULONG_PTR ViewBaseDelta;
	HANDLE EventPairClient;
	HANDLE EventPairTarget;
	HANDLE TargetProcessId;
	HANDLE TargetThreadHandle;
	ULONG Flags;
	SIZE_T OffsetFree;
	SIZE_T CommitSize;
	SIZE_T ViewSize;
	union
	{
		struct _RTL_PROCESS_MODULES* Modules;
		struct _RTL_PROCESS_MODULE_INFORMATION_EX* ModulesEx;
	};
	struct _RTL_PROCESS_BACKTRACES* BackTraces;
	struct _RTL_PROCESS_HEAPS* Heaps;
	struct _RTL_PROCESS_LOCKS* Locks;
	PVOID SpecificHeap;
	HANDLE TargetProcessHandle;
	PRTL_PROCESS_VERIFIER_OPTIONS VerifierOptions;
	PVOID ProcessHeap;
	HANDLE CriticalSectionHandle;
	HANDLE CriticalSectionOwnerThread;
	PVOID Reserved[4];
} RTL_DEBUG_INFORMATION, * PRTL_DEBUG_INFORMATION;

PRTL_DEBUG_INFORMATION
__stdcall
RtlCreateQueryDebugBuffer(
	ULONG MaximumCommit,
	BOOLEAN UseEventPair
);

NTSTATUS
__stdcall
RtlDestroyQueryDebugBuffer(
	PRTL_DEBUG_INFORMATION Buffer
);

PVOID
__stdcall
RtlCommitDebugInfo(
	PRTL_DEBUG_INFORMATION Buffer,
	SIZE_T Size
);

void
__stdcall
RtlDeCommitDebugInfo(
	PRTL_DEBUG_INFORMATION Buffer,
	PVOID p,
	SIZE_T Size
);

NTSTATUS
__stdcall
RtlQueryProcessDebugInformation(
	HANDLE UniqueProcessId,
	ULONG Flags,
	PRTL_DEBUG_INFORMATION Buffer
);

NTSTATUS
__stdcall
RtlSetProcessDebugInformation(
	HANDLE UniqueProcessId,
	ULONG Flags,
	PRTL_DEBUG_INFORMATION Buffer
);

NTSTATUS
__stdcall
RtlFindMessage(
	PVOID DllHandle,
	ULONG MessageTableId,
	ULONG MessageLanguageId,
	ULONG MessageId,
	PMESSAGE_RESOURCE_ENTRY* MessageEntry
);

NTSTATUS
__stdcall
RtlFormatMessage(
	PWSTR MessageFormat,
	ULONG MaximumWidth,
	BOOLEAN IgnoreInserts,
	BOOLEAN ArgumentsAreAnsi,
	BOOLEAN ArgumentsAreAnArray,
	va_list* Arguments,
	PWSTR Buffer,
	ULONG Length,
	PULONG ReturnLength
);
typedef struct _PARSE_MESSAGE_CONTEXT
{
	ULONG fFlags;
	ULONG cwSavColumn;
	SIZE_T iwSrc;
	SIZE_T iwDst;
	SIZE_T iwDstSpace;
	va_list lpvArgStart;
} PARSE_MESSAGE_CONTEXT, * PPARSE_MESSAGE_CONTEXT;

NTSTATUS
__stdcall
RtlFormatMessageEx(
	PWSTR MessageFormat,
	ULONG MaximumWidth,
	BOOLEAN IgnoreInserts,
	BOOLEAN ArgumentsAreAnsi,
	BOOLEAN ArgumentsAreAnArray,
	va_list* Arguments,
	PWSTR Buffer,
	ULONG Length,
	PULONG ReturnLength,
	PPARSE_MESSAGE_CONTEXT ParseContext
);

NTSTATUS
__stdcall
RtlGetFileMUIPath(
	ULONG Flags,
	PCWSTR FilePath,
	PWSTR Language,
	PULONG LanguageLength,
	PWSTR FileMUIPath,
	PULONG FileMUIPathLength,
	PULONGLONG Enumerator
);

ULONG
__stdcall
RtlNtStatusToDosError(
	NTSTATUS Status
);

ULONG
__stdcall
RtlNtStatusToDosErrorNoTeb(
	NTSTATUS Status
);

NTSTATUS
__stdcall
RtlGetLastNtStatus(
	void
);

LONG
__stdcall
RtlGetLastWin32Error(
	void
);

void
__stdcall
RtlSetLastWin32ErrorAndNtStatusFromNtStatus(
	NTSTATUS Status
);

void
__stdcall
RtlSetLastWin32Error(
	LONG Win32Error
);

void
__stdcall
RtlRestoreLastWin32Error(
	LONG Win32Error
);

ULONG
__stdcall
RtlGetThreadErrorMode(
	void
);

NTSTATUS
__stdcall
RtlSetThreadErrorMode(
	ULONG NewMode,
	PULONG OldMode
);

NTSTATUS
__stdcall
RtlReportException(
	PEXCEPTION_RECORD ExceptionRecord,
	PCONTEXT ContextRecord,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlWerpReportException(
	ULONG ProcessId,
	HANDLE CrashReportSharedMem,
	ULONG Flags,
	PHANDLE CrashVerticalProcessHandle
);

NTSTATUS
__stdcall
RtlReportSilentProcessExit(
	HANDLE ProcessHandle,
	NTSTATUS ExitStatus
);

PVOID
__stdcall
RtlAddVectoredExceptionHandler(
	ULONG First,
	PVECTORED_EXCEPTION_HANDLER Handler
);

ULONG
__stdcall
RtlRemoveVectoredExceptionHandler(
	PVOID Handle
);

PVOID
__stdcall
RtlAddVectoredContinueHandler(
	ULONG First,
	PVECTORED_EXCEPTION_HANDLER Handler
);

ULONG
__stdcall
RtlRemoveVectoredContinueHandler(
	PVOID Handle
);

ULONG
__stdcall
RtlUniform(
	PULONG Seed
);

ULONG
__stdcall
RtlRandom(
	PULONG Seed
);

ULONG
__stdcall
RtlRandomEx(
	PULONG Seed
);

NTSTATUS
__stdcall
RtlComputeImportTableHash(
	HANDLE FileHandle,
	PCHAR Hash,
	ULONG ImportTableHashRevision
);

NTSTATUS
__stdcall
RtlIntegerToChar(
	ULONG Value,
	ULONG Base,
	LONG OutputLength,
	PSTR String
);

NTSTATUS
__stdcall
RtlCharToInteger(
	PCSTR String,
	ULONG Base,
	PULONG Value
);

NTSTATUS
__stdcall
RtlLargeIntegerToChar(
	PLARGE_INTEGER Value,
	ULONG Base,
	LONG OutputLength,
	PSTR String
);

NTSTATUS
__stdcall
RtlIntegerToUnicodeString(
	ULONG Value,
	ULONG Base,
	PUNICODE_STRING String
);

NTSTATUS
__stdcall
RtlInt64ToUnicodeString(
	ULONGLONG Value,
	ULONG Base,
	PUNICODE_STRING String
);

NTSTATUS
__stdcall
RtlUnicodeStringToInteger(
	PUNICODE_STRING String,
	ULONG Base,
	PULONG Value
);
struct in_addr;
struct in6_addr;

PWSTR
__stdcall
RtlIpv4AddressToStringW(
	const struct in_addr* Address,
	PWSTR AddressString
);

NTSTATUS
__stdcall
RtlIpv4AddressToStringExW(
	const struct in_addr* Address,
	USHORT Port,
	PWSTR AddressString,
	PULONG AddressStringLength
);

PWSTR
__stdcall
RtlIpv6AddressToStringW(
	const struct in6_addr* Address,
	PWSTR AddressString
);

NTSTATUS
__stdcall
RtlIpv6AddressToStringExW(
	const struct in6_addr* Address,
	ULONG ScopeId,
	USHORT Port,
	PWSTR AddressString,
	PULONG AddressStringLength
);

NTSTATUS
__stdcall
RtlIpv4StringToAddressW(
	PCWSTR AddressString,
	BOOLEAN Strict,
	LPCWSTR* Terminator,
	struct in_addr* Address
);

NTSTATUS
__stdcall
RtlIpv4StringToAddressExW(
	PCWSTR AddressString,
	BOOLEAN Strict,
	struct in_addr* Address,
	PUSHORT Port
);

NTSTATUS
__stdcall
RtlIpv6StringToAddressW(
	PCWSTR AddressString,
	PCWSTR* Terminator,
	struct in6_addr* Address
);

NTSTATUS
__stdcall
RtlIpv6StringToAddressExW(
	PCWSTR AddressString,
	struct in6_addr* Address,
	PULONG ScopeId,
	PUSHORT Port
);
typedef struct _TIME_FIELDS
{
	CSHORT Year;
	CSHORT Month;
	CSHORT Day;
	CSHORT Hour;
	CSHORT Minute;
	CSHORT Second;
	CSHORT Milliseconds;
	CSHORT Weekday;
} TIME_FIELDS, * PTIME_FIELDS;

BOOLEAN
__stdcall
RtlCutoverTimeToSystemTime(
	PTIME_FIELDS CutoverTime,
	PLARGE_INTEGER SystemTime,
	PLARGE_INTEGER CurrentSystemTime,
	BOOLEAN ThisYear
);

NTSTATUS
__stdcall
RtlSystemTimeToLocalTime(
	PLARGE_INTEGER SystemTime,
	PLARGE_INTEGER LocalTime
);

NTSTATUS
__stdcall
RtlLocalTimeToSystemTime(
	PLARGE_INTEGER LocalTime,
	PLARGE_INTEGER SystemTime
);

void
__stdcall
RtlTimeToElapsedTimeFields(
	PLARGE_INTEGER Time,
	PTIME_FIELDS TimeFields
);

void
__stdcall
RtlTimeToTimeFields(
	PLARGE_INTEGER Time,
	PTIME_FIELDS TimeFields
);

BOOLEAN
__stdcall
RtlTimeFieldsToTime(
	PTIME_FIELDS TimeFields,
	PLARGE_INTEGER Time
);

BOOLEAN
__stdcall
RtlTimeToSecondsSince1980(
	PLARGE_INTEGER Time,
	PULONG ElapsedSeconds
);

void
__stdcall
RtlSecondsSince1980ToTime(
	ULONG ElapsedSeconds,
	PLARGE_INTEGER Time
);

BOOLEAN
__stdcall
RtlTimeToSecondsSince1970(
	PLARGE_INTEGER Time,
	PULONG ElapsedSeconds
);

void
__stdcall
RtlSecondsSince1970ToTime(
	ULONG ElapsedSeconds,
	PLARGE_INTEGER Time
);
typedef struct _RTL_TIME_ZONE_INFORMATION
{
	LONG Bias;
	WCHAR StandardName[32];
	TIME_FIELDS StandardStart;
	LONG StandardBias;
	WCHAR DaylightName[32];
	TIME_FIELDS DaylightStart;
	LONG DaylightBias;
} RTL_TIME_ZONE_INFORMATION, * PRTL_TIME_ZONE_INFORMATION;

NTSTATUS
__stdcall
RtlQueryTimeZoneInformation(
	PRTL_TIME_ZONE_INFORMATION TimeZoneInformation
);

NTSTATUS
__stdcall
RtlSetTimeZoneInformation(
	PRTL_TIME_ZONE_INFORMATION TimeZoneInformation
);
typedef struct _RTL_BITMAP
{
	ULONG SizeOfBitMap;
	PULONG Buffer;
} RTL_BITMAP, * PRTL_BITMAP;

void
__stdcall
RtlInitializeBitMap(
	PRTL_BITMAP BitMapHeader,
	PULONG BitMapBuffer,
	ULONG SizeOfBitMap
);

BOOLEAN
__stdcall
RtlTestBit(
	PRTL_BITMAP BitMapHeader,
	ULONG BitNumber
);

void
__stdcall
RtlClearAllBits(
	PRTL_BITMAP BitMapHeader
);

void
__stdcall
RtlSetAllBits(
	PRTL_BITMAP BitMapHeader
);

ULONG
__stdcall
RtlFindClearBits(
	PRTL_BITMAP BitMapHeader,
	ULONG NumberToFind,
	ULONG HintIndex
);

ULONG
__stdcall
RtlFindSetBits(
	PRTL_BITMAP BitMapHeader,
	ULONG NumberToFind,
	ULONG HintIndex
);

ULONG
__stdcall
RtlFindClearBitsAndSet(
	PRTL_BITMAP BitMapHeader,
	ULONG NumberToFind,
	ULONG HintIndex
);

ULONG
__stdcall
RtlFindSetBitsAndClear(
	PRTL_BITMAP BitMapHeader,
	ULONG NumberToFind,
	ULONG HintIndex
);

void
__stdcall
RtlClearBits(
	PRTL_BITMAP BitMapHeader,
	ULONG StartingIndex,
	ULONG NumberToClear
);

void
__stdcall
RtlSetBits(
	PRTL_BITMAP BitMapHeader,
	ULONG StartingIndex,
	ULONG NumberToSet
);

CCHAR
__stdcall
RtlFindMostSignificantBit(
	ULONGLONG Set
);

CCHAR
__stdcall
RtlFindLeastSignificantBit(
	ULONGLONG Set
);
typedef struct _RTL_BITMAP_RUN
{
	ULONG StartingIndex;
	ULONG NumberOfBits;
} RTL_BITMAP_RUN, * PRTL_BITMAP_RUN;

ULONG
__stdcall
RtlFindClearRuns(
	PRTL_BITMAP BitMapHeader,
	PRTL_BITMAP_RUN RunArray,
	ULONG SizeOfRunArray,
	BOOLEAN LocateLongestRuns
);

ULONG
__stdcall
RtlFindLongestRunClear(
	PRTL_BITMAP BitMapHeader,
	PULONG StartingIndex
);

ULONG
__stdcall
RtlFindFirstRunClear(
	PRTL_BITMAP BitMapHeader,
	PULONG StartingIndex
);

BOOLEAN
RtlCheckBit(
	PRTL_BITMAP BitMapHeader,
	ULONG BitPosition
);

ULONG
__stdcall
RtlNumberOfClearBits(
	PRTL_BITMAP BitMapHeader
);

ULONG
__stdcall
RtlNumberOfSetBits(
	PRTL_BITMAP BitMapHeader
);

BOOLEAN
__stdcall
RtlAreBitsClear(
	PRTL_BITMAP BitMapHeader,
	ULONG StartingIndex,
	ULONG Length
);

BOOLEAN
__stdcall
RtlAreBitsSet(
	PRTL_BITMAP BitMapHeader,
	ULONG StartingIndex,
	ULONG Length
);

ULONG
__stdcall
RtlFindNextForwardRunClear(
	PRTL_BITMAP BitMapHeader,
	ULONG FromIndex,
	PULONG StartingRunIndex
);

ULONG
__stdcall
RtlFindLastBackwardRunClear(
	PRTL_BITMAP BitMapHeader,
	ULONG FromIndex,
	PULONG StartingRunIndex
);

ULONG
__stdcall
RtlNumberOfSetBitsUlongPtr(
	ULONG_PTR Target
);

void
__stdcall
RtlInterlockedClearBitRun(
	PRTL_BITMAP BitMapHeader,
	ULONG StartingIndex,
	ULONG NumberToClear
);

void
__stdcall
RtlInterlockedSetBitRun(
	PRTL_BITMAP BitMapHeader,
	ULONG StartingIndex,
	ULONG NumberToSet
);
typedef struct _RTL_HANDLE_TABLE_ENTRY
{
	union
	{
		ULONG Flags;
		struct _RTL_HANDLE_TABLE_ENTRY* NextFree;
	};
} RTL_HANDLE_TABLE_ENTRY, * PRTL_HANDLE_TABLE_ENTRY;
typedef struct _RTL_HANDLE_TABLE
{
	ULONG MaximumNumberOfHandles;
	ULONG SizeOfHandleTableEntry;
	ULONG Reserved[2];
	PRTL_HANDLE_TABLE_ENTRY FreeHandles;
	PRTL_HANDLE_TABLE_ENTRY CommittedHandles;
	PRTL_HANDLE_TABLE_ENTRY UnCommittedHandles;
	PRTL_HANDLE_TABLE_ENTRY MaxReservedHandles;
} RTL_HANDLE_TABLE, * PRTL_HANDLE_TABLE;

void
__stdcall
RtlInitializeHandleTable(
	ULONG MaximumNumberOfHandles,
	ULONG SizeOfHandleTableEntry,
	PRTL_HANDLE_TABLE HandleTable
);

NTSTATUS
__stdcall
RtlDestroyHandleTable(
	PRTL_HANDLE_TABLE HandleTable
);

PRTL_HANDLE_TABLE_ENTRY
__stdcall
RtlAllocateHandle(
	PRTL_HANDLE_TABLE HandleTable,
	PULONG HandleIndex
);

BOOLEAN
__stdcall
RtlFreeHandle(
	PRTL_HANDLE_TABLE HandleTable,
	PRTL_HANDLE_TABLE_ENTRY Handle
);

BOOLEAN
__stdcall
RtlIsValidHandle(
	PRTL_HANDLE_TABLE HandleTable,
	PRTL_HANDLE_TABLE_ENTRY Handle
);

BOOLEAN
__stdcall
RtlIsValidIndexHandle(
	PRTL_HANDLE_TABLE HandleTable,
	ULONG HandleIndex,
	PRTL_HANDLE_TABLE_ENTRY* Handle
);

NTSTATUS
__stdcall
RtlCreateAtomTable(
	ULONG NumberOfBuckets,
	PVOID* AtomTableHandle
);

NTSTATUS
__stdcall
RtlDestroyAtomTable(
	PVOID AtomTableHandle
);

NTSTATUS
__stdcall
RtlEmptyAtomTable(
	PVOID AtomTableHandle,
	BOOLEAN IncludePinnedAtoms
);

NTSTATUS
__stdcall
RtlAddAtomToAtomTable(
	PVOID AtomTableHandle,
	PWSTR AtomName,
	PRTL_ATOM Atom
);

NTSTATUS
__stdcall
RtlLookupAtomInAtomTable(
	PVOID AtomTableHandle,
	PWSTR AtomName,
	PRTL_ATOM Atom
);

NTSTATUS
__stdcall
RtlDeleteAtomFromAtomTable(
	PVOID AtomTableHandle,
	RTL_ATOM Atom
);

NTSTATUS
__stdcall
RtlPinAtomInAtomTable(
	PVOID AtomTableHandle,
	RTL_ATOM Atom
);

NTSTATUS
__stdcall
RtlQueryAtomInAtomTable(
	PVOID AtomTableHandle,
	RTL_ATOM Atom,
	PULONG AtomUsage,
	PULONG AtomFlags,
	PWSTR AtomName,
	PULONG AtomNameLength
);

BOOLEAN
__stdcall
RtlGetIntegerAtom(
	PWSTR AtomName,
	PUSHORT IntegerAtom
);

BOOLEAN
__stdcall
RtlValidSid(
	PSID Sid
);

BOOLEAN
__stdcall
RtlEqualSid(
	PSID Sid1,
	PSID Sid2
);

BOOLEAN
__stdcall
RtlEqualPrefixSid(
	PSID Sid1,
	PSID Sid2
);

ULONG
__stdcall
RtlLengthRequiredSid(
	ULONG SubAuthorityCount
);

PVOID
__stdcall
RtlFreeSid(
	PSID Sid
);

NTSTATUS
__stdcall
RtlAllocateAndInitializeSid(
	PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,
	UCHAR SubAuthorityCount,
	ULONG SubAuthority0,
	ULONG SubAuthority1,
	ULONG SubAuthority2,
	ULONG SubAuthority3,
	ULONG SubAuthority4,
	ULONG SubAuthority5,
	ULONG SubAuthority6,
	ULONG SubAuthority7,
	PSID* Sid
);

NTSTATUS
__stdcall
RtlInitializeSid(
	PSID Sid,
	PSID_IDENTIFIER_AUTHORITY IdentifierAuthority,
	UCHAR SubAuthorityCount
);

PSID_IDENTIFIER_AUTHORITY
__stdcall
RtlIdentifierAuthoritySid(
	PSID Sid
);

PULONG
__stdcall
RtlSubAuthoritySid(
	PSID Sid,
	ULONG SubAuthority
);

PUCHAR
__stdcall
RtlSubAuthorityCountSid(
	PSID Sid
);

ULONG
__stdcall
RtlLengthSid(
	PSID Sid
);

NTSTATUS
__stdcall
RtlCopySid(
	ULONG DestinationSidLength,
	PSID DestinationSid,
	PSID SourceSid
);

NTSTATUS
__stdcall
RtlCopySidAndAttributesArray(
	ULONG Count,
	PSID_AND_ATTRIBUTES Src,
	ULONG SidAreaSize,
	PSID_AND_ATTRIBUTES Dest,
	PSID SidArea,
	PSID* RemainingSidArea,
	PULONG RemainingSidAreaSize
);

NTSTATUS
__stdcall
RtlCreateServiceSid(
	PUNICODE_STRING ServiceName,
	PSID ServiceSid,
	PULONG ServiceSidLength
);

NTSTATUS
__stdcall
RtlSidDominates(
	PSID Sid1,
	PSID Sid2,
	PBOOLEAN Dominates
);

NTSTATUS
__stdcall
RtlSidEqualLevel(
	PSID Sid1,
	PSID Sid2,
	PBOOLEAN EqualLevel
);

NTSTATUS
__stdcall
RtlSidIsHigherLevel(
	PSID Sid1,
	PSID Sid2,
	PBOOLEAN HigherLevel
);

NTSTATUS
__stdcall
RtlCreateVirtualAccountSid(
	PUNICODE_STRING Name,
	ULONG BaseSubAuthority,
	PSID Sid,
	PULONG SidLength
);

NTSTATUS
__stdcall
RtlReplaceSidInSd(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID OldSid,
	PSID NewSid,
	ULONG* NumChanges
);

NTSTATUS
__stdcall
RtlLengthSidAsUnicodeString(
	PSID Sid,
	PULONG StringLength
);

NTSTATUS
__stdcall
RtlConvertSidToUnicodeString(
	PUNICODE_STRING UnicodeString,
	PSID Sid,
	BOOLEAN AllocateDestinationString
);

NTSTATUS
__stdcall
RtlSidHashInitialize(
	PSID_AND_ATTRIBUTES SidAttr,
	ULONG SidCount,
	PSID_AND_ATTRIBUTES_HASH SidAttrHash
);

PSID_AND_ATTRIBUTES
__stdcall
RtlSidHashLookup(
	PSID_AND_ATTRIBUTES_HASH SidAttrHash,
	PSID Sid
);

BOOLEAN
__stdcall
RtlIsElevatedRid(
	PSID_AND_ATTRIBUTES SidAttr
);

NTSTATUS
__stdcall
RtlCreateSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	ULONG Revision
);

BOOLEAN
__stdcall
RtlValidSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor
);

ULONG
__stdcall
RtlLengthSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor
);

BOOLEAN
__stdcall
RtlValidRelativeSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptorInput,
	ULONG SecurityDescriptorLength,
	SECURITY_INFORMATION RequiredInformation
);

NTSTATUS
__stdcall
RtlGetControlSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSECURITY_DESCRIPTOR_CONTROL Control,
	PULONG Revision
);

NTSTATUS
__stdcall
RtlSetControlSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
	SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
);

NTSTATUS
__stdcall
RtlSetAttributesSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	SECURITY_DESCRIPTOR_CONTROL Control,
	PULONG Revision
);

BOOLEAN
__stdcall
RtlGetSecurityDescriptorRMControl(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PUCHAR RMControl
);

void
__stdcall
RtlSetSecurityDescriptorRMControl(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PUCHAR RMControl
);

NTSTATUS
__stdcall
RtlSetDaclSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	BOOLEAN DaclPresent,
	PACL Dacl,
	BOOLEAN DaclDefaulted
);

NTSTATUS
__stdcall
RtlGetDaclSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PBOOLEAN DaclPresent,
	PACL* Dacl,
	PBOOLEAN DaclDefaulted
);

NTSTATUS
__stdcall
RtlSetSaclSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	BOOLEAN SaclPresent,
	PACL Sacl,
	BOOLEAN SaclDefaulted
);

NTSTATUS
__stdcall
RtlGetSaclSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PBOOLEAN SaclPresent,
	PACL* Sacl,
	PBOOLEAN SaclDefaulted
);

NTSTATUS
__stdcall
RtlSetOwnerSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID Owner,
	BOOLEAN OwnerDefaulted
);

NTSTATUS
__stdcall
RtlGetOwnerSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID* Owner,
	PBOOLEAN OwnerDefaulted
);

NTSTATUS
__stdcall
RtlSetGroupSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID Group,
	BOOLEAN GroupDefaulted
);

NTSTATUS
__stdcall
RtlGetGroupSecurityDescriptor(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID* Group,
	PBOOLEAN GroupDefaulted
);

NTSTATUS
__stdcall
RtlMakeSelfRelativeSD(
	PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
	PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
	PULONG BufferLength
);

NTSTATUS
__stdcall
RtlAbsoluteToSelfRelativeSD(
	PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
	PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
	PULONG BufferLength
);

NTSTATUS
__stdcall
RtlSelfRelativeToAbsoluteSD(
	PSECURITY_DESCRIPTOR SelfRelativeSecurityDescriptor,
	PSECURITY_DESCRIPTOR AbsoluteSecurityDescriptor,
	PULONG AbsoluteSecurityDescriptorSize,
	PACL Dacl,
	PULONG DaclSize,
	PACL Sacl,
	PULONG SaclSize,
	PSID Owner,
	PULONG OwnerSize,
	PSID PrimaryGroup,
	PULONG PrimaryGroupSize
);

NTSTATUS
__stdcall
RtlSelfRelativeToAbsoluteSD2(
	PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
	PULONG pBufferSize
);

BOOLEAN
__stdcall
RtlAreAllAccessesGranted(
	ACCESS_MASK GrantedAccess,
	ACCESS_MASK DesiredAccess
);

BOOLEAN
__stdcall
RtlAreAnyAccessesGranted(
	ACCESS_MASK GrantedAccess,
	ACCESS_MASK DesiredAccess
);

void
__stdcall
RtlMapGenericMask(
	PACCESS_MASK AccessMask,
	PGENERIC_MAPPING GenericMapping
);

NTSTATUS
__stdcall
RtlCreateAcl(
	PACL Acl,
	ULONG AclLength,
	ULONG AclRevision
);

BOOLEAN
__stdcall
RtlValidAcl(
	PACL Acl
);

NTSTATUS
__stdcall
RtlQueryInformationAcl(
	PACL Acl,
	PVOID AclInformation,
	ULONG AclInformationLength,
	ACL_INFORMATION_CLASS AclInformationClass
);

NTSTATUS
__stdcall
RtlSetInformationAcl(
	PACL Acl,
	PVOID AclInformation,
	ULONG AclInformationLength,
	ACL_INFORMATION_CLASS AclInformationClass
);

NTSTATUS
__stdcall
RtlAddAce(
	PACL Acl,
	ULONG AceRevision,
	ULONG StartingAceIndex,
	PVOID AceList,
	ULONG AceListLength
);

NTSTATUS
__stdcall
RtlDeleteAce(
	PACL Acl,
	ULONG AceIndex
);

NTSTATUS
__stdcall
RtlGetAce(
	PACL Acl,
	ULONG AceIndex,
	PVOID* Ace
);

BOOLEAN
__stdcall
RtlFirstFreeAce(
	PACL Acl,
	PVOID* FirstFree
);

PVOID
__stdcall
RtlFindAceByType(
	PACL pAcl,
	UCHAR AceType,
	PULONG pIndex
);

BOOLEAN
__stdcall
RtlOwnerAcesPresent(
	PACL pAcl
);

NTSTATUS
__stdcall
RtlAddAccessAllowedAce(
	PACL Acl,
	ULONG AceRevision,
	ACCESS_MASK AccessMask,
	PSID Sid
);

NTSTATUS
__stdcall
RtlAddAccessAllowedAceEx(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	ACCESS_MASK AccessMask,
	PSID Sid
);

NTSTATUS
__stdcall
RtlAddAccessDeniedAce(
	PACL Acl,
	ULONG AceRevision,
	ACCESS_MASK AccessMask,
	PSID Sid
);

NTSTATUS
__stdcall
RtlAddAccessDeniedAceEx(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	ACCESS_MASK AccessMask,
	PSID Sid
);

NTSTATUS
__stdcall
RtlAddAuditAccessAce(
	PACL Acl,
	ULONG AceRevision,
	ACCESS_MASK AccessMask,
	PSID Sid,
	BOOLEAN AuditSuccess,
	BOOLEAN AuditFailure
);

NTSTATUS
__stdcall
RtlAddAuditAccessAceEx(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	ACCESS_MASK AccessMask,
	PSID Sid,
	BOOLEAN AuditSuccess,
	BOOLEAN AuditFailure
);

NTSTATUS
__stdcall
RtlAddAccessAllowedObjectAce(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	ACCESS_MASK AccessMask,
	PGUID ObjectTypeGuid,
	PGUID InheritedObjectTypeGuid,
	PSID Sid
);

NTSTATUS
__stdcall
RtlAddAccessDeniedObjectAce(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	ACCESS_MASK AccessMask,
	PGUID ObjectTypeGuid,
	PGUID InheritedObjectTypeGuid,
	PSID Sid
);

NTSTATUS
__stdcall
RtlAddAuditAccessObjectAce(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	ACCESS_MASK AccessMask,
	PGUID ObjectTypeGuid,
	PGUID InheritedObjectTypeGuid,
	PSID Sid,
	BOOLEAN AuditSuccess,
	BOOLEAN AuditFailure
);

NTSTATUS
__stdcall
RtlAddCompoundAce(
	PACL Acl,
	ULONG AceRevision,
	UCHAR AceType,
	ACCESS_MASK AccessMask,
	PSID ServerSid,
	PSID ClientSid
);

NTSTATUS
__stdcall
RtlAddMandatoryAce(
	PACL Acl,
	ULONG AceRevision,
	ULONG AceFlags,
	PSID Sid,
	UCHAR AceType,
	ACCESS_MASK AccessMask
);

NTSTATUS
__stdcall
RtlDefaultNpAcl(
	PACL* Acl
);

NTSTATUS
__stdcall
RtlNewSecurityObject(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	BOOLEAN IsDirectoryObject,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

NTSTATUS
__stdcall
RtlNewSecurityObjectEx(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	GUID* ObjectType,
	BOOLEAN IsDirectoryObject,
	ULONG AutoInheritFlags,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

NTSTATUS
__stdcall
RtlNewSecurityObjectWithMultipleInheritance(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	GUID** ObjectType,
	ULONG GuidCount,
	BOOLEAN IsDirectoryObject,
	ULONG AutoInheritFlags,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

NTSTATUS
__stdcall
RtlDeleteSecurityObject(
	PSECURITY_DESCRIPTOR* ObjectDescriptor
);

NTSTATUS
__stdcall
RtlQuerySecurityObject(
	PSECURITY_DESCRIPTOR ObjectDescriptor,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR ResultantDescriptor,
	ULONG DescriptorLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
RtlSetSecurityObject(
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR ModificationDescriptor,
	PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,
	PGENERIC_MAPPING GenericMapping,
	HANDLE Token
);

NTSTATUS
__stdcall
RtlSetSecurityObjectEx(
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR ModificationDescriptor,
	PSECURITY_DESCRIPTOR* ObjectsSecurityDescriptor,
	ULONG AutoInheritFlags,
	PGENERIC_MAPPING GenericMapping,
	HANDLE Token
);

NTSTATUS
__stdcall
RtlConvertToAutoInheritSecurityObject(
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
	PSECURITY_DESCRIPTOR* NewSecurityDescriptor,
	GUID* ObjectType,
	BOOLEAN IsDirectoryObject,
	PGENERIC_MAPPING GenericMapping
);

NTSTATUS
__stdcall
RtlNewInstanceSecurityObject(
	BOOLEAN ParentDescriptorChanged,
	BOOLEAN CreatorDescriptorChanged,
	PLUID OldClientTokenModifiedId,
	PLUID NewClientTokenModifiedId,
	PSECURITY_DESCRIPTOR ParentDescriptor,
	PSECURITY_DESCRIPTOR CreatorDescriptor,
	PSECURITY_DESCRIPTOR* NewDescriptor,
	BOOLEAN IsDirectoryObject,
	HANDLE Token,
	PGENERIC_MAPPING GenericMapping
);

NTSTATUS
__stdcall
RtlCopySecurityDescriptor(
	PSECURITY_DESCRIPTOR InputSecurityDescriptor,
	PSECURITY_DESCRIPTOR* OutputSecurityDescriptor
);

void
__stdcall
RtlRunEncodeUnicodeString(
	PUCHAR Seed,
	PUNICODE_STRING String
);

void
__stdcall
RtlRunDecodeUnicodeString(
	UCHAR Seed,
	PUNICODE_STRING String
);

NTSTATUS
__stdcall
RtlImpersonateSelf(
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
);

NTSTATUS
__stdcall
RtlImpersonateSelfEx(
	SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
	ACCESS_MASK AdditionalAccess,
	PHANDLE ThreadToken
);

NTSTATUS
__stdcall
RtlAdjustPrivilege(
	ULONG Privilege,
	BOOLEAN Enable,
	BOOLEAN Client,
	PBOOLEAN WasEnabled
);

NTSTATUS
__stdcall
RtlAcquirePrivilege(
	PULONG Privilege,
	ULONG NumPriv,
	ULONG Flags,
	PVOID* ReturnedState
);

void
__stdcall
RtlReleasePrivilege(
	PVOID StatePointer
);

NTSTATUS
__stdcall
RtlRemovePrivileges(
	HANDLE TokenHandle,
	PULONG PrivilegesToKeep,
	ULONG PrivilegeCount
);

HANDLE
__stdcall
RtlCreateBoundaryDescriptor(
	PUNICODE_STRING Name,
	ULONG Flags
);

void
__stdcall
RtlDeleteBoundaryDescriptor(
	HANDLE BoundaryDescriptor
);

NTSTATUS
__stdcall
RtlAddSIDToBoundaryDescriptor(
	PHANDLE BoundaryDescriptor,
	PSID RequiredSid
);

NTSTATUS
__stdcall
RtlAddIntegrityLabelToBoundaryDescriptor(
	PHANDLE BoundaryDescriptor,
	PSID IntegrityLabel
);

NTSTATUS
__stdcall
RtlGetVersion(
	PRTL_OSVERSIONINFOEXW VersionInformation
);

NTSTATUS
__stdcall
RtlVerifyVersionInfo(
	PRTL_OSVERSIONINFOEXW VersionInformation,
	ULONG TypeMask,
	ULONGLONG ConditionMask
);

void
__stdcall
RtlGetNtVersionNumbers(
	PULONG NtMajorVersion,
	PULONG NtMinorVersion,
	PULONG NtBuildNumber
);

ULONG
__stdcall
RtlGetNtGlobalFlags(
	void
);

NTSTATUS
__stdcall
RtlRegisterWait(
	PHANDLE WaitHandle,
	HANDLE Handle,
	WAITORTIMERCALLBACKFUNC Function,
	PVOID Context,
	ULONG Milliseconds,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlDeregisterWait(
	HANDLE WaitHandle
);

NTSTATUS
__stdcall
RtlDeregisterWaitEx(
	HANDLE WaitHandle,
	HANDLE Event
);

NTSTATUS
__stdcall
RtlQueueWorkItem(
	WORKERCALLBACKFUNC Function,
	PVOID Context,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlSetIoCompletionCallback(
	HANDLE FileHandle,
	APC_CALLBACK_FUNCTION CompletionProc,
	ULONG Flags
);
typedef NTSTATUS(__stdcall* PRTL_START_POOL_THREAD)(
	PTHREAD_START_ROUTINE Function,
	PVOID Parameter,
	PHANDLE ThreadHandle
	);
typedef NTSTATUS(__stdcall* PRTL_EXIT_POOL_THREAD)(
	NTSTATUS ExitStatus
	);

NTSTATUS
__stdcall
RtlSetThreadPoolStartFunc(
	PRTL_START_POOL_THREAD StartPoolThread,
	PRTL_EXIT_POOL_THREAD ExitPoolThread
);

void
__stdcall
RtlUserThreadStart(
	PTHREAD_START_ROUTINE Function,
	PVOID Parameter
);

void
__stdcall
LdrInitializeThunk(
	PCONTEXT ContextRecord,
	PVOID Parameter
);

NTSTATUS
__stdcall
RtlCreateTimerQueue(
	PHANDLE TimerQueueHandle
);

NTSTATUS
__stdcall
RtlCreateTimer(
	HANDLE TimerQueueHandle,
	PHANDLE Handle,
	WAITORTIMERCALLBACKFUNC Function,
	PVOID Context,
	ULONG DueTime,
	ULONG Period,
	ULONG Flags
);

NTSTATUS
__stdcall
RtlUpdateTimer(
	HANDLE TimerQueueHandle,
	HANDLE TimerHandle,
	ULONG DueTime,
	ULONG Period
);

NTSTATUS
__stdcall
RtlDeleteTimer(
	HANDLE TimerQueueHandle,
	HANDLE TimerToCancel,
	HANDLE Event
);

NTSTATUS
__stdcall
RtlDeleteTimerQueue(
	HANDLE TimerQueueHandle
);

NTSTATUS
__stdcall
RtlDeleteTimerQueueEx(
	HANDLE TimerQueueHandle,
	HANDLE Event
);

NTSTATUS
__stdcall
RtlFormatCurrentUserKeyPath(
	PUNICODE_STRING CurrentUserKeyPath
);

NTSTATUS
__stdcall
RtlOpenCurrentUser(
	ACCESS_MASK DesiredAccess,
	PHANDLE CurrentUserKey
);

NTSTATUS
__stdcall
RtlCreateRegistryKey(
	ULONG RelativeTo,
	PWSTR Path
);

NTSTATUS
__stdcall
RtlCheckRegistryKey(
	ULONG RelativeTo,
	PWSTR Path
);
typedef NTSTATUS(__stdcall* PRTL_QUERY_REGISTRY_ROUTINE)(
	PWSTR ValueName,
	ULONG ValueType,
	PVOID ValueData,
	ULONG ValueLength,
	PVOID Context,
	PVOID EntryContext
	);
typedef struct _RTL_QUERY_REGISTRY_TABLE
{
	PRTL_QUERY_REGISTRY_ROUTINE QueryRoutine;
	ULONG Flags;
	PWSTR Name;
	PVOID EntryContext;
	ULONG DefaultType;
	PVOID DefaultData;
	ULONG DefaultLength;
} RTL_QUERY_REGISTRY_TABLE, * PRTL_QUERY_REGISTRY_TABLE;

NTSTATUS
__stdcall
RtlQueryRegistryValues(
	ULONG RelativeTo,
	PCWSTR Path,
	PRTL_QUERY_REGISTRY_TABLE QueryTable,
	PVOID Context,
	PVOID Environment
);

NTSTATUS
__stdcall
RtlQueryRegistryValuesEx(
	ULONG RelativeTo,
	PCWSTR Path,
	PRTL_QUERY_REGISTRY_TABLE QueryTable,
	PVOID Context,
	PVOID Environment
);

NTSTATUS
__stdcall
RtlWriteRegistryValue(
	ULONG RelativeTo,
	PCWSTR Path,
	PCWSTR ValueName,
	ULONG ValueType,
	PVOID ValueData,
	ULONG ValueLength
);

NTSTATUS
__stdcall
RtlDeleteRegistryValue(
	ULONG RelativeTo,
	PCWSTR Path,
	PCWSTR ValueName
);

NTSTATUS
__stdcall
RtlEnableThreadProfiling(
	HANDLE ThreadHandle,
	ULONG Flags,
	ULONG64 HardwareCounters,
	PVOID* PerformanceDataHandle
);

NTSTATUS
__stdcall
RtlDisableThreadProfiling(
	PVOID PerformanceDataHandle
);

NTSTATUS
__stdcall
RtlQueryThreadProfiling(
	HANDLE ThreadHandle,
	PBOOLEAN Enabled
);

NTSTATUS
__stdcall
RtlReadThreadProfilingData(
	HANDLE PerformanceDataHandle,
	ULONG Flags,
	PPERFORMANCE_DATA PerformanceData
);

NTSTATUS
__stdcall
RtlGetNativeSystemInformation(
	ULONG SystemInformationClass,
	PVOID NativeSystemInformation,
	ULONG InformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
RtlQueueApcWow64Thread(
	HANDLE ThreadHandle,
	PPS_APC_ROUTINE ApcRoutine,
	PVOID ApcArgument1,
	PVOID ApcArgument2,
	PVOID ApcArgument3
);

NTSTATUS
__stdcall
RtlWow64EnableFsRedirection(
	BOOLEAN Wow64FsEnableRedirection
);

NTSTATUS
__stdcall
RtlWow64EnableFsRedirectionEx(
	PVOID Wow64FsEnableRedirection,
	PVOID* OldFsRedirectionLevel
);

ULONG32
__stdcall
RtlComputeCrc32(
	ULONG32 PartialCrc,
	PVOID Buffer,
	ULONG Length
);

PVOID
__stdcall
RtlEncodePointer(
	PVOID Ptr
);

PVOID
__stdcall
RtlDecodePointer(
	PVOID Ptr
);

PVOID
__stdcall
RtlEncodeSystemPointer(
	PVOID Ptr
);

PVOID
__stdcall
RtlDecodeSystemPointer(
	PVOID Ptr
);

BOOLEAN
__stdcall
RtlIsProcessorFeaturePresent(
	ULONG ProcessorFeature
);

ULONG
__stdcall
RtlGetCurrentProcessorNumber(
	void
);

void
__stdcall
RtlPushFrame(
	PTEB_ACTIVE_FRAME Frame
);

void
__stdcall
RtlPopFrame(
	PTEB_ACTIVE_FRAME Frame
);

PTEB_ACTIVE_FRAME
__stdcall
RtlGetFrame(
	void
);

ULONG
__stdcall
RtlWalkFrameChain(
	PVOID* Callers,
	ULONG Count,
	ULONG Flags
);

void
__stdcall
RtlGetCallersAddress(
	PVOID* CallersAddress,
	PVOID* CallersCaller
);

ULONG64
__stdcall
RtlGetEnabledExtendedFeatures(
	ULONG64 FeatureMask
);
typedef union _RTL_ELEVATION_FLAGS
{
	ULONG Flags;
	struct
	{
		ULONG ElevationEnabled : 1;
		ULONG VirtualizationEnabled : 1;
		ULONG InstallerDetectEnabled : 1;
		ULONG ReservedBits : 29;
	};
} RTL_ELEVATION_FLAGS, * PRTL_ELEVATION_FLAGS;

NTSTATUS
__stdcall
RtlQueryElevationFlags(
	PRTL_ELEVATION_FLAGS Flags
);

NTSTATUS
__stdcall
RtlRegisterThreadWithCsrss(
	void
);

NTSTATUS
__stdcall
RtlLockCurrentThread(
	void
);

NTSTATUS
__stdcall
RtlUnlockCurrentThread(
	void
);

NTSTATUS
__stdcall
RtlLockModuleSection(
	PVOID Address
);

NTSTATUS
__stdcall
RtlUnlockModuleSection(
	PVOID Address
);
typedef struct _RTL_UNLOAD_EVENT_TRACE
{
	PVOID BaseAddress;
	SIZE_T SizeOfImage;
	ULONG Sequence;
	ULONG TimeDateStamp;
	ULONG CheckSum;
	WCHAR ImageName[32];
	ULONG Version[2];
} RTL_UNLOAD_EVENT_TRACE, * PRTL_UNLOAD_EVENT_TRACE;
typedef struct _RTL_UNLOAD_EVENT_TRACE32
{
	ULONG BaseAddress;
	ULONG SizeOfImage;
	ULONG Sequence;
	ULONG TimeDateStamp;
	ULONG CheckSum;
	WCHAR ImageName[32];
	ULONG Version[2];
} RTL_UNLOAD_EVENT_TRACE32, * PRTL_UNLOAD_EVENT_TRACE32;

PRTL_UNLOAD_EVENT_TRACE
__stdcall
RtlGetUnloadEventTrace(
	void
);

void
__stdcall
RtlGetUnloadEventTraceEx(
	PULONG* ElementSize,
	PULONG* ElementCount,
	PVOID* EventTrace
);

LOGICAL
__stdcall
RtlQueryPerformanceCounter(
	PLARGE_INTEGER PerformanceCounter
);

LOGICAL
__stdcall
RtlQueryPerformanceFrequency(
	PLARGE_INTEGER PerformanceFrequency
);
typedef enum _IMAGE_MITIGATION_POLICY
{
	ImageDepPolicy,
	ImageAslrPolicy,
	ImageDynamicCodePolicy,
	ImageStrictHandleCheckPolicy,
	ImageSystemCallDisablePolicy,
	ImageMitigationOptionsMask,
	ImageExtensionPointDisablePolicy,
	ImageControlFlowGuardPolicy,
	ImageSignaturePolicy,
	ImageFontDisablePolicy,
	ImageImageLoadPolicy,
	ImagePayloadRestrictionPolicy,
	ImageChildProcessPolicy,
	ImageSehopPolicy,
	ImageHeapPolicy,
	MaxImageMitigationPolicy
} IMAGE_MITIGATION_POLICY;
typedef union _RTL_IMAGE_MITIGATION_POLICY
{
	struct
	{
		ULONG64 AuditState : 2;
		ULONG64 AuditFlag : 1;
		ULONG64 EnableAdditionalAuditingOption : 1;
		ULONG64 Reserved : 60;
	};
	struct
	{
		ULONG64 PolicyState : 2;
		ULONG64 AlwaysInherit : 1;
		ULONG64 EnableAdditionalPolicyOption : 1;
		ULONG64 AuditReserved : 60;
	};
} RTL_IMAGE_MITIGATION_POLICY, * PRTL_IMAGE_MITIGATION_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_DEP_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY Dep;
} RTL_IMAGE_MITIGATION_DEP_POLICY, * PRTL_IMAGE_MITIGATION_DEP_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_ASLR_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY ForceRelocateImages;
	RTL_IMAGE_MITIGATION_POLICY BottomUpRandomization;
	RTL_IMAGE_MITIGATION_POLICY HighEntropyRandomization;
} RTL_IMAGE_MITIGATION_ASLR_POLICY, * PRTL_IMAGE_MITIGATION_ASLR_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY BlockDynamicCode;
} RTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY, * PRTL_IMAGE_MITIGATION_DYNAMIC_CODE_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY StrictHandleChecks;
} RTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY, * PRTL_IMAGE_MITIGATION_STRICT_HANDLE_CHECK_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY BlockWin32kSystemCalls;
} RTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, * PRTL_IMAGE_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY DisableExtensionPoints;
} RTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, * PRTL_IMAGE_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY ControlFlowGuard;
	RTL_IMAGE_MITIGATION_POLICY StrictControlFlowGuard;
} RTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY, * PRTL_IMAGE_MITIGATION_CONTROL_FLOW_GUARD_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY BlockNonMicrosoftSignedBinaries;
	RTL_IMAGE_MITIGATION_POLICY EnforceSigningOnModuleDependencies;
} RTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY, * PRTL_IMAGE_MITIGATION_BINARY_SIGNATURE_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY DisableNonSystemFonts;
} RTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY, * PRTL_IMAGE_MITIGATION_FONT_DISABLE_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY BlockRemoteImageLoads;
	RTL_IMAGE_MITIGATION_POLICY BlockLowLabelImageLoads;
	RTL_IMAGE_MITIGATION_POLICY PreferSystem32;
} RTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY, * PRTL_IMAGE_MITIGATION_IMAGE_LOAD_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilter;
	RTL_IMAGE_MITIGATION_POLICY EnableExportAddressFilterPlus;
	RTL_IMAGE_MITIGATION_POLICY EnableImportAddressFilter;
	RTL_IMAGE_MITIGATION_POLICY EnableRopStackPivot;
	RTL_IMAGE_MITIGATION_POLICY EnableRopCallerCheck;
	RTL_IMAGE_MITIGATION_POLICY EnableRopSimExec;
	WCHAR EafPlusModuleList[512];
} RTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY, * PRTL_IMAGE_MITIGATION_PAYLOAD_RESTRICTION_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY DisallowChildProcessCreation;
} RTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY, * PRTL_IMAGE_MITIGATION_CHILD_PROCESS_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_SEHOP_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY Sehop;
} RTL_IMAGE_MITIGATION_SEHOP_POLICY, * PRTL_IMAGE_MITIGATION_SEHOP_POLICY;
typedef struct _RTL_IMAGE_MITIGATION_HEAP_POLICY
{
	RTL_IMAGE_MITIGATION_POLICY TerminateOnHeapErrors;
} RTL_IMAGE_MITIGATION_HEAP_POLICY, * PRTL_IMAGE_MITIGATION_HEAP_POLICY;
typedef enum _RTL_IMAGE_MITIGATION_OPTION_STATE
{
	RtlMitigationOptionStateNotConfigured,
	RtlMitigationOptionStateOn,
	RtlMitigationOptionStateOff
} RTL_IMAGE_MITIGATION_OPTION_STATE;

ULONG
__stdcall
RtlGetCurrentServiceSessionId(
	void
);

ULONG
__stdcall
RtlGetActiveConsoleId(
	void
);

NTSTATUS
__stdcall
RtlGetTokenNamedObjectPath(
	HANDLE Token,
	PSID Sid,
	PUNICODE_STRING ObjectPath
);

NTSTATUS
__stdcall
RtlGetAppContainerNamedObjectPath(
	HANDLE Token,
	PSID AppContainerSid,
	BOOLEAN RelativePath,
	PUNICODE_STRING ObjectPath
);

NTSTATUS
__stdcall
RtlGetAppContainerParent(
	PSID AppContainerSid,
	PSID* AppContainerSidParent
);

NTSTATUS
__stdcall
RtlCheckSandboxedToken(
	HANDLE TokenHandle,
	PBOOLEAN IsSandboxed
);

NTSTATUS
__stdcall
RtlCheckTokenCapability(
	HANDLE TokenHandle,
	PSID CapabilitySidToCheck,
	PBOOLEAN HasCapability
);

NTSTATUS
__stdcall
RtlCapabilityCheck(
	HANDLE TokenHandle,
	PUNICODE_STRING CapabilityName,
	PBOOLEAN HasCapability
);

NTSTATUS
__stdcall
RtlCheckTokenMembership(
	HANDLE TokenHandle,
	PSID SidToCheck,
	PBOOLEAN IsMember
);

NTSTATUS
__stdcall
RtlCheckTokenMembershipEx(
	HANDLE TokenHandle,
	PSID SidToCheck,
	ULONG Flags,
	PBOOLEAN IsMember
);

NTSTATUS
__stdcall
RtlQueryTokenHostIdAsUlong64(
	HANDLE TokenHandle,
	PULONG64 HostId
);

BOOLEAN
__stdcall
RtlIsParentOfChildAppContainer(
	PSID ParentAppContainerSid,
	PSID ChildAppContainerSid
);

BOOLEAN
__stdcall
RtlIsCapabilitySid(
	PSID Sid
);

BOOLEAN
__stdcall
RtlIsPackageSid(
	PSID Sid
);

BOOLEAN
__stdcall
RtlIsValidProcessTrustLabelSid(
	PSID Sid
);

BOOLEAN
__stdcall
RtlIsStateSeparationEnabled(
	void
);
typedef enum _APPCONTAINER_SID_TYPE
{
	NotAppContainerSidType,
	ChildAppContainerSidType,
	ParentAppContainerSidType,
	InvalidAppContainerSidType,
	MaxAppContainerSidType
} APPCONTAINER_SID_TYPE, * PAPPCONTAINER_SID_TYPE;

NTSTATUS
__stdcall
RtlGetAppContainerSidType(
	PSID AppContainerSid,
	PAPPCONTAINER_SID_TYPE AppContainerSidType
);

NTSTATUS
__stdcall
RtlFlsAlloc(
	PFLS_CALLBACK_FUNCTION Callback,
	PULONG FlsIndex
);

NTSTATUS
__stdcall
RtlFlsFree(
	ULONG FlsIndex
);
typedef enum _STATE_LOCATION_TYPE
{
	LocationTypeRegistry,
	LocationTypeFileSystem,
	LocationTypeMaximum
} STATE_LOCATION_TYPE;

NTSTATUS
__stdcall
RtlGetPersistedStateLocation(
	PCWSTR SourceID,
	PCWSTR CustomValue,
	PCWSTR DefaultPath,
	STATE_LOCATION_TYPE StateLocationType,
	PWCHAR TargetPath,
	ULONG BufferLengthIn,
	PULONG BufferLengthOut
);

BOOLEAN
__stdcall
RtlIsCloudFilesPlaceholder(
	ULONG FileAttributes,
	ULONG ReparseTag
);

BOOLEAN
__stdcall
RtlIsPartialPlaceholder(
	ULONG FileAttributes,
	ULONG ReparseTag
);

NTSTATUS
__stdcall
RtlIsPartialPlaceholderFileHandle(
	HANDLE FileHandle,
	PBOOLEAN IsPartialPlaceholder
);

NTSTATUS
__stdcall
RtlIsPartialPlaceholderFileInfo(
	PVOID InfoBuffer,
	FILE_INFORMATION_CLASS InfoClass,
	PBOOLEAN IsPartialPlaceholder
);

BOOLEAN
__stdcall
RtlIsNonEmptyDirectoryReparsePointAllowed(
	ULONG ReparseTag
);

NTSTATUS
__stdcall
RtlAppxIsFileOwnedByTrustedInstaller(
	HANDLE FileHandle,
	PBOOLEAN IsFileOwnedByTrustedInstaller
);
typedef struct _PS_PKG_CLAIM
{
	ULONGLONG Flags;
	ULONGLONG Origin;
} PS_PKG_CLAIM, * PPS_PKG_CLAIM;

NTSTATUS
__stdcall
RtlQueryPackageClaims(
	HANDLE TokenHandle,
	PWSTR PackageFullName,
	PSIZE_T PackageSize,
	PWSTR AppId,
	PSIZE_T AppIdSize,
	PGUID DynamicId,
	PPS_PKG_CLAIM PkgClaim,
	PULONG64 AttributesPresent
);

NTSTATUS
__stdcall
RtlQueryProtectedPolicy(
	PGUID PolicyGuid,
	PULONG_PTR PolicyValue
);

NTSTATUS
__stdcall
RtlSetProtectedPolicy(
	PGUID PolicyGuid,
	ULONG_PTR PolicyValue,
	PULONG_PTR OldPolicyValue
);
typedef enum _RTL_BSD_ITEM_TYPE
{
	RtlBsdItemVersionNumber,
	RtlBsdItemProductType,
	RtlBsdItemAabEnabled,
	RtlBsdItemAabTimeout,
	RtlBsdItemBootGood,
	RtlBsdItemBootShutdown,
	RtlBsdSleepInProgress,
	RtlBsdPowerTransition,
	RtlBsdItemBootAttemptCount,
	RtlBsdItemBootCheckpoint,
	RtlBsdItemBootId,
	RtlBsdItemShutdownBootId,
	RtlBsdItemReportedAbnormalShutdownBootId,
	RtlBsdItemErrorInfo,
	RtlBsdItemPowerButtonPressInfo,
	RtlBsdItemChecksum,
	RtlBsdPowerTransitionExtension,
	RtlBsdItemFeatureConfigurationState,
	RtlBsdItemMax
} RTL_BSD_ITEM_TYPE;
typedef struct _RTL_BSD_ITEM
{
	RTL_BSD_ITEM_TYPE Type;
	PVOID DataBuffer;
	ULONG DataLength;
} RTL_BSD_ITEM, * PRTL_BSD_ITEM;

NTSTATUS
__stdcall
RtlCreateBootStatusDataFile(
	void
);

NTSTATUS
__stdcall
RtlLockBootStatusData(
	PHANDLE FileHandle
);

NTSTATUS
__stdcall
RtlUnlockBootStatusData(
	HANDLE FileHandle
);

NTSTATUS
__stdcall
RtlGetSetBootStatusData(
	HANDLE FileHandle,
	BOOLEAN Read,
	RTL_BSD_ITEM_TYPE DataClass,
	PVOID Buffer,
	ULONG BufferSize,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
RtlCheckBootStatusIntegrity(
	HANDLE FileHandle,
	PBOOLEAN Verified
);

NTSTATUS
__stdcall
RtlCheckPortableOperatingSystem(
	PBOOLEAN IsPortable
);

NTSTATUS
__stdcall
RtlSetPortableOperatingSystem(
	BOOLEAN IsPortable
);

NTSTATUS
__stdcall
RtlFindClosestEncodableLength(
	ULONGLONG SourceLength,
	PULONGLONG TargetLength
);
typedef NTSTATUS(__stdcall* PRTL_SECURE_MEMORY_CACHE_CALLBACK)(
	PVOID Address,
	SIZE_T Length
	);

NTSTATUS
__stdcall
RtlRegisterSecureMemoryCacheCallback(
	PRTL_SECURE_MEMORY_CACHE_CALLBACK Callback
);

NTSTATUS
__stdcall
RtlDeregisterSecureMemoryCacheCallback(
	PRTL_SECURE_MEMORY_CACHE_CALLBACK Callback
);

BOOLEAN
__stdcall
RtlFlushSecureMemoryCache(
	PVOID MemoryCache,
	SIZE_T MemoryLength
);
typedef struct _TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE
{
	ULONG64 Version;
	UNICODE_STRING Name;
} TOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE, * PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE;
typedef struct _TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE
{
	PVOID pValue;
	ULONG ValueLength;
} TOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE, * PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;
typedef struct _TOKEN_SECURITY_ATTRIBUTE_V1
{
	UNICODE_STRING Name;
	USHORT ValueType;
	USHORT Reserved;
	ULONG Flags;
	ULONG ValueCount;
	union
	{
		PLONG64 pInt64;
		PULONG64 pUint64;
		PUNICODE_STRING pString;
		PTOKEN_SECURITY_ATTRIBUTE_FQBN_VALUE pFqbn;
		PTOKEN_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE pOctetString;
	} Values;
} TOKEN_SECURITY_ATTRIBUTE_V1, * PTOKEN_SECURITY_ATTRIBUTE_V1;
typedef struct _TOKEN_SECURITY_ATTRIBUTES_INFORMATION
{
	USHORT Version;
	USHORT Reserved;
	ULONG AttributeCount;
	union
	{
		PTOKEN_SECURITY_ATTRIBUTE_V1 pAttributeV1;
	} Attribute;
} TOKEN_SECURITY_ATTRIBUTES_INFORMATION, * PTOKEN_SECURITY_ATTRIBUTES_INFORMATION;
typedef struct _TOKEN_PROCESS_TRUST_LEVEL
{
	PSID TrustLevelSid;
} TOKEN_PROCESS_TRUST_LEVEL, * PTOKEN_PROCESS_TRUST_LEVEL;

NTSTATUS
__stdcall
NtCreateToken(
	PHANDLE TokenHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	TOKEN_TYPE TokenType,
	PLUID AuthenticationId,
	PLARGE_INTEGER ExpirationTime,
	PTOKEN_USER User,
	PTOKEN_GROUPS Groups,
	PTOKEN_PRIVILEGES Privileges,
	PTOKEN_OWNER Owner,
	PTOKEN_PRIMARY_GROUP PrimaryGroup,
	PTOKEN_DEFAULT_DACL DefaultDacl,
	PTOKEN_SOURCE TokenSource
);

NTSTATUS
__stdcall
NtOpenProcessToken(
	HANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
NtOpenProcessTokenEx(
	HANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
NtOpenThreadToken(
	HANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	BOOLEAN OpenAsSelf,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
NtOpenThreadTokenEx(
	HANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	BOOLEAN OpenAsSelf,
	ULONG HandleAttributes,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
NtDuplicateToken(
	HANDLE ExistingTokenHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	BOOLEAN EffectiveOnly,
	TOKEN_TYPE TokenType,
	PHANDLE NewTokenHandle
);

NTSTATUS
__stdcall
NtQueryInformationToken(
	HANDLE TokenHandle,
	TOKEN_INFORMATION_CLASS TokenInformationClass,
	PVOID TokenInformation,
	ULONG TokenInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationToken(
	HANDLE TokenHandle,
	TOKEN_INFORMATION_CLASS TokenInformationClass,
	PVOID TokenInformation,
	ULONG TokenInformationLength
);

NTSTATUS
__stdcall
NtAdjustPrivilegesToken(
	HANDLE TokenHandle,
	BOOLEAN DisableAllPrivileges,
	PTOKEN_PRIVILEGES NewState,
	ULONG BufferLength,
	PTOKEN_PRIVILEGES PreviousState,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtAdjustGroupsToken(
	HANDLE TokenHandle,
	BOOLEAN ResetToDefault,
	PTOKEN_GROUPS NewState,
	ULONG BufferLength,
	PTOKEN_GROUPS PreviousState,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtFilterToken(
	HANDLE ExistingTokenHandle,
	ULONG Flags,
	PTOKEN_GROUPS SidsToDisable,
	PTOKEN_PRIVILEGES PrivilegesToDelete,
	PTOKEN_GROUPS RestrictedSids,
	PHANDLE NewTokenHandle
);

NTSTATUS
__stdcall
NtCompareTokens(
	HANDLE FirstTokenHandle,
	HANDLE SecondTokenHandle,
	PBOOLEAN Equal
);

NTSTATUS
__stdcall
NtPrivilegeCheck(
	HANDLE ClientToken,
	PPRIVILEGE_SET RequiredPrivileges,
	PBOOLEAN Result
);

NTSTATUS
__stdcall
NtImpersonateAnonymousToken(
	HANDLE ThreadHandle
);

NTSTATUS
__stdcall
NtQuerySecurityAttributesToken(
	HANDLE TokenHandle,
	PUNICODE_STRING Attributes,
	ULONG NumberOfAttributes,
	PVOID Buffer,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtAccessCheck(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	PULONG PrivilegeSetLength,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus
);

NTSTATUS
__stdcall
NtAccessCheckByType(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	PULONG PrivilegeSetLength,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus
);

NTSTATUS
__stdcall
NtAccessCheckByTypeResultList(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	PULONG PrivilegeSetLength,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus
);

NTSTATUS
__stdcall
NtAccessCheckAndAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	ACCESS_MASK DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtAccessCheckByTypeAndAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	ACCESS_MASK DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	ULONG Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtAccessCheckByTypeResultListAndAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	ACCESS_MASK DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	ULONG Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtAccessCheckByTypeResultListAndAuditAlarmByHandle(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	HANDLE ClientToken,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	ACCESS_MASK DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	ULONG Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtOpenObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	ACCESS_MASK GrantedAccess,
	PPRIVILEGE_SET Privileges,
	BOOLEAN ObjectCreation,
	BOOLEAN AccessGranted,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtPrivilegeObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	PPRIVILEGE_SET Privileges,
	BOOLEAN AccessGranted
);

NTSTATUS
__stdcall
NtCloseObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	BOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtDeleteObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	BOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
NtPrivilegedServiceAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PUNICODE_STRING ServiceName,
	HANDLE ClientToken,
	PPRIVILEGE_SET Privileges,
	BOOLEAN AccessGranted
);

NTSTATUS
__stdcall
NtCreateTransactionManager(
	PHANDLE TmHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PUNICODE_STRING LogFileName,
	ULONG CreateOptions,
	ULONG CommitStrength
);

NTSTATUS
__stdcall
NtOpenTransactionManager(
	PHANDLE TmHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PUNICODE_STRING LogFileName,
	LPGUID TmIdentity,
	ULONG OpenOptions
);

NTSTATUS
__stdcall
NtRenameTransactionManager(
	PUNICODE_STRING LogFileName,
	LPGUID ExistingTransactionManagerGuid
);

NTSTATUS
__stdcall
NtRollforwardTransactionManager(
	HANDLE TransactionManagerHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtRecoverTransactionManager(
	HANDLE TransactionManagerHandle
);

NTSTATUS
__stdcall
NtQueryInformationTransactionManager(
	HANDLE TransactionManagerHandle,
	TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
	PVOID TransactionManagerInformation,
	ULONG TransactionManagerInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationTransactionManager(
	HANDLE TmHandle,
	TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
	PVOID TransactionManagerInformation,
	ULONG TransactionManagerInformationLength
);

NTSTATUS
__stdcall
NtEnumerateTransactionObject(
	HANDLE RootObjectHandle,
	KTMOBJECT_TYPE QueryType,
	PKTMOBJECT_CURSOR ObjectCursor,
	ULONG ObjectCursorLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtCreateTransaction(
	PHANDLE TransactionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	LPGUID Uow,
	HANDLE TmHandle,
	ULONG CreateOptions,
	ULONG IsolationLevel,
	ULONG IsolationFlags,
	PLARGE_INTEGER Timeout,
	PUNICODE_STRING Description
);

NTSTATUS
__stdcall
NtOpenTransaction(
	PHANDLE TransactionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	LPGUID Uow,
	HANDLE TmHandle
);

NTSTATUS
__stdcall
NtQueryInformationTransaction(
	HANDLE TransactionHandle,
	TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
	PVOID TransactionInformation,
	ULONG TransactionInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationTransaction(
	HANDLE TransactionHandle,
	TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
	PVOID TransactionInformation,
	ULONG TransactionInformationLength
);

NTSTATUS
__stdcall
NtCommitTransaction(
	HANDLE TransactionHandle,
	BOOLEAN Wait
);

NTSTATUS
__stdcall
NtRollbackTransaction(
	HANDLE TransactionHandle,
	BOOLEAN Wait
);

NTSTATUS
__stdcall
NtCreateEnlistment(
	PHANDLE EnlistmentHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE ResourceManagerHandle,
	HANDLE TransactionHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG CreateOptions,
	NOTIFICATION_MASK NotificationMask,
	PVOID EnlistmentKey
);

NTSTATUS
__stdcall
NtOpenEnlistment(
	PHANDLE EnlistmentHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE ResourceManagerHandle,
	LPGUID EnlistmentGuid,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtQueryInformationEnlistment(
	HANDLE EnlistmentHandle,
	ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
	PVOID EnlistmentInformation,
	ULONG EnlistmentInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationEnlistment(
	HANDLE EnlistmentHandle,
	ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
	PVOID EnlistmentInformation,
	ULONG EnlistmentInformationLength
);

NTSTATUS
__stdcall
NtRecoverEnlistment(
	HANDLE EnlistmentHandle,
	PVOID EnlistmentKey
);

NTSTATUS
__stdcall
NtPrePrepareEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtPrepareEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtCommitEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtRollbackEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtPrePrepareComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtPrepareComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtCommitComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtReadOnlyEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtRollbackComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtSinglePhaseReject(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
NtCreateResourceManager(
	PHANDLE ResourceManagerHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE TmHandle,
	LPGUID RmGuid,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG CreateOptions,
	PUNICODE_STRING Description
);

NTSTATUS
__stdcall
NtOpenResourceManager(
	PHANDLE ResourceManagerHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE TmHandle,
	LPGUID ResourceManagerGuid,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
NtRecoverResourceManager(
	HANDLE ResourceManagerHandle
);

NTSTATUS
__stdcall
NtGetNotificationResourceManager(
	HANDLE ResourceManagerHandle,
	PTRANSACTION_NOTIFICATION TransactionNotification,
	ULONG NotificationLength,
	PLARGE_INTEGER Timeout,
	PULONG ReturnLength,
	ULONG Asynchronous,
	ULONG_PTR AsynchronousContext
);

NTSTATUS
__stdcall
NtQueryInformationResourceManager(
	HANDLE ResourceManagerHandle,
	RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
	PVOID ResourceManagerInformation,
	ULONG ResourceManagerInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
NtSetInformationResourceManager(
	HANDLE ResourceManagerHandle,
	RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
	PVOID ResourceManagerInformation,
	ULONG ResourceManagerInformationLength
);

NTSTATUS
__stdcall
NtRegisterProtocolAddressInformation(
	HANDLE ResourceManager,
	PCRM_PROTOCOL_ID ProtocolId,
	ULONG ProtocolInformationSize,
	PVOID ProtocolInformation,
	ULONG CreateOptions
);

NTSTATUS
__stdcall
NtPropagationComplete(
	HANDLE ResourceManagerHandle,
	ULONG RequestCookie,
	ULONG BufferLength,
	PVOID Buffer
);

NTSTATUS
__stdcall
NtPropagationFailed(
	HANDLE ResourceManagerHandle,
	ULONG RequestCookie,
	NTSTATUS PropStatus
);

NTSTATUS
__stdcall
NtFreezeTransactions(
	PLARGE_INTEGER FreezeTimeout,
	PLARGE_INTEGER ThawTimeout
);

NTSTATUS
__stdcall
NtThawTransactions(
	void
);
typedef struct _TP_ALPC TP_ALPC, * PTP_ALPC;
typedef void(__stdcall* PTP_ALPC_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID Context,
	PTP_ALPC Alpc
	);
typedef void(__stdcall* PTP_ALPC_CALLBACK_EX)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID Context,
	PTP_ALPC Alpc,
	PVOID ApcContext
	);

NTSTATUS
__stdcall
TpAllocPool(
	PTP_POOL* PoolReturn,
	PVOID Reserved
);

void
__stdcall
TpReleasePool(
	PTP_POOL Pool
);

void
__stdcall
TpSetPoolMaxThreads(
	PTP_POOL Pool,
	ULONG MaxThreads
);

NTSTATUS
__stdcall
TpSetPoolMinThreads(
	PTP_POOL Pool,
	ULONG MinThreads
);

NTSTATUS
__stdcall
TpQueryPoolStackInformation(
	PTP_POOL Pool,
	PTP_POOL_STACK_INFORMATION PoolStackInformation
);

NTSTATUS
__stdcall
TpSetPoolStackInformation(
	PTP_POOL Pool,
	PTP_POOL_STACK_INFORMATION PoolStackInformation
);

NTSTATUS
__stdcall
TpAllocCleanupGroup(
	PTP_CLEANUP_GROUP* CleanupGroupReturn
);

void
__stdcall
TpReleaseCleanupGroup(
	PTP_CLEANUP_GROUP CleanupGroup
);

void
__stdcall
TpReleaseCleanupGroupMembers(
	PTP_CLEANUP_GROUP CleanupGroup,
	LOGICAL CancelPendingCallbacks,
	PVOID CleanupParameter
);

void
__stdcall
TpCallbackSetEventOnCompletion(
	PTP_CALLBACK_INSTANCE Instance,
	HANDLE Event
);

void
__stdcall
TpCallbackReleaseSemaphoreOnCompletion(
	PTP_CALLBACK_INSTANCE Instance,
	HANDLE Semaphore,
	ULONG ReleaseCount
);

void
__stdcall
TpCallbackReleaseMutexOnCompletion(
	PTP_CALLBACK_INSTANCE Instance,
	HANDLE Mutex
);

void
__stdcall
TpCallbackLeaveCriticalSectionOnCompletion(
	PTP_CALLBACK_INSTANCE Instance,
	PRTL_CRITICAL_SECTION CriticalSection
);

void
__stdcall
TpCallbackUnloadDllOnCompletion(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID DllHandle
);

NTSTATUS
__stdcall
TpCallbackMayRunLong(
	PTP_CALLBACK_INSTANCE Instance
);

void
__stdcall
TpDisassociateCallback(
	PTP_CALLBACK_INSTANCE Instance
);

NTSTATUS
__stdcall
TpSimpleTryPost(
	PTP_SIMPLE_CALLBACK Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

NTSTATUS
__stdcall
TpAllocWork(
	PTP_WORK* WorkReturn,
	PTP_WORK_CALLBACK Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
__stdcall
TpReleaseWork(
	PTP_WORK Work
);

void
__stdcall
TpPostWork(
	PTP_WORK Work
);

void
__stdcall
TpWaitForWork(
	PTP_WORK Work,
	LOGICAL CancelPendingCallbacks
);

NTSTATUS
__stdcall
TpAllocTimer(
	PTP_TIMER* Timer,
	PTP_TIMER_CALLBACK Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
__stdcall
TpReleaseTimer(
	PTP_TIMER Timer
);

void
__stdcall
TpSetTimer(
	PTP_TIMER Timer,
	PLARGE_INTEGER DueTime,
	ULONG Period,
	ULONG WindowLength
);

NTSTATUS
__stdcall
TpSetTimerEx(
	PTP_TIMER Timer,
	PLARGE_INTEGER DueTime,
	ULONG Period,
	ULONG WindowLength
);

LOGICAL
__stdcall
TpIsTimerSet(
	PTP_TIMER Timer
);

void
__stdcall
TpWaitForTimer(
	PTP_TIMER Timer,
	LOGICAL CancelPendingCallbacks
);

NTSTATUS
__stdcall
TpAllocWait(
	PTP_WAIT* WaitReturn,
	PTP_WAIT_CALLBACK Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
__stdcall
TpReleaseWait(
	PTP_WAIT Wait
);

void
__stdcall
TpSetWait(
	PTP_WAIT Wait,
	HANDLE Handle,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
TpSetWaitEx(
	PTP_WAIT Wait,
	HANDLE Handle,
	PLARGE_INTEGER Timeout,
	PVOID Reserved
);

void
__stdcall
TpWaitForWait(
	PTP_WAIT Wait,
	LOGICAL CancelPendingCallbacks
);
typedef void(__stdcall* PTP_IO_CALLBACK)(
	PTP_CALLBACK_INSTANCE Instance,
	PVOID Context,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoSB,
	PTP_IO Io
	);

NTSTATUS
__stdcall
TpAllocIoCompletion(
	PTP_IO* IoReturn,
	HANDLE File,
	PTP_IO_CALLBACK Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
__stdcall
TpReleaseIoCompletion(
	PTP_IO Io
);

void
__stdcall
TpStartAsyncIoOperation(
	PTP_IO Io
);

void
__stdcall
TpCancelAsyncIoOperation(
	PTP_IO Io
);

void
__stdcall
TpWaitForIoCompletion(
	PTP_IO Io,
	LOGICAL CancelPendingCallbacks
);

NTSTATUS
__stdcall
TpAllocAlpcCompletion(
	PTP_ALPC* AlpcReturn,
	HANDLE AlpcPort,
	PTP_ALPC_CALLBACK Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

NTSTATUS
__stdcall
TpAllocAlpcCompletionEx(
	PTP_ALPC* AlpcReturn,
	HANDLE AlpcPort,
	PTP_ALPC_CALLBACK_EX Callback,
	PVOID Context,
	PTP_CALLBACK_ENVIRON CallbackEnviron
);

void
__stdcall
TpReleaseAlpcCompletion(
	PTP_ALPC Alpc
);

void
__stdcall
TpWaitForAlpcCompletion(
	PTP_ALPC Alpc
);
typedef enum _TP_TRACE_TYPE
{
	TpTraceThreadPriority = 1,
	TpTraceThreadAffinity,
	MaxTpTraceType
} TP_TRACE_TYPE;

void
__stdcall
TpCaptureCaller(
	TP_TRACE_TYPE Type
);

void
__stdcall
TpCheckTerminateWorker(
	HANDLE Thread
);

BOOLEAN
__stdcall
RtlDispatchException(
	PEXCEPTION_RECORD ExceptionRecord,
	PCONTEXT ContextRecord
);


void
__stdcall
RtlRaiseStatus(
	NTSTATUS Status
);

void
__stdcall
RtlRaiseException(
	PEXCEPTION_RECORD ExceptionRecord
);

NTSTATUS
__stdcall
NtContinue(
	PCONTEXT ContextRecord,
	BOOLEAN TestAlert
);

NTSTATUS
__stdcall
NtRaiseException(
	PEXCEPTION_RECORD ExceptionRecord,
	PCONTEXT ContextRecord,
	BOOLEAN FirstChance
);

void
__stdcall
RtlAssert(
	PVOID VoidFailedAssertion,
	PVOID VoidFileName,
	ULONG LineNumber,
	PSTR MutableMessage
);
typedef UINT32 D3DKMT_HANDLE;
typedef D3DKMT_HANDLE* PD3DKMT_HANDLE;
typedef enum _KMTQUERYADAPTERINFOTYPE
{
	KMTQAITYPE_UMDRIVERPRIVATE,
	KMTQAITYPE_UMDRIVERNAME,
	KMTQAITYPE_UMOPENGLINFO,
	KMTQAITYPE_GETSEGMENTSIZE,
	KMTQAITYPE_ADAPTERGUID,
	KMTQAITYPE_FLIPQUEUEINFO,
	KMTQAITYPE_ADAPTERADDRESS,
	KMTQAITYPE_SETWORKINGSETINFO,
	KMTQAITYPE_ADAPTERREGISTRYINFO,
	KMTQAITYPE_CURRENTDISPLAYMODE,
	KMTQAITYPE_MODELIST,
	KMTQAITYPE_CHECKDRIVERUPDATESTATUS,
	KMTQAITYPE_VIRTUALADDRESSINFO,
	KMTQAITYPE_DRIVERVERSION,
	KMTQAITYPE_UNKNOWN,
	KMTQAITYPE_ADAPTERTYPE,
	KMTQAITYPE_OUTPUTDUPLCONTEXTSCOUNT,
	KMTQAITYPE_WDDM_1_2_CAPS,
	KMTQAITYPE_UMD_DRIVER_VERSION,
	KMTQAITYPE_DIRECTFLIP_SUPPORT,
	KMTQAITYPE_MULTIPLANEOVERLAY_SUPPORT,
	KMTQAITYPE_DLIST_DRIVER_NAME,
	KMTQAITYPE_WDDM_1_3_CAPS,
	KMTQAITYPE_MULTIPLANEOVERLAY_HUD_SUPPORT,
	KMTQAITYPE_WDDM_2_0_CAPS,
	KMTQAITYPE_NODEMETADATA,
	KMTQAITYPE_CPDRIVERNAME,
	KMTQAITYPE_XBOX,
	KMTQAITYPE_INDEPENDENTFLIP_SUPPORT,
	KMTQAITYPE_MIRACASTCOMPANIONDRIVERNAME,
	KMTQAITYPE_PHYSICALADAPTERCOUNT,
	KMTQAITYPE_PHYSICALADAPTERDEVICEIDS,
	KMTQAITYPE_DRIVERCAPS_EXT,
	KMTQAITYPE_QUERY_MIRACAST_DRIVER_TYPE,
	KMTQAITYPE_QUERY_GPUMMU_CAPS,
	KMTQAITYPE_QUERY_MULTIPLANEOVERLAY_DECODE_SUPPORT,
	KMTQAITYPE_QUERY_HW_PROTECTION_TEARDOWN_COUNT,
	KMTQAITYPE_QUERY_ISBADDRIVERFORHWPROTECTIONDISABLED,
	KMTQAITYPE_MULTIPLANEOVERLAY_SECONDARY_SUPPORT,
	KMTQAITYPE_INDEPENDENTFLIP_SECONDARY_SUPPORT,
	KMTQAITYPE_PANELFITTER_SUPPORT,
	KMTQAITYPE_PHYSICALADAPTERPNPKEY,
	KMTQAITYPE_GETSEGMENTGROUPSIZE,
	KMTQAITYPE_MPO3DDI_SUPPORT,
	KMTQAITYPE_HWDRM_SUPPORT,
	KMTQAITYPE_MPOKERNELCAPS_SUPPORT,
	KMTQAITYPE_MULTIPLANEOVERLAY_STRETCH_SUPPORT,
	KMTQAITYPE_GET_DEVICE_VIDPN_OWNERSHIP_INFO,
	KMTQAITYPE_QUERYREGISTRY,
	KMTQAITYPE_KMD_DRIVER_VERSION,
	KMTQAITYPE_BLOCKLIST_KERNEL,
	KMTQAITYPE_BLOCKLIST_RUNTIME,
	KMTQAITYPE_ADAPTERGUID_RENDER,
	KMTQAITYPE_ADAPTERADDRESS_RENDER,
	KMTQAITYPE_ADAPTERREGISTRYINFO_RENDER,
	KMTQAITYPE_CHECKDRIVERUPDATESTATUS_RENDER,
	KMTQAITYPE_DRIVERVERSION_RENDER,
	KMTQAITYPE_ADAPTERTYPE_RENDER,
	KMTQAITYPE_WDDM_1_2_CAPS_RENDER,
	KMTQAITYPE_WDDM_1_3_CAPS_RENDER,
	KMTQAITYPE_QUERY_ADAPTER_UNIQUE_GUID,
	KMTQAITYPE_NODEPERFDATA,
	KMTQAITYPE_ADAPTERPERFDATA,
	KMTQAITYPE_ADAPTERPERFDATA_CAPS,
	KMTQUITYPE_GPUVERSION,
	KMTQAITYPE_DRIVER_DESCRIPTION,
	KMTQAITYPE_DRIVER_DESCRIPTION_RENDER,
	KMTQAITYPE_SCANOUT_CAPS,
	KMTQAITYPE_DISPLAY_UMDRIVERNAME,
	KMTQAITYPE_PARAVIRTUALIZATION_RENDER,
	KMTQAITYPE_SERVICENAME,
	KMTQAITYPE_WDDM_2_7_CAPS,
	KMTQAITYPE_TRACKEDWORKLOAD_SUPPORT
} KMTQUERYADAPTERINFOTYPE;
typedef enum _KMTUMDVERSION
{
	KMTUMDVERSION_DX9,
	KMTUMDVERSION_DX10,
	KMTUMDVERSION_DX11,
	KMTUMDVERSION_DX12,
	NUM_KMTUMDVERSIONS
} KMTUMDVERSION;
typedef struct _D3DKMT_UMDFILENAMEINFO
{
	KMTUMDVERSION Version;
	WCHAR UmdFileName[260];
} D3DKMT_UMDFILENAMEINFO;
typedef struct _D3DKMT_OPENGLINFO
{
	WCHAR UmdOpenGlIcdFileName[260];
	ULONG Version;
	ULONG Flags;
} D3DKMT_OPENGLINFO;
typedef struct _D3DKMT_SEGMENTSIZEINFO
{
	ULONGLONG DedicatedVideoMemorySize;
	ULONGLONG DedicatedSystemMemorySize;
	ULONGLONG SharedSystemMemorySize;
} D3DKMT_SEGMENTSIZEINFO;
typedef struct _D3DKMT_FLIPINFOFLAGS
{
	UINT32 FlipInterval : 1;
	UINT32 Reserved : 31;
} D3DKMT_FLIPINFOFLAGS;
typedef struct _D3DKMT_FLIPQUEUEINFO
{
	UINT32 MaxHardwareFlipQueueLength;
	UINT32 MaxSoftwareFlipQueueLength;
	D3DKMT_FLIPINFOFLAGS FlipFlags;
} D3DKMT_FLIPQUEUEINFO;
typedef struct _D3DKMT_ADAPTERADDRESS
{
	UINT32 BusNumber;
	UINT32 DeviceNumber;
	UINT32 FunctionNumber;
} D3DKMT_ADAPTERADDRESS;
typedef struct _D3DKMT_WORKINGSETFLAGS
{
	UINT32 UseDefault : 1;
	UINT32 Reserved : 31;
} D3DKMT_WORKINGSETFLAGS;
typedef struct _D3DKMT_WORKINGSETINFO
{
	D3DKMT_WORKINGSETFLAGS Flags;
	ULONG MinimumWorkingSetPercentile;
	ULONG MaximumWorkingSetPercentile;
} D3DKMT_WORKINGSETINFO;
typedef struct _D3DKMT_ADAPTERREGISTRYINFO
{
	WCHAR AdapterString[260];
	WCHAR BiosString[260];
	WCHAR DacType[260];
	WCHAR ChipType[260];
} D3DKMT_ADAPTERREGISTRYINFO;
typedef enum _D3DDDIFORMAT
{
	D3DDDIFMT_UNKNOWN = 0,
	D3DDDIFMT_R8G8B8 = 20,
	D3DDDIFMT_A8R8G8B8 = 21,
	D3DDDIFMT_X8R8G8B8 = 22,
	D3DDDIFMT_R5G6B5 = 23,
	D3DDDIFMT_X1R5G5B5 = 24,
	D3DDDIFMT_A1R5G5B5 = 25,
	D3DDDIFMT_A4R4G4B4 = 26,
	D3DDDIFMT_R3G3B2 = 27,
	D3DDDIFMT_A8 = 28,
	D3DDDIFMT_A8R3G3B2 = 29,
	D3DDDIFMT_X4R4G4B4 = 30,
	D3DDDIFMT_A2B10G10R10 = 31,
	D3DDDIFMT_A8B8G8R8 = 32,
	D3DDDIFMT_X8B8G8R8 = 33,
	D3DDDIFMT_G16R16 = 34,
	D3DDDIFMT_A2R10G10B10 = 35,
	D3DDDIFMT_A16B16G16R16 = 36,
	D3DDDIFMT_A8P8 = 40,
	D3DDDIFMT_P8 = 41,
	D3DDDIFMT_L8 = 50,
	D3DDDIFMT_A8L8 = 51,
	D3DDDIFMT_A4L4 = 52,
	D3DDDIFMT_V8U8 = 60,
	D3DDDIFMT_L6V5U5 = 61,
	D3DDDIFMT_X8L8V8U8 = 62,
	D3DDDIFMT_Q8W8V8U8 = 63,
	D3DDDIFMT_V16U16 = 64,
	D3DDDIFMT_W11V11U10 = 65,
	D3DDDIFMT_A2W10V10U10 = 67,
	D3DDDIFMT_UYVY = ((DWORD)(BYTE)('U') | ((DWORD)(BYTE)('Y') << 8) | ((DWORD)(BYTE)('V') << 16) | ((DWORD)(BYTE)('Y') << 24)),
	D3DDDIFMT_R8G8_B8G8 = ((DWORD)(BYTE)('R') | ((DWORD)(BYTE)('G') << 8) | ((DWORD)(BYTE)('B') << 16) | ((DWORD)(BYTE)('G') << 24)),
	D3DDDIFMT_YUY2 = ((DWORD)(BYTE)('Y') | ((DWORD)(BYTE)('U') << 8) | ((DWORD)(BYTE)('Y') << 16) | ((DWORD)(BYTE)('2') << 24)),
	D3DDDIFMT_G8R8_G8B8 = ((DWORD)(BYTE)('G') | ((DWORD)(BYTE)('R') << 8) | ((DWORD)(BYTE)('G') << 16) | ((DWORD)(BYTE)('B') << 24)),
	D3DDDIFMT_DXT1 = ((DWORD)(BYTE)('D') | ((DWORD)(BYTE)('X') << 8) | ((DWORD)(BYTE)('T') << 16) | ((DWORD)(BYTE)('1') << 24)),
	D3DDDIFMT_DXT2 = ((DWORD)(BYTE)('D') | ((DWORD)(BYTE)('X') << 8) | ((DWORD)(BYTE)('T') << 16) | ((DWORD)(BYTE)('2') << 24)),
	D3DDDIFMT_DXT3 = ((DWORD)(BYTE)('D') | ((DWORD)(BYTE)('X') << 8) | ((DWORD)(BYTE)('T') << 16) | ((DWORD)(BYTE)('3') << 24)),
	D3DDDIFMT_DXT4 = ((DWORD)(BYTE)('D') | ((DWORD)(BYTE)('X') << 8) | ((DWORD)(BYTE)('T') << 16) | ((DWORD)(BYTE)('4') << 24)),
	D3DDDIFMT_DXT5 = ((DWORD)(BYTE)('D') | ((DWORD)(BYTE)('X') << 8) | ((DWORD)(BYTE)('T') << 16) | ((DWORD)(BYTE)('5') << 24)),
	D3DDDIFMT_D16_LOCKABLE = 70,
	D3DDDIFMT_D32 = 71,
	D3DDDIFMT_D15S1 = 73,
	D3DDDIFMT_D24S8 = 75,
	D3DDDIFMT_D24X8 = 77,
	D3DDDIFMT_D24X4S4 = 79,
	D3DDDIFMT_D16 = 80,
	D3DDDIFMT_D32F_LOCKABLE = 82,
	D3DDDIFMT_D24FS8 = 83,
	D3DDDIFMT_D32_LOCKABLE = 84,
	D3DDDIFMT_S8_LOCKABLE = 85,
	D3DDDIFMT_S1D15 = 72,
	D3DDDIFMT_S8D24 = 74,
	D3DDDIFMT_X8D24 = 76,
	D3DDDIFMT_X4S4D24 = 78,
	D3DDDIFMT_L16 = 81,
	D3DDDIFMT_G8R8 = 91,
	D3DDDIFMT_R8 = 92,
	D3DDDIFMT_VERTEXDATA = 100,
	D3DDDIFMT_INDEX16 = 101,
	D3DDDIFMT_INDEX32 = 102,
	D3DDDIFMT_Q16W16V16U16 = 110,
	D3DDDIFMT_MULTI2_ARGB8 = ((DWORD)(BYTE)('M') | ((DWORD)(BYTE)('E') << 8) | ((DWORD)(BYTE)('T') << 16) | ((DWORD)(BYTE)('1') << 24)),
	D3DDDIFMT_R16F = 111,
	D3DDDIFMT_G16R16F = 112,
	D3DDDIFMT_A16B16G16R16F = 113,
	D3DDDIFMT_R32F = 114,
	D3DDDIFMT_G32R32F = 115,
	D3DDDIFMT_A32B32G32R32F = 116,
	D3DDDIFMT_CxV8U8 = 117,
	D3DDDIFMT_A1 = 118,
	D3DDDIFMT_A2B10G10R10_XR_BIAS = 119,
	D3DDDIFMT_DXVACOMPBUFFER_BASE = 150,
	D3DDDIFMT_PICTUREPARAMSDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 0,
	D3DDDIFMT_MACROBLOCKDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 1,
	D3DDDIFMT_RESIDUALDIFFERENCEDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 2,
	D3DDDIFMT_DEBLOCKINGDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 3,
	D3DDDIFMT_INVERSEQUANTIZATIONDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 4,
	D3DDDIFMT_SLICECONTROLDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 5,
	D3DDDIFMT_BITSTREAMDATA = D3DDDIFMT_DXVACOMPBUFFER_BASE + 6,
	D3DDDIFMT_MOTIONVECTORBUFFER = D3DDDIFMT_DXVACOMPBUFFER_BASE + 7,
	D3DDDIFMT_FILMGRAINBUFFER = D3DDDIFMT_DXVACOMPBUFFER_BASE + 8,
	D3DDDIFMT_DXVA_RESERVED9 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 9,
	D3DDDIFMT_DXVA_RESERVED10 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 10,
	D3DDDIFMT_DXVA_RESERVED11 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 11,
	D3DDDIFMT_DXVA_RESERVED12 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 12,
	D3DDDIFMT_DXVA_RESERVED13 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 13,
	D3DDDIFMT_DXVA_RESERVED14 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 14,
	D3DDDIFMT_DXVA_RESERVED15 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 15,
	D3DDDIFMT_DXVA_RESERVED16 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 16,
	D3DDDIFMT_DXVA_RESERVED17 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 17,
	D3DDDIFMT_DXVA_RESERVED18 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 18,
	D3DDDIFMT_DXVA_RESERVED19 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 19,
	D3DDDIFMT_DXVA_RESERVED20 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 20,
	D3DDDIFMT_DXVA_RESERVED21 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 21,
	D3DDDIFMT_DXVA_RESERVED22 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 22,
	D3DDDIFMT_DXVA_RESERVED23 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 23,
	D3DDDIFMT_DXVA_RESERVED24 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 24,
	D3DDDIFMT_DXVA_RESERVED25 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 25,
	D3DDDIFMT_DXVA_RESERVED26 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 26,
	D3DDDIFMT_DXVA_RESERVED27 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 27,
	D3DDDIFMT_DXVA_RESERVED28 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 28,
	D3DDDIFMT_DXVA_RESERVED29 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 29,
	D3DDDIFMT_DXVA_RESERVED30 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 30,
	D3DDDIFMT_DXVA_RESERVED31 = D3DDDIFMT_DXVACOMPBUFFER_BASE + 31,
	D3DDDIFMT_DXVACOMPBUFFER_MAX = D3DDDIFMT_DXVA_RESERVED31,
	D3DDDIFMT_BINARYBUFFER = 199,
	D3DDDIFMT_FORCE_UINT = 0x7fffffff
} D3DDDIFORMAT;
typedef struct _D3DDDI_RATIONAL
{
	UINT32 Numerator;
	UINT32 Denominator;
} D3DDDI_RATIONAL;
typedef enum _D3DDDI_VIDEO_SIGNAL_SCANLINE_ORDERING
{
	D3DDDI_VSSLO_UNINITIALIZED = 0,
	D3DDDI_VSSLO_PROGRESSIVE = 1,
	D3DDDI_VSSLO_INTERLACED_UPPERFIELDFIRST = 2,
	D3DDDI_VSSLO_INTERLACED_LOWERFIELDFIRST = 3,
	D3DDDI_VSSLO_OTHER = 255
} D3DDDI_VIDEO_SIGNAL_SCANLINE_ORDERING;
typedef enum _D3DDDI_ROTATION
{
	D3DDDI_ROTATION_IDENTITY = 1,
	D3DDDI_ROTATION_90 = 2,
	D3DDDI_ROTATION_180 = 3,
	D3DDDI_ROTATION_270 = 4
} D3DDDI_ROTATION;
typedef enum _D3DKMDT_MODE_PRUNING_REASON
{
	D3DKMDT_MPR_UNINITIALIZED = 0,
	D3DKMDT_MPR_ALLCAPS = 1,
	D3DKMDT_MPR_DESCRIPTOR_MONITOR_SOURCE_MODE = 2,
	D3DKMDT_MPR_DESCRIPTOR_MONITOR_FREQUENCY_RANGE = 3,
	D3DKMDT_MPR_DESCRIPTOR_OVERRIDE_MONITOR_SOURCE_MODE = 4,
	D3DKMDT_MPR_DESCRIPTOR_OVERRIDE_MONITOR_FREQUENCY_RANGE = 5,
	D3DKMDT_MPR_DEFAULT_PROFILE_MONITOR_SOURCE_MODE = 6,
	D3DKMDT_MPR_DRIVER_RECOMMENDED_MONITOR_SOURCE_MODE = 7,
	D3DKMDT_MPR_MONITOR_FREQUENCY_RANGE_OVERRIDE = 8,
	D3DKMDT_MPR_CLONE_PATH_PRUNED = 9,
	D3DKMDT_MPR_MAXVALID = 10
} D3DKMDT_MODE_PRUNING_REASON;
typedef struct _D3DKMDT_DISPLAYMODE_FLAGS
{
	UINT32 ValidatedAgainstMonitorCaps : 1;
	UINT32 RoundedFakeMode : 1;
	UINT32 : 0;
	D3DKMDT_MODE_PRUNING_REASON ModePruningReason : 4;
	UINT32 Stereo : 1;
	UINT32 AdvancedScanCapable : 1;
	UINT32 PreferredTiming : 1;
	UINT32 PhysicalModeSupported : 1;
	UINT32 Reserved : 24;
} D3DKMDT_DISPLAYMODE_FLAGS;
typedef struct _D3DKMT_DISPLAYMODE
{
	UINT32 Width;
	UINT32 Height;
	D3DDDIFORMAT Format;
	UINT32 IntegerRefreshRate;
	D3DDDI_RATIONAL RefreshRate;
	D3DDDI_VIDEO_SIGNAL_SCANLINE_ORDERING ScanLineOrdering;
	D3DDDI_ROTATION DisplayOrientation;
	UINT32 DisplayFixedOutput;
	D3DKMDT_DISPLAYMODE_FLAGS Flags;
} D3DKMT_DISPLAYMODE;
typedef struct _D3DKMT_CURRENTDISPLAYMODE
{
	UINT32 VidPnSourceId;
	D3DKMT_DISPLAYMODE DisplayMode;
} D3DKMT_CURRENTDISPLAYMODE;
typedef struct _D3DKMT_VIRTUALADDRESSFLAGS
{
	UINT32 VirtualAddressSupported : 1;
	UINT32 Reserved : 31;
} D3DKMT_VIRTUALADDRESSFLAGS;
typedef struct _D3DKMT_VIRTUALADDRESSINFO
{
	D3DKMT_VIRTUALADDRESSFLAGS VirtualAddressFlags;
} D3DKMT_VIRTUALADDRESSINFO;
typedef enum D3DKMT_DRIVERVERSION
{
	KMT_DRIVERVERSION_WDDM_1_0 = 1000,
	KMT_DRIVERVERSION_WDDM_1_1_PRERELEASE = 1102,
	KMT_DRIVERVERSION_WDDM_1_1 = 1105,
	KMT_DRIVERVERSION_WDDM_1_2 = 1200,
	KMT_DRIVERVERSION_WDDM_1_3 = 1300,
	KMT_DRIVERVERSION_WDDM_2_0 = 2000,
	KMT_DRIVERVERSION_WDDM_2_1 = 2100,
	KMT_DRIVERVERSION_WDDM_2_2 = 2200,
	KMT_DRIVERVERSION_WDDM_2_3 = 2300,
	KMT_DRIVERVERSION_WDDM_2_4 = 2400,
	KMT_DRIVERVERSION_WDDM_2_5 = 2500,
	KMT_DRIVERVERSION_WDDM_2_6 = 2600,
	KMT_DRIVERVERSION_WDDM_2_7 = 2700,
	KMT_DRIVERVERSION_WDDM_3_0 = 3000,
} D3DKMT_DRIVERVERSION;
typedef struct _D3DKMT_ADAPTERTYPE
{
	union
	{
		struct
		{
			UINT32 RenderSupported : 1;
			UINT32 DisplaySupported : 1;
			UINT32 SoftwareDevice : 1;
			UINT32 PostDevice : 1;
			UINT32 HybridDiscrete : 1;
			UINT32 HybridIntegrated : 1;
			UINT32 IndirectDisplayDevice : 1;
			UINT32 Paravirtualized : 1;
			UINT32 ACGSupported : 1;
			UINT32 SupportSetTimingsFromVidPn : 1;
			UINT32 Detachable : 1;
			UINT32 ComputeOnly : 1;
			UINT32 Prototype : 1;
			UINT32 Reserved : 19;
		};
		UINT32 Value;
	};
} D3DKMT_ADAPTERTYPE;
typedef struct _D3DKMT_OUTPUTDUPLCONTEXTSCOUNT
{
	UINT32 VidPnSourceId;
	UINT32 OutputDuplicationCount;
} D3DKMT_OUTPUTDUPLCONTEXTSCOUNT;
typedef enum _D3DKMDT_GRAPHICS_PREEMPTION_GRANULARITY
{
	D3DKMDT_GRAPHICS_PREEMPTION_NONE = 0,
	D3DKMDT_GRAPHICS_PREEMPTION_DMA_BUFFER_BOUNDARY = 100,
	D3DKMDT_GRAPHICS_PREEMPTION_PRIMITIVE_BOUNDARY = 200,
	D3DKMDT_GRAPHICS_PREEMPTION_TRIANGLE_BOUNDARY = 300,
	D3DKMDT_GRAPHICS_PREEMPTION_PIXEL_BOUNDARY = 400,
	D3DKMDT_GRAPHICS_PREEMPTION_SHADER_BOUNDARY = 500,
} D3DKMDT_GRAPHICS_PREEMPTION_GRANULARITY;
typedef enum _D3DKMDT_COMPUTE_PREEMPTION_GRANULARITY
{
	D3DKMDT_COMPUTE_PREEMPTION_NONE = 0,
	D3DKMDT_COMPUTE_PREEMPTION_DMA_BUFFER_BOUNDARY = 100,
	D3DKMDT_COMPUTE_PREEMPTION_DISPATCH_BOUNDARY = 200,
	D3DKMDT_COMPUTE_PREEMPTION_THREAD_GROUP_BOUNDARY = 300,
	D3DKMDT_COMPUTE_PREEMPTION_THREAD_BOUNDARY = 400,
	D3DKMDT_COMPUTE_PREEMPTION_SHADER_BOUNDARY = 500,
} D3DKMDT_COMPUTE_PREEMPTION_GRANULARITY;
typedef struct _D3DKMDT_PREEMPTION_CAPS
{
	D3DKMDT_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
	D3DKMDT_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
} D3DKMDT_PREEMPTION_CAPS;
typedef struct _D3DKMT_WDDM_1_2_CAPS
{
	D3DKMDT_PREEMPTION_CAPS PreemptionCaps;
	union
	{
		struct
		{
			UINT32 SupportNonVGA : 1;
			UINT32 SupportSmoothRotation : 1;
			UINT32 SupportPerEngineTDR : 1;
			UINT32 SupportKernelModeCommandBuffer : 1;
			UINT32 SupportCCD : 1;
			UINT32 SupportSoftwareDeviceBitmaps : 1;
			UINT32 SupportGammaRamp : 1;
			UINT32 SupportHWCursor : 1;
			UINT32 SupportHWVSync : 1;
			UINT32 SupportSurpriseRemovalInHibernation : 1;
			UINT32 Reserved : 22;
		};
		UINT32 Value;
	};
} D3DKMT_WDDM_1_2_CAPS;
typedef struct _D3DKMT_UMD_DRIVER_VERSION
{
	LARGE_INTEGER DriverVersion;
} D3DKMT_UMD_DRIVER_VERSION;
typedef struct _D3DKMT_DIRECTFLIP_SUPPORT
{
	BOOL Supported;
} D3DKMT_DIRECTFLIP_SUPPORT;
typedef struct _D3DKMT_MULTIPLANEOVERLAY_SUPPORT
{
	BOOL Supported;
} D3DKMT_MULTIPLANEOVERLAY_SUPPORT;
typedef struct _D3DKMT_DLIST_DRIVER_NAME
{
	WCHAR DListFileName[260];
} D3DKMT_DLIST_DRIVER_NAME;
typedef struct _D3DKMT_WDDM_1_3_CAPS
{
	union
	{
		struct
		{
			UINT32 SupportMiracast : 1;
			UINT32 IsHybridIntegratedGPU : 1;
			UINT32 IsHybridDiscreteGPU : 1;
			UINT32 SupportPowerManagementPStates : 1;
			UINT32 SupportVirtualModes : 1;
			UINT32 SupportCrossAdapterResource : 1;
			UINT32 Reserved : 26;
		};
		UINT32 Value;
	};
} D3DKMT_WDDM_1_3_CAPS;
typedef struct _D3DKMT_MULTIPLANEOVERLAY_HUD_SUPPORT
{
	UINT32 VidPnSourceId;
	BOOL Update;
	BOOL KernelSupported;
	BOOL HudSupported;
} D3DKMT_MULTIPLANEOVERLAY_HUD_SUPPORT;
typedef struct _D3DKMT_WDDM_2_0_CAPS
{
	union
	{
		struct
		{
			UINT32 Support64BitAtomics : 1;
			UINT32 GpuMmuSupported : 1;
			UINT32 IoMmuSupported : 1;
			UINT32 FlipOverwriteSupported : 1;
			UINT32 SupportContextlessPresent : 1;
			UINT32 SupportSurpriseRemoval : 1;
			UINT32 Reserved : 26;
		};
		UINT32 Value;
	};
} D3DKMT_WDDM_2_0_CAPS;
typedef enum _DXGK_ENGINE_TYPE
{
	DXGK_ENGINE_TYPE_OTHER = 0,
	DXGK_ENGINE_TYPE_3D = 1,
	DXGK_ENGINE_TYPE_VIDEO_DECODE = 2,
	DXGK_ENGINE_TYPE_VIDEO_ENCODE = 3,
	DXGK_ENGINE_TYPE_VIDEO_PROCESSING = 4,
	DXGK_ENGINE_TYPE_SCENE_ASSEMBLY = 5,
	DXGK_ENGINE_TYPE_COPY = 6,
	DXGK_ENGINE_TYPE_OVERLAY = 7,
	DXGK_ENGINE_TYPE_CRYPTO,
	DXGK_ENGINE_TYPE_MAX
} DXGK_ENGINE_TYPE;
typedef struct _DXGK_NODEMETADATA_FLAGS
{
	union
	{
		struct
		{
			UINT32 ContextSchedulingSupported : 1;
			UINT32 RingBufferFenceRelease : 1;
			UINT32 SupportTrackedWorkload : 1;
			UINT32 Reserved : 13;
			UINT32 MaxInFlightHwQueueBuffers : 16;
		};
		UINT32 Value;
	};
} DXGK_NODEMETADATA_FLAGS;
typedef struct _DXGK_NODEMETADATA
{
	DXGK_ENGINE_TYPE EngineType;
	WCHAR FriendlyName[32];
	DXGK_NODEMETADATA_FLAGS Flags;
	BOOLEAN GpuMmuSupported;
	BOOLEAN IoMmuSupported;
} DXGK_NODEMETADATA;
typedef DXGK_NODEMETADATA DXGKARG_GETNODEMETADATA;
typedef struct _D3DKMT_NODEMETADATA
{
	UINT32 NodeOrdinalAndAdapterIndex;
	DXGK_NODEMETADATA NodeData;
} D3DKMT_NODEMETADATA;
typedef struct _D3DKMT_CPDRIVERNAME
{
	WCHAR ContentProtectionFileName[260];
} D3DKMT_CPDRIVERNAME;
typedef struct _D3DKMT_XBOX
{
	BOOL IsXBOX;
} D3DKMT_XBOX;
typedef struct _D3DKMT_INDEPENDENTFLIP_SUPPORT
{
	BOOL Supported;
} D3DKMT_INDEPENDENTFLIP_SUPPORT;
typedef struct _D3DKMT_MIRACASTCOMPANIONDRIVERNAME
{
	WCHAR MiracastCompanionDriverName[260];
} D3DKMT_MIRACASTCOMPANIONDRIVERNAME;
typedef struct _D3DKMT_PHYSICAL_ADAPTER_COUNT
{
	UINT32 Count;
} D3DKMT_PHYSICAL_ADAPTER_COUNT;
typedef struct _D3DKMT_DEVICE_IDS
{
	UINT32 VendorID;
	UINT32 DeviceID;
	UINT32 SubVendorID;
	UINT32 SubSystemID;
	UINT32 RevisionID;
	UINT32 BusType;
} D3DKMT_DEVICE_IDS;
typedef struct _D3DKMT_QUERY_DEVICE_IDS
{
	UINT32 PhysicalAdapterIndex;
	D3DKMT_DEVICE_IDS DeviceIds;
} D3DKMT_QUERY_DEVICE_IDS;
typedef struct _D3DKMT_DRIVERCAPS_EXT
{
	union
	{
		struct
		{
			UINT32 VirtualModeSupport : 1;
			UINT32 Reserved : 31;
		};
		UINT32 Value;
	};
} D3DKMT_DRIVERCAPS_EXT;
typedef enum _D3DKMT_MIRACAST_DRIVER_TYPE
{
	D3DKMT_MIRACAST_DRIVER_NOT_SUPPORTED = 0,
	D3DKMT_MIRACAST_DRIVER_IHV = 1,
	D3DKMT_MIRACAST_DRIVER_MS = 2,
} D3DKMT_MIRACAST_DRIVER_TYPE;
typedef struct _D3DKMT_QUERY_MIRACAST_DRIVER_TYPE
{
	D3DKMT_MIRACAST_DRIVER_TYPE MiracastDriverType;
} D3DKMT_QUERY_MIRACAST_DRIVER_TYPE;
typedef struct _D3DKMT_GPUMMU_CAPS
{
	union
	{
		struct
		{
			UINT32 ReadOnlyMemorySupported : 1;
			UINT32 NoExecuteMemorySupported : 1;
			UINT32 CacheCoherentMemorySupported : 1;
			UINT32 Reserved : 29;
		};
		UINT32 Value;
	} Flags;
	UINT32 VirtualAddressBitCount;
} D3DKMT_GPUMMU_CAPS;
typedef struct _D3DKMT_QUERY_GPUMMU_CAPS
{
	UINT32 PhysicalAdapterIndex;
	D3DKMT_GPUMMU_CAPS Caps;
} D3DKMT_QUERY_GPUMMU_CAPS;
typedef struct _D3DKMT_MULTIPLANEOVERLAY_DECODE_SUPPORT
{
	BOOL Supported;
} D3DKMT_MULTIPLANEOVERLAY_DECODE_SUPPORT;
typedef struct _D3DKMT_ISBADDRIVERFORHWPROTECTIONDISABLED
{
	BOOL Disabled;
} D3DKMT_ISBADDRIVERFORHWPROTECTIONDISABLED;
typedef struct _D3DKMT_MULTIPLANEOVERLAY_SECONDARY_SUPPORT
{
	BOOL Supported;
} D3DKMT_MULTIPLANEOVERLAY_SECONDARY_SUPPORT;
typedef struct _D3DKMT_INDEPENDENTFLIP_SECONDARY_SUPPORT
{
	BOOL Supported;
} D3DKMT_INDEPENDENTFLIP_SECONDARY_SUPPORT;
typedef struct _D3DKMT_PANELFITTER_SUPPORT
{
	BOOL Supported;
} D3DKMT_PANELFITTER_SUPPORT;
typedef enum _D3DKMT_PNP_KEY_TYPE
{
	D3DKMT_PNP_KEY_HARDWARE = 1,
	D3DKMT_PNP_KEY_SOFTWARE = 2
} D3DKMT_PNP_KEY_TYPE;
typedef struct _D3DKMT_QUERY_PHYSICAL_ADAPTER_PNP_KEY
{
	UINT32 PhysicalAdapterIndex;
	D3DKMT_PNP_KEY_TYPE PnPKeyType;
	WCHAR* pDest;
	UINT32* pCchDest;
} D3DKMT_QUERY_PHYSICAL_ADAPTER_PNP_KEY;
typedef struct _D3DKMT_SEGMENTGROUPSIZEINFO
{
	UINT32 PhysicalAdapterIndex;
	D3DKMT_SEGMENTSIZEINFO LegacyInfo;
	ULONGLONG LocalMemory;
	ULONGLONG NonLocalMemory;
	ULONGLONG NonBudgetMemory;
} D3DKMT_SEGMENTGROUPSIZEINFO;
typedef struct _D3DKMT_MPO3DDI_SUPPORT
{
	BOOL Supported;
} D3DKMT_MPO3DDI_SUPPORT;
typedef struct _D3DKMT_HWDRM_SUPPORT
{
	BOOLEAN Supported;
} D3DKMT_HWDRM_SUPPORT;
typedef struct _D3DKMT_MPOKERNELCAPS_SUPPORT
{
	BOOL Supported;
} D3DKMT_MPOKERNELCAPS_SUPPORT;
typedef struct _D3DKMT_MULTIPLANEOVERLAY_STRETCH_SUPPORT
{
	UINT32 VidPnSourceId;
	BOOL Update;
	BOOL Supported;
} D3DKMT_MULTIPLANEOVERLAY_STRETCH_SUPPORT;
typedef struct _D3DKMT_GET_DEVICE_VIDPN_OWNERSHIP_INFO
{
	D3DKMT_HANDLE hDevice;
	BOOLEAN bFailedDwmAcquireVidPn;
} D3DKMT_GET_DEVICE_VIDPN_OWNERSHIP_INFO;
typedef struct _D3DDDI_QUERYREGISTRY_FLAGS
{
	union
	{
		struct
		{
			UINT32 TranslatePath : 1;
			UINT32 MutableValue : 1;
			UINT32 Reserved : 30;
		};
		UINT32 Value;
	};
} D3DDDI_QUERYREGISTRY_FLAGS;
typedef enum _D3DDDI_QUERYREGISTRY_TYPE
{
	D3DDDI_QUERYREGISTRY_SERVICEKEY = 0,
	D3DDDI_QUERYREGISTRY_ADAPTERKEY = 1,
	D3DDDI_QUERYREGISTRY_DRIVERSTOREPATH = 2,
	D3DDDI_QUERYREGISTRY_DRIVERIMAGEPATH = 3,
	D3DDDI_QUERYREGISTRY_MAX,
} D3DDDI_QUERYREGISTRY_TYPE;
typedef enum _D3DDDI_QUERYREGISTRY_STATUS
{
	D3DDDI_QUERYREGISTRY_STATUS_SUCCESS = 0,
	D3DDDI_QUERYREGISTRY_STATUS_BUFFER_OVERFLOW = 1,
	D3DDDI_QUERYREGISTRY_STATUS_FAIL = 2,
	D3DDDI_QUERYREGISTRY_STATUS_MAX,
} D3DDDI_QUERYREGISTRY_STATUS;
typedef struct _D3DDDI_QUERYREGISTRY_INFO
{
	D3DDDI_QUERYREGISTRY_TYPE QueryType;
	D3DDDI_QUERYREGISTRY_FLAGS QueryFlags;
	WCHAR ValueName[260];
	ULONG ValueType;
	ULONG PhysicalAdapterIndex;
	ULONG OutputValueSize;
	D3DDDI_QUERYREGISTRY_STATUS Status;
	union
	{
		ULONG OutputDword;
		UINT64 OutputQword;
		WCHAR OutputString[1];
		BYTE OutputBinary[1];
	};
} D3DDDI_QUERYREGISTRY_INFO;
typedef struct _D3DKMT_KMD_DRIVER_VERSION
{
	LARGE_INTEGER DriverVersion;
} D3DKMT_KMD_DRIVER_VERSION;
typedef struct _D3DKMT_BLOCKLIST_INFO
{
	UINT32 Size;
	WCHAR BlockList[1];
} D3DKMT_BLOCKLIST_INFO;
typedef struct _D3DKMT_QUERY_ADAPTER_UNIQUE_GUID
{
	WCHAR AdapterUniqueGUID[40];
} D3DKMT_QUERY_ADAPTER_UNIQUE_GUID;
typedef struct _D3DKMT_NODE_PERFDATA
{
	UINT32 NodeOrdinal;
	UINT32 PhysicalAdapterIndex;
	ULONGLONG Frequency;
	ULONGLONG MaxFrequency;
	ULONGLONG MaxFrequencyOC;
	ULONG Voltage;
	ULONG VoltageMax;
	ULONG VoltageMaxOC;
	ULONGLONG MaxTransitionLatency;
} D3DKMT_NODE_PERFDATA;
typedef struct _D3DKMT_ADAPTER_PERFDATA
{
	UINT32 PhysicalAdapterIndex;
	ULONGLONG MemoryFrequency;
	ULONGLONG MaxMemoryFrequency;
	ULONGLONG MaxMemoryFrequencyOC;
	ULONGLONG MemoryBandwidth;
	ULONGLONG PCIEBandwidth;
	ULONG FanRPM;
	ULONG Power;
	ULONG Temperature;
	UCHAR PowerStateOverride;
} D3DKMT_ADAPTER_PERFDATA;
typedef struct _D3DKMT_ADAPTER_PERFDATACAPS
{
	UINT32 PhysicalAdapterIndex;
	ULONGLONG MaxMemoryBandwidth;
	ULONGLONG MaxPCIEBandwidth;
	ULONG MaxFanRPM;
	ULONG TemperatureMax;
	ULONG TemperatureWarning;
} D3DKMT_ADAPTER_PERFDATACAPS;
typedef struct _D3DKMT_GPUVERSION
{
	UINT32 PhysicalAdapterIndex;
	WCHAR BiosVersion[32];
	WCHAR GpuArchitecture[32];
} D3DKMT_GPUVERSION;
typedef struct _D3DKMT_DRIVER_DESCRIPTION
{
	WCHAR DriverDescription[4096];
} D3DKMT_DRIVER_DESCRIPTION;
typedef struct _D3DKMT_QUERY_SCANOUT_CAPS
{
	ULONG VidPnSourceId;
	UINT Caps;
} D3DKMT_QUERY_SCANOUT_CAPS;
typedef struct _D3DKMT_WDDM_2_7_CAPS
{
	union
	{
		struct
		{
			UINT32 HwSchSupported : 1;
			UINT32 HwSchEnabled : 1;
			UINT32 HwSchEnabledByDefault : 1;
			UINT32 ReseIndependentVidPnVSyncControlrved : 1;
			UINT32 Reserved : 28;
		};
		UINT32 Value;
	};
} D3DKMT_WDDM_2_7_CAPS;
typedef struct _D3DKMT_OPENADAPTERFROMDEVICENAME
{
	PWSTR DeviceName;
	D3DKMT_HANDLE AdapterHandle;
	LUID AdapterLuid;
} D3DKMT_OPENADAPTERFROMDEVICENAME;
typedef struct _D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME
{
	WCHAR DeviceName[32];
	D3DKMT_HANDLE AdapterHandle;
	LUID AdapterLuid;
	ULONG VidPnSourceId;
} D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME;
typedef struct _D3DKMT_OPENADAPTERFROMHDC
{
	HDC hDc;
	D3DKMT_HANDLE AdapterHandle;
	LUID AdapterLuid;
	ULONG VidPnSourceId;
} D3DKMT_OPENADAPTERFROMHDC;
typedef struct _D3DKMT_OPENADAPTERFROMLUID
{
	LUID AdapterLuid;
	D3DKMT_HANDLE AdapterHandle;
} D3DKMT_OPENADAPTERFROMLUID;
typedef struct _D3DKMT_ADAPTERINFO
{
	D3DKMT_HANDLE AdapterHandle;
	LUID AdapterLuid;
	ULONG NumOfSources;
	BOOL bPresentMoveRegionsPreferred;
} D3DKMT_ADAPTERINFO;
typedef struct _D3DKMT_ENUMADAPTERS
{
	ULONG NumAdapters;
	D3DKMT_ADAPTERINFO Adapters[16];
} D3DKMT_ENUMADAPTERS;
typedef struct _D3DKMT_ENUMADAPTERS2
{
	ULONG NumAdapters;
	D3DKMT_ADAPTERINFO* Adapters;
} D3DKMT_ENUMADAPTERS2;
typedef union _D3DKMT_ENUMADAPTERS_FILTER
{
	ULONG64 IncludeComputeOnly : 1;
	ULONG64 IncludeDisplayOnly : 1;
	ULONG64 Reserved : 62;
} D3DKMT_ENUMADAPTERS_FILTER;
typedef struct _D3DKMT_ENUMADAPTERS3
{
	D3DKMT_ENUMADAPTERS_FILTER Filter;
	ULONG NumAdapters;
	D3DKMT_ADAPTERINFO* Adapters;
} D3DKMT_ENUMADAPTERS3;
typedef struct _D3DKMT_CLOSEADAPTER
{
	D3DKMT_HANDLE AdapterHandle;
} D3DKMT_CLOSEADAPTER;
typedef struct _D3DKMT_QUERYADAPTERINFO
{
	D3DKMT_HANDLE AdapterHandle;
	KMTQUERYADAPTERINFOTYPE Type;
	PVOID PrivateDriverData;
	UINT32 PrivateDriverDataSize;
} D3DKMT_QUERYADAPTERINFO;
typedef enum _D3DKMT_QUERYRESULT_PREEMPTION_ATTEMPT_RESULT
{
	D3DKMT_PreemptionAttempt = 0,
	D3DKMT_PreemptionAttemptSuccess = 1,
	D3DKMT_PreemptionAttemptMissNoCommand = 2,
	D3DKMT_PreemptionAttemptMissNotEnabled = 3,
	D3DKMT_PreemptionAttemptMissNextFence = 4,
	D3DKMT_PreemptionAttemptMissPagingCommand = 5,
	D3DKMT_PreemptionAttemptMissSplittedCommand = 6,
	D3DKMT_PreemptionAttemptMissFenceCommand = 7,
	D3DKMT_PreemptionAttemptMissRenderPendingFlip = 8,
	D3DKMT_PreemptionAttemptMissNotMakingProgress = 9,
	D3DKMT_PreemptionAttemptMissLessPriority = 10,
	D3DKMT_PreemptionAttemptMissRemainingQuantum = 11,
	D3DKMT_PreemptionAttemptMissRemainingPreemptionQuantum = 12,
	D3DKMT_PreemptionAttemptMissAlreadyPreempting = 13,
	D3DKMT_PreemptionAttemptMissGlobalBlock = 14,
	D3DKMT_PreemptionAttemptMissAlreadyRunning = 15,
	D3DKMT_PreemptionAttemptStatisticsMax
} D3DKMT_QUERYRESULT_PREEMPTION_ATTEMPT_RESULT;
typedef enum _D3DKMT_QUERYSTATISTICS_DMA_PACKET_TYPE
{
	D3DKMT_ClientRenderBuffer = 0,
	D3DKMT_ClientPagingBuffer = 1,
	D3DKMT_SystemPagingBuffer = 2,
	D3DKMT_SystemPreemptionBuffer = 3,
	D3DKMT_DmaPacketTypeMax
} D3DKMT_QUERYSTATISTICS_DMA_PACKET_TYPE;
typedef enum _D3DKMT_QUERYSTATISTICS_QUEUE_PACKET_TYPE
{
	D3DKMT_RenderCommandBuffer = 0,
	D3DKMT_DeferredCommandBuffer = 1,
	D3DKMT_SystemCommandBuffer = 2,
	D3DKMT_MmIoFlipCommandBuffer = 3,
	D3DKMT_WaitCommandBuffer = 4,
	D3DKMT_SignalCommandBuffer = 5,
	D3DKMT_DeviceCommandBuffer = 6,
	D3DKMT_SoftwareCommandBuffer = 7,
	D3DKMT_QueuePacketTypeMax
} D3DKMT_QUERYSTATISTICS_QUEUE_PACKET_TYPE;
typedef enum _D3DKMT_QUERYSTATISTICS_ALLOCATION_PRIORITY_CLASS
{
	D3DKMT_AllocationPriorityClassMinimum = 0,
	D3DKMT_AllocationPriorityClassLow = 1,
	D3DKMT_AllocationPriorityClassNormal = 2,
	D3DKMT_AllocationPriorityClassHigh = 3,
	D3DKMT_AllocationPriorityClassMaximum = 4,
	D3DKMT_MaxAllocationPriorityClass
} D3DKMT_QUERYSTATISTICS_ALLOCATION_PRIORITY_CLASS;
typedef struct _D3DKMT_QUERYSTATISTICS_COUNTER
{
	ULONG Count;
	ULONGLONG Bytes;
} D3DKMT_QUERYSTATISTICS_COUNTER;
typedef struct _D3DKMT_QUERYSTATISTICS_DMA_PACKET_TYPE_INFORMATION
{
	ULONG PacketSubmited;
	ULONG PacketCompleted;
	ULONG PacketPreempted;
	ULONG PacketFaulted;
} D3DKMT_QUERYSTATISTICS_DMA_PACKET_TYPE_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_QUEUE_PACKET_TYPE_INFORMATION
{
	ULONG PacketSubmited;
	ULONG PacketCompleted;
} D3DKMT_QUERYSTATISTICS_QUEUE_PACKET_TYPE_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_PACKET_INFORMATION
{
	D3DKMT_QUERYSTATISTICS_QUEUE_PACKET_TYPE_INFORMATION QueuePacket[D3DKMT_QueuePacketTypeMax];
	D3DKMT_QUERYSTATISTICS_DMA_PACKET_TYPE_INFORMATION DmaPacket[D3DKMT_DmaPacketTypeMax];
} D3DKMT_QUERYSTATISTICS_PACKET_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_PREEMPTION_INFORMATION
{
	ULONG PreemptionCounter[D3DKMT_PreemptionAttemptStatisticsMax];
} D3DKMT_QUERYSTATISTICS_PREEMPTION_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_PROCESS_NODE_INFORMATION
{
	LARGE_INTEGER RunningTime;
	ULONG ContextSwitch;
	D3DKMT_QUERYSTATISTICS_PREEMPTION_INFORMATION PreemptionStatistics;
	D3DKMT_QUERYSTATISTICS_PACKET_INFORMATION PacketStatistics;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_PROCESS_NODE_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_NODE_INFORMATION
{
	D3DKMT_QUERYSTATISTICS_PROCESS_NODE_INFORMATION GlobalInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_NODE_INFORMATION SystemInformation;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_NODE_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_PROCESS_VIDPNSOURCE_INFORMATION
{
	ULONG Frame;
	ULONG CancelledFrame;
	ULONG QueuedPresent;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_PROCESS_VIDPNSOURCE_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_VIDPNSOURCE_INFORMATION
{
	D3DKMT_QUERYSTATISTICS_PROCESS_VIDPNSOURCE_INFORMATION GlobalInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_VIDPNSOURCE_INFORMATION SystemInformation;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_VIDPNSOURCE_INFORMATION;
typedef struct _D3DKMT_QUERYSTATSTICS_REFERENCE_DMA_BUFFER
{
	ULONG NbCall;
	ULONG NbAllocationsReferenced;
	ULONG MaxNbAllocationsReferenced;
	ULONG NbNULLReference;
	ULONG NbWriteReference;
	ULONG NbRenamedAllocationsReferenced;
	ULONG NbIterationSearchingRenamedAllocation;
	ULONG NbLockedAllocationReferenced;
	ULONG NbAllocationWithValidPrepatchingInfoReferenced;
	ULONG NbAllocationWithInvalidPrepatchingInfoReferenced;
	ULONG NbDMABufferSuccessfullyPrePatched;
	ULONG NbPrimariesReferencesOverflow;
	ULONG NbAllocationWithNonPreferredResources;
	ULONG NbAllocationInsertedInMigrationTable;
} D3DKMT_QUERYSTATSTICS_REFERENCE_DMA_BUFFER;
typedef struct _D3DKMT_QUERYSTATSTICS_RENAMING
{
	ULONG NbAllocationsRenamed;
	ULONG NbAllocationsShrinked;
	ULONG NbRenamedBuffer;
	ULONG MaxRenamingListLength;
	ULONG NbFailuresDueToRenamingLimit;
	ULONG NbFailuresDueToCreateAllocation;
	ULONG NbFailuresDueToOpenAllocation;
	ULONG NbFailuresDueToLowResource;
	ULONG NbFailuresDueToNonRetiredLimit;
} D3DKMT_QUERYSTATSTICS_RENAMING;
typedef struct _D3DKMT_QUERYSTATSTICS_PREPRATION
{
	ULONG BroadcastStall;
	ULONG NbDMAPrepared;
	ULONG NbDMAPreparedLongPath;
	ULONG ImmediateHighestPreparationPass;
	D3DKMT_QUERYSTATISTICS_COUNTER AllocationsTrimmed;
} D3DKMT_QUERYSTATSTICS_PREPRATION;
typedef struct _D3DKMT_QUERYSTATSTICS_PAGING_FAULT
{
	D3DKMT_QUERYSTATISTICS_COUNTER Faults;
	D3DKMT_QUERYSTATISTICS_COUNTER FaultsFirstTimeAccess;
	D3DKMT_QUERYSTATISTICS_COUNTER FaultsReclaimed;
	D3DKMT_QUERYSTATISTICS_COUNTER FaultsMigration;
	D3DKMT_QUERYSTATISTICS_COUNTER FaultsIncorrectResource;
	D3DKMT_QUERYSTATISTICS_COUNTER FaultsLostContent;
	D3DKMT_QUERYSTATISTICS_COUNTER FaultsEvicted;
	D3DKMT_QUERYSTATISTICS_COUNTER AllocationsMEM_RESET;
	D3DKMT_QUERYSTATISTICS_COUNTER AllocationsUnresetSuccess;
	D3DKMT_QUERYSTATISTICS_COUNTER AllocationsUnresetFail;
	ULONG AllocationsUnresetSuccessRead;
	ULONG AllocationsUnresetFailRead;
	D3DKMT_QUERYSTATISTICS_COUNTER Evictions;
	D3DKMT_QUERYSTATISTICS_COUNTER EvictionsDueToPreparation;
	D3DKMT_QUERYSTATISTICS_COUNTER EvictionsDueToLock;
	D3DKMT_QUERYSTATISTICS_COUNTER EvictionsDueToClose;
	D3DKMT_QUERYSTATISTICS_COUNTER EvictionsDueToPurge;
	D3DKMT_QUERYSTATISTICS_COUNTER EvictionsDueToSuspendCPUAccess;
} D3DKMT_QUERYSTATSTICS_PAGING_FAULT;
typedef struct _D3DKMT_QUERYSTATSTICS_PAGING_TRANSFER
{
	ULONGLONG BytesFilled;
	ULONGLONG BytesDiscarded;
	ULONGLONG BytesMappedIntoAperture;
	ULONGLONG BytesUnmappedFromAperture;
	ULONGLONG BytesTransferredFromMdlToMemory;
	ULONGLONG BytesTransferredFromMemoryToMdl;
	ULONGLONG BytesTransferredFromApertureToMemory;
	ULONGLONG BytesTransferredFromMemoryToAperture;
} D3DKMT_QUERYSTATSTICS_PAGING_TRANSFER;
typedef struct _D3DKMT_QUERYSTATSTICS_SWIZZLING_RANGE
{
	ULONG NbRangesAcquired;
	ULONG NbRangesReleased;
} D3DKMT_QUERYSTATSTICS_SWIZZLING_RANGE;
typedef struct _D3DKMT_QUERYSTATSTICS_LOCKS
{
	ULONG NbLocks;
	ULONG NbLocksWaitFlag;
	ULONG NbLocksDiscardFlag;
	ULONG NbLocksNoOverwrite;
	ULONG NbLocksNoReadSync;
	ULONG NbLocksLinearization;
	ULONG NbComplexLocks;
} D3DKMT_QUERYSTATSTICS_LOCKS;
typedef struct _D3DKMT_QUERYSTATSTICS_ALLOCATIONS
{
	D3DKMT_QUERYSTATISTICS_COUNTER Created;
	D3DKMT_QUERYSTATISTICS_COUNTER Destroyed;
	D3DKMT_QUERYSTATISTICS_COUNTER Opened;
	D3DKMT_QUERYSTATISTICS_COUNTER Closed;
	D3DKMT_QUERYSTATISTICS_COUNTER MigratedSuccess;
	D3DKMT_QUERYSTATISTICS_COUNTER MigratedFail;
	D3DKMT_QUERYSTATISTICS_COUNTER MigratedAbandoned;
} D3DKMT_QUERYSTATSTICS_ALLOCATIONS;
typedef struct _D3DKMT_QUERYSTATSTICS_TERMINATIONS
{
	D3DKMT_QUERYSTATISTICS_COUNTER TerminatedShared;
	D3DKMT_QUERYSTATISTICS_COUNTER TerminatedNonShared;
	D3DKMT_QUERYSTATISTICS_COUNTER DestroyedShared;
	D3DKMT_QUERYSTATISTICS_COUNTER DestroyedNonShared;
} D3DKMT_QUERYSTATSTICS_TERMINATIONS;
typedef struct _D3DKMT_QUERYSTATISTICS_ADAPTER_INFORMATION
{
	ULONG NbSegments;
	ULONG NodeCount;
	ULONG VidPnSourceCount;
	ULONG VSyncEnabled;
	ULONG TdrDetectedCount;
	LONGLONG ZeroLengthDmaBuffers;
	ULONGLONG RestartedPeriod;
	D3DKMT_QUERYSTATSTICS_REFERENCE_DMA_BUFFER ReferenceDmaBuffer;
	D3DKMT_QUERYSTATSTICS_RENAMING Renaming;
	D3DKMT_QUERYSTATSTICS_PREPRATION Preparation;
	D3DKMT_QUERYSTATSTICS_PAGING_FAULT PagingFault;
	D3DKMT_QUERYSTATSTICS_PAGING_TRANSFER PagingTransfer;
	D3DKMT_QUERYSTATSTICS_SWIZZLING_RANGE SwizzlingRange;
	D3DKMT_QUERYSTATSTICS_LOCKS Locks;
	D3DKMT_QUERYSTATSTICS_ALLOCATIONS Allocations;
	D3DKMT_QUERYSTATSTICS_TERMINATIONS Terminations;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_ADAPTER_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_SYSTEM_MEMORY
{
	ULONGLONG BytesAllocated;
	ULONGLONG BytesReserved;
	ULONG SmallAllocationBlocks;
	ULONG LargeAllocationBlocks;
	ULONGLONG WriteCombinedBytesAllocated;
	ULONGLONG WriteCombinedBytesReserved;
	ULONGLONG CachedBytesAllocated;
	ULONGLONG CachedBytesReserved;
	ULONGLONG SectionBytesAllocated;
	ULONGLONG SectionBytesReserved;
} D3DKMT_QUERYSTATISTICS_SYSTEM_MEMORY;
typedef struct _D3DKMT_QUERYSTATISTICS_PROCESS_INFORMATION
{
	ULONG NodeCount;
	ULONG VidPnSourceCount;
	D3DKMT_QUERYSTATISTICS_SYSTEM_MEMORY SystemMemory;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_PROCESS_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_DMA_BUFFER
{
	D3DKMT_QUERYSTATISTICS_COUNTER Size;
	ULONG AllocationListBytes;
	ULONG PatchLocationListBytes;
} D3DKMT_QUERYSTATISTICS_DMA_BUFFER;
typedef struct _D3DKMT_QUERYSTATISTICS_COMMITMENT_DATA
{
	ULONG64 TotalBytesEvictedFromProcess;
	ULONG64 BytesBySegmentPreference[5];
} D3DKMT_QUERYSTATISTICS_COMMITMENT_DATA;
typedef struct _D3DKMT_QUERYSTATISTICS_POLICY
{
	ULONGLONG PreferApertureForRead[D3DKMT_MaxAllocationPriorityClass];
	ULONGLONG PreferAperture[D3DKMT_MaxAllocationPriorityClass];
	ULONGLONG MemResetOnPaging;
	ULONGLONG RemovePagesFromWorkingSetOnPaging;
	ULONGLONG MigrationEnabled;
} D3DKMT_QUERYSTATISTICS_POLICY;
typedef struct _D3DKMT_QUERYSTATISTICS_PROCESS_ADAPTER_INFORMATION
{
	ULONG NbSegments;
	ULONG NodeCount;
	ULONG VidPnSourceCount;
	ULONG VirtualMemoryUsage;
	D3DKMT_QUERYSTATISTICS_DMA_BUFFER DmaBuffer;
	D3DKMT_QUERYSTATISTICS_COMMITMENT_DATA CommitmentData;
	D3DKMT_QUERYSTATISTICS_POLICY _Policy;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_PROCESS_ADAPTER_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_MEMORY
{
	ULONGLONG TotalBytesEvicted;
	ULONG AllocsCommitted;
	ULONG AllocsResident;
} D3DKMT_QUERYSTATISTICS_MEMORY;
typedef struct _D3DKMT_QUERYSTATISTICS_SEGMENT_INFORMATION_V1
{
	ULONG CommitLimit;
	ULONG BytesCommitted;
	ULONG BytesResident;
	D3DKMT_QUERYSTATISTICS_MEMORY Memory;
	ULONG Aperture;
	ULONGLONG TotalBytesEvictedByPriority[D3DKMT_MaxAllocationPriorityClass];
	ULONG64 SystemMemoryEndAddress;
	struct
	{
		ULONG64 PreservedDuringStandby : 1;
		ULONG64 PreservedDuringHibernate : 1;
		ULONG64 PartiallyPreservedDuringHibernate : 1;
		ULONG64 Reserved : 61;
	} PowerFlags;
	ULONG64 Reserved[7];
} D3DKMT_QUERYSTATISTICS_SEGMENT_INFORMATION_V1;
typedef struct _D3DKMT_QUERYSTATISTICS_SEGMENT_INFORMATION
{
	ULONGLONG CommitLimit;
	ULONGLONG BytesCommitted;
	ULONGLONG BytesResident;
	D3DKMT_QUERYSTATISTICS_MEMORY Memory;
	ULONG Aperture;
	ULONGLONG TotalBytesEvictedByPriority[D3DKMT_MaxAllocationPriorityClass];
	ULONG64 SystemMemoryEndAddress;
	struct
	{
		ULONG64 PreservedDuringStandby : 1;
		ULONG64 PreservedDuringHibernate : 1;
		ULONG64 PartiallyPreservedDuringHibernate : 1;
		ULONG64 Reserved : 61;
	} PowerFlags;
	ULONG64 Reserved[6];
} D3DKMT_QUERYSTATISTICS_SEGMENT_INFORMATION;
typedef struct _D3DKMT_QUERYSTATISTICS_VIDEO_MEMORY
{
	ULONG AllocsCommitted;
	D3DKMT_QUERYSTATISTICS_COUNTER AllocsResidentInP[5];
	D3DKMT_QUERYSTATISTICS_COUNTER AllocsResidentInNonPreferred;
	ULONGLONG TotalBytesEvictedDueToPreparation;
} D3DKMT_QUERYSTATISTICS_VIDEO_MEMORY;
typedef struct _D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_POLICY
{
	ULONGLONG UseMRU;
} D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_POLICY;
typedef struct _D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_INFORMATION
{
	ULONGLONG BytesCommitted;
	ULONGLONG MaximumWorkingSet;
	ULONGLONG MinimumWorkingSet;
	ULONG NbReferencedAllocationEvictedInPeriod;
	D3DKMT_QUERYSTATISTICS_VIDEO_MEMORY VideoMemory;
	D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_POLICY _Policy;
	ULONG64 Reserved[8];
} D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_INFORMATION;
typedef enum _D3DKMT_QUERYSTATISTICS_TYPE
{
	D3DKMT_QUERYSTATISTICS_ADAPTER,
	D3DKMT_QUERYSTATISTICS_PROCESS,
	D3DKMT_QUERYSTATISTICS_PROCESS_ADAPTER,
	D3DKMT_QUERYSTATISTICS_SEGMENT,
	D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT,
	D3DKMT_QUERYSTATISTICS_NODE,
	D3DKMT_QUERYSTATISTICS_PROCESS_NODE,
	D3DKMT_QUERYSTATISTICS_VIDPNSOURCE,
	D3DKMT_QUERYSTATISTICS_PROCESS_VIDPNSOURCE,
	D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_GROUP,
	D3DKMT_QUERYSTATISTICS_PHYSICAL_ADAPTER
} D3DKMT_QUERYSTATISTICS_TYPE;
typedef struct _D3DKMT_QUERYSTATISTICS_QUERY_SEGMENT
{
	ULONG SegmentId;
} D3DKMT_QUERYSTATISTICS_QUERY_SEGMENT;
typedef struct _D3DKMT_QUERYSTATISTICS_QUERY_NODE
{
	ULONG NodeId;
} D3DKMT_QUERYSTATISTICS_QUERY_NODE;
typedef struct _D3DKMT_QUERYSTATISTICS_QUERY_VIDPNSOURCE
{
	ULONG VidPnSourceId;
} D3DKMT_QUERYSTATISTICS_QUERY_VIDPNSOURCE;
typedef union _D3DKMT_QUERYSTATISTICS_RESULT
{
	D3DKMT_QUERYSTATISTICS_ADAPTER_INFORMATION AdapterInformation;
	D3DKMT_QUERYSTATISTICS_SEGMENT_INFORMATION_V1 SegmentInformationV1;
	D3DKMT_QUERYSTATISTICS_SEGMENT_INFORMATION SegmentInformation;
	D3DKMT_QUERYSTATISTICS_NODE_INFORMATION NodeInformation;
	D3DKMT_QUERYSTATISTICS_VIDPNSOURCE_INFORMATION VidPnSourceInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_INFORMATION ProcessInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_ADAPTER_INFORMATION ProcessAdapterInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_SEGMENT_INFORMATION ProcessSegmentInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_NODE_INFORMATION ProcessNodeInformation;
	D3DKMT_QUERYSTATISTICS_PROCESS_VIDPNSOURCE_INFORMATION ProcessVidPnSourceInformation;
} D3DKMT_QUERYSTATISTICS_RESULT;
typedef struct _D3DKMT_QUERYSTATISTICS
{
	D3DKMT_QUERYSTATISTICS_TYPE Type;
	LUID AdapterLuid;
	HANDLE ProcessHandle;
	D3DKMT_QUERYSTATISTICS_RESULT QueryResult;
	union
	{
		D3DKMT_QUERYSTATISTICS_QUERY_SEGMENT QuerySegment;
		D3DKMT_QUERYSTATISTICS_QUERY_SEGMENT QueryProcessSegment;
		D3DKMT_QUERYSTATISTICS_QUERY_NODE QueryNode;
		D3DKMT_QUERYSTATISTICS_QUERY_NODE QueryProcessNode;
		D3DKMT_QUERYSTATISTICS_QUERY_VIDPNSOURCE QueryVidPnSource;
		D3DKMT_QUERYSTATISTICS_QUERY_VIDPNSOURCE QueryProcessVidPnSource;
	};
} D3DKMT_QUERYSTATISTICS;
typedef enum _D3DKMT_MEMORY_SEGMENT_GROUP
{
	D3DKMT_MEMORY_SEGMENT_GROUP_LOCAL = 0,
	D3DKMT_MEMORY_SEGMENT_GROUP_NON_LOCAL = 1
} D3DKMT_MEMORY_SEGMENT_GROUP;
typedef struct _D3DKMT_QUERYVIDEOMEMORYINFO
{
	HANDLE ProcessHandle;
	D3DKMT_HANDLE AdapterHandle;
	D3DKMT_MEMORY_SEGMENT_GROUP MemorySegmentGroup;
	UINT64 Budget;
	UINT64 CurrentUsage;
	UINT64 CurrentReservation;
	UINT64 AvailableForReservation;
	UINT32 PhysicalAdapterIndex;
} D3DKMT_QUERYVIDEOMEMORYINFO;
typedef enum _D3DKMT_ESCAPETYPE
{
	D3DKMT_ESCAPE_DRIVERPRIVATE = 0,
	D3DKMT_ESCAPE_VIDMM = 1,
	D3DKMT_ESCAPE_TDRDBGCTRL = 2,
	D3DKMT_ESCAPE_VIDSCH = 3,
	D3DKMT_ESCAPE_DEVICE = 4,
	D3DKMT_ESCAPE_DMM = 5,
	D3DKMT_ESCAPE_DEBUG_SNAPSHOT = 6,
	D3DKMT_ESCAPE_DRT_TEST = 8,
	D3DKMT_ESCAPE_DIAGNOSTICS = 9,
	D3DKMT_ESCAPE_OUTPUTDUPL_SNAPSHOT = 10,
	D3DKMT_ESCAPE_OUTPUTDUPL_DIAGNOSTICS = 11,
	D3DKMT_ESCAPE_BDD_PNP = 12,
	D3DKMT_ESCAPE_BDD_FALLBACK = 13,
	D3DKMT_ESCAPE_ACTIVATE_SPECIFIC_DIAG = 14,
	D3DKMT_ESCAPE_MODES_PRUNED_OUT = 15,
	D3DKMT_ESCAPE_WHQL_INFO = 16,
	D3DKMT_ESCAPE_BRIGHTNESS = 17,
	D3DKMT_ESCAPE_EDID_CACHE = 18,
	D3DKMT_ESCAPE_GENERIC_ADAPTER_DIAG_INFO = 19,
	D3DKMT_ESCAPE_MIRACAST_DISPLAY_REQUEST = 20,
	D3DKMT_ESCAPE_HISTORY_BUFFER_STATUS = 21,
	D3DKMT_ESCAPE_MIRACAST_ADAPTER_DIAG_INFO = 23,
	D3DKMT_ESCAPE_FORCE_BDDFALLBACK_HEADLESS = 24,
	D3DKMT_ESCAPE_REQUEST_MACHINE_CRASH = 25,
	D3DKMT_ESCAPE_HMD_GET_EDID_BASE_BLOCK = 26,
	D3DKMT_ESCAPE_SOFTGPU_ENABLE_DISABLE_HMD = 27,
	D3DKMT_ESCAPE_PROCESS_VERIFIER_OPTION = 28,
	D3DKMT_ESCAPE_ADAPTER_VERIFIER_OPTION = 29,
	D3DKMT_ESCAPE_IDD_REQUEST = 30,
	D3DKMT_ESCAPE_DOD_SET_DIRTYRECT_MODE = 31,
	D3DKMT_ESCAPE_LOG_CODEPOINT_PACKET = 32,
	D3DKMT_ESCAPE_LOG_USERMODE_DAIG_PACKET = 33,
	D3DKMT_ESCAPE_GET_EXTERNAL_DIAGNOSTICS = 34,
	D3DKMT_ESCAPE_GET_DISPLAY_CONFIGURATIONS = 36,
	D3DKMT_ESCAPE_QUERY_IOMMU_STATUS = 37,
	D3DKMT_ESCAPE_CCD_DATABASE = 38,
	D3DKMT_ESCAPE_WIN32K_START = 1024,
	D3DKMT_ESCAPE_WIN32K_HIP_DEVICE_INFO = 1024,
	D3DKMT_ESCAPE_WIN32K_QUERY_CD_ROTATION_BLOCK = 1025,
	D3DKMT_ESCAPE_WIN32K_DPI_INFO = 1026,
	D3DKMT_ESCAPE_WIN32K_PRESENTER_VIEW_INFO = 1027,
	D3DKMT_ESCAPE_WIN32K_SYSTEM_DPI = 1028,
	D3DKMT_ESCAPE_WIN32K_BDD_FALLBACK = 1029,
	D3DKMT_ESCAPE_WIN32K_DDA_TEST_CTL = 1030,
	D3DKMT_ESCAPE_WIN32K_USER_DETECTED_BLACK_SCREEN = 1031,
	D3DKMT_ESCAPE_WIN32K_HMD_ENUM = 1032,
	D3DKMT_ESCAPE_WIN32K_HMD_CONTROL = 1033,
	D3DKMT_ESCAPE_WIN32K_LPMDISPLAY_CONTROL = 1034,
} D3DKMT_ESCAPETYPE;
typedef enum _D3DKMT_VIDMMESCAPETYPE
{
	D3DKMT_VIDMMESCAPETYPE_SETFAULT = 0,
	D3DKMT_VIDMMESCAPETYPE_RUN_COHERENCY_TEST = 1,
	D3DKMT_VIDMMESCAPETYPE_RUN_UNMAP_TO_DUMMY_PAGE_TEST = 2,
	D3DKMT_VIDMMESCAPETYPE_APERTURE_CORRUPTION_CHECK = 3,
	D3DKMT_VIDMMESCAPETYPE_SUSPEND_CPU_ACCESS_TEST = 4,
	D3DKMT_VIDMMESCAPETYPE_EVICT = 5,
	D3DKMT_VIDMMESCAPETYPE_EVICT_BY_NT_HANDLE = 6,
	D3DKMT_VIDMMESCAPETYPE_GET_VAD_INFO = 7,
	D3DKMT_VIDMMESCAPETYPE_SET_BUDGET = 8,
	D3DKMT_VIDMMESCAPETYPE_SUSPEND_PROCESS = 9,
	D3DKMT_VIDMMESCAPETYPE_RESUME_PROCESS = 10,
	D3DKMT_VIDMMESCAPETYPE_GET_BUDGET = 11,
	D3DKMT_VIDMMESCAPETYPE_SET_TRIM_INTERVALS = 12,
	D3DKMT_VIDMMESCAPETYPE_EVICT_BY_CRITERIA = 13,
	D3DKMT_VIDMMESCAPETYPE_WAKE = 14,
	D3DKMT_VIDMMESCAPETYPE_DEFRAG = 15,
} D3DKMT_VIDMMESCAPETYPE;
typedef struct _D3DKMT_VAD_DESC
{
	UINT32 VadIndex;
	UINT64 VadAddress;
	UINT32 NumMappedRanges;
	UINT32 VadType;
	UINT64 StartAddress;
	UINT64 EndAddress;
} D3DKMT_VAD_DESC;
typedef struct _D3DKMT_VA_RANGE_DESC
{
	UINT64 VadAddress;
	UINT32 VaRangeIndex;
	UINT32 PhysicalAdapterIndex;
	UINT64 StartAddress;
	UINT64 EndAddress;
	UINT64 DriverProtection;
	UINT32 OwnerType;
	UINT64 pOwner;
	UINT64 OwnerOffset;
	UINT32 Protection;
} D3DKMT_VA_RANGE_DESC;
typedef struct _D3DKMT_PAGE_TABLE_LEVEL_DESC
{
	UINT32 IndexBitCount;
	UINT64 IndexMask;
	UINT64 IndexShift;
	UINT64 LowerLevelsMask;
	UINT64 EntryCoverageInPages;
} D3DKMT_PAGE_TABLE_LEVEL_DESC;
typedef struct _DXGK_ESCAPE_GPUMMUCAPS
{
	BOOLEAN ReadOnlyMemorySupported;
	BOOLEAN NoExecuteMemorySupported;
	BOOLEAN ZeroInPteSupported;
	BOOLEAN CacheCoherentMemorySupported;
	BOOLEAN LargePageSupported;
	BOOLEAN DualPteSupported;
	BOOLEAN AllowNonAlignedLargePageAddress;
	UINT32 VirtualAddressBitCount;
	UINT32 PageTableLevelCount;
	D3DKMT_PAGE_TABLE_LEVEL_DESC PageTableLevelDesk[6];
} DXGK_ESCAPE_GPUMMUCAPS;
typedef struct _D3DKMT_GET_GPUMMU_CAPS
{
	UINT32 PhysicalAdapterIndex;
	DXGK_ESCAPE_GPUMMUCAPS GpuMmuCaps;
} D3DKMT_GET_GPUMMU_CAPS;
typedef enum _DXGK_PTE_PAGE_SIZE
{
	DXGK_PTE_PAGE_TABLE_PAGE_4KB = 0,
	DXGK_PTE_PAGE_TABLE_PAGE_64KB = 1,
} DXGK_PTE_PAGE_SIZE;
typedef struct _DXGK_PTE
{
	union
	{
		struct
		{
			ULONGLONG Valid : 1;
			ULONGLONG Zero : 1;
			ULONGLONG CacheCoherent : 1;
			ULONGLONG ReadOnly : 1;
			ULONGLONG NoExecute : 1;
			ULONGLONG Segment : 5;
			ULONGLONG LargePage : 1;
			ULONGLONG PhysicalAdapterIndex : 6;
			ULONGLONG PageTablePageSize : 2;
			ULONGLONG SystemReserved0 : 1;
			ULONGLONG Reserved : 44;
		};
		ULONGLONG Flags;
	};
	union
	{
		ULONGLONG PageAddress;
		ULONGLONG PageTableAddress;
	};
} DXGK_PTE;
typedef struct _D3DKMT_GET_PTE
{
	UINT32 PhysicalAdapterIndex;
	UINT32 PageTableLevel;
	UINT32 PageTableIndex[6];
	BOOLEAN b64KBPte;
	UINT32 NumPtes;
	DXGK_PTE Pte[64];
	UINT32 NumValidEntries;
} D3DKMT_GET_PTE;
typedef struct _D3DKMT_SEGMENT_CAPS
{
	UINT64 Size;
	UINT32 PageSize;
	ULONG SegmentId;
	BOOLEAN bAperture;
	BOOLEAN bReservedSysMem;
	D3DKMT_MEMORY_SEGMENT_GROUP BudgetGroup;
} D3DKMT_SEGMENT_CAPS;
typedef struct _D3DKMT_GET_SEGMENT_CAPS
{
	UINT32 PhysicalAdapterIndex;
	UINT32 NumSegments;
	D3DKMT_SEGMENT_CAPS SegmentCaps[32];
} D3DKMT_GET_SEGMENT_CAPS;
typedef struct _D3DKMT_EVICTION_CRITERIA
{
	UINT64 MinimumSize;
	UINT64 MaximumSize;
	struct
	{
		union
		{
			struct
			{
				UINT32 Primary : 1;
				UINT32 Reserved : 31;
			} Flags;
			UINT32 Value;
		};
	};
} D3DKMT_EVICTION_CRITERIA;
typedef enum _D3DKMT_VAD_ESCAPE_COMMAND
{
	D3DKMT_VAD_ESCAPE_GETNUMVADS,
	D3DKMT_VAD_ESCAPE_GETVAD,
	D3DKMT_VAD_ESCAPE_GETVADRANGE,
	D3DKMT_VAD_ESCAPE_GET_PTE,
	D3DKMT_VAD_ESCAPE_GET_GPUMMU_CAPS,
	D3DKMT_VAD_ESCAPE_GET_SEGMENT_CAPS,
} D3DKMT_VAD_ESCAPE_COMMAND;
typedef enum _D3DKMT_DEFRAG_ESCAPE_OPERATION
{
	D3DKMT_DEFRAG_ESCAPE_GET_FRAGMENTATION_STATS = 0,
	D3DKMT_DEFRAG_ESCAPE_DEFRAG_UPWARD = 1,
	D3DKMT_DEFRAG_ESCAPE_DEFRAG_DOWNWARD = 2,
	D3DKMT_DEFRAG_ESCAPE_DEFRAG_PASS = 3,
	D3DKMT_DEFRAG_ESCAPE_VERIFY_TRANSFER = 4,
} D3DKMT_DEFRAG_ESCAPE_OPERATION;
typedef struct _D3DKMT_VIDMM_ESCAPE
{
	D3DKMT_VIDMMESCAPETYPE Type;
	union
	{
		struct
		{
			union
			{
				struct
				{
					ULONG ProbeAndLock : 1;
					ULONG SplitPoint : 1;
					ULONG NoDemotion : 1;
					ULONG SwizzlingAperture : 1;
					ULONG PagingPathLockSubRange : 1;
					ULONG PagingPathLockMinRange : 1;
					ULONG ComplexLock : 1;
					ULONG FailVARotation : 1;
					ULONG NoWriteCombined : 1;
					ULONG NoPrePatching : 1;
					ULONG AlwaysRepatch : 1;
					ULONG ExpectPreparationFailure : 1;
					ULONG FailUserModeVAMapping : 1;
					ULONG NeverDiscardOfferedAllocation : 1;
					ULONG AlwaysDiscardOfferedAllocation : 1;
					ULONG Reserved : 17;
				};
				ULONG Value;
			};
		} SetFault;
		struct
		{
			D3DKMT_HANDLE ResourceHandle;
			D3DKMT_HANDLE AllocationHandle;
			HANDLE hProcess;
		} Evict;
		struct
		{
			UINT64 NtHandle;
		} EvictByNtHandle;
		struct
		{
			union
			{
				struct
				{
					UINT32 NumVads;
				} GetNumVads;
				D3DKMT_VAD_DESC GetVad;
				D3DKMT_VA_RANGE_DESC GetVadRange;
				D3DKMT_GET_GPUMMU_CAPS GetGpuMmuCaps;
				D3DKMT_GET_PTE GetPte;
				D3DKMT_GET_SEGMENT_CAPS GetSegmentCaps;
			};
			D3DKMT_VAD_ESCAPE_COMMAND Command;
			NTSTATUS Status;
		} GetVads;
		struct
		{
			ULONGLONG LocalMemoryBudget;
			ULONGLONG SystemMemoryBudget;
		} SetBudget;
		struct
		{
			HANDLE hProcess;
			BOOL bAllowWakeOnSubmission;
		} SuspendProcess;
		struct
		{
			HANDLE hProcess;
		} ResumeProcess;
		struct
		{
			UINT64 NumBytesToTrim;
		} GetBudget;
		struct
		{
			ULONG MinTrimInterval;
			ULONG MaxTrimInterval;
			ULONG IdleTrimInterval;
		} SetTrimIntervals;
		D3DKMT_EVICTION_CRITERIA EvictByCriteria;
		struct
		{
			BOOL bFlush;
		} Wake;
		struct
		{
			D3DKMT_DEFRAG_ESCAPE_OPERATION Operation;
			UINT32 SegmentId;
			ULONGLONG TotalCommitted;
			ULONGLONG TotalFree;
			ULONGLONG LargestGapBefore;
			ULONGLONG LargestGapAfter;
		} Defrag;
	};
} D3DKMT_VIDMM_ESCAPE;
typedef enum _D3DKMT_TDRDBGCTRLTYPE
{
	D3DKMT_TDRDBGCTRLTYPE_FORCETDR = 0,
	D3DKMT_TDRDBGCTRLTYPE_DISABLEBREAK = 1,
	D3DKMT_TDRDBGCTRLTYPE_ENABLEBREAK = 2,
	D3DKMT_TDRDBGCTRLTYPE_UNCONDITIONAL = 3,
	D3DKMT_TDRDBGCTRLTYPE_VSYNCTDR = 4,
	D3DKMT_TDRDBGCTRLTYPE_GPUTDR = 5,
	D3DKMT_TDRDBGCTRLTYPE_FORCEDODTDR = 6,
	D3DKMT_TDRDBGCTRLTYPE_FORCEDODVSYNCTDR = 7,
	D3DKMT_TDRDBGCTRLTYPE_ENGINETDR = 8,
} D3DKMT_TDRDBGCTRLTYPE;
typedef enum _D3DKMT_VIDSCHESCAPETYPE
{
	D3DKMT_VIDSCHESCAPETYPE_PREEMPTIONCONTROL = 0,
	D3DKMT_VIDSCHESCAPETYPE_SUSPENDSCHEDULER = 1,
	D3DKMT_VIDSCHESCAPETYPE_TDRCONTROL = 2,
	D3DKMT_VIDSCHESCAPETYPE_SUSPENDRESUME = 3,
	D3DKMT_VIDSCHESCAPETYPE_ENABLECONTEXTDELAY = 4,
	D3DKMT_VIDSCHESCAPETYPE_CONFIGURE_TDR_LIMIT = 5,
	D3DKMT_VIDSCHESCAPETYPE_VGPU_RESET = 6,
	D3DKMT_VIDSCHESCAPETYPE_PFN_CONTROL = 7,
} D3DKMT_VIDSCHESCAPETYPE;
typedef enum _D3DKMT_ESCAPE_PFN_CONTROL_COMMAND
{
	D3DKMT_ESCAPE_PFN_CONTROL_DEFAULT,
	D3DKMT_ESCAPE_PFN_CONTROL_FORCE_CPU,
	D3DKMT_ESCAPE_PFN_CONTROL_FORCE_GPU
} D3DKMT_ESCAPE_PFN_CONTROL_COMMAND;
typedef struct _D3DKMT_VIDSCH_ESCAPE
{
	D3DKMT_VIDSCHESCAPETYPE Type;
	union
	{
		BOOL PreemptionControl;
		BOOL EnableContextDelay;
		struct
		{
			ULONG TdrControl;
			union
			{
				ULONG NodeOrdinal;
			};
		} TdrControl2;
		BOOL SuspendScheduler;
		ULONG TdrControl;
		ULONG SuspendTime;
		struct
		{
			UINT Count;
			UINT Time;
		} TdrLimit;
		D3DKMT_ESCAPE_PFN_CONTROL_COMMAND PfnControl;
	};
} D3DKMT_VIDSCH_ESCAPE;
typedef enum _D3DKMT_DEVICEESCAPE_TYPE
{
	D3DKMT_DEVICEESCAPE_VIDPNFROMALLOCATION = 0,
	D3DKMT_DEVICEESCAPE_RESTOREGAMMA = 1,
} D3DKMT_DEVICEESCAPE_TYPE;
typedef struct _D3DKMT_DEVICE_ESCAPE
{
	D3DKMT_DEVICEESCAPE_TYPE Type;
	union
	{
		struct
		{
			D3DKMT_HANDLE hPrimaryAllocation;
			UINT32 VidPnSourceId;
		} VidPnFromAllocation;
	};
} D3DKMT_DEVICE_ESCAPE;
typedef enum _D3DKMT_DMMESCAPETYPE
{
	D3DKMT_DMMESCAPETYPE_UNINITIALIZED = 0,
	D3DKMT_DMMESCAPETYPE_GET_SUMMARY_INFO = 1,
	D3DKMT_DMMESCAPETYPE_GET_VIDEO_PRESENT_SOURCES_INFO = 2,
	D3DKMT_DMMESCAPETYPE_GET_VIDEO_PRESENT_TARGETS_INFO = 3,
	D3DKMT_DMMESCAPETYPE_GET_ACTIVEVIDPN_INFO = 4,
	D3DKMT_DMMESCAPETYPE_GET_MONITORS_INFO = 5,
	D3DKMT_DMMESCAPETYPE_RECENTLY_COMMITTED_VIDPNS_INFO = 6,
	D3DKMT_DMMESCAPETYPE_RECENT_MODECHANGE_REQUESTS_INFO = 7,
	D3DKMT_DMMESCAPETYPE_RECENTLY_RECOMMENDED_VIDPNS_INFO = 8,
	D3DKMT_DMMESCAPETYPE_RECENT_MONITOR_PRESENCE_EVENTS_INFO = 9,
	D3DKMT_DMMESCAPETYPE_ACTIVEVIDPN_SOURCEMODESET_INFO = 10,
	D3DKMT_DMMESCAPETYPE_ACTIVEVIDPN_COFUNCPATHMODALITY_INFO = 11,
	D3DKMT_DMMESCAPETYPE_GET_LASTCLIENTCOMMITTEDVIDPN_INFO = 12,
	D3DKMT_DMMESCAPETYPE_GET_VERSION_INFO = 13,
	D3DKMT_DMMESCAPETYPE_VIDPN_MGR_DIAGNOSTICS = 14
} D3DKMT_DMMESCAPETYPE;
typedef struct _D3DKMT_DMM_ESCAPE
{
	D3DKMT_DMMESCAPETYPE Type;
	SIZE_T ProvidedBufferSize;
	SIZE_T MinRequiredBufferSize;
	UCHAR Data[1];
} D3DKMT_DMM_ESCAPE;
typedef struct _D3DKMT_DEBUG_SNAPSHOT_ESCAPE
{
	ULONG Length;
	BYTE Buffer[1];
} D3DKMT_DEBUG_SNAPSHOT_ESCAPE;
typedef enum _D3DKMT_ACTIVATE_SPECIFIC_DIAG_TYPE
{
	D3DKMT_ACTIVATE_SPECIFIC_DIAG_TYPE_EXTRA_CCD_DATABASE_INFO = 0,
	D3DKMT_ACTIVATE_SPECIFIC_DIAG_TYPE_MODES_PRUNED = 15,
}D3DKMT_ACTIVATE_SPECIFIC_DIAG_TYPE;
typedef struct _D3DKMT_ACTIVATE_SPECIFIC_DIAG_ESCAPE
{
	D3DKMT_ACTIVATE_SPECIFIC_DIAG_TYPE Type;
	BOOL Activate;
} D3DKMT_ACTIVATE_SPECIFIC_DIAG_ESCAPE;
typedef struct _D3DKMT_REQUEST_MACHINE_CRASH_ESCAPE
{
	ULONG_PTR Param1;
	ULONG_PTR Param2;
	ULONG_PTR Param3;
} D3DKMT_REQUEST_MACHINE_CRASH_ESCAPE;
typedef struct _D3DDDI_ESCAPEFLAGS
{
	union
	{
		struct
		{
			UINT32 HardwareAccess : 1;
			UINT32 DeviceStatusQuery : 1;
			UINT32 ChangeFrameLatency : 1;
			UINT32 NoAdapterSynchronization : 1;
			UINT32 Reserved : 1;
			UINT32 VirtualMachineData : 1;
			UINT32 DriverKnownEscape : 1;
			UINT32 DriverCommonEscape : 1;
			UINT32 Reserved2 : 24;
		};
		UINT32 Value;
	};
} D3DDDI_ESCAPEFLAGS;
typedef struct _D3DKMT_ESCAPE
{
	D3DKMT_HANDLE AdapterHandle;
	D3DKMT_HANDLE DeviceHandle;
	D3DKMT_ESCAPETYPE Type;
	D3DDDI_ESCAPEFLAGS Flags;
	PVOID PrivateDriverData;
	UINT32 PrivateDriverDataSize;
	D3DKMT_HANDLE ContextHandle;
} D3DKMT_ESCAPE;

NTSTATUS
__stdcall
D3DKMTOpenAdapterFromDeviceName(
	const D3DKMT_OPENADAPTERFROMDEVICENAME* pData
);

NTSTATUS
__stdcall
D3DKMTOpenAdapterFromGdiDisplayName(
	const D3DKMT_OPENADAPTERFROMGDIDISPLAYNAME* pData
);

NTSTATUS
__stdcall
D3DKMTOpenAdapterFromHdc(
	const D3DKMT_OPENADAPTERFROMHDC* pData
);

NTSTATUS
__stdcall
D3DKMTOpenAdapterFromLuid(
	const D3DKMT_OPENADAPTERFROMLUID* pAdapter
);

NTSTATUS
__stdcall
D3DKMTEnumAdapters(
	const D3DKMT_ENUMADAPTERS* pData
);

NTSTATUS
__stdcall
D3DKMTEnumAdapters2(
	const D3DKMT_ENUMADAPTERS2* pData
);

NTSTATUS
__stdcall
D3DKMTEnumAdapters3(
	const D3DKMT_ENUMADAPTERS2* pData
);

NTSTATUS
__stdcall
D3DKMTCloseAdapter(
	const D3DKMT_CLOSEADAPTER* pData
);

NTSTATUS
__stdcall
D3DKMTQueryAdapterInfo(
	const D3DKMT_QUERYADAPTERINFO* pData
);

NTSTATUS
__stdcall
D3DKMTQueryStatistics(
	const D3DKMT_QUERYSTATISTICS* pData
);

NTSTATUS
__stdcall
D3DKMTQueryVideoMemoryInfo(
	const D3DKMT_QUERYVIDEOMEMORYINFO* pData
);

NTSTATUS
__stdcall
D3DKMTEscape(
	const D3DKMT_ESCAPE* pData
);

NTSTATUS
__stdcall
D3DKMTSetProcessSchedulingPriorityClass(
	HANDLE,
	enum D3DKMT_SCHEDULINGPRIORITYCLASS
);

NTSTATUS
__stdcall
D3DKMTGetProcessSchedulingPriorityClass(
	HANDLE,
	enum D3DKMT_SCHEDULINGPRIORITYCLASS*
);
typedef enum _WOW64_SHARED_INFORMATION
{
	SharedNtdll32LdrInitializeThunk,
	SharedNtdll32KiUserExceptionDispatcher,
	SharedNtdll32KiUserApcDispatcher,
	SharedNtdll32KiUserCallbackDispatcher,
	SharedNtdll32ExpInterlockedPopEntrySListFault,
	SharedNtdll32ExpInterlockedPopEntrySListResume,
	SharedNtdll32ExpInterlockedPopEntrySListEnd,
	SharedNtdll32RtlUserThreadStart,
	SharedNtdll32pQueryProcessDebugInformationRemote,
	SharedNtdll32BaseAddress,
	SharedNtdll32LdrSystemDllInitBlock,
	Wow64SharedPageEntriesCount
} WOW64_SHARED_INFORMATION;
typedef struct _RTL_BALANCED_NODE32
{
	union
	{
		ULONG Children[2];
		struct
		{
			ULONG Left;
			ULONG Right;
		};
	};
	union
	{
		ULONG Red : 1;
		ULONG Balance : 2;
		ULONG ParentValue;
	};
} RTL_BALANCED_NODE32, * PRTL_BALANCED_NODE32;
typedef struct _RTL_RB_TREE32
{
	ULONG Root;
	ULONG Min;
} RTL_RB_TREE32, * PRTL_RB_TREE32;
typedef struct _PEB_LDR_DATA32
{
	ULONG Length;
	BOOLEAN Initialized;
	ULONG SsHandle;
	LIST_ENTRY32 InLoadOrderModuleList;
	LIST_ENTRY32 InMemoryOrderModuleList;
	LIST_ENTRY32 InInitializationOrderModuleList;
	ULONG EntryInProgress;
	BOOLEAN ShutdownInProgress;
	ULONG ShutdownThreadId;
} PEB_LDR_DATA32, * PPEB_LDR_DATA32;
typedef struct _LDR_SERVICE_TAG_RECORD32
{
	ULONG Next;
	ULONG ServiceTag;
} LDR_SERVICE_TAG_RECORD32, * PLDR_SERVICE_TAG_RECORD32;
typedef struct _LDRP_CSLIST32
{
	ULONG Tail;
} LDRP_CSLIST32, * PLDRP_CSLIST32;
typedef struct _LDR_DDAG_NODE32
{
	LIST_ENTRY32 Modules;
	ULONG ServiceTagList;
	ULONG LoadCount;
	ULONG LoadWhileUnloadingCount;
	ULONG LowestLink;
	union
	{
		LDRP_CSLIST32 Dependencies;
		SINGLE_LIST_ENTRY32 RemovalLink;
	};
	LDRP_CSLIST32 IncomingDependencies;
	LDR_DDAG_STATE State;
	SINGLE_LIST_ENTRY32 CondenseLink;
	ULONG PreorderNumber;
} LDR_DDAG_NODE32, * PLDR_DDAG_NODE32;
typedef struct _LDR_DATA_TABLE_ENTRY32
{
	LIST_ENTRY32 InLoadOrderLinks;
	LIST_ENTRY32 InMemoryOrderLinks;
	union
	{
		LIST_ENTRY32 InInitializationOrderLinks;
		LIST_ENTRY32 InProgressLinks;
	};
	ULONG DllBase;
	ULONG EntryPoint;
	ULONG SizeOfImage;
	UNICODE_STRING32 FullDllName;
	UNICODE_STRING32 BaseDllName;
	union
	{
		UCHAR FlagGroup[4];
		ULONG Flags;
		struct
		{
			ULONG PackagedBinary : 1;
			ULONG MarkedForRemoval : 1;
			ULONG ImageDll : 1;
			ULONG LoadNotificationsSent : 1;
			ULONG TelemetryEntryProcessed : 1;
			ULONG ProcessStaticImport : 1;
			ULONG InLegacyLists : 1;
			ULONG InIndexes : 1;
			ULONG ShimDll : 1;
			ULONG InExceptionTable : 1;
			ULONG ReservedFlags1 : 2;
			ULONG LoadInProgress : 1;
			ULONG LoadConfigProcessed : 1;
			ULONG EntryProcessed : 1;
			ULONG ProtectDelayLoad : 1;
			ULONG ReservedFlags3 : 2;
			ULONG DontCallForThreads : 1;
			ULONG ProcessAttachCalled : 1;
			ULONG ProcessAttachFailed : 1;
			ULONG CorDeferredValidate : 1;
			ULONG CorImage : 1;
			ULONG DontRelocate : 1;
			ULONG CorILOnly : 1;
			ULONG ChpeImage : 1;
			ULONG ReservedFlags5 : 2;
			ULONG Redirected : 1;
			ULONG ReservedFlags6 : 2;
			ULONG CompatDatabaseProcessed : 1;
		};
	};
	USHORT ObsoleteLoadCount;
	USHORT TlsIndex;
	LIST_ENTRY32 HashLinks;
	ULONG TimeDateStamp;
	ULONG EntryPointActivationContext;
	ULONG Lock;
	ULONG DdagNode;
	LIST_ENTRY32 NodeModuleLink;
	ULONG LoadContext;
	ULONG ParentDllBase;
	ULONG SwitchBackContext;
	RTL_BALANCED_NODE32 BaseAddressIndexNode;
	RTL_BALANCED_NODE32 MappingInfoIndexNode;
	ULONG OriginalBase;
	LARGE_INTEGER LoadTime;
	ULONG BaseNameHashValue;
	LDR_DLL_LOAD_REASON LoadReason;
	ULONG ImplicitPathOptions;
	ULONG ReferenceCount;
	ULONG DependentLoadFlags;
	UCHAR SigningLevel;
} LDR_DATA_TABLE_ENTRY32, * PLDR_DATA_TABLE_ENTRY32;
typedef struct _CURDIR32
{
	UNICODE_STRING32 DosPath;
	ULONG Handle;
} CURDIR32, * PCURDIR32;
typedef struct _RTL_DRIVE_LETTER_CURDIR32
{
	USHORT Flags;
	USHORT Length;
	ULONG TimeStamp;
	STRING32 DosPath;
} RTL_DRIVE_LETTER_CURDIR32, * PRTL_DRIVE_LETTER_CURDIR32;
typedef struct _RTL_USER_PROCESS_PARAMETERS32
{
	ULONG MaximumLength;
	ULONG Length;
	ULONG Flags;
	ULONG DebugFlags;
	ULONG ConsoleHandle;
	ULONG ConsoleFlags;
	ULONG StandardInput;
	ULONG StandardOutput;
	ULONG StandardError;
	CURDIR32 CurrentDirectory;
	UNICODE_STRING32 DllPath;
	UNICODE_STRING32 ImagePathName;
	UNICODE_STRING32 CommandLine;
	ULONG Environment;
	ULONG StartingX;
	ULONG StartingY;
	ULONG CountX;
	ULONG CountY;
	ULONG CountCharsX;
	ULONG CountCharsY;
	ULONG FillAttribute;
	ULONG WindowFlags;
	ULONG ShowWindowFlags;
	UNICODE_STRING32 WindowTitle;
	UNICODE_STRING32 DesktopInfo;
	UNICODE_STRING32 ShellInfo;
	UNICODE_STRING32 RuntimeData;
	RTL_DRIVE_LETTER_CURDIR32 CurrentDirectories[32];
	ULONG EnvironmentSize;
	ULONG EnvironmentVersion;
	ULONG PackageDependencyData;
	ULONG ProcessGroupId;
	ULONG LoaderThreads;
	UNICODE_STRING32 RedirectionDllName;
	UNICODE_STRING32 HeapPartitionName;
	ULONG DefaultThreadpoolCpuSetMasks;
	ULONG DefaultThreadpoolCpuSetMaskCount;
} RTL_USER_PROCESS_PARAMETERS32, * PRTL_USER_PROCESS_PARAMETERS32;
typedef struct _PEB32
{
	BOOLEAN InheritedAddressSpace;
	BOOLEAN ReadImageFileExecOptions;
	BOOLEAN BeingDebugged;
	union
	{
		BOOLEAN BitField;
		struct
		{
			BOOLEAN ImageUsesLargePages : 1;
			BOOLEAN IsProtectedProcess : 1;
			BOOLEAN IsImageDynamicallyRelocated : 1;
			BOOLEAN SkipPatchingUser32Forwarders : 1;
			BOOLEAN IsPackagedProcess : 1;
			BOOLEAN IsAppContainer : 1;
			BOOLEAN IsProtectedProcessLight : 1;
			BOOLEAN IsLongPathAwareProcess : 1;
		};
	};
	ULONG Mutant;
	ULONG ImageBaseAddress;
	ULONG Ldr;
	ULONG ProcessParameters;
	ULONG SubSystemData;
	ULONG ProcessHeap;
	ULONG FastPebLock;
	ULONG AtlThunkSListPtr;
	ULONG IFEOKey;
	union
	{
		ULONG CrossProcessFlags;
		struct
		{
			ULONG ProcessInJob : 1;
			ULONG ProcessInitializing : 1;
			ULONG ProcessUsingVEH : 1;
			ULONG ProcessUsingVCH : 1;
			ULONG ProcessUsingFTH : 1;
			ULONG ReservedBits0 : 27;
		};
	};
	union
	{
		ULONG KernelCallbackTable;
		ULONG UserSharedInfoPtr;
	};
	ULONG SystemReserved;
	ULONG AtlThunkSListPtr32;
	ULONG ApiSetMap;
	ULONG TlsExpansionCounter;
	ULONG TlsBitmap;
	ULONG TlsBitmapBits[2];
	ULONG ReadOnlySharedMemoryBase;
	ULONG HotpatchInformation;
	ULONG ReadOnlyStaticServerData;
	ULONG AnsiCodePageData;
	ULONG OemCodePageData;
	ULONG UnicodeCaseTableData;
	ULONG NumberOfProcessors;
	ULONG NtGlobalFlag;
	LARGE_INTEGER CriticalSectionTimeout;
	ULONG HeapSegmentReserve;
	ULONG HeapSegmentCommit;
	ULONG HeapDeCommitTotalFreeThreshold;
	ULONG HeapDeCommitFreeBlockThreshold;
	ULONG NumberOfHeaps;
	ULONG MaximumNumberOfHeaps;
	ULONG ProcessHeaps;
	ULONG GdiSharedHandleTable;
	ULONG ProcessStarterHelper;
	ULONG GdiDCAttributeList;
	ULONG LoaderLock;
	ULONG OSMajorVersion;
	ULONG OSMinorVersion;
	USHORT OSBuildNumber;
	USHORT OSCSDVersion;
	ULONG OSPlatformId;
	ULONG ImageSubsystem;
	ULONG ImageSubsystemMajorVersion;
	ULONG ImageSubsystemMinorVersion;
	ULONG ActiveProcessAffinityMask;
	GDI_HANDLE_BUFFER32 GdiHandleBuffer;
	ULONG PostProcessInitRoutine;
	ULONG TlsExpansionBitmap;
	ULONG TlsExpansionBitmapBits[32];
	ULONG SessionId;
	ULARGE_INTEGER AppCompatFlags;
	ULARGE_INTEGER AppCompatFlagsUser;
	ULONG pShimData;
	ULONG AppCompatInfo;
	UNICODE_STRING32 CSDVersion;
	ULONG ActivationContextData;
	ULONG ProcessAssemblyStorageMap;
	ULONG SystemDefaultActivationContextData;
	ULONG SystemAssemblyStorageMap;
	ULONG MinimumStackCommit;
	ULONG SparePointers[4];
	ULONG SpareUlongs[5];
	ULONG WerRegistrationData;
	ULONG WerShipAssertPtr;
	ULONG pContextData;
	ULONG pImageHeaderHash;
	union
	{
		ULONG TracingFlags;
		struct
		{
			ULONG HeapTracingEnabled : 1;
			ULONG CritSecTracingEnabled : 1;
			ULONG LibLoaderTracingEnabled : 1;
			ULONG SpareTracingBits : 29;
		};
	};
	ULONGLONG CsrServerReadOnlySharedMemoryBase;
	ULONG TppWorkerpListLock;
	LIST_ENTRY32 TppWorkerpList;
	ULONG WaitOnAddressHashTable[128];
	ULONG TelemetryCoverageHeader;
	ULONG CloudFileFlags;
	ULONG CloudFileDiagFlags;
	CHAR PlaceholderCompatibilityMode;
	CHAR PlaceholderCompatibilityModeReserved[7];
} PEB32, * PPEB32;
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((PEB32*)0)->IFEOKey)) == 0x024) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((PEB32*)0)->UnicodeCaseTableData)) == 0x060) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((PEB32*)0)->SystemAssemblyStorageMap)) == 0x204) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((PEB32*)0)->pImageHeaderHash)) == 0x23c) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((PEB32*)0)->WaitOnAddressHashTable)) == 0x25c) ? 1 : -1];
typedef char __C_ASSERT__[(sizeof(PEB32) == 0x470) ? 1 : -1];
typedef struct _GDI_TEB_BATCH32
{
	ULONG Offset;
	ULONG HDC;
	ULONG Buffer[310];
} GDI_TEB_BATCH32, * PGDI_TEB_BATCH32;
typedef struct _TEB32
{
	NT_TIB32 NtTib;
	ULONG EnvironmentPointer;
	CLIENT_ID32 ClientId;
	ULONG ActiveRpcHandle;
	ULONG ThreadLocalStoragePointer;
	ULONG ProcessEnvironmentBlock;
	ULONG LastErrorValue;
	ULONG CountOfOwnedCriticalSections;
	ULONG CsrClientThread;
	ULONG Win32ThreadInfo;
	ULONG User32Reserved[26];
	ULONG UserReserved[5];
	ULONG WOW32Reserved;
	LCID CurrentLocale;
	ULONG FpSoftwareStatusRegister;
	ULONG ReservedForDebuggerInstrumentation[16];
	ULONG SystemReserved1[36];
	UCHAR WorkingOnBehalfTicket[8];
	NTSTATUS ExceptionCode;
	ULONG ActivationContextStackPointer;
	ULONG InstrumentationCallbackSp;
	ULONG InstrumentationCallbackPreviousPc;
	ULONG InstrumentationCallbackPreviousSp;
	BOOLEAN InstrumentationCallbackDisabled;
	UCHAR SpareBytes[23];
	ULONG TxFsContext;
	GDI_TEB_BATCH32 GdiTebBatch;
	CLIENT_ID32 RealClientId;
	ULONG GdiCachedProcessHandle;
	ULONG GdiClientPID;
	ULONG GdiClientTID;
	ULONG GdiThreadLocalInfo;
	ULONG Win32ClientInfo[62];
	ULONG glDispatchTable[233];
	ULONG glReserved1[29];
	ULONG glReserved2;
	ULONG glSectionInfo;
	ULONG glSection;
	ULONG glTable;
	ULONG glCurrentRC;
	ULONG glContext;
	NTSTATUS LastStatusValue;
	UNICODE_STRING32 StaticUnicodeString;
	WCHAR StaticUnicodeBuffer[261];
	ULONG DeallocationStack;
	ULONG TlsSlots[64];
	LIST_ENTRY32 TlsLinks;
	ULONG Vdm;
	ULONG ReservedForNtRpc;
	ULONG DbgSsReserved[2];
	ULONG HardErrorMode;
	ULONG Instrumentation[9];
	GUID ActivityId;
	ULONG SubProcessTag;
	ULONG PerflibData;
	ULONG EtwTraceData;
	ULONG WinSockData;
	ULONG GdiBatchCount;
	union
	{
		PROCESSOR_NUMBER CurrentIdealProcessor;
		ULONG IdealProcessorValue;
		struct
		{
			UCHAR ReservedPad0;
			UCHAR ReservedPad1;
			UCHAR ReservedPad2;
			UCHAR IdealProcessor;
		};
	};
	ULONG GuaranteedStackBytes;
	ULONG ReservedForPerf;
	ULONG ReservedForOle;
	ULONG WaitingOnLoaderLock;
	ULONG SavedPriorityState;
	ULONG ReservedForCodeCoverage;
	ULONG ThreadPoolData;
	ULONG TlsExpansionSlots;
	ULONG MuiGeneration;
	ULONG IsImpersonating;
	ULONG NlsCache;
	ULONG pShimData;
	USHORT HeapVirtualAffinity;
	USHORT LowFragHeapDataSlot;
	ULONG CurrentTransactionHandle;
	ULONG ActiveFrame;
	ULONG FlsData;
	ULONG PreferredLanguages;
	ULONG UserPrefLanguages;
	ULONG MergedPrefLanguages;
	ULONG MuiImpersonation;
	union
	{
		USHORT CrossTebFlags;
		USHORT SpareCrossTebBits : 16;
	};
	union
	{
		USHORT SameTebFlags;
		struct
		{
			USHORT SafeThunkCall : 1;
			USHORT InDebugPrint : 1;
			USHORT HasFiberData : 1;
			USHORT SkipThreadAttach : 1;
			USHORT WerInShipAssertCode : 1;
			USHORT RanProcessInit : 1;
			USHORT ClonedThread : 1;
			USHORT SuppressDebugMsg : 1;
			USHORT DisableUserStackWalk : 1;
			USHORT RtlExceptionAttached : 1;
			USHORT InitialThread : 1;
			USHORT SessionAware : 1;
			USHORT LoadOwner : 1;
			USHORT LoaderWorker : 1;
			USHORT SpareSameTebBits : 2;
		};
	};
	ULONG TxnScopeEnterCallback;
	ULONG TxnScopeExitCallback;
	ULONG TxnScopeContext;
	ULONG LockCount;
	LONG WowTebOffset;
	ULONG ResourceRetValue;
	ULONG ReservedForWdf;
	ULONGLONG ReservedForCrt;
	GUID EffectiveContainerId;
} TEB32, * PTEB32;
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->ProcessEnvironmentBlock)) == 0x030) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->ExceptionCode)) == 0x1a4) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->TxFsContext)) == 0x1d0) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->glContext)) == 0xbf0) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->StaticUnicodeBuffer)) == 0xc00) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->TlsLinks)) == 0xf10) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->DbgSsReserved)) == 0xf20) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->ActivityId)) == 0xf50) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->GdiBatchCount)) == 0xf70) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->TlsExpansionSlots)) == 0xf94) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->FlsData)) == 0xfb4) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->MuiImpersonation)) == 0xfc4) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->ReservedForCrt)) == 0xfe8) ? 1 : -1];
typedef char __C_ASSERT__[(((LONG)(LONG_PTR) & (((TEB32*)0)->EffectiveContainerId)) == 0xff0) ? 1 : -1];
typedef char __C_ASSERT__[(sizeof(TEB32) == 0x1000) ? 1 : -1];
void UStr32ToUStr(
	PUNICODE_STRING Destination,
	PUNICODE_STRING32 Source
);
void UStrToUStr32(
	PUNICODE_STRING32 Destination,
	PUNICODE_STRING Source
);
typedef UNICODE_STRING LSA_UNICODE_STRING, * PLSA_UNICODE_STRING;
typedef STRING LSA_STRING, * PLSA_STRING;
typedef OBJECT_ATTRIBUTES LSA_OBJECT_ATTRIBUTES, * PLSA_OBJECT_ATTRIBUTES;
typedef struct _LSA_TRUST_INFORMATION {
	LSA_UNICODE_STRING Name;
	PSID Sid;
} LSA_TRUST_INFORMATION, * PLSA_TRUST_INFORMATION;
typedef struct _LSA_REFERENCED_DOMAIN_LIST {
	ULONG Entries;
	PLSA_TRUST_INFORMATION Domains;
} LSA_REFERENCED_DOMAIN_LIST, * PLSA_REFERENCED_DOMAIN_LIST;
typedef struct _LSA_TRANSLATED_SID2 {
	SID_NAME_USE Use;
	PSID         Sid;
	LONG         DomainIndex;
	ULONG        Flags;
} LSA_TRANSLATED_SID2, * PLSA_TRANSLATED_SID2;
typedef struct _LSA_TRANSLATED_NAME {
	SID_NAME_USE Use;
	LSA_UNICODE_STRING Name;
	LONG DomainIndex;
} LSA_TRANSLATED_NAME, * PLSA_TRANSLATED_NAME;
typedef struct _POLICY_ACCOUNT_DOMAIN_INFO {
	LSA_UNICODE_STRING DomainName;
	PSID DomainSid;
} POLICY_ACCOUNT_DOMAIN_INFO, * PPOLICY_ACCOUNT_DOMAIN_INFO;
typedef struct _POLICY_DNS_DOMAIN_INFO
{
	LSA_UNICODE_STRING Name;
	LSA_UNICODE_STRING DnsDomainName;
	LSA_UNICODE_STRING DnsForestName;
	GUID DomainGuid;
	PSID Sid;
} POLICY_DNS_DOMAIN_INFO, * PPOLICY_DNS_DOMAIN_INFO;
typedef enum _LSA_LOOKUP_DOMAIN_INFO_CLASS {
	AccountDomainInformation = 5,
	DnsDomainInformation = 12
} LSA_LOOKUP_DOMAIN_INFO_CLASS, * PLSA_LOOKUP_DOMAIN_INFO_CLASS;
typedef PVOID LSA_LOOKUP_HANDLE, * PLSA_LOOKUP_HANDLE;
NTSTATUS
LsaLookupOpenLocalPolicy(
	PLSA_OBJECT_ATTRIBUTES ObjectAttributes,
	ACCESS_MASK AccessMask,
	PLSA_LOOKUP_HANDLE PolicyHandle
);
NTSTATUS
LsaLookupClose(
	LSA_LOOKUP_HANDLE ObjectHandle
);
NTSTATUS
LsaLookupTranslateSids(
	LSA_LOOKUP_HANDLE PolicyHandle,
	ULONG Count,
	PSID* Sids,
	PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,
	PLSA_TRANSLATED_NAME* Names
);
NTSTATUS
LsaLookupTranslateNames(
	LSA_LOOKUP_HANDLE PolicyHandle,
	ULONG Flags,
	ULONG Count,
	PLSA_UNICODE_STRING Names,
	PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,
	PLSA_TRANSLATED_SID2* Sids
);
NTSTATUS
LsaLookupGetDomainInfo(
	LSA_LOOKUP_HANDLE PolicyHandle,
	LSA_LOOKUP_DOMAIN_INFO_CLASS DomainInfoClass,
	PVOID* DomainInfo
);
NTSTATUS
LsaLookupFreeMemory(
	PVOID Buffer
);
typedef ULONG  LSA_OPERATIONAL_MODE, * PLSA_OPERATIONAL_MODE;
typedef enum _SECURITY_LOGON_TYPE {
	UndefinedLogonType = 0,
	Interactive = 2,
	Network,
	Batch,
	Service,
	Proxy,
	Unlock,
	NetworkCleartext,
	NewCredentials,
	RemoteInteractive,
	CachedInteractive,
	CachedRemoteInteractive,
	CachedUnlock
} SECURITY_LOGON_TYPE, * PSECURITY_LOGON_TYPE;
typedef enum _SE_ADT_PARAMETER_TYPE {
	SeAdtParmTypeNone = 0,
	SeAdtParmTypeString,
	SeAdtParmTypeFileSpec,
	SeAdtParmTypeUlong,
	SeAdtParmTypeSid,
	SeAdtParmTypeLogonId,
	SeAdtParmTypeNoLogonId,
	SeAdtParmTypeAccessMask,
	SeAdtParmTypePrivs,
	SeAdtParmTypeObjectTypes,
	SeAdtParmTypeHexUlong,
	SeAdtParmTypePtr,
	SeAdtParmTypeTime,
	SeAdtParmTypeGuid,
	SeAdtParmTypeLuid,
	SeAdtParmTypeHexInt64,
	SeAdtParmTypeStringList,
	SeAdtParmTypeSidList,
	SeAdtParmTypeDuration,
	SeAdtParmTypeUserAccountControl,
	SeAdtParmTypeNoUac,
	SeAdtParmTypeMessage,
	SeAdtParmTypeDateTime,
	SeAdtParmTypeSockAddr,
	SeAdtParmTypeSD,
	SeAdtParmTypeLogonHours,
	SeAdtParmTypeLogonIdNoSid,
	SeAdtParmTypeUlongNoConv,
	SeAdtParmTypeSockAddrNoPort,
	SeAdtParmTypeAccessReason,
	SeAdtParmTypeStagingReason,
	SeAdtParmTypeResourceAttribute,
	SeAdtParmTypeClaims,
	SeAdtParmTypeLogonIdAsSid,
	SeAdtParmTypeMultiSzString,
	SeAdtParmTypeLogonIdEx,
} SE_ADT_PARAMETER_TYPE, * PSE_ADT_PARAMETER_TYPE;
typedef struct _SE_ADT_OBJECT_TYPE {
	GUID ObjectType;
	USHORT Flags;
	USHORT Level;
	ACCESS_MASK AccessMask;
} SE_ADT_OBJECT_TYPE, * PSE_ADT_OBJECT_TYPE;
typedef struct _SE_ADT_PARAMETER_ARRAY_ENTRY {
	SE_ADT_PARAMETER_TYPE Type;
	ULONG Length;
	ULONG_PTR Data[2];
	PVOID Address;
} SE_ADT_PARAMETER_ARRAY_ENTRY, * PSE_ADT_PARAMETER_ARRAY_ENTRY;
typedef struct _SE_ADT_ACCESS_REASON {
	ACCESS_MASK AccessMask;
	ULONG  AccessReasons[32];
	ULONG  ObjectTypeIndex;
	ULONG AccessGranted;
	PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_ADT_ACCESS_REASON, * PSE_ADT_ACCESS_REASON;
typedef struct _SE_ADT_CLAIMS {
	ULONG Length;
	PCLAIMS_BLOB Claims;
} SE_ADT_CLAIMS, * PSE_ADT_CLAIMS;
typedef struct _SE_ADT_PARAMETER_ARRAY {
	ULONG CategoryId;
	ULONG AuditId;
	ULONG ParameterCount;
	ULONG Length;
	USHORT FlatSubCategoryId;
	USHORT Type;
	ULONG Flags;
	SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
} SE_ADT_PARAMETER_ARRAY, * PSE_ADT_PARAMETER_ARRAY;
typedef struct _SE_ADT_PARAMETER_ARRAY_EX {
	ULONG CategoryId;
	ULONG AuditId;
	ULONG Version;
	ULONG ParameterCount;
	ULONG Length;
	USHORT FlatSubCategoryId;
	USHORT Type;
	ULONG Flags;
	SE_ADT_PARAMETER_ARRAY_ENTRY Parameters[32];
} SE_ADT_PARAMETER_ARRAY_EX, * PSE_ADT_PARAMETER_ARRAY_EX;
typedef struct _LSA_ADT_STRING_LIST_ENTRY
{
	ULONG                       Flags;
	UNICODE_STRING              String;
}
LSA_ADT_STRING_LIST_ENTRY, * PLSA_ADT_STRING_LIST_ENTRY;
typedef struct _LSA_ADT_STRING_LIST
{
	ULONG                       cStrings;
	PLSA_ADT_STRING_LIST_ENTRY  Strings;
}
LSA_ADT_STRING_LIST, * PLSA_ADT_STRING_LIST;
typedef struct _LSA_ADT_SID_LIST_ENTRY
{
	ULONG                       Flags;
	PSID                        Sid;
}
LSA_ADT_SID_LIST_ENTRY, * PLSA_ADT_SID_LIST_ENTRY;
typedef struct _LSA_ADT_SID_LIST
{
	ULONG                       cSids;
	PLSA_ADT_SID_LIST_ENTRY     Sids;
}
LSA_ADT_SID_LIST, * PLSA_ADT_SID_LIST;
typedef enum _POLICY_AUDIT_EVENT_TYPE_EX {
	iSystem_SecurityStateChange = 100,
	iSystem_SecuritySubsystemExtension,
	iSystem_Integrity,
	iSystem_IPSecDriverEvents,
	iSystem_Others,
	iLogon_Logon,
	iLogon_Logoff,
	iLogon_AccountLockout,
	iLogon_IPSecMainMode,
	iLogon_SpecialLogon,
	iLogon_IPSecQuickMode,
	iLogon_IPSecUsermode,
	iLogon_Others,
	iLogon_NPS,
	iLogon_Claims,
	iLogon_Groups,
	iObjectAccess_FileSystem,
	iObjectAccess_Registry,
	iObjectAccess_Kernel,
	iObjectAccess_Sam,
	iObjectAccess_Other,
	iObjectAccess_CertificationAuthority,
	iObjectAccess_ApplicationGenerated,
	iObjectAccess_HandleBasedAudits,
	iObjectAccess_Share,
	iObjectAccess_FirewallPacketDrops,
	iObjectAccess_FirewallConnection,
	iObjectAccess_DetailedFileShare,
	iObjectAccess_RemovableStorage,
	iObjectAccess_CbacStaging,
	iPrivilegeUse_Sensitive,
	iPrivilegeUse_NonSensitive,
	iPrivilegeUse_Others,
	iDetailedTracking_ProcessCreation,
	iDetailedTracking_ProcessTermination,
	iDetailedTracking_DpapiActivity,
	iDetailedTracking_RpcCall,
	iDetailedTracking_PnpActivity,
	iDetailedTracking_TokenRightAdjusted,
	iPolicyChange_AuditPolicy,
	iPolicyChange_AuthenticationPolicy,
	iPolicyChange_AuthorizationPolicy,
	iPolicyChange_MpsscvRulePolicy,
	iPolicyChange_WfpIPSecPolicy,
	iPolicyChange_Others,
	iAccountManagement_UserAccount,
	iAccountManagement_ComputerAccount,
	iAccountManagement_SecurityGroup,
	iAccountManagement_DistributionGroup,
	iAccountManagement_ApplicationGroup,
	iAccountManagement_Others,
	iDSAccess_DSAccess,
	iDSAccess_AdAuditChanges,
	iDS_Replication,
	iDS_DetailedReplication,
	iAccountLogon_CredentialValidation,
	iAccountLogon_Kerberos,
	iAccountLogon_Others,
	iAccountLogon_KerbCredentialValidation,
	iUnknownSubCategory = 999
} POLICY_AUDIT_EVENT_TYPE_EX, * PPOLICY_AUDIT_EVENT_TYPE_EX;
typedef enum _POLICY_AUDIT_EVENT_TYPE {
	AuditCategorySystem = 0,
	AuditCategoryLogon,
	AuditCategoryObjectAccess,
	AuditCategoryPrivilegeUse,
	AuditCategoryDetailedTracking,
	AuditCategoryPolicyChange,
	AuditCategoryAccountManagement,
	AuditCategoryDirectoryServiceAccess,
	AuditCategoryAccountLogon
} POLICY_AUDIT_EVENT_TYPE, * PPOLICY_AUDIT_EVENT_TYPE;
NTSTATUS
__stdcall
LsaRegisterLogonProcess(
	PLSA_STRING LogonProcessName,
	PHANDLE LsaHandle,
	PLSA_OPERATIONAL_MODE SecurityMode
);
NTSTATUS
__stdcall
LsaLogonUser(
	HANDLE          LsaHandle,
	PLSA_STRING     OriginName,
	SECURITY_LOGON_TYPE LogonType,
	ULONG           AuthenticationPackage,
	PVOID AuthenticationInformation,
	ULONG           AuthenticationInformationLength,
	PTOKEN_GROUPS   LocalGroups,
	PTOKEN_SOURCE   SourceContext,
	PVOID* ProfileBuffer,
	PULONG          ProfileBufferLength,
	PLUID           LogonId,
	PHANDLE         Token,
	PQUOTA_LIMITS   Quotas,
	PNTSTATUS       SubStatus
);
NTSTATUS
__stdcall
LsaLookupAuthenticationPackage(
	HANDLE LsaHandle,
	PLSA_STRING PackageName,
	PULONG AuthenticationPackage
);
NTSTATUS
__stdcall
LsaFreeReturnBuffer(
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaCallAuthenticationPackage(
	HANDLE LsaHandle,
	ULONG AuthenticationPackage,
	PVOID ProtocolSubmitBuffer,
	ULONG SubmitBufferLength,
	PVOID* ProtocolReturnBuffer,
	PULONG ReturnBufferLength,
	PNTSTATUS ProtocolStatus
);
NTSTATUS
__stdcall
LsaDeregisterLogonProcess(
	HANDLE LsaHandle
);
NTSTATUS
__stdcall
LsaConnectUntrusted(
	PHANDLE LsaHandle
);
NTSTATUS
LsaInsertProtectedProcessAddress(
	PVOID BufferAddress,
	ULONG BufferSize
);
NTSTATUS
LsaRemoveProtectedProcessAddress(
	PVOID BufferAddress,
	ULONG BufferSize
);
typedef NTSTATUS
(__stdcall* PFN_LSA_CALL_AUTH_PKG) (
	HANDLE LsaHandle,
	ULONG AuthenticationPackage,
	PVOID ProtocolSubmitBuffer,
	ULONG SubmitBufferLength,
	PVOID* ProtocolReturnBuffer,
	PULONG ReturnBufferLength,
	PNTSTATUS ProtocolStatus
	);
typedef NTSTATUS
(__stdcall* PFN_LSA_DEREGISTER_PROC) (
	HANDLE LsaHandle
	);
typedef NTSTATUS
(__stdcall* PFN_LSA_FREE_BUFFER) (
	PVOID Buffer
	);
typedef NTSTATUS
(__stdcall* PFN_LSA_LOGON_USER) (
	HANDLE LsaHandle,
	PLSA_STRING OriginName,
	SECURITY_LOGON_TYPE LogonType,
	ULONG AuthenticationPackage,
	PVOID AuthenticationInformation,
	ULONG AuthenticationInformationLength,
	PTOKEN_GROUPS LocalGroups,
	PTOKEN_SOURCE SourceContext,
	PVOID* ProfileBuffer,
	PULONG ProfileBufferLength,
	PLUID LogonId,
	PHANDLE Token,
	PQUOTA_LIMITS Quotas,
	PNTSTATUS SubStatus
	);
typedef NTSTATUS
(__stdcall* PFN_LOOKUP_AUTH_PKG) (
	HANDLE LsaHandle,
	PLSA_STRING PackageName,
	PULONG AuthenticationPackage
	);
typedef NTSTATUS
(__stdcall* PFN_LSA_REGISTER_PROC) (
	PLSA_STRING LogonProcessName,
	PHANDLE LsaHandle,
	PLSA_OPERATIONAL_MODE SecurityMode
	);
typedef struct _LSA_AUTH_CALLBACKS {
	PFN_LSA_CALL_AUTH_PKG       LsaCallAuthPkgFn;
	PFN_LSA_DEREGISTER_PROC     LsaDeregisterProcFn;
	PFN_LSA_FREE_BUFFER         LsaFreeReturnBufferFn;
	PFN_LSA_LOGON_USER          LsaLogonUserFn;
	PFN_LOOKUP_AUTH_PKG         LsaLookupAuthPkgFn;
	PFN_LSA_REGISTER_PROC       LsaRegisterProcFn;
} LSA_AUTH_CALLBACKS, * PLSA_AUTH_CALLBACKS;
typedef const LSA_AUTH_CALLBACKS* PCLSA_AUTH_CALLBACKS;
typedef PVOID* PLSA_CLIENT_REQUEST;
typedef enum _LSA_TOKEN_INFORMATION_TYPE {
	LsaTokenInformationNull,
	LsaTokenInformationV1,
	LsaTokenInformationV2,
	LsaTokenInformationV3
} LSA_TOKEN_INFORMATION_TYPE, * PLSA_TOKEN_INFORMATION_TYPE;
typedef struct _LSA_TOKEN_INFORMATION_NULL {
	LARGE_INTEGER ExpirationTime;
	PTOKEN_GROUPS Groups;
} LSA_TOKEN_INFORMATION_NULL, * PLSA_TOKEN_INFORMATION_NULL;
typedef struct _LSA_TOKEN_INFORMATION_V1 {
	LARGE_INTEGER ExpirationTime;
	TOKEN_USER User;
	PTOKEN_GROUPS Groups;
	TOKEN_PRIMARY_GROUP PrimaryGroup;
	PTOKEN_PRIVILEGES Privileges;
	TOKEN_OWNER Owner;
	TOKEN_DEFAULT_DACL DefaultDacl;
} LSA_TOKEN_INFORMATION_V1, * PLSA_TOKEN_INFORMATION_V1;
typedef LSA_TOKEN_INFORMATION_V1 LSA_TOKEN_INFORMATION_V2, * PLSA_TOKEN_INFORMATION_V2;
typedef struct _LSA_TOKEN_INFORMATION_V3 {
	LARGE_INTEGER ExpirationTime;
	TOKEN_USER User;
	PTOKEN_GROUPS Groups;
	TOKEN_PRIMARY_GROUP PrimaryGroup;
	PTOKEN_PRIVILEGES Privileges;
	TOKEN_OWNER Owner;
	TOKEN_DEFAULT_DACL DefaultDacl;
	TOKEN_USER_CLAIMS UserClaims;
	TOKEN_DEVICE_CLAIMS DeviceClaims;
	PTOKEN_GROUPS DeviceGroups;
} LSA_TOKEN_INFORMATION_V3, * PLSA_TOKEN_INFORMATION_V3;
typedef NTSTATUS
(__stdcall LSA_CREATE_LOGON_SESSION) (
	PLUID LogonId
	);
typedef NTSTATUS
(__stdcall LSA_DELETE_LOGON_SESSION) (
	PLUID LogonId
	);
typedef NTSTATUS
(__stdcall LSA_ADD_CREDENTIAL) (
	PLUID LogonId,
	ULONG AuthenticationPackage,
	PLSA_STRING PrimaryKeyValue,
	PLSA_STRING Credentials
	);
typedef NTSTATUS
(__stdcall LSA_GET_CREDENTIALS) (
	PLUID LogonId,
	ULONG AuthenticationPackage,
	PULONG QueryContext,
	BOOLEAN RetrieveAllCredentials,
	PLSA_STRING PrimaryKeyValue,
	PULONG PrimaryKeyLength,
	PLSA_STRING Credentials
	);
typedef NTSTATUS
(__stdcall LSA_DELETE_CREDENTIAL) (
	PLUID LogonId,
	ULONG AuthenticationPackage,
	PLSA_STRING PrimaryKeyValue
	);
typedef PVOID
(__stdcall LSA_ALLOCATE_LSA_HEAP) (
	ULONG Length
	);
typedef void
(__stdcall LSA_FREE_LSA_HEAP) (
	PVOID Base
	);
typedef PVOID
(__stdcall LSA_ALLOCATE_PRIVATE_HEAP) (
	SIZE_T Length
	);
typedef void
(__stdcall LSA_FREE_PRIVATE_HEAP) (
	PVOID Base
	);
typedef NTSTATUS
(__stdcall LSA_ALLOCATE_CLIENT_BUFFER) (
	PLSA_CLIENT_REQUEST ClientRequest,
	ULONG LengthRequired,
	PVOID* ClientBaseAddress
	);
typedef NTSTATUS
(__stdcall LSA_FREE_CLIENT_BUFFER) (
	PLSA_CLIENT_REQUEST ClientRequest,
	PVOID ClientBaseAddress
	);
typedef NTSTATUS
(__stdcall LSA_COPY_TO_CLIENT_BUFFER) (
	PLSA_CLIENT_REQUEST ClientRequest,
	ULONG Length,
	PVOID ClientBaseAddress,
	PVOID BufferToCopy
	);
typedef NTSTATUS
(__stdcall LSA_COPY_FROM_CLIENT_BUFFER) (
	PLSA_CLIENT_REQUEST ClientRequest,
	ULONG Length,
	PVOID BufferToCopy,
	PVOID ClientBaseAddress
	);
typedef LSA_CREATE_LOGON_SESSION* PLSA_CREATE_LOGON_SESSION;
typedef LSA_DELETE_LOGON_SESSION* PLSA_DELETE_LOGON_SESSION;
typedef LSA_ADD_CREDENTIAL* PLSA_ADD_CREDENTIAL;
typedef LSA_GET_CREDENTIALS* PLSA_GET_CREDENTIALS;
typedef LSA_DELETE_CREDENTIAL* PLSA_DELETE_CREDENTIAL;
typedef LSA_ALLOCATE_LSA_HEAP* PLSA_ALLOCATE_LSA_HEAP;
typedef LSA_FREE_LSA_HEAP* PLSA_FREE_LSA_HEAP;
typedef LSA_ALLOCATE_PRIVATE_HEAP* PLSA_ALLOCATE_PRIVATE_HEAP;
typedef LSA_FREE_PRIVATE_HEAP* PLSA_FREE_PRIVATE_HEAP;
typedef LSA_ALLOCATE_CLIENT_BUFFER* PLSA_ALLOCATE_CLIENT_BUFFER;
typedef LSA_FREE_CLIENT_BUFFER* PLSA_FREE_CLIENT_BUFFER;
typedef LSA_COPY_TO_CLIENT_BUFFER* PLSA_COPY_TO_CLIENT_BUFFER;
typedef LSA_COPY_FROM_CLIENT_BUFFER* PLSA_COPY_FROM_CLIENT_BUFFER;
typedef struct _LSA_DISPATCH_TABLE {
	PLSA_CREATE_LOGON_SESSION CreateLogonSession;
	PLSA_DELETE_LOGON_SESSION DeleteLogonSession;
	PLSA_ADD_CREDENTIAL AddCredential;
	PLSA_GET_CREDENTIALS GetCredentials;
	PLSA_DELETE_CREDENTIAL DeleteCredential;
	PLSA_ALLOCATE_LSA_HEAP AllocateLsaHeap;
	PLSA_FREE_LSA_HEAP FreeLsaHeap;
	PLSA_ALLOCATE_CLIENT_BUFFER AllocateClientBuffer;
	PLSA_FREE_CLIENT_BUFFER FreeClientBuffer;
	PLSA_COPY_TO_CLIENT_BUFFER CopyToClientBuffer;
	PLSA_COPY_FROM_CLIENT_BUFFER CopyFromClientBuffer;
} LSA_DISPATCH_TABLE, * PLSA_DISPATCH_TABLE;
typedef NTSTATUS
(__stdcall LSA_AP_INITIALIZE_PACKAGE) (
	ULONG AuthenticationPackageId,
	PLSA_DISPATCH_TABLE LsaDispatchTable,
	PLSA_STRING Database,
	PLSA_STRING Confidentiality,
	PLSA_STRING* AuthenticationPackageName
	);
typedef NTSTATUS
(__stdcall LSA_AP_LOGON_USER) (
	PLSA_CLIENT_REQUEST ClientRequest,
	SECURITY_LOGON_TYPE LogonType,
	PVOID AuthenticationInformation,
	PVOID ClientAuthenticationBase,
	ULONG AuthenticationInformationLength,
	PVOID* ProfileBuffer,
	PULONG ProfileBufferLength,
	PLUID LogonId,
	PNTSTATUS SubStatus,
	PLSA_TOKEN_INFORMATION_TYPE TokenInformationType,
	PVOID* TokenInformation,
	PLSA_UNICODE_STRING* AccountName,
	PLSA_UNICODE_STRING* AuthenticatingAuthority
	);
typedef NTSTATUS
(__stdcall LSA_AP_LOGON_USER_EX) (
	PLSA_CLIENT_REQUEST ClientRequest,
	SECURITY_LOGON_TYPE LogonType,
	PVOID AuthenticationInformation,
	PVOID ClientAuthenticationBase,
	ULONG AuthenticationInformationLength,
	PVOID* ProfileBuffer,
	PULONG ProfileBufferLength,
	PLUID LogonId,
	PNTSTATUS SubStatus,
	PLSA_TOKEN_INFORMATION_TYPE TokenInformationType,
	PVOID* TokenInformation,
	PUNICODE_STRING* AccountName,
	PUNICODE_STRING* AuthenticatingAuthority,
	PUNICODE_STRING* MachineName
	);
typedef NTSTATUS
(__stdcall LSA_AP_CALL_PACKAGE) (
	PLSA_CLIENT_REQUEST ClientRequest,
	PVOID ProtocolSubmitBuffer,
	PVOID ClientBufferBase,
	ULONG SubmitBufferLength,
	PVOID* ProtocolReturnBuffer,
	PULONG ReturnBufferLength,
	PNTSTATUS ProtocolStatus
	);
typedef NTSTATUS
(__stdcall LSA_AP_CALL_PACKAGE_PASSTHROUGH) (
	PLSA_CLIENT_REQUEST ClientRequest,
	PVOID ProtocolSubmitBuffer,
	PVOID ClientBufferBase,
	ULONG SubmitBufferLength,
	PVOID* ProtocolReturnBuffer,
	PULONG ReturnBufferLength,
	PNTSTATUS ProtocolStatus
	);
typedef void
(__stdcall LSA_AP_LOGON_TERMINATED) (
	PLUID LogonId
	);
typedef LSA_AP_CALL_PACKAGE LSA_AP_CALL_PACKAGE_UNTRUSTED;
typedef LSA_AP_INITIALIZE_PACKAGE* PLSA_AP_INITIALIZE_PACKAGE;
typedef LSA_AP_LOGON_USER* PLSA_AP_LOGON_USER;
typedef LSA_AP_LOGON_USER_EX* PLSA_AP_LOGON_USER_EX;
typedef LSA_AP_CALL_PACKAGE* PLSA_AP_CALL_PACKAGE;
typedef LSA_AP_CALL_PACKAGE_PASSTHROUGH* PLSA_AP_CALL_PACKAGE_PASSTHROUGH;
typedef LSA_AP_LOGON_TERMINATED* PLSA_AP_LOGON_TERMINATED;
typedef LSA_AP_CALL_PACKAGE_UNTRUSTED* PLSA_AP_CALL_PACKAGE_UNTRUSTED;
typedef struct _LSA_TRANSLATED_SID {
	SID_NAME_USE Use;
	ULONG RelativeId;
	LONG DomainIndex;
} LSA_TRANSLATED_SID, * PLSA_TRANSLATED_SID;
typedef ULONG POLICY_SYSTEM_ACCESS_MODE, * PPOLICY_SYSTEM_ACCESS_MODE;
typedef enum _POLICY_LSA_SERVER_ROLE {
	PolicyServerRoleBackup = 2,
	PolicyServerRolePrimary
} POLICY_LSA_SERVER_ROLE, * PPOLICY_LSA_SERVER_ROLE;
typedef ULONG POLICY_AUDIT_EVENT_OPTIONS, * PPOLICY_AUDIT_EVENT_OPTIONS;
typedef struct _POLICY_PRIVILEGE_DEFINITION {
	LSA_UNICODE_STRING Name;
	LUID LocalValue;
} POLICY_PRIVILEGE_DEFINITION, * PPOLICY_PRIVILEGE_DEFINITION;
typedef enum _POLICY_INFORMATION_CLASS {
	PolicyAuditLogInformation = 1,
	PolicyAuditEventsInformation,
	PolicyPrimaryDomainInformation,
	PolicyPdAccountInformation,
	PolicyAccountDomainInformation,
	PolicyLsaServerRoleInformation,
	PolicyReplicaSourceInformation,
	PolicyDefaultQuotaInformation,
	PolicyModificationInformation,
	PolicyAuditFullSetInformation,
	PolicyAuditFullQueryInformation,
	PolicyDnsDomainInformation,
	PolicyDnsDomainInformationInt,
	PolicyLocalAccountDomainInformation,
	PolicyMachineAccountInformation,
	PolicyLastEntry
} POLICY_INFORMATION_CLASS, * PPOLICY_INFORMATION_CLASS;
typedef struct _POLICY_AUDIT_LOG_INFO {
	ULONG AuditLogPercentFull;
	ULONG MaximumLogSize;
	LARGE_INTEGER AuditRetentionPeriod;
	BOOLEAN AuditLogFullShutdownInProgress;
	LARGE_INTEGER TimeToShutdown;
	ULONG NextAuditRecordId;
} POLICY_AUDIT_LOG_INFO, * PPOLICY_AUDIT_LOG_INFO;
typedef struct _POLICY_AUDIT_EVENTS_INFO {
	BOOLEAN AuditingMode;
	PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;
	ULONG MaximumAuditEventCount;
} POLICY_AUDIT_EVENTS_INFO, * PPOLICY_AUDIT_EVENTS_INFO;
typedef struct _POLICY_AUDIT_SUBCATEGORIES_INFO {
	ULONG MaximumSubCategoryCount;
	PPOLICY_AUDIT_EVENT_OPTIONS EventAuditingOptions;
} POLICY_AUDIT_SUBCATEGORIES_INFO, * PPOLICY_AUDIT_SUBCATEGORIES_INFO;
typedef struct _POLICY_AUDIT_CATEGORIES_INFO {
	ULONG MaximumCategoryCount;
	PPOLICY_AUDIT_SUBCATEGORIES_INFO SubCategoriesInfo;
} POLICY_AUDIT_CATEGORIES_INFO, * PPOLICY_AUDIT_CATEGORIES_INFO;
typedef struct _POLICY_PRIMARY_DOMAIN_INFO {
	LSA_UNICODE_STRING Name;
	PSID Sid;
} POLICY_PRIMARY_DOMAIN_INFO, * PPOLICY_PRIMARY_DOMAIN_INFO;
typedef struct _POLICY_PD_ACCOUNT_INFO {
	LSA_UNICODE_STRING Name;
} POLICY_PD_ACCOUNT_INFO, * PPOLICY_PD_ACCOUNT_INFO;
typedef struct _POLICY_LSA_SERVER_ROLE_INFO {
	POLICY_LSA_SERVER_ROLE LsaServerRole;
} POLICY_LSA_SERVER_ROLE_INFO, * PPOLICY_LSA_SERVER_ROLE_INFO;
typedef struct _POLICY_REPLICA_SOURCE_INFO {
	LSA_UNICODE_STRING ReplicaSource;
	LSA_UNICODE_STRING ReplicaAccountName;
} POLICY_REPLICA_SOURCE_INFO, * PPOLICY_REPLICA_SOURCE_INFO;
typedef struct _POLICY_DEFAULT_QUOTA_INFO {
	QUOTA_LIMITS QuotaLimits;
} POLICY_DEFAULT_QUOTA_INFO, * PPOLICY_DEFAULT_QUOTA_INFO;
typedef struct _POLICY_MODIFICATION_INFO {
	LARGE_INTEGER ModifiedId;
	LARGE_INTEGER DatabaseCreationTime;
} POLICY_MODIFICATION_INFO, * PPOLICY_MODIFICATION_INFO;
typedef struct _POLICY_AUDIT_FULL_SET_INFO {
	BOOLEAN ShutDownOnFull;
} POLICY_AUDIT_FULL_SET_INFO, * PPOLICY_AUDIT_FULL_SET_INFO;
typedef struct _POLICY_AUDIT_FULL_QUERY_INFO {
	BOOLEAN ShutDownOnFull;
	BOOLEAN LogIsFull;
} POLICY_AUDIT_FULL_QUERY_INFO, * PPOLICY_AUDIT_FULL_QUERY_INFO;
typedef enum _POLICY_DOMAIN_INFORMATION_CLASS {
	PolicyDomainEfsInformation = 2,
	PolicyDomainKerberosTicketInformation
} POLICY_DOMAIN_INFORMATION_CLASS, * PPOLICY_DOMAIN_INFORMATION_CLASS;
typedef struct _POLICY_DOMAIN_EFS_INFO {
	ULONG   InfoLength;
	PUCHAR  EfsBlob;
} POLICY_DOMAIN_EFS_INFO, * PPOLICY_DOMAIN_EFS_INFO;
typedef struct _POLICY_DOMAIN_KERBEROS_TICKET_INFO {
	ULONG AuthenticationOptions;
	LARGE_INTEGER MaxServiceTicketAge;
	LARGE_INTEGER MaxTicketAge;
	LARGE_INTEGER MaxRenewAge;
	LARGE_INTEGER MaxClockSkew;
	LARGE_INTEGER Reserved;
} POLICY_DOMAIN_KERBEROS_TICKET_INFO, * PPOLICY_DOMAIN_KERBEROS_TICKET_INFO;
typedef struct _POLICY_MACHINE_ACCT_INFO {
	ULONG Rid;
	PSID Sid;
} POLICY_MACHINE_ACCT_INFO, * PPOLICY_MACHINE_ACCT_INFO;
typedef enum _POLICY_NOTIFICATION_INFORMATION_CLASS {
	PolicyNotifyAuditEventsInformation = 1,
	PolicyNotifyAccountDomainInformation,
	PolicyNotifyServerRoleInformation,
	PolicyNotifyDnsDomainInformation,
	PolicyNotifyDomainEfsInformation,
	PolicyNotifyDomainKerberosTicketInformation,
	PolicyNotifyMachineAccountPasswordInformation,
	PolicyNotifyGlobalSaclInformation,
	PolicyNotifyMax
} POLICY_NOTIFICATION_INFORMATION_CLASS, * PPOLICY_NOTIFICATION_INFORMATION_CLASS;
typedef PVOID LSA_HANDLE, * PLSA_HANDLE;
typedef enum _TRUSTED_INFORMATION_CLASS {
	TrustedDomainNameInformation = 1,
	TrustedControllersInformation,
	TrustedPosixOffsetInformation,
	TrustedPasswordInformation,
	TrustedDomainInformationBasic,
	TrustedDomainInformationEx,
	TrustedDomainAuthInformation,
	TrustedDomainFullInformation,
	TrustedDomainAuthInformationInternal,
	TrustedDomainFullInformationInternal,
	TrustedDomainInformationEx2Internal,
	TrustedDomainFullInformation2Internal,
	TrustedDomainSupportedEncryptionTypes,
} TRUSTED_INFORMATION_CLASS, * PTRUSTED_INFORMATION_CLASS;
typedef struct _TRUSTED_DOMAIN_NAME_INFO {
	LSA_UNICODE_STRING Name;
} TRUSTED_DOMAIN_NAME_INFO, * PTRUSTED_DOMAIN_NAME_INFO;
typedef struct _TRUSTED_CONTROLLERS_INFO {
	ULONG Entries;
	PLSA_UNICODE_STRING Names;
} TRUSTED_CONTROLLERS_INFO, * PTRUSTED_CONTROLLERS_INFO;
typedef struct _TRUSTED_POSIX_OFFSET_INFO {
	ULONG Offset;
} TRUSTED_POSIX_OFFSET_INFO, * PTRUSTED_POSIX_OFFSET_INFO;
typedef struct _TRUSTED_PASSWORD_INFO {
	LSA_UNICODE_STRING Password;
	LSA_UNICODE_STRING OldPassword;
} TRUSTED_PASSWORD_INFO, * PTRUSTED_PASSWORD_INFO;
typedef  LSA_TRUST_INFORMATION TRUSTED_DOMAIN_INFORMATION_BASIC;
typedef PLSA_TRUST_INFORMATION PTRUSTED_DOMAIN_INFORMATION_BASIC;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX {
	LSA_UNICODE_STRING Name;
	LSA_UNICODE_STRING FlatName;
	PSID  Sid;
	ULONG TrustDirection;
	ULONG TrustType;
	ULONG TrustAttributes;
} TRUSTED_DOMAIN_INFORMATION_EX, * PTRUSTED_DOMAIN_INFORMATION_EX;
typedef struct _TRUSTED_DOMAIN_INFORMATION_EX2 {
	LSA_UNICODE_STRING Name;
	LSA_UNICODE_STRING FlatName;
	PSID  Sid;
	ULONG TrustDirection;
	ULONG TrustType;
	ULONG TrustAttributes;
	ULONG ForestTrustLength;
	PUCHAR ForestTrustInfo;
} TRUSTED_DOMAIN_INFORMATION_EX2, * PTRUSTED_DOMAIN_INFORMATION_EX2;
typedef struct _LSA_AUTH_INFORMATION {
	LARGE_INTEGER LastUpdateTime;
	ULONG AuthType;
	ULONG AuthInfoLength;
	PUCHAR AuthInfo;
} LSA_AUTH_INFORMATION, * PLSA_AUTH_INFORMATION;
typedef struct _TRUSTED_DOMAIN_AUTH_INFORMATION {
	ULONG IncomingAuthInfos;
	PLSA_AUTH_INFORMATION   IncomingAuthenticationInformation;
	PLSA_AUTH_INFORMATION   IncomingPreviousAuthenticationInformation;
	ULONG OutgoingAuthInfos;
	PLSA_AUTH_INFORMATION   OutgoingAuthenticationInformation;
	PLSA_AUTH_INFORMATION   OutgoingPreviousAuthenticationInformation;
} TRUSTED_DOMAIN_AUTH_INFORMATION, * PTRUSTED_DOMAIN_AUTH_INFORMATION;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION {
	TRUSTED_DOMAIN_INFORMATION_EX   Information;
	TRUSTED_POSIX_OFFSET_INFO       PosixOffset;
	TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
} TRUSTED_DOMAIN_FULL_INFORMATION, * PTRUSTED_DOMAIN_FULL_INFORMATION;
typedef struct _TRUSTED_DOMAIN_FULL_INFORMATION2 {
	TRUSTED_DOMAIN_INFORMATION_EX2  Information;
	TRUSTED_POSIX_OFFSET_INFO       PosixOffset;
	TRUSTED_DOMAIN_AUTH_INFORMATION AuthInformation;
} TRUSTED_DOMAIN_FULL_INFORMATION2, * PTRUSTED_DOMAIN_FULL_INFORMATION2;
typedef struct _TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES {
	ULONG      SupportedEncryptionTypes;
} TRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES, * PTRUSTED_DOMAIN_SUPPORTED_ENCRYPTION_TYPES;
typedef enum {
	ForestTrustTopLevelName,
	ForestTrustTopLevelNameEx,
	ForestTrustDomainInfo,
	ForestTrustRecordTypeLast = ForestTrustDomainInfo
} LSA_FOREST_TRUST_RECORD_TYPE;
typedef struct _LSA_FOREST_TRUST_DOMAIN_INFO {
	PSID Sid;
	LSA_UNICODE_STRING DnsName;
	LSA_UNICODE_STRING NetbiosName;
} LSA_FOREST_TRUST_DOMAIN_INFO, * PLSA_FOREST_TRUST_DOMAIN_INFO;
typedef struct _LSA_FOREST_TRUST_BINARY_DATA {
	ULONG Length;
	PUCHAR Buffer;
} LSA_FOREST_TRUST_BINARY_DATA, * PLSA_FOREST_TRUST_BINARY_DATA;
typedef struct _LSA_FOREST_TRUST_RECORD {
	ULONG Flags;
	LSA_FOREST_TRUST_RECORD_TYPE ForestTrustType;
	LARGE_INTEGER Time;
	union {
		LSA_UNICODE_STRING TopLevelName;
		LSA_FOREST_TRUST_DOMAIN_INFO DomainInfo;
		LSA_FOREST_TRUST_BINARY_DATA Data;
	} ForestTrustData;
} LSA_FOREST_TRUST_RECORD, * PLSA_FOREST_TRUST_RECORD;
typedef struct _LSA_FOREST_TRUST_INFORMATION {
	ULONG RecordCount;
	PLSA_FOREST_TRUST_RECORD* Entries;
} LSA_FOREST_TRUST_INFORMATION, * PLSA_FOREST_TRUST_INFORMATION;
typedef enum {
	CollisionTdo,
	CollisionXref,
	CollisionOther
} LSA_FOREST_TRUST_COLLISION_RECORD_TYPE;
typedef struct _LSA_FOREST_TRUST_COLLISION_RECORD {
	ULONG Index;
	LSA_FOREST_TRUST_COLLISION_RECORD_TYPE Type;
	ULONG Flags;
	LSA_UNICODE_STRING Name;
} LSA_FOREST_TRUST_COLLISION_RECORD, * PLSA_FOREST_TRUST_COLLISION_RECORD;
typedef struct _LSA_FOREST_TRUST_COLLISION_INFORMATION {
	ULONG RecordCount;
	PLSA_FOREST_TRUST_COLLISION_RECORD* Entries;
} LSA_FOREST_TRUST_COLLISION_INFORMATION, * PLSA_FOREST_TRUST_COLLISION_INFORMATION;
typedef ULONG LSA_ENUMERATION_HANDLE, * PLSA_ENUMERATION_HANDLE;
typedef struct _LSA_ENUMERATION_INFORMATION {
	PSID Sid;
} LSA_ENUMERATION_INFORMATION, * PLSA_ENUMERATION_INFORMATION;
NTSTATUS
__stdcall
LsaFreeMemory(
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaClose(
	LSA_HANDLE ObjectHandle
);
NTSTATUS
__stdcall
LsaDelete(
	LSA_HANDLE ObjectHandle
);
NTSTATUS
__stdcall
LsaQuerySecurityObject(
	LSA_HANDLE ObjectHandle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR* SecurityDescriptor
);
NTSTATUS
__stdcall
LsaSetSecurityObject(
	LSA_HANDLE ObjectHandle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor
);
NTSTATUS
__stdcall
LsaChangePassword(
	PLSA_UNICODE_STRING ServerName,
	PLSA_UNICODE_STRING DomainName,
	PLSA_UNICODE_STRING AccountName,
	PLSA_UNICODE_STRING OldPassword,
	PLSA_UNICODE_STRING NewPassword
);
typedef struct _LSA_LAST_INTER_LOGON_INFO {
	LARGE_INTEGER LastSuccessfulLogon;
	LARGE_INTEGER LastFailedLogon;
	ULONG FailedAttemptCountSinceLastSuccessfulLogon;
} LSA_LAST_INTER_LOGON_INFO, * PLSA_LAST_INTER_LOGON_INFO;
typedef struct _SECURITY_LOGON_SESSION_DATA {
	ULONG               Size;
	LUID                LogonId;
	LSA_UNICODE_STRING  UserName;
	LSA_UNICODE_STRING  LogonDomain;
	LSA_UNICODE_STRING  AuthenticationPackage;
	ULONG               LogonType;
	ULONG               Session;
	PSID                Sid;
	LARGE_INTEGER       LogonTime;
	LSA_UNICODE_STRING  LogonServer;
	LSA_UNICODE_STRING  DnsDomainName;
	LSA_UNICODE_STRING  Upn;
	ULONG UserFlags;
	LSA_LAST_INTER_LOGON_INFO LastLogonInfo;
	LSA_UNICODE_STRING LogonScript;
	LSA_UNICODE_STRING ProfilePath;
	LSA_UNICODE_STRING HomeDirectory;
	LSA_UNICODE_STRING HomeDirectoryDrive;
	LARGE_INTEGER LogoffTime;
	LARGE_INTEGER KickOffTime;
	LARGE_INTEGER PasswordLastSet;
	LARGE_INTEGER PasswordCanChange;
	LARGE_INTEGER PasswordMustChange;
} SECURITY_LOGON_SESSION_DATA, * PSECURITY_LOGON_SESSION_DATA;
NTSTATUS
__stdcall
LsaEnumerateLogonSessions(
	PULONG  LogonSessionCount,
	PLUID* LogonSessionList
);
NTSTATUS
__stdcall
LsaGetLogonSessionData(
	PLUID    LogonId,
	PSECURITY_LOGON_SESSION_DATA* ppLogonSessionData
);
NTSTATUS
__stdcall
LsaOpenPolicy(
	PLSA_UNICODE_STRING SystemName,
	PLSA_OBJECT_ATTRIBUTES ObjectAttributes,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE PolicyHandle
);
NTSTATUS
__stdcall
LsaOpenPolicySce(
	PLSA_UNICODE_STRING SystemName,
	PLSA_OBJECT_ATTRIBUTES ObjectAttributes,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE PolicyHandle
);
typedef struct _CENTRAL_ACCESS_POLICY_ENTRY {
	LSA_UNICODE_STRING      Name;
	LSA_UNICODE_STRING      Description;
	LSA_UNICODE_STRING      ChangeId;
	ULONG                   LengthAppliesTo;
	PUCHAR                  AppliesTo;
	ULONG                   LengthSD;
	PSECURITY_DESCRIPTOR    SD;
	ULONG                   LengthStagedSD;
	PSECURITY_DESCRIPTOR    StagedSD;
	ULONG                   Flags;
}
CENTRAL_ACCESS_POLICY_ENTRY, * PCENTRAL_ACCESS_POLICY_ENTRY;
typedef const CENTRAL_ACCESS_POLICY_ENTRY* PCCENTRAL_ACCESS_POLICY_ENTRY;
typedef struct _CENTRAL_ACCESS_POLICY {
	PSID                            CAPID;
	LSA_UNICODE_STRING              Name;
	LSA_UNICODE_STRING              Description;
	LSA_UNICODE_STRING              ChangeId;
	ULONG                           Flags;
	ULONG                           CAPECount;
	PCENTRAL_ACCESS_POLICY_ENTRY* CAPEs;
}
CENTRAL_ACCESS_POLICY, * PCENTRAL_ACCESS_POLICY;
typedef const CENTRAL_ACCESS_POLICY* PCCENTRAL_ACCESS_POLICY;
NTSTATUS
__stdcall
LsaSetCAPs(
	PLSA_UNICODE_STRING CAPDNs,
	ULONG CAPDNCount,
	ULONG Flags
);
NTSTATUS
__stdcall
LsaGetAppliedCAPIDs(
	PLSA_UNICODE_STRING SystemName,
	PSID** CAPIDs,
	PULONG CAPIDCount
);
NTSTATUS
__stdcall
LsaQueryCAPs(
	PSID* CAPIDs,
	ULONG CAPIDCount,
	PCENTRAL_ACCESS_POLICY* CAPs,
	PULONG CAPCount
);
NTSTATUS
__stdcall
LsaQueryInformationPolicy(
	LSA_HANDLE PolicyHandle,
	POLICY_INFORMATION_CLASS InformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
LsaSetInformationPolicy(
	LSA_HANDLE PolicyHandle,
	POLICY_INFORMATION_CLASS InformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaQueryDomainInformationPolicy(
	LSA_HANDLE PolicyHandle,
	POLICY_DOMAIN_INFORMATION_CLASS InformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
LsaSetDomainInformationPolicy(
	LSA_HANDLE PolicyHandle,
	POLICY_DOMAIN_INFORMATION_CLASS InformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaRegisterPolicyChangeNotification(
	POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass,
	HANDLE  NotificationEventHandle
);
NTSTATUS
__stdcall
LsaUnregisterPolicyChangeNotification(
	POLICY_NOTIFICATION_INFORMATION_CLASS InformationClass,
	HANDLE  NotificationEventHandle
);
NTSTATUS
__stdcall
LsaClearAuditLog(
	LSA_HANDLE PolicyHandle
);
NTSTATUS
__stdcall
LsaCreateAccount(
	LSA_HANDLE PolicyHandle,
	PSID AccountSid,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE AccountHandle
);
NTSTATUS
__stdcall
LsaEnumerateAccounts(
	LSA_HANDLE PolicyHandle,
	PLSA_ENUMERATION_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
LsaCreateTrustedDomain(
	LSA_HANDLE PolicyHandle,
	PLSA_TRUST_INFORMATION TrustedDomainInformation,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE TrustedDomainHandle
);
NTSTATUS
__stdcall
LsaEnumerateTrustedDomains(
	LSA_HANDLE PolicyHandle,
	PLSA_ENUMERATION_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
LsaEnumeratePrivileges(
	LSA_HANDLE PolicyHandle,
	PLSA_ENUMERATION_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
LsaLookupNames(
	LSA_HANDLE PolicyHandle,
	ULONG Count,
	PLSA_UNICODE_STRING Names,
	PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,
	PLSA_TRANSLATED_SID* Sids
);
NTSTATUS
__stdcall
LsaLookupNames2(
	LSA_HANDLE PolicyHandle,
	ULONG Flags,
	ULONG Count,
	PLSA_UNICODE_STRING Names,
	PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,
	PLSA_TRANSLATED_SID2* Sids
);
NTSTATUS
__stdcall
LsaLookupSids(
	LSA_HANDLE PolicyHandle,
	ULONG Count,
	PSID* Sids,
	PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,
	PLSA_TRANSLATED_NAME* Names
);
NTSTATUS
__stdcall
LsaLookupSids2(
	LSA_HANDLE PolicyHandle,
	ULONG LookupOptions,
	ULONG Count,
	PSID* Sids,
	PLSA_REFERENCED_DOMAIN_LIST* ReferencedDomains,
	PLSA_TRANSLATED_NAME* Names
);
NTSTATUS
__stdcall
LsaCreateSecret(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING SecretName,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE SecretHandle
);
NTSTATUS
__stdcall
LsaOpenAccount(
	LSA_HANDLE PolicyHandle,
	PSID AccountSid,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE AccountHandle
);
NTSTATUS
__stdcall
LsaEnumeratePrivilegesOfAccount(
	LSA_HANDLE AccountHandle,
	PPRIVILEGE_SET* Privileges
);
NTSTATUS
__stdcall
LsaAddPrivilegesToAccount(
	LSA_HANDLE AccountHandle,
	PPRIVILEGE_SET Privileges
);
NTSTATUS
__stdcall
LsaRemovePrivilegesFromAccount(
	LSA_HANDLE AccountHandle,
	BOOLEAN AllPrivileges,
	PPRIVILEGE_SET Privileges
);
NTSTATUS
__stdcall
LsaGetQuotasForAccount(
	LSA_HANDLE AccountHandle,
	PQUOTA_LIMITS QuotaLimits
);
NTSTATUS
__stdcall
LsaSetQuotasForAccount(
	LSA_HANDLE AccountHandle,
	PQUOTA_LIMITS QuotaLimits
);
NTSTATUS
__stdcall
LsaGetSystemAccessAccount(
	LSA_HANDLE AccountHandle,
	PULONG SystemAccess
);
NTSTATUS
__stdcall
LsaSetSystemAccessAccount(
	LSA_HANDLE AccountHandle,
	ULONG SystemAccess
);
NTSTATUS
__stdcall
LsaOpenTrustedDomain(
	LSA_HANDLE PolicyHandle,
	PSID TrustedDomainSid,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE TrustedDomainHandle
);
NTSTATUS
__stdcall
LsaQueryInfoTrustedDomain(
	LSA_HANDLE TrustedDomainHandle,
	TRUSTED_INFORMATION_CLASS InformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
LsaSetInformationTrustedDomain(
	LSA_HANDLE TrustedDomainHandle,
	TRUSTED_INFORMATION_CLASS InformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaOpenSecret(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING SecretName,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE SecretHandle
);
NTSTATUS
__stdcall
LsaSetSecret(
	LSA_HANDLE SecretHandle,
	PLSA_UNICODE_STRING CurrentValue,
	PLSA_UNICODE_STRING OldValue
);
NTSTATUS
__stdcall
LsaQuerySecret(
	LSA_HANDLE SecretHandle,
	PLSA_UNICODE_STRING* CurrentValue,
	PLARGE_INTEGER CurrentValueSetTime,
	PLSA_UNICODE_STRING* OldValue,
	PLARGE_INTEGER OldValueSetTime
);
NTSTATUS
__stdcall
LsaLookupPrivilegeValue(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING Name,
	PLUID Value
);
NTSTATUS
__stdcall
LsaLookupPrivilegeName(
	LSA_HANDLE PolicyHandle,
	PLUID Value,
	PLSA_UNICODE_STRING* Name
);
NTSTATUS
__stdcall
LsaLookupPrivilegeDisplayName(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING Name,
	PLSA_UNICODE_STRING* DisplayName,
	PSHORT LanguageReturned
);
NTSTATUS
LsaGetUserName(
	PLSA_UNICODE_STRING* UserName,
	PLSA_UNICODE_STRING* DomainName
);
NTSTATUS
LsaGetRemoteUserName(
	PLSA_UNICODE_STRING SystemName,
	PLSA_UNICODE_STRING* UserName,
	PLSA_UNICODE_STRING* DomainName
);
NTSTATUS
__stdcall
LsaEnumerateAccountsWithUserRight(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING UserRight,
	PVOID* Buffer,
	PULONG CountReturned
);
NTSTATUS
__stdcall
LsaEnumerateAccountRights(
	LSA_HANDLE PolicyHandle,
	PSID AccountSid,
	PLSA_UNICODE_STRING* UserRights,
	PULONG CountOfRights
);
NTSTATUS
__stdcall
LsaAddAccountRights(
	LSA_HANDLE PolicyHandle,
	PSID AccountSid,
	PLSA_UNICODE_STRING UserRights,
	ULONG CountOfRights
);
NTSTATUS
__stdcall
LsaRemoveAccountRights(
	LSA_HANDLE PolicyHandle,
	PSID AccountSid,
	BOOLEAN AllRights,
	PLSA_UNICODE_STRING UserRights,
	ULONG CountOfRights
);
NTSTATUS
__stdcall
LsaOpenTrustedDomainByName(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING TrustedDomainName,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE TrustedDomainHandle
);
NTSTATUS
__stdcall
LsaQueryTrustedDomainInfo(
	LSA_HANDLE PolicyHandle,
	PSID TrustedDomainSid,
	TRUSTED_INFORMATION_CLASS InformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
LsaSetTrustedDomainInformation(
	LSA_HANDLE PolicyHandle,
	PSID TrustedDomainSid,
	TRUSTED_INFORMATION_CLASS InformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaDeleteTrustedDomain(
	LSA_HANDLE PolicyHandle,
	PSID TrustedDomainSid
);
NTSTATUS
__stdcall
LsaQueryTrustedDomainInfoByName(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING TrustedDomainName,
	TRUSTED_INFORMATION_CLASS InformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
LsaSetTrustedDomainInfoByName(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING TrustedDomainName,
	TRUSTED_INFORMATION_CLASS InformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
LsaEnumerateTrustedDomainsEx(
	LSA_HANDLE PolicyHandle,
	PLSA_ENUMERATION_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
LsaCreateTrustedDomainEx(
	LSA_HANDLE PolicyHandle,
	PTRUSTED_DOMAIN_INFORMATION_EX TrustedDomainInformation,
	PTRUSTED_DOMAIN_AUTH_INFORMATION AuthenticationInformation,
	ACCESS_MASK DesiredAccess,
	PLSA_HANDLE TrustedDomainHandle
);
NTSTATUS
__stdcall
LsaQueryForestTrustInformation(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING TrustedDomainName,
	PLSA_FOREST_TRUST_INFORMATION* ForestTrustInfo
);
NTSTATUS
__stdcall
LsaSetForestTrustInformation(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING TrustedDomainName,
	PLSA_FOREST_TRUST_INFORMATION ForestTrustInfo,
	BOOLEAN CheckOnly,
	PLSA_FOREST_TRUST_COLLISION_INFORMATION* CollisionInfo
);
NTSTATUS
__stdcall
LsaStorePrivateData(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING KeyName,
	PLSA_UNICODE_STRING PrivateData
);
NTSTATUS
__stdcall
LsaRetrievePrivateData(
	LSA_HANDLE PolicyHandle,
	PLSA_UNICODE_STRING KeyName,
	PLSA_UNICODE_STRING* PrivateData
);
ULONG
__stdcall
LsaNtStatusToWinError(
	NTSTATUS Status
);
enum NEGOTIATE_MESSAGES {
	NegEnumPackagePrefixes = 0,
	NegGetCallerName = 1,
	NegTransferCredentials = 2,
	NegEnumPackageNames = 3,
	NegCallPackageMax
};
typedef struct _NEGOTIATE_PACKAGE_PREFIX {
	ULONG_PTR   PackageId;
	PVOID       PackageDataA;
	PVOID       PackageDataW;
	ULONG_PTR   PrefixLen;
	UCHAR       Prefix[32];
} NEGOTIATE_PACKAGE_PREFIX, * PNEGOTIATE_PACKAGE_PREFIX;
typedef struct _NEGOTIATE_PACKAGE_PREFIXES {
	ULONG       MessageType;
	ULONG       PrefixCount;
	ULONG       Offset;
	ULONG       Pad;
} NEGOTIATE_PACKAGE_PREFIXES, * PNEGOTIATE_PACKAGE_PREFIXES;
typedef struct _NEGOTIATE_CALLER_NAME_REQUEST {
	ULONG       MessageType;
	LUID        LogonId;
} NEGOTIATE_CALLER_NAME_REQUEST, * PNEGOTIATE_CALLER_NAME_REQUEST;
typedef struct _NEGOTIATE_CALLER_NAME_RESPONSE {
	ULONG       MessageType;
	PWSTR       CallerName;
} NEGOTIATE_CALLER_NAME_RESPONSE, * PNEGOTIATE_CALLER_NAME_RESPONSE;
typedef struct _NEGOTIATE_PACKAGE_NAMES {
	ULONG           NamesCount;
	UNICODE_STRING  Names[1];
} NEGOTIATE_PACKAGE_NAMES, * PNEGOTIATE_PACKAGE_NAMES;
typedef struct _NEGOTIATE_PACKAGE_PREFIX_WOW {
	ULONG       PackageId;
	ULONG       PackageDataA;
	ULONG       PackageDataW;
	ULONG       PrefixLen;
	UCHAR       Prefix[32];
} NEGOTIATE_PACKAGE_PREFIX_WOW, * PNEGOTIATE_PACKAGE_PREFIX_WOW;
typedef struct _NEGOTIATE_CALLER_NAME_RESPONSE_WOW {
	ULONG       MessageType;
	ULONG       CallerName;
} NEGOTIATE_CALLER_NAME_RESPONSE_WOW, * PNEGOTIATE_CALLER_NAME_RESPONSE_WOW;
NTSTATUS
__stdcall
LsaSetPolicyReplicationHandle(
	PLSA_HANDLE PolicyHandle
);
typedef struct _LSA_USER_REGISTRATION_INFO {
	LSA_UNICODE_STRING Sid;
	LSA_UNICODE_STRING DeviceId;
	LSA_UNICODE_STRING Username;
	LSA_UNICODE_STRING Thumbprint;
	LARGE_INTEGER      RegistrationTime;
} LSA_USER_REGISTRATION_INFO, * PLSA_USER_REGISTRATION_INFO;
typedef struct _LSA_REGISTRATION_INFO {
	ULONG RegisteredCount;
	PLSA_USER_REGISTRATION_INFO* UserRegistrationInfo;
} LSA_REGISTRATION_INFO, * PLSA_REGISTRATION_INFO;
NTSTATUS
__stdcall
LsaGetDeviceRegistrationInfo(
	PLSA_REGISTRATION_INFO* RegistrationInfo
);
typedef enum _LSA_CREDENTIAL_KEY_SOURCE_TYPE
{
	eFromPrecomputed = 1,
	eFromClearPassword,
	eFromNtOwf,
} LSA_CREDENTIAL_KEY_SOURCE_TYPE, * PLSA_CREDENTIAL_KEY_SOURCE_TYPE;
NTSTATUS
SeciIsProtectedUser(
	PBOOLEAN ProtectedUser
);
typedef PVOID SAM_HANDLE, * PSAM_HANDLE;
typedef ULONG SAM_ENUMERATE_HANDLE, * PSAM_ENUMERATE_HANDLE;
typedef struct _SAM_RID_ENUMERATION
{
	ULONG RelativeId;
	UNICODE_STRING Name;
} SAM_RID_ENUMERATION, * PSAM_RID_ENUMERATION;
typedef struct _SAM_SID_ENUMERATION
{
	PSID Sid;
	UNICODE_STRING Name;
} SAM_SID_ENUMERATION, * PSAM_SID_ENUMERATION;
typedef struct _SAM_BYTE_ARRAY
{
	ULONG Size;
	PUCHAR Data;
} SAM_BYTE_ARRAY, * PSAM_BYTE_ARRAY;
typedef struct _SAM_BYTE_ARRAY_32K
{
	ULONG Size;
	PUCHAR Data;
} SAM_BYTE_ARRAY_32K, * PSAM_BYTE_ARRAY_32K;
typedef SAM_BYTE_ARRAY_32K SAM_SHELL_OBJECT_PROPERTIES, * PSAM_SHELL_OBJECT_PROPERTIES;
NTSTATUS
__stdcall
SamFreeMemory(
	PVOID Buffer
);
NTSTATUS
__stdcall
SamCloseHandle(
	SAM_HANDLE SamHandle
);
NTSTATUS
__stdcall
SamSetSecurityObject(
	SAM_HANDLE ObjectHandle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor
);
NTSTATUS
__stdcall
SamQuerySecurityObject(
	SAM_HANDLE ObjectHandle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR* SecurityDescriptor
);
NTSTATUS
__stdcall
SamRidToSid(
	SAM_HANDLE ObjectHandle,
	ULONG Rid,
	PSID* Sid
);
NTSTATUS
__stdcall
SamConnect(
	PUNICODE_STRING ServerName,
	PSAM_HANDLE ServerHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);
NTSTATUS
__stdcall
SamShutdownSamServer(
	SAM_HANDLE ServerHandle
);
typedef enum _DOMAIN_INFORMATION_CLASS
{
	DomainPasswordInformation = 1,
	DomainGeneralInformation,
	DomainLogoffInformation,
	DomainOemInformation,
	DomainNameInformation,
	DomainReplicationInformation,
	DomainServerRoleInformation,
	DomainModifiedInformation,
	DomainStateInformation,
	DomainUasInformation,
	DomainGeneralInformation2,
	DomainLockoutInformation,
	DomainModifiedInformation2
} DOMAIN_INFORMATION_CLASS;
typedef enum _DOMAIN_SERVER_ENABLE_STATE
{
	DomainServerEnabled = 1,
	DomainServerDisabled
} DOMAIN_SERVER_ENABLE_STATE, * PDOMAIN_SERVER_ENABLE_STATE;
typedef enum _DOMAIN_SERVER_ROLE
{
	DomainServerRoleBackup = 2,
	DomainServerRolePrimary
} DOMAIN_SERVER_ROLE, * PDOMAIN_SERVER_ROLE;
typedef struct _DOMAIN_GENERAL_INFORMATION
{
	LARGE_INTEGER ForceLogoff;
	UNICODE_STRING OemInformation;
	UNICODE_STRING DomainName;
	UNICODE_STRING ReplicaSourceNodeName;
	LARGE_INTEGER DomainModifiedCount;
	DOMAIN_SERVER_ENABLE_STATE DomainServerState;
	DOMAIN_SERVER_ROLE DomainServerRole;
	BOOLEAN UasCompatibilityRequired;
	ULONG UserCount;
	ULONG GroupCount;
	ULONG AliasCount;
} DOMAIN_GENERAL_INFORMATION, * PDOMAIN_GENERAL_INFORMATION;
typedef struct _DOMAIN_GENERAL_INFORMATION2
{
	DOMAIN_GENERAL_INFORMATION I1;
	LARGE_INTEGER LockoutDuration;
	LARGE_INTEGER LockoutObservationWindow;
	USHORT LockoutThreshold;
} DOMAIN_GENERAL_INFORMATION2, * PDOMAIN_GENERAL_INFORMATION2;
typedef struct _DOMAIN_UAS_INFORMATION
{
	BOOLEAN UasCompatibilityRequired;
} DOMAIN_UAS_INFORMATION;
typedef struct _DOMAIN_PASSWORD_INFORMATION
{
	USHORT MinPasswordLength;
	USHORT PasswordHistoryLength;
	ULONG PasswordProperties;
	LARGE_INTEGER MaxPasswordAge;
	LARGE_INTEGER MinPasswordAge;
} DOMAIN_PASSWORD_INFORMATION, * PDOMAIN_PASSWORD_INFORMATION;
typedef enum _DOMAIN_PASSWORD_CONSTRUCTION
{
	DomainPasswordSimple = 1,
	DomainPasswordComplex
} DOMAIN_PASSWORD_CONSTRUCTION;
typedef struct _DOMAIN_LOGOFF_INFORMATION
{
	LARGE_INTEGER ForceLogoff;
} DOMAIN_LOGOFF_INFORMATION, * PDOMAIN_LOGOFF_INFORMATION;
typedef struct _DOMAIN_OEM_INFORMATION
{
	UNICODE_STRING OemInformation;
} DOMAIN_OEM_INFORMATION, * PDOMAIN_OEM_INFORMATION;
typedef struct _DOMAIN_NAME_INFORMATION
{
	UNICODE_STRING DomainName;
} DOMAIN_NAME_INFORMATION, * PDOMAIN_NAME_INFORMATION;
typedef struct _DOMAIN_SERVER_ROLE_INFORMATION
{
	DOMAIN_SERVER_ROLE DomainServerRole;
} DOMAIN_SERVER_ROLE_INFORMATION, * PDOMAIN_SERVER_ROLE_INFORMATION;
typedef struct _DOMAIN_REPLICATION_INFORMATION
{
	UNICODE_STRING ReplicaSourceNodeName;
} DOMAIN_REPLICATION_INFORMATION, * PDOMAIN_REPLICATION_INFORMATION;
typedef struct _DOMAIN_MODIFIED_INFORMATION
{
	LARGE_INTEGER DomainModifiedCount;
	LARGE_INTEGER CreationTime;
} DOMAIN_MODIFIED_INFORMATION, * PDOMAIN_MODIFIED_INFORMATION;
typedef struct _DOMAIN_MODIFIED_INFORMATION2
{
	LARGE_INTEGER DomainModifiedCount;
	LARGE_INTEGER CreationTime;
	LARGE_INTEGER ModifiedCountAtLastPromotion;
} DOMAIN_MODIFIED_INFORMATION2, * PDOMAIN_MODIFIED_INFORMATION2;
typedef struct _DOMAIN_STATE_INFORMATION
{
	DOMAIN_SERVER_ENABLE_STATE DomainServerState;
} DOMAIN_STATE_INFORMATION, * PDOMAIN_STATE_INFORMATION;
typedef struct _DOMAIN_LOCKOUT_INFORMATION
{
	LARGE_INTEGER LockoutDuration;
	LARGE_INTEGER LockoutObservationWindow;
	USHORT LockoutThreshold;
} DOMAIN_LOCKOUT_INFORMATION, * PDOMAIN_LOCKOUT_INFORMATION;
typedef enum _DOMAIN_DISPLAY_INFORMATION
{
	DomainDisplayUser = 1,
	DomainDisplayMachine,
	DomainDisplayGroup,
	DomainDisplayOemUser,
	DomainDisplayOemGroup,
	DomainDisplayServer
} DOMAIN_DISPLAY_INFORMATION, * PDOMAIN_DISPLAY_INFORMATION;
typedef struct _DOMAIN_DISPLAY_USER
{
	ULONG Index;
	ULONG Rid;
	ULONG AccountControl;
	UNICODE_STRING LogonName;
	UNICODE_STRING AdminComment;
	UNICODE_STRING FullName;
} DOMAIN_DISPLAY_USER, * PDOMAIN_DISPLAY_USER;
typedef struct _DOMAIN_DISPLAY_MACHINE
{
	ULONG Index;
	ULONG Rid;
	ULONG AccountControl;
	UNICODE_STRING Machine;
	UNICODE_STRING Comment;
} DOMAIN_DISPLAY_MACHINE, * PDOMAIN_DISPLAY_MACHINE;
typedef struct _DOMAIN_DISPLAY_GROUP
{
	ULONG Index;
	ULONG Rid;
	ULONG Attributes;
	UNICODE_STRING Group;
	UNICODE_STRING Comment;
} DOMAIN_DISPLAY_GROUP, * PDOMAIN_DISPLAY_GROUP;
typedef struct _DOMAIN_DISPLAY_OEM_USER
{
	ULONG Index;
	OEM_STRING User;
} DOMAIN_DISPLAY_OEM_USER, * PDOMAIN_DISPLAY_OEM_USER;
typedef struct _DOMAIN_DISPLAY_OEM_GROUP
{
	ULONG Index;
	OEM_STRING Group;
} DOMAIN_DISPLAY_OEM_GROUP, * PDOMAIN_DISPLAY_OEM_GROUP;
typedef enum _DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION
{
	DomainLocalizableAccountsBasic = 1,
} DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION, * PDOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION;
typedef struct _DOMAIN_LOCALIZABLE_ACCOUNTS_ENTRY
{
	ULONG Rid;
	SID_NAME_USE Use;
	UNICODE_STRING Name;
	UNICODE_STRING AdminComment;
} DOMAIN_LOCALIZABLE_ACCOUNT_ENTRY, * PDOMAIN_LOCALIZABLE_ACCOUNT_ENTRY;
typedef struct _DOMAIN_LOCALIZABLE_ACCOUNTS
{
	ULONG Count;
	DOMAIN_LOCALIZABLE_ACCOUNT_ENTRY* Entries;
} DOMAIN_LOCALIZABLE_ACCOUNTS_BASIC, * PDOMAIN_LOCALIZABLE_ACCOUNTS_BASIC;
typedef union _DOMAIN_LOCALIZABLE_INFO_BUFFER
{
	DOMAIN_LOCALIZABLE_ACCOUNTS_BASIC Basic;
} DOMAIN_LOCALIZABLE_ACCOUNTS_INFO_BUFFER, * PDOMAIN_LOCALIZABLE_ACCOUNTS_INFO_BUFFER;
NTSTATUS
__stdcall
SamLookupDomainInSamServer(
	SAM_HANDLE ServerHandle,
	PUNICODE_STRING Name,
	PSID* DomainId
);
NTSTATUS
__stdcall
SamEnumerateDomainsInSamServer(
	SAM_HANDLE ServerHandle,
	PSAM_ENUMERATE_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
SamOpenDomain(
	SAM_HANDLE ServerHandle,
	ACCESS_MASK DesiredAccess,
	PSID DomainId,
	PSAM_HANDLE DomainHandle
);
NTSTATUS
__stdcall
SamQueryInformationDomain(
	SAM_HANDLE DomainHandle,
	DOMAIN_INFORMATION_CLASS DomainInformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
SamSetInformationDomain(
	SAM_HANDLE DomainHandle,
	DOMAIN_INFORMATION_CLASS DomainInformationClass,
	PVOID DomainInformation
);
NTSTATUS
__stdcall
SamLookupNamesInDomain(
	SAM_HANDLE DomainHandle,
	ULONG Count,
	PUNICODE_STRING Names,
	PULONG* RelativeIds,
	PSID_NAME_USE* Use
);
NTSTATUS
__stdcall
SamLookupIdsInDomain(
	SAM_HANDLE DomainHandle,
	ULONG Count,
	PULONG RelativeIds,
	PUNICODE_STRING* Names,
	PSID_NAME_USE* Use
);
NTSTATUS
__stdcall
SamRemoveMemberFromForeignDomain(
	SAM_HANDLE DomainHandle,
	PSID MemberId
);
NTSTATUS
__stdcall
SamQueryLocalizableAccountsInDomain(
	SAM_HANDLE Domain,
	ULONG Flags,
	ULONG LanguageId,
	DOMAIN_LOCALIZABLE_ACCOUNTS_INFORMATION Class,
	PVOID* Buffer
);
typedef struct _GROUP_MEMBERSHIP
{
	ULONG RelativeId;
	ULONG Attributes;
} GROUP_MEMBERSHIP, * PGROUP_MEMBERSHIP;
typedef enum _GROUP_INFORMATION_CLASS
{
	GroupGeneralInformation = 1,
	GroupNameInformation,
	GroupAttributeInformation,
	GroupAdminCommentInformation,
	GroupReplicationInformation
} GROUP_INFORMATION_CLASS;
typedef struct _GROUP_GENERAL_INFORMATION
{
	UNICODE_STRING Name;
	ULONG Attributes;
	ULONG MemberCount;
	UNICODE_STRING AdminComment;
} GROUP_GENERAL_INFORMATION, * PGROUP_GENERAL_INFORMATION;
typedef struct _GROUP_NAME_INFORMATION
{
	UNICODE_STRING Name;
} GROUP_NAME_INFORMATION, * PGROUP_NAME_INFORMATION;
typedef struct _GROUP_ATTRIBUTE_INFORMATION
{
	ULONG Attributes;
} GROUP_ATTRIBUTE_INFORMATION, * PGROUP_ATTRIBUTE_INFORMATION;
typedef struct _GROUP_ADM_COMMENT_INFORMATION
{
	UNICODE_STRING AdminComment;
} GROUP_ADM_COMMENT_INFORMATION, * PGROUP_ADM_COMMENT_INFORMATION;
NTSTATUS
__stdcall
SamEnumerateGroupsInDomain(
	SAM_HANDLE DomainHandle,
	PSAM_ENUMERATE_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
SamCreateGroupInDomain(
	SAM_HANDLE DomainHandle,
	PUNICODE_STRING AccountName,
	ACCESS_MASK DesiredAccess,
	PSAM_HANDLE GroupHandle,
	PULONG RelativeId
);
NTSTATUS
__stdcall
SamOpenGroup(
	SAM_HANDLE DomainHandle,
	ACCESS_MASK DesiredAccess,
	ULONG GroupId,
	PSAM_HANDLE GroupHandle
);
NTSTATUS
__stdcall
SamDeleteGroup(
	SAM_HANDLE GroupHandle
);
NTSTATUS
__stdcall
SamQueryInformationGroup(
	SAM_HANDLE GroupHandle,
	GROUP_INFORMATION_CLASS GroupInformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
SamSetInformationGroup(
	SAM_HANDLE GroupHandle,
	GROUP_INFORMATION_CLASS GroupInformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
SamAddMemberToGroup(
	SAM_HANDLE GroupHandle,
	ULONG MemberId,
	ULONG Attributes
);
NTSTATUS
__stdcall
SamRemoveMemberFromGroup(
	SAM_HANDLE GroupHandle,
	ULONG MemberId
);
NTSTATUS
__stdcall
SamGetMembersInGroup(
	SAM_HANDLE GroupHandle,
	PULONG* MemberIds,
	PULONG* Attributes,
	PULONG MemberCount
);
NTSTATUS
__stdcall
SamSetMemberAttributesOfGroup(
	SAM_HANDLE GroupHandle,
	ULONG MemberId,
	ULONG Attributes
);
typedef enum _ALIAS_INFORMATION_CLASS
{
	AliasGeneralInformation = 1,
	AliasNameInformation,
	AliasAdminCommentInformation,
	AliasReplicationInformation,
	AliasExtendedInformation,
} ALIAS_INFORMATION_CLASS;
typedef struct _ALIAS_GENERAL_INFORMATION
{
	UNICODE_STRING Name;
	ULONG MemberCount;
	UNICODE_STRING AdminComment;
} ALIAS_GENERAL_INFORMATION, * PALIAS_GENERAL_INFORMATION;
typedef struct _ALIAS_NAME_INFORMATION
{
	UNICODE_STRING Name;
} ALIAS_NAME_INFORMATION, * PALIAS_NAME_INFORMATION;
typedef struct _ALIAS_ADM_COMMENT_INFORMATION
{
	UNICODE_STRING AdminComment;
} ALIAS_ADM_COMMENT_INFORMATION, * PALIAS_ADM_COMMENT_INFORMATION;
typedef struct _ALIAS_EXTENDED_INFORMATION
{
	ULONG WhichFields;
	SAM_SHELL_OBJECT_PROPERTIES ShellAdminObjectProperties;
} ALIAS_EXTENDED_INFORMATION, * PALIAS_EXTENDED_INFORMATION;
NTSTATUS
__stdcall
SamEnumerateAliasesInDomain(
	SAM_HANDLE DomainHandle,
	PSAM_ENUMERATE_HANDLE EnumerationContext,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
SamCreateAliasInDomain(
	SAM_HANDLE DomainHandle,
	PUNICODE_STRING AccountName,
	ACCESS_MASK DesiredAccess,
	PSAM_HANDLE AliasHandle,
	PULONG RelativeId
);
NTSTATUS
__stdcall
SamOpenAlias(
	SAM_HANDLE DomainHandle,
	ACCESS_MASK DesiredAccess,
	ULONG AliasId,
	PSAM_HANDLE AliasHandle
);
NTSTATUS
__stdcall
SamDeleteAlias(
	SAM_HANDLE AliasHandle
);
NTSTATUS
__stdcall
SamQueryInformationAlias(
	SAM_HANDLE AliasHandle,
	ALIAS_INFORMATION_CLASS AliasInformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
SamSetInformationAlias(
	SAM_HANDLE AliasHandle,
	ALIAS_INFORMATION_CLASS AliasInformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
SamAddMemberToAlias(
	SAM_HANDLE AliasHandle,
	PSID MemberId
);
NTSTATUS
__stdcall
SamAddMultipleMembersToAlias(
	SAM_HANDLE AliasHandle,
	PSID* MemberIds,
	ULONG MemberCount
);
NTSTATUS
__stdcall
SamRemoveMemberFromAlias(
	SAM_HANDLE AliasHandle,
	PSID MemberId
);
NTSTATUS
__stdcall
SamRemoveMultipleMembersFromAlias(
	SAM_HANDLE AliasHandle,
	PSID* MemberIds,
	ULONG MemberCount
);
NTSTATUS
__stdcall
SamGetMembersInAlias(
	SAM_HANDLE AliasHandle,
	PSID** MemberIds,
	PULONG MemberCount
);
NTSTATUS
__stdcall
SamGetAliasMembership(
	SAM_HANDLE DomainHandle,
	ULONG PassedCount,
	PSID* Sids,
	PULONG MembershipCount,
	PULONG* Aliases
);
typedef struct _LOGON_HOURS
{
	USHORT UnitsPerWeek;
	PUCHAR LogonHours;
} LOGON_HOURS, * PLOGON_HOURS;
typedef struct _SR_SECURITY_DESCRIPTOR
{
	ULONG Length;
	PUCHAR SecurityDescriptor;
} SR_SECURITY_DESCRIPTOR, * PSR_SECURITY_DESCRIPTOR;
typedef enum _USER_INFORMATION_CLASS
{
	UserGeneralInformation = 1,
	UserPreferencesInformation,
	UserLogonInformation,
	UserLogonHoursInformation,
	UserAccountInformation,
	UserNameInformation,
	UserAccountNameInformation,
	UserFullNameInformation,
	UserPrimaryGroupInformation,
	UserHomeInformation,
	UserScriptInformation,
	UserProfileInformation,
	UserAdminCommentInformation,
	UserWorkStationsInformation,
	UserSetPasswordInformation,
	UserControlInformation,
	UserExpiresInformation,
	UserInternal1Information,
	UserInternal2Information,
	UserParametersInformation,
	UserAllInformation,
	UserInternal3Information,
	UserInternal4Information,
	UserInternal5Information,
	UserInternal4InformationNew,
	UserInternal5InformationNew,
	UserInternal6Information,
	UserExtendedInformation,
	UserLogonUIInformation
} USER_INFORMATION_CLASS, * PUSER_INFORMATION_CLASS;
typedef struct _USER_GENERAL_INFORMATION
{
	UNICODE_STRING UserName;
	UNICODE_STRING FullName;
	ULONG PrimaryGroupId;
	UNICODE_STRING AdminComment;
	UNICODE_STRING UserComment;
} USER_GENERAL_INFORMATION, * PUSER_GENERAL_INFORMATION;
typedef struct _USER_PREFERENCES_INFORMATION
{
	UNICODE_STRING UserComment;
	UNICODE_STRING Reserved1;
	USHORT CountryCode;
	USHORT CodePage;
} USER_PREFERENCES_INFORMATION, * PUSER_PREFERENCES_INFORMATION;
typedef struct _USER_LOGON_INFORMATION
{
	UNICODE_STRING UserName;
	UNICODE_STRING FullName;
	ULONG UserId;
	ULONG PrimaryGroupId;
	UNICODE_STRING HomeDirectory;
	UNICODE_STRING HomeDirectoryDrive;
	UNICODE_STRING ScriptPath;
	UNICODE_STRING ProfilePath;
	UNICODE_STRING WorkStations;
	LARGE_INTEGER LastLogon;
	LARGE_INTEGER LastLogoff;
	LARGE_INTEGER PasswordLastSet;
	LARGE_INTEGER PasswordCanChange;
	LARGE_INTEGER PasswordMustChange;
	LOGON_HOURS LogonHours;
	USHORT BadPasswordCount;
	USHORT LogonCount;
	ULONG UserAccountControl;
} USER_LOGON_INFORMATION, * PUSER_LOGON_INFORMATION;
typedef struct _USER_LOGON_HOURS_INFORMATION
{
	LOGON_HOURS LogonHours;
} USER_LOGON_HOURS_INFORMATION, * PUSER_LOGON_HOURS_INFORMATION;
typedef struct _USER_ACCOUNT_INFORMATION
{
	UNICODE_STRING UserName;
	UNICODE_STRING FullName;
	ULONG UserId;
	ULONG PrimaryGroupId;
	UNICODE_STRING HomeDirectory;
	UNICODE_STRING HomeDirectoryDrive;
	UNICODE_STRING ScriptPath;
	UNICODE_STRING ProfilePath;
	UNICODE_STRING AdminComment;
	UNICODE_STRING WorkStations;
	LARGE_INTEGER LastLogon;
	LARGE_INTEGER LastLogoff;
	LOGON_HOURS LogonHours;
	USHORT BadPasswordCount;
	USHORT LogonCount;
	LARGE_INTEGER PasswordLastSet;
	LARGE_INTEGER AccountExpires;
	ULONG UserAccountControl;
} USER_ACCOUNT_INFORMATION, * PUSER_ACCOUNT_INFORMATION;
typedef struct _USER_NAME_INFORMATION
{
	UNICODE_STRING UserName;
	UNICODE_STRING FullName;
} USER_NAME_INFORMATION, * PUSER_NAME_INFORMATION;
typedef struct _USER_ACCOUNT_NAME_INFORMATION
{
	UNICODE_STRING UserName;
} USER_ACCOUNT_NAME_INFORMATION, * PUSER_ACCOUNT_NAME_INFORMATION;
typedef struct _USER_FULL_NAME_INFORMATION
{
	UNICODE_STRING FullName;
} USER_FULL_NAME_INFORMATION, * PUSER_FULL_NAME_INFORMATION;
typedef struct _USER_PRIMARY_GROUP_INFORMATION
{
	ULONG PrimaryGroupId;
} USER_PRIMARY_GROUP_INFORMATION, * PUSER_PRIMARY_GROUP_INFORMATION;
typedef struct _USER_HOME_INFORMATION
{
	UNICODE_STRING HomeDirectory;
	UNICODE_STRING HomeDirectoryDrive;
} USER_HOME_INFORMATION, * PUSER_HOME_INFORMATION;
typedef struct _USER_SCRIPT_INFORMATION
{
	UNICODE_STRING ScriptPath;
} USER_SCRIPT_INFORMATION, * PUSER_SCRIPT_INFORMATION;
typedef struct _USER_PROFILE_INFORMATION
{
	UNICODE_STRING ProfilePath;
} USER_PROFILE_INFORMATION, * PUSER_PROFILE_INFORMATION;
typedef struct _USER_ADMIN_COMMENT_INFORMATION
{
	UNICODE_STRING AdminComment;
} USER_ADMIN_COMMENT_INFORMATION, * PUSER_ADMIN_COMMENT_INFORMATION;
typedef struct _USER_WORKSTATIONS_INFORMATION
{
	UNICODE_STRING WorkStations;
} USER_WORKSTATIONS_INFORMATION, * PUSER_WORKSTATIONS_INFORMATION;
typedef struct _USER_SET_PASSWORD_INFORMATION
{
	UNICODE_STRING Password;
	BOOLEAN PasswordExpired;
} USER_SET_PASSWORD_INFORMATION, * PUSER_SET_PASSWORD_INFORMATION;
typedef struct _USER_CONTROL_INFORMATION
{
	ULONG UserAccountControl;
} USER_CONTROL_INFORMATION, * PUSER_CONTROL_INFORMATION;
typedef struct _USER_EXPIRES_INFORMATION
{
	LARGE_INTEGER AccountExpires;
} USER_EXPIRES_INFORMATION, * PUSER_EXPIRES_INFORMATION;
typedef struct _USER_PARAMETERS_INFORMATION
{
	UNICODE_STRING Parameters;
} USER_PARAMETERS_INFORMATION, * PUSER_PARAMETERS_INFORMATION;
typedef struct _USER_ALL_INFORMATION
{
	LARGE_INTEGER LastLogon;
	LARGE_INTEGER LastLogoff;
	LARGE_INTEGER PasswordLastSet;
	LARGE_INTEGER AccountExpires;
	LARGE_INTEGER PasswordCanChange;
	LARGE_INTEGER PasswordMustChange;
	UNICODE_STRING UserName;
	UNICODE_STRING FullName;
	UNICODE_STRING HomeDirectory;
	UNICODE_STRING HomeDirectoryDrive;
	UNICODE_STRING ScriptPath;
	UNICODE_STRING ProfilePath;
	UNICODE_STRING AdminComment;
	UNICODE_STRING WorkStations;
	UNICODE_STRING UserComment;
	UNICODE_STRING Parameters;
	UNICODE_STRING LmPassword;
	UNICODE_STRING NtPassword;
	UNICODE_STRING PrivateData;
	SR_SECURITY_DESCRIPTOR SecurityDescriptor;
	ULONG UserId;
	ULONG PrimaryGroupId;
	ULONG UserAccountControl;
	ULONG WhichFields;
	LOGON_HOURS LogonHours;
	USHORT BadPasswordCount;
	USHORT LogonCount;
	USHORT CountryCode;
	USHORT CodePage;
	BOOLEAN LmPasswordPresent;
	BOOLEAN NtPasswordPresent;
	BOOLEAN PasswordExpired;
	BOOLEAN PrivateDataSensitive;
} USER_ALL_INFORMATION, * PUSER_ALL_INFORMATION;
typedef SAM_BYTE_ARRAY_32K SAM_USER_TILE, * PSAM_USER_TILE;
typedef struct _USER_EXTENDED_INFORMATION
{
	ULONG ExtendedWhichFields;
	SAM_USER_TILE UserTile;
	UNICODE_STRING PasswordHint;
	BOOLEAN DontShowInLogonUI;
	SAM_SHELL_OBJECT_PROPERTIES ShellAdminObjectProperties;
} USER_EXTENDED_INFORMATION, * PUSER_EXTENDED_INFORMATION;
typedef struct _USER_LOGON_UI_INFORMATION
{
	BOOLEAN PasswordIsBlank;
	BOOLEAN AccountIsDisabled;
} USER_LOGON_UI_INFORMATION, * PUSER_LOGON_UI_INFORMATION;
typedef struct _USER_PWD_CHANGE_FAILURE_INFORMATION
{
	ULONG ExtendedFailureReason;
	UNICODE_STRING FilterModuleName;
} USER_PWD_CHANGE_FAILURE_INFORMATION, * PUSER_PWD_CHANGE_FAILURE_INFORMATION;
NTSTATUS
__stdcall
SamEnumerateUsersInDomain(
	SAM_HANDLE DomainHandle,
	PSAM_ENUMERATE_HANDLE EnumerationContext,
	ULONG UserAccountControl,
	PVOID* Buffer,
	ULONG PreferedMaximumLength,
	PULONG CountReturned
);
NTSTATUS
__stdcall
SamCreateUserInDomain(
	SAM_HANDLE DomainHandle,
	PUNICODE_STRING AccountName,
	ACCESS_MASK DesiredAccess,
	PSAM_HANDLE UserHandle,
	PULONG RelativeId
);
NTSTATUS
__stdcall
SamCreateUser2InDomain(
	SAM_HANDLE DomainHandle,
	PUNICODE_STRING AccountName,
	ULONG AccountType,
	ACCESS_MASK DesiredAccess,
	PSAM_HANDLE UserHandle,
	PULONG GrantedAccess,
	PULONG RelativeId
);
NTSTATUS
__stdcall
SamOpenUser(
	SAM_HANDLE DomainHandle,
	ACCESS_MASK DesiredAccess,
	ULONG UserId,
	PSAM_HANDLE UserHandle
);
NTSTATUS
__stdcall
SamDeleteUser(
	SAM_HANDLE UserHandle
);
NTSTATUS
__stdcall
SamQueryInformationUser(
	SAM_HANDLE UserHandle,
	USER_INFORMATION_CLASS UserInformationClass,
	PVOID* Buffer
);
NTSTATUS
__stdcall
SamSetInformationUser(
	SAM_HANDLE UserHandle,
	USER_INFORMATION_CLASS UserInformationClass,
	PVOID Buffer
);
NTSTATUS
__stdcall
SamGetGroupsForUser(
	SAM_HANDLE UserHandle,
	PGROUP_MEMBERSHIP* Groups,
	PULONG MembershipCount
);
NTSTATUS
__stdcall
SamChangePasswordUser(
	SAM_HANDLE UserHandle,
	PUNICODE_STRING OldPassword,
	PUNICODE_STRING NewPassword
);
NTSTATUS
__stdcall
SamChangePasswordUser2(
	PUNICODE_STRING ServerName,
	PUNICODE_STRING UserName,
	PUNICODE_STRING OldPassword,
	PUNICODE_STRING NewPassword
);
NTSTATUS
__stdcall
SamChangePasswordUser3(
	PUNICODE_STRING ServerName,
	PUNICODE_STRING UserName,
	PUNICODE_STRING OldPassword,
	PUNICODE_STRING NewPassword,
	PDOMAIN_PASSWORD_INFORMATION* EffectivePasswordPolicy,
	PUSER_PWD_CHANGE_FAILURE_INFORMATION* PasswordChangeFailureInfo
);
NTSTATUS
__stdcall
SamQueryDisplayInformation(
	SAM_HANDLE DomainHandle,
	DOMAIN_DISPLAY_INFORMATION DisplayInformation,
	ULONG Index,
	ULONG EntryCount,
	ULONG PreferredMaximumLength,
	PULONG TotalAvailable,
	PULONG TotalReturned,
	PULONG ReturnedEntryCount,
	PVOID* SortedBuffer
);
NTSTATUS
__stdcall
SamGetDisplayEnumerationIndex(
	SAM_HANDLE DomainHandle,
	DOMAIN_DISPLAY_INFORMATION DisplayInformation,
	PUNICODE_STRING Prefix,
	PULONG Index
);
typedef enum _SECURITY_DB_DELTA_TYPE
{
	SecurityDbNew = 1,
	SecurityDbRename,
	SecurityDbDelete,
	SecurityDbChangeMemberAdd,
	SecurityDbChangeMemberSet,
	SecurityDbChangeMemberDel,
	SecurityDbChange,
	SecurityDbChangePassword
} SECURITY_DB_DELTA_TYPE, * PSECURITY_DB_DELTA_TYPE;
typedef enum _SECURITY_DB_OBJECT_TYPE
{
	SecurityDbObjectSamDomain = 1,
	SecurityDbObjectSamUser,
	SecurityDbObjectSamGroup,
	SecurityDbObjectSamAlias,
	SecurityDbObjectLsaPolicy,
	SecurityDbObjectLsaTDomain,
	SecurityDbObjectLsaAccount,
	SecurityDbObjectLsaSecret
} SECURITY_DB_OBJECT_TYPE, * PSECURITY_DB_OBJECT_TYPE;
typedef enum _SAM_ACCOUNT_TYPE
{
	SamObjectUser = 1,
	SamObjectGroup,
	SamObjectAlias
} SAM_ACCOUNT_TYPE, * PSAM_ACCOUNT_TYPE;
typedef struct _SAM_GROUP_MEMBER_ID
{
	ULONG MemberRid;
} SAM_GROUP_MEMBER_ID, * PSAM_GROUP_MEMBER_ID;
typedef struct _SAM_ALIAS_MEMBER_ID
{
	PSID MemberSid;
} SAM_ALIAS_MEMBER_ID, * PSAM_ALIAS_MEMBER_ID;
typedef union _SAM_DELTA_DATA
{
	SAM_GROUP_MEMBER_ID GroupMemberId;
	SAM_ALIAS_MEMBER_ID AliasMemberId;
	ULONG AccountControl;
} SAM_DELTA_DATA, * PSAM_DELTA_DATA;
typedef NTSTATUS(__stdcall* PSAM_DELTA_NOTIFICATION_ROUTINE)(
	PSID DomainSid,
	SECURITY_DB_DELTA_TYPE DeltaType,
	SECURITY_DB_OBJECT_TYPE ObjectType,
	ULONG ObjectRid,
	PUNICODE_STRING ObjectName,
	PLARGE_INTEGER ModifiedCount,
	PSAM_DELTA_DATA DeltaData
	);
NTSTATUS
__stdcall
SamRegisterObjectChangeNotification(
	SECURITY_DB_OBJECT_TYPE ObjectType,
	HANDLE NotificationEventHandle
);
NTSTATUS
__stdcall
SamUnregisterObjectChangeNotification(
	SECURITY_DB_OBJECT_TYPE ObjectType,
	HANDLE NotificationEventHandle
);
NTSTATUS
__stdcall
SamGetCompatibilityMode(
	SAM_HANDLE ObjectHandle,
	ULONG* Mode
);
typedef enum _PASSWORD_POLICY_VALIDATION_TYPE
{
	SamValidateAuthentication = 1,
	SamValidatePasswordChange,
	SamValidatePasswordReset
} PASSWORD_POLICY_VALIDATION_TYPE;
typedef struct _SAM_VALIDATE_PASSWORD_HASH
{
	ULONG Length;
	PUCHAR Hash;
} SAM_VALIDATE_PASSWORD_HASH, * PSAM_VALIDATE_PASSWORD_HASH;
typedef struct _SAM_VALIDATE_PERSISTED_FIELDS
{
	ULONG PresentFields;
	LARGE_INTEGER PasswordLastSet;
	LARGE_INTEGER BadPasswordTime;
	LARGE_INTEGER LockoutTime;
	ULONG BadPasswordCount;
	ULONG PasswordHistoryLength;
	PSAM_VALIDATE_PASSWORD_HASH PasswordHistory;
} SAM_VALIDATE_PERSISTED_FIELDS, * PSAM_VALIDATE_PERSISTED_FIELDS;
typedef enum _SAM_VALIDATE_VALIDATION_STATUS
{
	SamValidateSuccess = 0,
	SamValidatePasswordMustChange,
	SamValidateAccountLockedOut,
	SamValidatePasswordExpired,
	SamValidatePasswordIncorrect,
	SamValidatePasswordIsInHistory,
	SamValidatePasswordTooShort,
	SamValidatePasswordTooLong,
	SamValidatePasswordNotComplexEnough,
	SamValidatePasswordTooRecent,
	SamValidatePasswordFilterError
} SAM_VALIDATE_VALIDATION_STATUS, * PSAM_VALIDATE_VALIDATION_STATUS;
typedef struct _SAM_VALIDATE_STANDARD_OUTPUT_ARG
{
	SAM_VALIDATE_PERSISTED_FIELDS ChangedPersistedFields;
	SAM_VALIDATE_VALIDATION_STATUS ValidationStatus;
} SAM_VALIDATE_STANDARD_OUTPUT_ARG, * PSAM_VALIDATE_STANDARD_OUTPUT_ARG;
typedef struct _SAM_VALIDATE_AUTHENTICATION_INPUT_ARG
{
	SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
	BOOLEAN PasswordMatched;
} SAM_VALIDATE_AUTHENTICATION_INPUT_ARG, * PSAM_VALIDATE_AUTHENTICATION_INPUT_ARG;
typedef struct _SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG
{
	SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
	UNICODE_STRING ClearPassword;
	UNICODE_STRING UserAccountName;
	SAM_VALIDATE_PASSWORD_HASH HashedPassword;
	BOOLEAN PasswordMatch;
} SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG, * PSAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG;
typedef struct _SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG
{
	SAM_VALIDATE_PERSISTED_FIELDS InputPersistedFields;
	UNICODE_STRING ClearPassword;
	UNICODE_STRING UserAccountName;
	SAM_VALIDATE_PASSWORD_HASH HashedPassword;
	BOOLEAN PasswordMustChangeAtNextLogon;
	BOOLEAN ClearLockout;
}SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG, * PSAM_VALIDATE_PASSWORD_RESET_INPUT_ARG;
typedef union _SAM_VALIDATE_INPUT_ARG
{
	SAM_VALIDATE_AUTHENTICATION_INPUT_ARG ValidateAuthenticationInput;
	SAM_VALIDATE_PASSWORD_CHANGE_INPUT_ARG ValidatePasswordChangeInput;
	SAM_VALIDATE_PASSWORD_RESET_INPUT_ARG ValidatePasswordResetInput;
} SAM_VALIDATE_INPUT_ARG, * PSAM_VALIDATE_INPUT_ARG;
typedef union _SAM_VALIDATE_OUTPUT_ARG
{
	SAM_VALIDATE_STANDARD_OUTPUT_ARG ValidateAuthenticationOutput;
	SAM_VALIDATE_STANDARD_OUTPUT_ARG ValidatePasswordChangeOutput;
	SAM_VALIDATE_STANDARD_OUTPUT_ARG ValidatePasswordResetOutput;
} SAM_VALIDATE_OUTPUT_ARG, * PSAM_VALIDATE_OUTPUT_ARG;
NTSTATUS
__stdcall
SamValidatePassword(
	PUNICODE_STRING ServerName,
	PASSWORD_POLICY_VALIDATION_TYPE ValidationType,
	PSAM_VALIDATE_INPUT_ARG InputArg,
	PSAM_VALIDATE_OUTPUT_ARG* OutputArg
);
typedef enum _SAM_GENERIC_OPERATION_TYPE
{
	SamObjectChangeNotificationOperation
} SAM_GENERIC_OPERATION_TYPE, * PSAM_GENERIC_OPERATION_TYPE;
typedef struct _SAM_OPERATION_OBJCHG_INPUT
{
	BOOLEAN Register;
	ULONG64 EventHandle;
	SECURITY_DB_OBJECT_TYPE ObjectType;
	ULONG ProcessID;
} SAM_OPERATION_OBJCHG_INPUT, * PSAM_OPERATION_OBJCHG_INPUT;
typedef struct _SAM_OPERATION_OBJCHG_OUTPUT
{
	ULONG Reserved;
} SAM_OPERATION_OBJCHG_OUTPUT, * PSAM_OPERATION_OBJCHG_OUTPUT;
typedef union _SAM_GENERIC_OPERATION_INPUT
{
	SAM_OPERATION_OBJCHG_INPUT ObjChangeIn;
} SAM_GENERIC_OPERATION_INPUT, * PSAM_GENERIC_OPERATION_INPUT;
typedef union _SAM_GENERIC_OPERATION_OUTPUT
{
	SAM_OPERATION_OBJCHG_OUTPUT ObjChangeOut;
} SAM_GENERIC_OPERATION_OUTPUT, * PSAM_GENERIC_OPERATION_OUTPUT;
NTSTATUS
__stdcall
SamPerformGenericOperation(
	PWSTR ServerName,
	SAM_GENERIC_OPERATION_TYPE OperationType,
	PSAM_GENERIC_OPERATION_INPUT OperationIn,
	PSAM_GENERIC_OPERATION_OUTPUT* OperationOut
);
typedef enum _VDMSERVICECLASS
{
	VdmStartExecution,
	VdmQueueInterrupt,
	VdmDelayInterrupt,
	VdmInitialize,
	VdmFeatures,
	VdmSetInt21Handler,
	VdmQueryDir,
	VdmPrinterDirectIoOpen,
	VdmPrinterDirectIoClose,
	VdmPrinterInitialize,
	VdmSetLdtEntries,
	VdmSetProcessLdtInfo,
	VdmAdlibEmulation,
	VdmPMCliControl,
	VdmQueryVdmProcess
} VDMSERVICECLASS, * PVDMSERVICECLASS;

NTSTATUS
__stdcall
NtVdmControl(
	VDMSERVICECLASS Service,
	PVOID ServiceData
);

NTSTATUS
__stdcall
NtTraceEvent(
	HANDLE TraceHandle,
	ULONG Flags,
	ULONG FieldSize,
	PVOID Fields
);
typedef enum _TRACE_CONTROL_INFORMATION_CLASS
{
	TraceControlStartLogger = 1,
	TraceControlStopLogger = 2,
	TraceControlQueryLogger = 3,
	TraceControlUpdateLogger = 4,
	TraceControlFlushLogger = 5,
	TraceControlIncrementLoggerFile = 6,
	TraceControlRealtimeConnect = 11,
	TraceControlWdiDispatchControl = 13,
	TraceControlRealtimeDisconnectConsumerByHandle = 14,
	TraceControlReceiveNotification = 16,
	TraceControlEnableGuid = 17,
	TraceControlSendReplyDataBlock = 18,
	TraceControlReceiveReplyDataBlock = 19,
	TraceControlWdiUpdateSem = 20,
	TraceControlGetTraceGuidList = 21,
	TraceControlGetTraceGuidInfo = 22,
	TraceControlEnumerateTraceGuids = 23,
	TraceControlQueryReferenceTime = 25,
	TraceControlTrackProviderBinary = 26,
	TraceControlAddNotificationEvent = 27,
	TraceControlUpdateDisallowList = 28,
	TraceControlUseDescriptorTypeUm = 31,
	TraceControlGetTraceGroupList = 32,
	TraceControlGetTraceGroupInfo = 33,
	TraceControlTraceSetDisallowList = 34,
	TraceControlSetCompressionSettings = 35,
	TraceControlGetCompressionSettings = 36,
	TraceControlUpdatePeriodicCaptureState = 37,
	TraceControlGetPrivateSessionTraceHandle = 38,
	TraceControlRegisterPrivateSession = 39,
	TraceControlQuerySessionDemuxObject = 40,
	TraceControlSetProviderBinaryTracking = 41,
	TraceControlMaxLoggers = 42,
	TraceControlMaxPmcCounter = 43
} TRACE_CONTROL_INFORMATION_CLASS;

NTSTATUS
__stdcall
NtTraceControl(
	TRACE_CONTROL_INFORMATION_CLASS TraceInformationClass,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID TraceInformation,
	ULONG TraceInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwAcceptConnectPort(
	PHANDLE PortHandle,
	PVOID PortContext,
	PPORT_MESSAGE ConnectionRequest,
	BOOLEAN AcceptConnection,
	PPORT_VIEW ServerView,
	PREMOTE_PORT_VIEW ClientView
);

NTSTATUS
__stdcall
ZwAccessCheck(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	PULONG PrivilegeSetLength,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus
);

NTSTATUS
__stdcall
ZwAccessCheckAndAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	ACCESS_MASK DesiredAccess,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwAccessCheckByType(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	PULONG PrivilegeSetLength,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus
);

NTSTATUS
__stdcall
ZwAccessCheckByTypeAndAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	ACCESS_MASK DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	ULONG Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwAccessCheckByTypeResultList(
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	PPRIVILEGE_SET PrivilegeSet,
	PULONG PrivilegeSetLength,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus
);

NTSTATUS
__stdcall
ZwAccessCheckByTypeResultListAndAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	ACCESS_MASK DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	ULONG Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwAccessCheckByTypeResultListAndAuditAlarmByHandle(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	HANDLE ClientToken,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	PSID PrincipalSelfSid,
	ACCESS_MASK DesiredAccess,
	AUDIT_EVENT_TYPE AuditType,
	ULONG Flags,
	POBJECT_TYPE_LIST ObjectTypeList,
	ULONG ObjectTypeListLength,
	PGENERIC_MAPPING GenericMapping,
	BOOLEAN ObjectCreation,
	PACCESS_MASK GrantedAccess,
	PNTSTATUS AccessStatus,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwAcquireCMFViewOwnership(
	PULONGLONG TimeStamp,
	PBOOLEAN tokenTaken,
	BOOLEAN replaceExisting
);

NTSTATUS
__stdcall
ZwAddAtom(
	PWSTR AtomName,
	ULONG Length,
	PRTL_ATOM Atom
);

NTSTATUS
__stdcall
ZwAddAtomEx(
	PWSTR AtomName,
	ULONG Length,
	PRTL_ATOM Atom,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwAddBootEntry(
	PBOOT_ENTRY BootEntry,
	PULONG Id
);

NTSTATUS
__stdcall
ZwAddDriverEntry(
	PEFI_DRIVER_ENTRY DriverEntry,
	PULONG Id
);

NTSTATUS
__stdcall
ZwAdjustGroupsToken(
	HANDLE TokenHandle,
	BOOLEAN ResetToDefault,
	PTOKEN_GROUPS NewState,
	ULONG BufferLength,
	PTOKEN_GROUPS PreviousState,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwAdjustPrivilegesToken(
	HANDLE TokenHandle,
	BOOLEAN DisableAllPrivileges,
	PTOKEN_PRIVILEGES NewState,
	ULONG BufferLength,
	PTOKEN_PRIVILEGES PreviousState,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwAdjustTokenClaimsAndDeviceGroups(
	HANDLE TokenHandle,
	BOOLEAN UserResetToDefault,
	BOOLEAN DeviceResetToDefault,
	BOOLEAN DeviceGroupsResetToDefault,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewUserState,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION NewDeviceState,
	PTOKEN_GROUPS NewDeviceGroupsState,
	ULONG UserBufferLength,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousUserState,
	ULONG DeviceBufferLength,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION PreviousDeviceState,
	ULONG DeviceGroupsBufferLength,
	PTOKEN_GROUPS PreviousDeviceGroups,
	PULONG UserReturnLength,
	PULONG DeviceReturnLength,
	PULONG DeviceGroupsReturnBufferLength
);

NTSTATUS
__stdcall
ZwAlertResumeThread(
	HANDLE ThreadHandle,
	PULONG PreviousSuspendCount
);

NTSTATUS
__stdcall
ZwAlertThread(
	HANDLE ThreadHandle
);

NTSTATUS
__stdcall
ZwAlertThreadByThreadId(
	HANDLE ThreadId
);

NTSTATUS
__stdcall
ZwAllocateLocallyUniqueId(
	PLUID Luid
);

NTSTATUS
__stdcall
ZwAllocateReserveObject(
	PHANDLE MemoryReserveHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	MEMORY_RESERVE_TYPE Type
);

NTSTATUS
__stdcall
ZwAllocateUserPhysicalPages(
	HANDLE ProcessHandle,
	PULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
ZwAllocateUserPhysicalPagesEx(
	HANDLE ProcessHandle,
	PULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray,
	PMEM_EXTENDED_PARAMETER ExtendedParameters,
	ULONG ExtendedParameterCount
);

NTSTATUS
__stdcall
ZwAllocateUuids(
	PULARGE_INTEGER Time,
	PULONG Range,
	PULONG Sequence,
	PCHAR Seed
);

NTSTATUS
__stdcall
ZwAllocateVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	PSIZE_T RegionSize,
	ULONG AllocationType,
	ULONG Protect
);

NTSTATUS
__stdcall
ZwAlpcAcceptConnectPort(
	PHANDLE PortHandle,
	HANDLE ConnectionPortHandle,
	ULONG Flags,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes,
	PVOID PortContext,
	PPORT_MESSAGE ConnectionRequest,
	PALPC_MESSAGE_ATTRIBUTES ConnectionMessageAttributes,
	BOOLEAN AcceptConnection
);

NTSTATUS
__stdcall
ZwAlpcCancelMessage(
	HANDLE PortHandle,
	ULONG Flags,
	PALPC_CONTEXT_ATTR MessageContext
);

NTSTATUS
__stdcall
ZwAlpcConnectPort(
	PHANDLE PortHandle,
	PUNICODE_STRING PortName,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes,
	ULONG Flags,
	PSID RequiredServerSid,
	PPORT_MESSAGE ConnectionMessage,
	PULONG BufferLength,
	PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes,
	PALPC_MESSAGE_ATTRIBUTES InMessageAttributes,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwAlpcConnectPortEx(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ConnectionPortObjectAttributes,
	POBJECT_ATTRIBUTES ClientPortObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes,
	ULONG Flags,
	PSECURITY_DESCRIPTOR ServerSecurityRequirements,
	PPORT_MESSAGE ConnectionMessage,
	PSIZE_T BufferLength,
	PALPC_MESSAGE_ATTRIBUTES OutMessageAttributes,
	PALPC_MESSAGE_ATTRIBUTES InMessageAttributes,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwAlpcCreatePort(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PALPC_PORT_ATTRIBUTES PortAttributes
);

NTSTATUS
__stdcall
ZwAlpcCreatePortSection(
	HANDLE PortHandle,
	ULONG Flags,
	HANDLE SectionHandle,
	SIZE_T SectionSize,
	PALPC_HANDLE AlpcSectionHandle,
	PSIZE_T ActualSectionSize
);

NTSTATUS
__stdcall
ZwAlpcCreateResourceReserve(
	HANDLE PortHandle,
	ULONG Flags,
	SIZE_T MessageSize,
	PALPC_HANDLE ResourceId
);

NTSTATUS
__stdcall
ZwAlpcCreateSectionView(
	HANDLE PortHandle,
	ULONG Flags,
	PALPC_DATA_VIEW_ATTR ViewAttributes
);

NTSTATUS
__stdcall
ZwAlpcCreateSecurityContext(
	HANDLE PortHandle,
	ULONG Flags,
	PALPC_SECURITY_ATTR SecurityAttribute
);

NTSTATUS
__stdcall
ZwAlpcDeletePortSection(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE SectionHandle
);

NTSTATUS
__stdcall
ZwAlpcDeleteResourceReserve(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE ResourceId
);

NTSTATUS
__stdcall
ZwAlpcDeleteSectionView(
	HANDLE PortHandle,
	ULONG Flags,
	PVOID ViewBase
);

NTSTATUS
__stdcall
ZwAlpcDeleteSecurityContext(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE ContextHandle
);

NTSTATUS
__stdcall
ZwAlpcDisconnectPort(
	HANDLE PortHandle,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwAlpcImpersonateClientContainerOfPort(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwAlpcImpersonateClientOfPort(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	PVOID Flags
);

NTSTATUS
__stdcall
ZwAlpcOpenSenderProcess(
	PHANDLE ProcessHandle,
	HANDLE PortHandle,
	PPORT_MESSAGE PortMessage,
	ULONG Flags,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwAlpcOpenSenderThread(
	PHANDLE ThreadHandle,
	HANDLE PortHandle,
	PPORT_MESSAGE PortMessage,
	ULONG Flags,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwAlpcQueryInformation(
	HANDLE PortHandle,
	ALPC_PORT_INFORMATION_CLASS PortInformationClass,
	PVOID PortInformation,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwAlpcQueryInformationMessage(
	HANDLE PortHandle,
	PPORT_MESSAGE PortMessage,
	ALPC_MESSAGE_INFORMATION_CLASS MessageInformationClass,
	PVOID MessageInformation,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwAlpcRevokeSecurityContext(
	HANDLE PortHandle,
	ULONG Flags,
	ALPC_HANDLE ContextHandle
);

NTSTATUS
__stdcall
ZwAlpcSendWaitReceivePort(
	HANDLE PortHandle,
	ULONG Flags,
	PPORT_MESSAGE SendMessageW,
	PALPC_MESSAGE_ATTRIBUTES SendMessageAttributes,
	PPORT_MESSAGE ReceiveMessage,
	PSIZE_T BufferLength,
	PALPC_MESSAGE_ATTRIBUTES ReceiveMessageAttributes,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwAlpcSetInformation(
	HANDLE PortHandle,
	ALPC_PORT_INFORMATION_CLASS PortInformationClass,
	PVOID PortInformation,
	ULONG Length
);

NTSTATUS
__stdcall
ZwAreMappedFilesTheSame(
	PVOID File1MappedAsAnImage,
	PVOID File2MappedAsFile
);

NTSTATUS
__stdcall
ZwAssignProcessToJobObject(
	HANDLE JobHandle,
	HANDLE ProcessHandle
);

NTSTATUS
__stdcall
ZwAssociateWaitCompletionPacket(
	HANDLE WaitCompletionPacketHandle,
	HANDLE IoCompletionHandle,
	HANDLE TargetObjectHandle,
	PVOID KeyContext,
	PVOID ApcContext,
	NTSTATUS IoStatus,
	ULONG_PTR IoStatusInformation,
	PBOOLEAN AlreadySignaled
);

NTSTATUS
__stdcall
ZwCallbackReturn(
	PVOID OutputBuffer,
	ULONG OutputLength,
	NTSTATUS Status
);

NTSTATUS
__stdcall
ZwCallEnclave(
	PENCLAVE_ROUTINE Routine,
	PVOID Parameter,
	BOOLEAN WaitForThread,
	PVOID* ReturnValue
);

NTSTATUS
__stdcall
ZwCancelIoFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
ZwCancelIoFileEx(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoRequestToCancel,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
ZwCancelSynchronousIoFile(
	HANDLE ThreadHandle,
	PIO_STATUS_BLOCK IoRequestToCancel,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
ZwCancelTimer(
	HANDLE TimerHandle,
	PBOOLEAN CurrentState
);

NTSTATUS
__stdcall
ZwCancelTimer2(
	HANDLE TimerHandle,
	PT2_CANCEL_PARAMETERS Parameters
);

NTSTATUS
__stdcall
ZwCancelWaitCompletionPacket(
	HANDLE WaitCompletionPacketHandle,
	BOOLEAN RemoveSignaledPacket
);

NTSTATUS
__stdcall
ZwClearEvent(
	HANDLE EventHandle
);

NTSTATUS
__stdcall
ZwClose(
	HANDLE Handle
);

NTSTATUS
__stdcall
ZwCloseObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	BOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwCommitComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwCommitEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwCommitTransaction(
	HANDLE TransactionHandle,
	BOOLEAN Wait
);

NTSTATUS
__stdcall
ZwCompactKeys(
	ULONG Count,
	HANDLE KeyArray[]
);

NTSTATUS
__stdcall
ZwCompareObjects(
	HANDLE FirstObjectHandle,
	HANDLE SecondObjectHandle
);

NTSTATUS
__stdcall
ZwCompareSigningLevels(
	SE_SIGNING_LEVEL FirstSigningLevel,
	SE_SIGNING_LEVEL SecondSigningLevel
);

NTSTATUS
__stdcall
ZwCompareTokens(
	HANDLE FirstTokenHandle,
	HANDLE SecondTokenHandle,
	PBOOLEAN Equal
);

NTSTATUS
__stdcall
ZwCompleteConnectPort(
	HANDLE PortHandle
);

NTSTATUS
__stdcall
ZwCompressKey(
	HANDLE Key
);

NTSTATUS
__stdcall
ZwConnectPort(
	PHANDLE PortHandle,
	PUNICODE_STRING PortName,
	PSECURITY_QUALITY_OF_SERVICE SecurityQos,
	PPORT_VIEW ClientView,
	PREMOTE_PORT_VIEW ServerView,
	PULONG MaxMessageLength,
	PVOID ConnectionInformation,
	PULONG ConnectionInformationLength
);

NTSTATUS
__stdcall
ZwContinue(
	PCONTEXT ContextRecord,
	BOOLEAN TestAlert
);

NTSTATUS
__stdcall
ZwContinueEx(
	PCONTEXT ContextRecord,
	PVOID ContinueArgument
);

NTSTATUS
__stdcall
ZwCreateDebugObject(
	PHANDLE DebugObjectHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwCreateDirectoryObject(
	PHANDLE DirectoryHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwCreateDirectoryObjectEx(
	PHANDLE DirectoryHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ShadowDirectoryHandle,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwCreateEnclave(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	SIZE_T Size,
	SIZE_T InitialCommitment,
	ULONG EnclaveType,
	PVOID EnclaveInformation,
	ULONG EnclaveInformationLength,
	PULONG EnclaveError
);

NTSTATUS
__stdcall
ZwCreateEnlistment(
	PHANDLE EnlistmentHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE ResourceManagerHandle,
	HANDLE TransactionHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG CreateOptions,
	NOTIFICATION_MASK NotificationMask,
	PVOID EnlistmentKey
);

NTSTATUS
__stdcall
ZwCreateEvent(
	PHANDLE EventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	EVENT_TYPE EventType,
	BOOLEAN InitialState
);

NTSTATUS
__stdcall
ZwCreateEventPair(
	PHANDLE EventPairHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwCreateFile(
	PHANDLE FileHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER AllocationSize,
	ULONG FileAttributes,
	ULONG ShareAccess,
	ULONG CreateDisposition,
	ULONG CreateOptions,
	PVOID EaBuffer,
	ULONG EaLength
);

NTSTATUS
__stdcall
ZwCreateIoCompletion(
	PHANDLE IoCompletionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG Count
);

NTSTATUS
__stdcall
ZwCreateIRTimer(
	PHANDLE TimerHandle,
	ACCESS_MASK DesiredAccess
);

NTSTATUS
__stdcall
ZwCreateJobObject(
	PHANDLE JobHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwCreateJobSet(
	ULONG NumJob,
	PJOB_SET_ARRAY UserJobSet,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwCreateKey(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG TitleIndex,
	PUNICODE_STRING Class,
	ULONG CreateOptions,
	PULONG Disposition
);

NTSTATUS
__stdcall
ZwCreateKeyedEvent(
	PHANDLE KeyedEventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwCreateKeyTransacted(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG TitleIndex,
	PUNICODE_STRING Class,
	ULONG CreateOptions,
	HANDLE TransactionHandle,
	PULONG Disposition
);

NTSTATUS
__stdcall
ZwCreateLowBoxToken(
	PHANDLE TokenHandle,
	HANDLE ExistingTokenHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PSID PackageSid,
	ULONG CapabilityCount,
	PSID_AND_ATTRIBUTES Capabilities,
	ULONG HandleCount,
	HANDLE* Handles
);

NTSTATUS
__stdcall
ZwCreateMailslotFile(
	PHANDLE FileHandle,
	ULONG DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG CreateOptions,
	ULONG MailslotQuota,
	ULONG MaximumMessageSize,
	PLARGE_INTEGER ReadTimeout
);

NTSTATUS
__stdcall
ZwCreateMutant(
	PHANDLE MutantHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	BOOLEAN InitialOwner
);

NTSTATUS
__stdcall
ZwCreateNamedPipeFile(
	PHANDLE FileHandle,
	ULONG DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG ShareAccess,
	ULONG CreateDisposition,
	ULONG CreateOptions,
	ULONG NamedPipeType,
	ULONG ReadMode,
	ULONG CompletionMode,
	ULONG MaximumInstances,
	ULONG InboundQuota,
	ULONG OutboundQuota,
	PLARGE_INTEGER DefaultTimeout
);

NTSTATUS
__stdcall
ZwCreatePagingFile(
	PUNICODE_STRING PageFileName,
	PLARGE_INTEGER MinimumSize,
	PLARGE_INTEGER MaximumSize,
	ULONG Priority
);

NTSTATUS
__stdcall
ZwCreatePartition(
	PHANDLE PartitionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG PreferredNode
);

NTSTATUS
__stdcall
ZwCreatePort(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG MaxConnectionInfoLength,
	ULONG MaxMessageLength,
	ULONG MaxPoolUsage
);

NTSTATUS
__stdcall
ZwCreatePrivateNamespace(
	PHANDLE NamespaceHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PVOID BoundaryDescriptor
);

NTSTATUS
__stdcall
ZwCreateProcess(
	PHANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ParentProcess,
	BOOLEAN InheritObjectTable,
	HANDLE SectionHandle,
	HANDLE DebugPort,
	HANDLE ExceptionPort
);

NTSTATUS
__stdcall
ZwCreateProcessEx(
	PHANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ParentProcess,
	ULONG Flags,
	HANDLE SectionHandle,
	HANDLE DebugPort,
	HANDLE ExceptionPort,
	ULONG JobMemberLevel
);

NTSTATUS
__stdcall
ZwCreateProfile(
	PHANDLE ProfileHandle,
	HANDLE Process,
	PVOID ProfileBase,
	SIZE_T ProfileSize,
	ULONG BucketSize,
	PULONG Buffer,
	ULONG BufferSize,
	KPROFILE_SOURCE ProfileSource,
	KAFFINITY Affinity
);

NTSTATUS
__stdcall
ZwCreateProfileEx(
	PHANDLE ProfileHandle,
	HANDLE Process,
	PVOID ProfileBase,
	SIZE_T ProfileSize,
	ULONG BucketSize,
	PULONG Buffer,
	ULONG BufferSize,
	KPROFILE_SOURCE ProfileSource,
	USHORT GroupCount,
	PGROUP_AFFINITY GroupAffinity
);

NTSTATUS
__stdcall
ZwCreateResourceManager(
	PHANDLE ResourceManagerHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE TmHandle,
	LPGUID RmGuid,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG CreateOptions,
	PUNICODE_STRING Description
);

NTSTATUS
__stdcall
ZwCreateSection(
	PHANDLE SectionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PLARGE_INTEGER MaximumSize,
	ULONG SectionPageProtection,
	ULONG AllocationAttributes,
	HANDLE FileHandle
);

NTSTATUS
__stdcall
ZwCreateSectionEx(
	PHANDLE SectionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PLARGE_INTEGER MaximumSize,
	ULONG SectionPageProtection,
	ULONG AllocationAttributes,
	HANDLE FileHandle,
	PMEM_EXTENDED_PARAMETER ExtendedParameters,
	ULONG ExtendedParameterCount
);

NTSTATUS
__stdcall
ZwCreateSemaphore(
	PHANDLE SemaphoreHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	LONG InitialCount,
	LONG MaximumCount
);

NTSTATUS
__stdcall
ZwCreateSymbolicLinkObject(
	PHANDLE LinkHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PUNICODE_STRING LinkTarget
);

NTSTATUS
__stdcall
ZwCreateThread(
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ProcessHandle,
	PCLIENT_ID ClientId,
	PCONTEXT ThreadContext,
	PINITIAL_TEB InitialTeb,
	BOOLEAN CreateSuspended
);

NTSTATUS
__stdcall
ZwCreateThreadEx(
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE ProcessHandle,
	PVOID StartRoutine,
	PVOID Argument,
	ULONG CreateFlags,
	SIZE_T ZeroBits,
	SIZE_T StackSize,
	SIZE_T MaximumStackSize,
	PPS_ATTRIBUTE_LIST AttributeList
);

NTSTATUS
__stdcall
ZwCreateTimer(
	PHANDLE TimerHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	TIMER_TYPE TimerType
);

NTSTATUS
__stdcall
ZwCreateTimer2(
	PHANDLE TimerHandle,
	PVOID Reserved1,
	PVOID Reserved2,
	ULONG Attributes,
	ACCESS_MASK DesiredAccess
);

NTSTATUS
__stdcall
ZwCreateToken(
	PHANDLE TokenHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	TOKEN_TYPE TokenType,
	PLUID AuthenticationId,
	PLARGE_INTEGER ExpirationTime,
	PTOKEN_USER User,
	PTOKEN_GROUPS Groups,
	PTOKEN_PRIVILEGES Privileges,
	PTOKEN_OWNER Owner,
	PTOKEN_PRIMARY_GROUP PrimaryGroup,
	PTOKEN_DEFAULT_DACL DefaultDacl,
	PTOKEN_SOURCE TokenSource
);

NTSTATUS
__stdcall
ZwCreateTokenEx(
	PHANDLE TokenHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	TOKEN_TYPE TokenType,
	PLUID AuthenticationId,
	PLARGE_INTEGER ExpirationTime,
	PTOKEN_USER User,
	PTOKEN_GROUPS Groups,
	PTOKEN_PRIVILEGES Privileges,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION UserAttributes,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION DeviceAttributes,
	PTOKEN_GROUPS DeviceGroups,
	PTOKEN_MANDATORY_POLICY TokenMandatoryPolicy,
	PTOKEN_OWNER Owner,
	PTOKEN_PRIMARY_GROUP PrimaryGroup,
	PTOKEN_DEFAULT_DACL DefaultDacl,
	PTOKEN_SOURCE TokenSource
);

NTSTATUS
__stdcall
ZwCreateTransaction(
	PHANDLE TransactionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	LPGUID Uow,
	HANDLE TmHandle,
	ULONG CreateOptions,
	ULONG IsolationLevel,
	ULONG IsolationFlags,
	PLARGE_INTEGER Timeout,
	PUNICODE_STRING Description
);

NTSTATUS
__stdcall
ZwCreateTransactionManager(
	PHANDLE TmHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PUNICODE_STRING LogFileName,
	ULONG CreateOptions,
	ULONG CommitStrength
);

NTSTATUS
__stdcall
ZwCreateUserProcess(
	PHANDLE ProcessHandle,
	PHANDLE ThreadHandle,
	ACCESS_MASK ProcessDesiredAccess,
	ACCESS_MASK ThreadDesiredAccess,
	POBJECT_ATTRIBUTES ProcessObjectAttributes,
	POBJECT_ATTRIBUTES ThreadObjectAttributes,
	ULONG ProcessFlags,
	ULONG ThreadFlags,
	PVOID ProcessParameters,
	PPS_CREATE_INFO CreateInfo,
	PPS_ATTRIBUTE_LIST AttributeList
);

NTSTATUS
__stdcall
ZwCreateWaitablePort(
	PHANDLE PortHandle,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG MaxConnectionInfoLength,
	ULONG MaxMessageLength,
	ULONG MaxPoolUsage
);

NTSTATUS
__stdcall
ZwCreateWaitCompletionPacket(
	PHANDLE WaitCompletionPacketHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwCreateWnfStateName(
	PWNF_STATE_NAME StateName,
	WNF_STATE_NAME_LIFETIME NameLifetime,
	WNF_DATA_SCOPE DataScope,
	BOOLEAN PersistData,
	PCWNF_TYPE_ID TypeId,
	ULONG MaximumStateSize,
	PSECURITY_DESCRIPTOR SecurityDescriptor
);

NTSTATUS
__stdcall
ZwCreateWorkerFactory(
	PHANDLE WorkerFactoryHandleReturn,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE CompletionPortHandle,
	HANDLE WorkerProcessHandle,
	PVOID StartRoutine,
	PVOID StartParameter,
	ULONG MaxThreadCount,
	SIZE_T StackReserve,
	SIZE_T StackCommit
);

NTSTATUS
__stdcall
ZwDebugActiveProcess(
	HANDLE ProcessHandle,
	HANDLE DebugObjectHandle
);

NTSTATUS
__stdcall
ZwDebugContinue(
	HANDLE DebugObjectHandle,
	PCLIENT_ID ClientId,
	NTSTATUS ContinueStatus
);

NTSTATUS
__stdcall
ZwDelayExecution(
	BOOLEAN Alertable,
	PLARGE_INTEGER DelayInterval
);

NTSTATUS
__stdcall
ZwDeleteAtom(
	RTL_ATOM Atom
);

NTSTATUS
__stdcall
ZwDeleteBootEntry(
	ULONG Id
);

NTSTATUS
__stdcall
ZwDeleteDriverEntry(
	ULONG Id
);

NTSTATUS
__stdcall
ZwDeleteFile(
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwDeleteKey(
	HANDLE KeyHandle
);

NTSTATUS
__stdcall
ZwDeleteObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	BOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwDeletePrivateNamespace(
	HANDLE NamespaceHandle
);

NTSTATUS
__stdcall
ZwDeleteValueKey(
	HANDLE KeyHandle,
	PUNICODE_STRING ValueName
);

NTSTATUS
__stdcall
ZwDeleteWnfStateData(
	PCWNF_STATE_NAME StateName,
	const void* ExplicitScope
);

NTSTATUS
__stdcall
ZwDeleteWnfStateName(
	PCWNF_STATE_NAME StateName
);

NTSTATUS
__stdcall
ZwDeviceIoControlFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG IoControlCode,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength
);

NTSTATUS
__stdcall
ZwDisableLastKnownGood(
	void
);

NTSTATUS
__stdcall
ZwDisplayString(
	PUNICODE_STRING String
);

NTSTATUS
__stdcall
ZwDrawText(
	PUNICODE_STRING Text
);

NTSTATUS
__stdcall
ZwDuplicateObject(
	HANDLE SourceProcessHandle,
	HANDLE SourceHandle,
	HANDLE TargetProcessHandle,
	PHANDLE TargetHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	ULONG Options
);

NTSTATUS
__stdcall
ZwDuplicateToken(
	HANDLE ExistingTokenHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	BOOLEAN EffectiveOnly,
	TOKEN_TYPE TokenType,
	PHANDLE NewTokenHandle
);

NTSTATUS
__stdcall
ZwEnableLastKnownGood(
	void
);

NTSTATUS
__stdcall
ZwEnumerateBootEntries(
	PVOID Buffer,
	PULONG BufferLength
);

NTSTATUS
__stdcall
ZwEnumerateDriverEntries(
	PVOID Buffer,
	PULONG BufferLength
);

NTSTATUS
__stdcall
ZwEnumerateKey(
	HANDLE KeyHandle,
	ULONG Index,
	KEY_INFORMATION_CLASS KeyInformationClass,
	PVOID KeyInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
ZwEnumerateSystemEnvironmentValuesEx(
	ULONG InformationClass,
	PVOID Buffer,
	PULONG BufferLength
);

NTSTATUS
__stdcall
ZwEnumerateTransactionObject(
	HANDLE RootObjectHandle,
	KTMOBJECT_TYPE QueryType,
	PKTMOBJECT_CURSOR ObjectCursor,
	ULONG ObjectCursorLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwEnumerateValueKey(
	HANDLE KeyHandle,
	ULONG Index,
	KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
	PVOID KeyValueInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
ZwExtendSection(
	HANDLE SectionHandle,
	PLARGE_INTEGER NewSectionSize
);

NTSTATUS
__stdcall
ZwFilterBootOption(
	FILTER_BOOT_OPTION_OPERATION FilterOperation,
	ULONG ObjectType,
	ULONG ElementType,
	PVOID Data,
	ULONG DataSize
);

NTSTATUS
__stdcall
ZwFilterToken(
	HANDLE ExistingTokenHandle,
	ULONG Flags,
	PTOKEN_GROUPS SidsToDisable,
	PTOKEN_PRIVILEGES PrivilegesToDelete,
	PTOKEN_GROUPS RestrictedSids,
	PHANDLE NewTokenHandle
);

NTSTATUS
__stdcall
ZwFilterTokenEx(
	HANDLE ExistingTokenHandle,
	ULONG Flags,
	PTOKEN_GROUPS SidsToDisable,
	PTOKEN_PRIVILEGES PrivilegesToDelete,
	PTOKEN_GROUPS RestrictedSids,
	ULONG DisableUserClaimsCount,
	PUNICODE_STRING UserClaimsToDisable,
	ULONG DisableDeviceClaimsCount,
	PUNICODE_STRING DeviceClaimsToDisable,
	PTOKEN_GROUPS DeviceGroupsToDisable,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedUserAttributes,
	PTOKEN_SECURITY_ATTRIBUTES_INFORMATION RestrictedDeviceAttributes,
	PTOKEN_GROUPS RestrictedDeviceGroups,
	PHANDLE NewTokenHandle
);

NTSTATUS
__stdcall
ZwFindAtom(
	PWSTR AtomName,
	ULONG Length,
	PRTL_ATOM Atom
);

NTSTATUS
__stdcall
ZwFlushBuffersFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
ZwFlushBuffersFileEx(
	HANDLE FileHandle,
	ULONG Flags,
	PVOID Parameters,
	ULONG ParametersSize,
	PIO_STATUS_BLOCK IoStatusBlock
);

NTSTATUS
__stdcall
ZwFlushInstallUILanguage(
	LANGID InstallUILanguage,
	ULONG SetComittedFlag
);

NTSTATUS
__stdcall
ZwFlushInstructionCache(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	SIZE_T Length
);

NTSTATUS
__stdcall
ZwFlushKey(
	HANDLE KeyHandle
);

void
__stdcall
ZwFlushProcessWriteBuffers(
	void
);

NTSTATUS
__stdcall
ZwFlushVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	struct _IO_STATUS_BLOCK* IoStatus
);

NTSTATUS
__stdcall
ZwFlushWriteBuffer(
	void
);

NTSTATUS
__stdcall
ZwFreeUserPhysicalPages(
	HANDLE ProcessHandle,
	PULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
ZwFreeVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG FreeType
);

NTSTATUS
__stdcall
ZwFreezeRegistry(
	ULONG TimeOutInSeconds
);

NTSTATUS
__stdcall
ZwFreezeTransactions(
	PLARGE_INTEGER FreezeTimeout,
	PLARGE_INTEGER ThawTimeout
);

NTSTATUS
__stdcall
ZwFsControlFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG FsControlCode,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength
);

NTSTATUS
__stdcall
ZwGetCachedSigningLevel(
	HANDLE File,
	PULONG Flags,
	PSE_SIGNING_LEVEL SigningLevel,
	PUCHAR Thumbprint,
	PULONG ThumbprintSize,
	PULONG ThumbprintAlgorithm
);

NTSTATUS
__stdcall
ZwGetCompleteWnfStateSubscription(
	PWNF_STATE_NAME OldDescriptorStateName,
	ULONG64* OldSubscriptionId,
	ULONG OldDescriptorEventMask,
	ULONG OldDescriptorStatus,
	PWNF_DELIVERY_DESCRIPTOR NewDeliveryDescriptor,
	ULONG DescriptorSize
);

NTSTATUS
__stdcall
ZwGetContextThread(
	HANDLE ThreadHandle,
	PCONTEXT ThreadContext
);

ULONG
__stdcall
ZwGetCurrentProcessorNumber(
	void
);

ULONG
__stdcall
ZwGetCurrentProcessorNumberEx(
	PPROCESSOR_NUMBER ProcNumber
);

NTSTATUS
__stdcall
ZwGetDevicePowerState(
	HANDLE Device,
	PDEVICE_POWER_STATE State
);

NTSTATUS
__stdcall
ZwGetMUIRegistryInfo(
	ULONG Flags,
	PULONG DataSize,
	PVOID Data
);

NTSTATUS
__stdcall
ZwGetNextProcess(
	HANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	ULONG Flags,
	PHANDLE NewProcessHandle
);

NTSTATUS
__stdcall
ZwGetNextThread(
	HANDLE ProcessHandle,
	HANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	ULONG Flags,
	PHANDLE NewThreadHandle
);

NTSTATUS
__stdcall
ZwGetNlsSectionPtr(
	ULONG SectionType,
	ULONG SectionData,
	PVOID ContextData,
	PVOID* SectionPointer,
	PULONG SectionSize
);

NTSTATUS
__stdcall
ZwGetNotificationResourceManager(
	HANDLE ResourceManagerHandle,
	PTRANSACTION_NOTIFICATION TransactionNotification,
	ULONG NotificationLength,
	PLARGE_INTEGER Timeout,
	PULONG ReturnLength,
	ULONG Asynchronous,
	ULONG_PTR AsynchronousContext
);

NTSTATUS
__stdcall
ZwGetPlugPlayEvent(
	HANDLE EventHandle,
	PVOID Context,
	PPLUGPLAY_EVENT_BLOCK EventBlock,
	ULONG EventBufferSize
);

NTSTATUS
__stdcall
ZwGetWriteWatch(
	HANDLE ProcessHandle,
	ULONG Flags,
	PVOID BaseAddress,
	SIZE_T RegionSize,
	PVOID* UserAddressArray,
	PULONG_PTR EntriesInUserAddressArray,
	PULONG Granularity
);

NTSTATUS
__stdcall
ZwImpersonateAnonymousToken(
	HANDLE ThreadHandle
);

NTSTATUS
__stdcall
ZwImpersonateClientOfPort(
	HANDLE PortHandle,
	PPORT_MESSAGE Message
);

NTSTATUS
__stdcall
ZwImpersonateThread(
	HANDLE ServerThreadHandle,
	HANDLE ClientThreadHandle,
	PSECURITY_QUALITY_OF_SERVICE SecurityQos
);

NTSTATUS
__stdcall
ZwInitializeEnclave(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID EnclaveInformation,
	ULONG EnclaveInformationLength,
	PULONG EnclaveError
);

NTSTATUS
__stdcall
ZwInitializeNlsFiles(
	PVOID* BaseAddress,
	PLCID DefaultLocaleId,
	PLARGE_INTEGER DefaultCasingTableSize
);

NTSTATUS
__stdcall
ZwInitializeRegistry(
	USHORT BootCondition
);

NTSTATUS
__stdcall
ZwInitiatePowerAction(
	POWER_ACTION SystemAction,
	SYSTEM_POWER_STATE LightestSystemState,
	ULONG Flags,
	BOOLEAN Asynchronous
);

NTSTATUS
__stdcall
ZwIsProcessInJob(
	HANDLE ProcessHandle,
	HANDLE JobHandle
);

BOOLEAN
__stdcall
ZwIsSystemResumeAutomatic(
	void
);

NTSTATUS
__stdcall
ZwIsUILanguageComitted(
	void
);

NTSTATUS
__stdcall
ZwListenPort(
	HANDLE PortHandle,
	PPORT_MESSAGE ConnectionRequest
);

NTSTATUS
__stdcall
ZwLoadDriver(
	PUNICODE_STRING DriverServiceName
);

NTSTATUS
__stdcall
ZwLoadEnclaveData(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID Buffer,
	SIZE_T BufferSize,
	ULONG Protect,
	PVOID PageInformation,
	ULONG PageInformationLength,
	PSIZE_T NumberOfBytesWritten,
	PULONG EnclaveError
);

NTSTATUS
__stdcall
ZwLoadKey(
	POBJECT_ATTRIBUTES TargetKey,
	POBJECT_ATTRIBUTES SourceFile
);

NTSTATUS
__stdcall
ZwLoadKey2(
	POBJECT_ATTRIBUTES TargetKey,
	POBJECT_ATTRIBUTES SourceFile,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwLoadKeyEx(
	POBJECT_ATTRIBUTES TargetKey,
	POBJECT_ATTRIBUTES SourceFile,
	ULONG Flags,
	HANDLE TrustClassKey,
	HANDLE Event,
	ACCESS_MASK DesiredAccess,
	PHANDLE RootHandle,
	PVOID Reserved
);

NTSTATUS
__stdcall
ZwLockFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER ByteOffset,
	PLARGE_INTEGER Length,
	ULONG Key,
	BOOLEAN FailImmediately,
	BOOLEAN ExclusiveLock
);

NTSTATUS
__stdcall
ZwLockProductActivationKeys(
	ULONG* pPrivateVer,
	ULONG* pSafeMode
);

NTSTATUS
__stdcall
ZwLockRegistryKey(
	HANDLE KeyHandle
);

NTSTATUS
__stdcall
ZwLockVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG MapType
);

NTSTATUS
__stdcall
ZwMakePermanentObject(
	HANDLE Handle
);

NTSTATUS
__stdcall
ZwMakeTemporaryObject(
	HANDLE Handle
);

NTSTATUS
__stdcall
ZwManagePartition(
	MEMORY_PARTITION_INFORMATION_CLASS PartitionInformationClass,
	PVOID PartitionInformation,
	ULONG PartitionInformationLength
);

NTSTATUS
__stdcall
ZwMapCMFModule(
	ULONG What,
	ULONG Index,
	PULONG CacheIndexOut,
	PULONG CacheFlagsOut,
	PULONG ViewSizeOut,
	PVOID* BaseAddress
);

NTSTATUS
__stdcall
ZwMapUserPhysicalPages(
	PVOID VirtualAddress,
	ULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
ZwMapUserPhysicalPagesScatter(
	PVOID* VirtualAddresses,
	ULONG_PTR NumberOfPages,
	PULONG_PTR UserPfnArray
);

NTSTATUS
__stdcall
ZwMapViewOfSection(
	HANDLE SectionHandle,
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	ULONG_PTR ZeroBits,
	SIZE_T CommitSize,
	PLARGE_INTEGER SectionOffset,
	PSIZE_T ViewSize,
	SECTION_INHERIT InheritDisposition,
	ULONG AllocationType,
	ULONG Win32Protect
);

NTSTATUS
__stdcall
ZwModifyBootEntry(
	PBOOT_ENTRY BootEntry
);

NTSTATUS
__stdcall
ZwModifyDriverEntry(
	PEFI_DRIVER_ENTRY DriverEntry
);

NTSTATUS
__stdcall
ZwNotifyChangeDirectoryFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	ULONG CompletionFilter,
	BOOLEAN WatchTree
);

NTSTATUS
__stdcall
ZwNotifyChangeDirectoryFileEx(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	ULONG CompletionFilter,
	BOOLEAN WatchTree,
	DIRECTORY_NOTIFY_INFORMATION_CLASS DirectoryNotifyInformationClass
);

NTSTATUS
__stdcall
ZwNotifyChangeKey(
	HANDLE KeyHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG CompletionFilter,
	BOOLEAN WatchTree,
	PVOID Buffer,
	ULONG BufferSize,
	BOOLEAN Asynchronous
);

NTSTATUS
__stdcall
ZwNotifyChangeMultipleKeys(
	HANDLE MasterKeyHandle,
	ULONG Count,
	OBJECT_ATTRIBUTES SubordinateObjects[],
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG CompletionFilter,
	BOOLEAN WatchTree,
	PVOID Buffer,
	ULONG BufferSize,
	BOOLEAN Asynchronous
);

NTSTATUS
__stdcall
ZwNotifyChangeSession(
	HANDLE SessionHandle,
	ULONG ChangeSequenceNumber,
	PLARGE_INTEGER ChangeTimeStamp,
	IO_SESSION_EVENT Event,
	IO_SESSION_STATE NewState,
	IO_SESSION_STATE PreviousState,
	PVOID Payload,
	ULONG PayloadSize
);

NTSTATUS
__stdcall
ZwOpenDirectoryObject(
	PHANDLE DirectoryHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenEnlistment(
	PHANDLE EnlistmentHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE ResourceManagerHandle,
	LPGUID EnlistmentGuid,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenEvent(
	PHANDLE EventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenEventPair(
	PHANDLE EventPairHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenFile(
	PHANDLE FileHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	ULONG ShareAccess,
	ULONG OpenOptions
);

NTSTATUS
__stdcall
ZwOpenIoCompletion(
	PHANDLE IoCompletionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenJobObject(
	PHANDLE JobHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenKey(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenKeyedEvent(
	PHANDLE KeyedEventHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenKeyEx(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG OpenOptions
);

NTSTATUS
__stdcall
ZwOpenKeyTransacted(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	HANDLE TransactionHandle
);

NTSTATUS
__stdcall
ZwOpenKeyTransactedEx(
	PHANDLE KeyHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	ULONG OpenOptions,
	HANDLE TransactionHandle
);

NTSTATUS
__stdcall
ZwOpenMutant(
	PHANDLE MutantHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	PUNICODE_STRING ObjectTypeName,
	PUNICODE_STRING ObjectName,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	ACCESS_MASK GrantedAccess,
	PPRIVILEGE_SET Privileges,
	BOOLEAN ObjectCreation,
	BOOLEAN AccessGranted,
	PBOOLEAN GenerateOnClose
);

NTSTATUS
__stdcall
ZwOpenPartition(
	PHANDLE PartitionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenPrivateNamespace(
	PHANDLE NamespaceHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PVOID BoundaryDescriptor
);

NTSTATUS
__stdcall
ZwOpenProcess(
	PHANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PCLIENT_ID ClientId
);

NTSTATUS
__stdcall
ZwOpenProcessToken(
	HANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
ZwOpenProcessTokenEx(
	HANDLE ProcessHandle,
	ACCESS_MASK DesiredAccess,
	ULONG HandleAttributes,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
ZwOpenResourceManager(
	PHANDLE ResourceManagerHandle,
	ACCESS_MASK DesiredAccess,
	HANDLE TmHandle,
	LPGUID ResourceManagerGuid,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenSection(
	PHANDLE SectionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenSemaphore(
	PHANDLE SemaphoreHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenSession(
	PHANDLE SessionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenSymbolicLinkObject(
	PHANDLE LinkHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenThread(
	PHANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PCLIENT_ID ClientId
);

NTSTATUS
__stdcall
ZwOpenThreadToken(
	HANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	BOOLEAN OpenAsSelf,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
ZwOpenThreadTokenEx(
	HANDLE ThreadHandle,
	ACCESS_MASK DesiredAccess,
	BOOLEAN OpenAsSelf,
	ULONG HandleAttributes,
	PHANDLE TokenHandle
);

NTSTATUS
__stdcall
ZwOpenTimer(
	PHANDLE TimerHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes
);

NTSTATUS
__stdcall
ZwOpenTransaction(
	PHANDLE TransactionHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	LPGUID Uow,
	HANDLE TmHandle
);

NTSTATUS
__stdcall
ZwOpenTransactionManager(
	PHANDLE TmHandle,
	ACCESS_MASK DesiredAccess,
	POBJECT_ATTRIBUTES ObjectAttributes,
	PUNICODE_STRING LogFileName,
	LPGUID TmIdentity,
	ULONG OpenOptions
);

NTSTATUS
__stdcall
ZwPlugPlayControl(
	PLUGPLAY_CONTROL_CLASS PnPControlClass,
	PVOID PnPControlData,
	ULONG PnPControlDataLength
);

NTSTATUS
__stdcall
ZwPowerInformation(
	POWER_INFORMATION_LEVEL InformationLevel,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength
);

NTSTATUS
__stdcall
ZwPrepareComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwPrepareEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwPrePrepareComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwPrePrepareEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwPrivilegeCheck(
	HANDLE ClientToken,
	PPRIVILEGE_SET RequiredPrivileges,
	PBOOLEAN Result
);

NTSTATUS
__stdcall
ZwPrivilegedServiceAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PUNICODE_STRING ServiceName,
	HANDLE ClientToken,
	PPRIVILEGE_SET Privileges,
	BOOLEAN AccessGranted
);

NTSTATUS
__stdcall
ZwPrivilegeObjectAuditAlarm(
	PUNICODE_STRING SubsystemName,
	PVOID HandleId,
	HANDLE ClientToken,
	ACCESS_MASK DesiredAccess,
	PPRIVILEGE_SET Privileges,
	BOOLEAN AccessGranted
);

NTSTATUS
__stdcall
ZwPropagationComplete(
	HANDLE ResourceManagerHandle,
	ULONG RequestCookie,
	ULONG BufferLength,
	PVOID Buffer
);

NTSTATUS
__stdcall
ZwPropagationFailed(
	HANDLE ResourceManagerHandle,
	ULONG RequestCookie,
	NTSTATUS PropStatus
);

NTSTATUS
__stdcall
ZwProtectVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG NewProtect,
	PULONG OldProtect
);

NTSTATUS
__stdcall
ZwPulseEvent(
	HANDLE EventHandle,
	PLONG PreviousState
);

NTSTATUS
__stdcall
ZwQueryAttributesFile(
	POBJECT_ATTRIBUTES ObjectAttributes,
	PFILE_BASIC_INFORMATION FileInformation
);

NTSTATUS
__stdcall
ZwQueryBootEntryOrder(
	PULONG Ids,
	PULONG Count
);

NTSTATUS
__stdcall
ZwQueryBootOptions(
	PBOOT_OPTIONS BootOptions,
	PULONG BootOptionsLength
);

NTSTATUS
__stdcall
ZwQueryDebugFilterState(
	ULONG ComponentId,
	ULONG Level
);

NTSTATUS
__stdcall
ZwQueryDefaultLocale(
	BOOLEAN UserProfile,
	PLCID DefaultLocaleId
);

NTSTATUS
__stdcall
ZwQueryDefaultUILanguage(
	LANGID* DefaultUILanguageId
);

NTSTATUS
__stdcall
ZwQueryDirectoryFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass,
	BOOLEAN ReturnSingleEntry,
	PUNICODE_STRING FileName,
	BOOLEAN RestartScan
);

NTSTATUS
__stdcall
ZwQueryDirectoryFileEx(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass,
	ULONG QueryFlags,
	PUNICODE_STRING FileName
);

NTSTATUS
__stdcall
ZwQueryDirectoryObject(
	HANDLE DirectoryHandle,
	PVOID Buffer,
	ULONG Length,
	BOOLEAN ReturnSingleEntry,
	BOOLEAN RestartScan,
	PULONG Context,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryDriverEntryOrder(
	PULONG Ids,
	PULONG Count
);

NTSTATUS
__stdcall
ZwQueryEaFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	BOOLEAN ReturnSingleEntry,
	PVOID EaList,
	ULONG EaListLength,
	PULONG EaIndex,
	BOOLEAN RestartScan
);

NTSTATUS
__stdcall
ZwQueryEvent(
	HANDLE EventHandle,
	EVENT_INFORMATION_CLASS EventInformationClass,
	PVOID EventInformation,
	ULONG EventInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryFullAttributesFile(
	POBJECT_ATTRIBUTES ObjectAttributes,
	PFILE_NETWORK_OPEN_INFORMATION FileInformation
);

NTSTATUS
__stdcall
ZwQueryInformationAtom(
	RTL_ATOM Atom,
	ATOM_INFORMATION_CLASS AtomInformationClass,
	PVOID AtomInformation,
	ULONG AtomInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationByName(
	POBJECT_ATTRIBUTES ObjectAttributes,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass
);

NTSTATUS
__stdcall
ZwQueryInformationEnlistment(
	HANDLE EnlistmentHandle,
	ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
	PVOID EnlistmentInformation,
	ULONG EnlistmentInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass
);

NTSTATUS
__stdcall
ZwQueryInformationJobObject(
	HANDLE JobHandle,
	JOBOBJECTINFOCLASS JobObjectInformationClass,
	PVOID JobObjectInformation,
	ULONG JobObjectInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationPort(
	HANDLE PortHandle,
	PORT_INFORMATION_CLASS PortInformationClass,
	PVOID PortInformation,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationProcess(
	HANDLE ProcessHandle,
	PROCESSINFOCLASS ProcessInformationClass,
	PVOID ProcessInformation,
	ULONG ProcessInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationResourceManager(
	HANDLE ResourceManagerHandle,
	RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
	PVOID ResourceManagerInformation,
	ULONG ResourceManagerInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationThread(
	HANDLE ThreadHandle,
	THREADINFOCLASS ThreadInformationClass,
	PVOID ThreadInformation,
	ULONG ThreadInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationToken(
	HANDLE TokenHandle,
	TOKEN_INFORMATION_CLASS TokenInformationClass,
	PVOID TokenInformation,
	ULONG TokenInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationTransaction(
	HANDLE TransactionHandle,
	TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
	PVOID TransactionInformation,
	ULONG TransactionInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationTransactionManager(
	HANDLE TransactionManagerHandle,
	TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
	PVOID TransactionManagerInformation,
	ULONG TransactionManagerInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInformationWorkerFactory(
	HANDLE WorkerFactoryHandle,
	WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
	PVOID WorkerFactoryInformation,
	ULONG WorkerFactoryInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryInstallUILanguage(
	LANGID* InstallUILanguageId
);

NTSTATUS
__stdcall
ZwQueryIntervalProfile(
	KPROFILE_SOURCE ProfileSource,
	PULONG Interval
);

NTSTATUS
__stdcall
ZwQueryIoCompletion(
	HANDLE IoCompletionHandle,
	IO_COMPLETION_INFORMATION_CLASS IoCompletionInformationClass,
	PVOID IoCompletionInformation,
	ULONG IoCompletionInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryKey(
	HANDLE KeyHandle,
	KEY_INFORMATION_CLASS KeyInformationClass,
	PVOID KeyInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
ZwQueryLicenseValue(
	PUNICODE_STRING ValueName,
	PULONG Type,
	PVOID Data,
	ULONG DataSize,
	PULONG ResultDataSize
);

NTSTATUS
__stdcall
ZwQueryMultipleValueKey(
	HANDLE KeyHandle,
	PKEY_VALUE_ENTRY ValueEntries,
	ULONG EntryCount,
	PVOID ValueBuffer,
	PULONG BufferLength,
	PULONG RequiredBufferLength
);

NTSTATUS
__stdcall
ZwQueryMutant(
	HANDLE MutantHandle,
	MUTANT_INFORMATION_CLASS MutantInformationClass,
	PVOID MutantInformation,
	ULONG MutantInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryObject(
	HANDLE Handle,
	OBJECT_INFORMATION_CLASS ObjectInformationClass,
	PVOID ObjectInformation,
	ULONG ObjectInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryOpenSubKeys(
	POBJECT_ATTRIBUTES TargetKey,
	PULONG HandleCount
);

NTSTATUS
__stdcall
ZwQueryOpenSubKeysEx(
	POBJECT_ATTRIBUTES TargetKey,
	ULONG BufferLength,
	PVOID Buffer,
	PULONG RequiredSize
);

NTSTATUS
__stdcall
ZwQueryPerformanceCounter(
	PLARGE_INTEGER PerformanceCounter,
	PLARGE_INTEGER PerformanceFrequency
);

NTSTATUS
__stdcall
ZwQueryPortInformationProcess(
	void
);

NTSTATUS
__stdcall
ZwQueryQuotaInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	BOOLEAN ReturnSingleEntry,
	PVOID SidList,
	ULONG SidListLength,
	PSID StartSid,
	BOOLEAN RestartScan
);

NTSTATUS
__stdcall
ZwQuerySection(
	HANDLE SectionHandle,
	SECTION_INFORMATION_CLASS SectionInformationClass,
	PVOID SectionInformation,
	SIZE_T SectionInformationLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
ZwQuerySecurityAttributesToken(
	HANDLE TokenHandle,
	PUNICODE_STRING Attributes,
	ULONG NumberOfAttributes,
	PVOID Buffer,
	ULONG Length,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQuerySecurityObject(
	HANDLE Handle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor,
	ULONG Length,
	PULONG LengthNeeded
);

NTSTATUS
__stdcall
ZwQuerySemaphore(
	HANDLE SemaphoreHandle,
	SEMAPHORE_INFORMATION_CLASS SemaphoreInformationClass,
	PVOID SemaphoreInformation,
	ULONG SemaphoreInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQuerySymbolicLinkObject(
	HANDLE LinkHandle,
	PUNICODE_STRING LinkTarget,
	PULONG ReturnedLength
);

NTSTATUS
__stdcall
ZwQuerySystemEnvironmentValue(
	PUNICODE_STRING VariableName,
	PWSTR VariableValue,
	USHORT ValueLength,
	PUSHORT ReturnLength
);

NTSTATUS
__stdcall
ZwQuerySystemEnvironmentValueEx(
	PUNICODE_STRING VariableName,
	LPGUID VendorGuid,
	PVOID Value,
	PULONG ValueLength,
	PULONG Attributes
);

NTSTATUS
__stdcall
ZwQuerySystemInformation(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID SystemInformation,
	ULONG SystemInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQuerySystemInformationEx(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID SystemInformation,
	ULONG SystemInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQuerySystemTime(
	PLARGE_INTEGER SystemTime
);

NTSTATUS
__stdcall
ZwQueryTimer(
	HANDLE TimerHandle,
	TIMER_INFORMATION_CLASS TimerInformationClass,
	PVOID TimerInformation,
	ULONG TimerInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwQueryTimerResolution(
	PULONG MaximumTime,
	PULONG MinimumTime,
	PULONG CurrentTime
);

NTSTATUS
__stdcall
ZwQueryValueKey(
	HANDLE KeyHandle,
	PUNICODE_STRING ValueName,
	KEY_VALUE_INFORMATION_CLASS KeyValueInformationClass,
	PVOID KeyValueInformation,
	ULONG Length,
	PULONG ResultLength
);

NTSTATUS
__stdcall
ZwQueryVirtualMemory(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	MEMORY_INFORMATION_CLASS MemoryInformationClass,
	PVOID MemoryInformation,
	SIZE_T MemoryInformationLength,
	PSIZE_T ReturnLength
);

NTSTATUS
__stdcall
ZwQueryVolumeInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FsInformation,
	ULONG Length,
	FSINFOCLASS FsInformationClass
);

NTSTATUS
__stdcall
ZwQueryWnfStateData(
	PCWNF_STATE_NAME StateName,
	PCWNF_TYPE_ID TypeId,
	const void* ExplicitScope,
	PWNF_CHANGE_STAMP ChangeStamp,
	PVOID Buffer,
	PULONG BufferSize
);

NTSTATUS
__stdcall
ZwQueryWnfStateNameInformation(
	PCWNF_STATE_NAME StateName,
	WNF_STATE_NAME_INFORMATION NameInfoClass,
	const void* ExplicitScope,
	PVOID InfoBuffer,
	ULONG InfoBufferSize
);

NTSTATUS
__stdcall
ZwQueueApcThread(
	HANDLE ThreadHandle,
	PPS_APC_ROUTINE ApcRoutine,
	PVOID ApcArgument1,
	PVOID ApcArgument2,
	PVOID ApcArgument3
);

NTSTATUS
__stdcall
ZwQueueApcThreadEx(
	HANDLE ThreadHandle,
	HANDLE ReserveHandle,
	PPS_APC_ROUTINE ApcRoutine,
	PVOID ApcArgument1,
	PVOID ApcArgument2,
	PVOID ApcArgument3
);

NTSTATUS
__stdcall
ZwRaiseException(
	PEXCEPTION_RECORD ExceptionRecord,
	PCONTEXT ContextRecord,
	BOOLEAN FirstChance
);

NTSTATUS
__stdcall
ZwRaiseHardError(
	NTSTATUS ErrorStatus,
	ULONG NumberOfParameters,
	ULONG UnicodeStringParameterMask,
	PULONG_PTR Parameters,
	ULONG ValidResponseOptions,
	PULONG Response
);

NTSTATUS
__stdcall
ZwReadFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
ZwReadFileScatter(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PFILE_SEGMENT_ELEMENT SegmentArray,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
ZwReadOnlyEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwReadRequestData(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	ULONG DataEntryIndex,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesRead
);

NTSTATUS
__stdcall
ZwReadVirtualMemory(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesRead
);

NTSTATUS
__stdcall
ZwRecoverEnlistment(
	HANDLE EnlistmentHandle,
	PVOID EnlistmentKey
);

NTSTATUS
__stdcall
ZwRecoverResourceManager(
	HANDLE ResourceManagerHandle
);

NTSTATUS
__stdcall
ZwRecoverTransactionManager(
	HANDLE TransactionManagerHandle
);

NTSTATUS
__stdcall
ZwRegisterProtocolAddressInformation(
	HANDLE ResourceManager,
	PCRM_PROTOCOL_ID ProtocolId,
	ULONG ProtocolInformationSize,
	PVOID ProtocolInformation,
	ULONG CreateOptions
);

NTSTATUS
__stdcall
ZwRegisterThreadTerminatePort(
	HANDLE PortHandle
);

NTSTATUS
__stdcall
ZwReleaseCMFViewOwnership(
	void
);

NTSTATUS
__stdcall
ZwReleaseKeyedEvent(
	HANDLE KeyedEventHandle,
	PVOID KeyValue,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwReleaseMutant(
	HANDLE MutantHandle,
	PLONG PreviousCount
);

NTSTATUS
__stdcall
ZwReleaseSemaphore(
	HANDLE SemaphoreHandle,
	LONG ReleaseCount,
	PLONG PreviousCount
);

NTSTATUS
__stdcall
ZwReleaseWorkerFactoryWorker(
	HANDLE WorkerFactoryHandle
);

NTSTATUS
__stdcall
ZwRemoveIoCompletion(
	HANDLE IoCompletionHandle,
	PVOID* KeyContext,
	PVOID* ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwRemoveIoCompletionEx(
	HANDLE IoCompletionHandle,
	PFILE_IO_COMPLETION_INFORMATION IoCompletionInformation,
	ULONG Count,
	PULONG NumEntriesRemoved,
	PLARGE_INTEGER Timeout,
	BOOLEAN Alertable
);

NTSTATUS
__stdcall
ZwRemoveProcessDebug(
	HANDLE ProcessHandle,
	HANDLE DebugObjectHandle
);

NTSTATUS
__stdcall
ZwRenameKey(
	HANDLE KeyHandle,
	PUNICODE_STRING NewName
);

NTSTATUS
__stdcall
ZwRenameTransactionManager(
	PUNICODE_STRING LogFileName,
	LPGUID ExistingTransactionManagerGuid
);

NTSTATUS
__stdcall
ZwReplaceKey(
	POBJECT_ATTRIBUTES NewFile,
	HANDLE TargetHandle,
	POBJECT_ATTRIBUTES OldFile
);

NTSTATUS
__stdcall
ZwReplacePartitionUnit(
	PUNICODE_STRING TargetInstancePath,
	PUNICODE_STRING SpareInstancePath,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwReplyPort(
	HANDLE PortHandle,
	PPORT_MESSAGE ReplyMessage
);

NTSTATUS
__stdcall
ZwReplyWaitReceivePort(
	HANDLE PortHandle,
	PVOID* PortContext,
	PPORT_MESSAGE ReplyMessage,
	PPORT_MESSAGE ReceiveMessage
);

NTSTATUS
__stdcall
ZwReplyWaitReceivePortEx(
	HANDLE PortHandle,
	PVOID* PortContext,
	PPORT_MESSAGE ReplyMessage,
	PPORT_MESSAGE ReceiveMessage,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwReplyWaitReplyPort(
	HANDLE PortHandle,
	PPORT_MESSAGE ReplyMessage
);

NTSTATUS
__stdcall
ZwRequestPort(
	HANDLE PortHandle,
	PPORT_MESSAGE RequestMessage
);

NTSTATUS
__stdcall
ZwRequestWaitReplyPort(
	HANDLE PortHandle,
	PPORT_MESSAGE RequestMessage,
	PPORT_MESSAGE ReplyMessage
);

NTSTATUS
__stdcall
ZwRequestWakeupLatency(
	LATENCY_TIME latency
);

NTSTATUS
__stdcall
ZwResetEvent(
	HANDLE EventHandle,
	PLONG PreviousState
);

NTSTATUS
__stdcall
ZwResetWriteWatch(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	SIZE_T RegionSize
);

NTSTATUS
__stdcall
ZwRestoreKey(
	HANDLE KeyHandle,
	HANDLE FileHandle,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwResumeProcess(
	HANDLE ProcessHandle
);

NTSTATUS
__stdcall
ZwResumeThread(
	HANDLE ThreadHandle,
	PULONG PreviousSuspendCount
);

NTSTATUS
__stdcall
ZwRevertContainerImpersonation(
	void
);

NTSTATUS
__stdcall
ZwRollbackComplete(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwRollbackEnlistment(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwRollbackTransaction(
	HANDLE TransactionHandle,
	BOOLEAN Wait
);

NTSTATUS
__stdcall
ZwRollforwardTransactionManager(
	HANDLE TransactionManagerHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwSaveKey(
	HANDLE KeyHandle,
	HANDLE FileHandle
);

NTSTATUS
__stdcall
ZwSaveKeyEx(
	HANDLE KeyHandle,
	HANDLE FileHandle,
	ULONG Format
);

NTSTATUS
__stdcall
ZwSaveMergedKeys(
	HANDLE HighPrecedenceKeyHandle,
	HANDLE LowPrecedenceKeyHandle,
	HANDLE FileHandle
);

NTSTATUS
__stdcall
ZwSecureConnectPort(
	PHANDLE PortHandle,
	PUNICODE_STRING PortName,
	PSECURITY_QUALITY_OF_SERVICE SecurityQos,
	PPORT_VIEW ClientView,
	PSID RequiredServerSid,
	PREMOTE_PORT_VIEW ServerView,
	PULONG MaxMessageLength,
	PVOID ConnectionInformation,
	PULONG ConnectionInformationLength
);

NTSTATUS
__stdcall
ZwSerializeBoot(
	void
);

NTSTATUS
__stdcall
ZwSetBootEntryOrder(
	PULONG Ids,
	ULONG Count
);

NTSTATUS
__stdcall
ZwSetBootOptions(
	PBOOT_OPTIONS BootOptions,
	ULONG FieldsToChange
);

NTSTATUS
__stdcall
ZwSetCachedSigningLevel(
	ULONG Flags,
	SE_SIGNING_LEVEL InputSigningLevel,
	PHANDLE SourceFiles,
	ULONG SourceFileCount,
	HANDLE TargetFile
);

NTSTATUS
__stdcall
ZwSetContextThread(
	HANDLE ThreadHandle,
	PCONTEXT ThreadContext
);

NTSTATUS
__stdcall
ZwSetDebugFilterState(
	ULONG ComponentId,
	ULONG Level,
	BOOLEAN State
);

NTSTATUS
__stdcall
ZwSetDefaultHardErrorPort(
	HANDLE DefaultHardErrorPort
);

NTSTATUS
__stdcall
ZwSetDefaultLocale(
	BOOLEAN UserProfile,
	LCID DefaultLocaleId
);

NTSTATUS
__stdcall
ZwSetDefaultUILanguage(
	LANGID DefaultUILanguageId
);

NTSTATUS
__stdcall
ZwSetDriverEntryOrder(
	PULONG Ids,
	ULONG Count
);

NTSTATUS
__stdcall
ZwSetEaFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length
);

NTSTATUS
__stdcall
ZwSetEvent(
	HANDLE EventHandle,
	PLONG PreviousState
);

NTSTATUS
__stdcall
ZwSetEventBoostPriority(
	HANDLE EventHandle
);

NTSTATUS
__stdcall
ZwSetHighEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
ZwSetHighWaitLowEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
ZwSetInformationDebugObject(
	HANDLE DebugObjectHandle,
	DEBUGOBJECTINFOCLASS DebugObjectInformationClass,
	PVOID DebugInformation,
	ULONG DebugInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwSetInformationEnlistment(
	HANDLE EnlistmentHandle,
	ENLISTMENT_INFORMATION_CLASS EnlistmentInformationClass,
	PVOID EnlistmentInformation,
	ULONG EnlistmentInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FileInformation,
	ULONG Length,
	FILE_INFORMATION_CLASS FileInformationClass
);

NTSTATUS
__stdcall
ZwSetInformationJobObject(
	HANDLE JobHandle,
	JOBOBJECTINFOCLASS JobObjectInformationClass,
	PVOID JobObjectInformation,
	ULONG JobObjectInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationKey(
	HANDLE KeyHandle,
	KEY_SET_INFORMATION_CLASS KeySetInformationClass,
	PVOID KeySetInformation,
	ULONG KeySetInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationObject(
	HANDLE Handle,
	OBJECT_INFORMATION_CLASS ObjectInformationClass,
	PVOID ObjectInformation,
	ULONG ObjectInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationProcess(
	HANDLE ProcessHandle,
	PROCESSINFOCLASS ProcessInformationClass,
	PVOID ProcessInformation,
	ULONG ProcessInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationResourceManager(
	HANDLE ResourceManagerHandle,
	RESOURCEMANAGER_INFORMATION_CLASS ResourceManagerInformationClass,
	PVOID ResourceManagerInformation,
	ULONG ResourceManagerInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationSymbolicLink(
	HANDLE LinkHandle,
	SYMBOLIC_LINK_INFO_CLASS SymbolicLinkInformationClass,
	PVOID SymbolicLinkInformation,
	ULONG SymbolicLinkInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationThread(
	HANDLE ThreadHandle,
	THREADINFOCLASS ThreadInformationClass,
	PVOID ThreadInformation,
	ULONG ThreadInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationToken(
	HANDLE TokenHandle,
	TOKEN_INFORMATION_CLASS TokenInformationClass,
	PVOID TokenInformation,
	ULONG TokenInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationTransaction(
	HANDLE TransactionHandle,
	TRANSACTION_INFORMATION_CLASS TransactionInformationClass,
	PVOID TransactionInformation,
	ULONG TransactionInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationTransactionManager(
	HANDLE TmHandle,
	TRANSACTIONMANAGER_INFORMATION_CLASS TransactionManagerInformationClass,
	PVOID TransactionManagerInformation,
	ULONG TransactionManagerInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationVirtualMemory(
	HANDLE ProcessHandle,
	VIRTUAL_MEMORY_INFORMATION_CLASS VmInformationClass,
	ULONG_PTR NumberOfEntries,
	PMEMORY_RANGE_ENTRY VirtualAddresses,
	PVOID VmInformation,
	ULONG VmInformationLength
);

NTSTATUS
__stdcall
ZwSetInformationWorkerFactory(
	HANDLE WorkerFactoryHandle,
	WORKERFACTORYINFOCLASS WorkerFactoryInformationClass,
	PVOID WorkerFactoryInformation,
	ULONG WorkerFactoryInformationLength
);

NTSTATUS
__stdcall
ZwSetIntervalProfile(
	ULONG Interval,
	KPROFILE_SOURCE Source
);

NTSTATUS
__stdcall
ZwSetIoCompletion(
	HANDLE IoCompletionHandle,
	PVOID KeyContext,
	PVOID ApcContext,
	NTSTATUS IoStatus,
	ULONG_PTR IoStatusInformation
);

NTSTATUS
__stdcall
ZwSetIoCompletionEx(
	HANDLE IoCompletionHandle,
	HANDLE IoCompletionPacketHandle,
	PVOID KeyContext,
	PVOID ApcContext,
	NTSTATUS IoStatus,
	ULONG_PTR IoStatusInformation
);

NTSTATUS
__stdcall
ZwSetIRTimer(
	HANDLE TimerHandle,
	PLARGE_INTEGER DueTime
);

NTSTATUS
__stdcall
ZwSetLdtEntries(
	ULONG Selector0,
	ULONG Entry0Low,
	ULONG Entry0Hi,
	ULONG Selector1,
	ULONG Entry1Low,
	ULONG Entry1Hi
);

NTSTATUS
__stdcall
ZwSetLowEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
ZwSetLowWaitHighEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
ZwSetQuotaInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length
);

NTSTATUS
__stdcall
ZwSetSecurityObject(
	HANDLE Handle,
	SECURITY_INFORMATION SecurityInformation,
	PSECURITY_DESCRIPTOR SecurityDescriptor
);

NTSTATUS
__stdcall
ZwSetSystemEnvironmentValue(
	PUNICODE_STRING VariableName,
	PUNICODE_STRING VariableValue
);

NTSTATUS
__stdcall
ZwSetSystemEnvironmentValueEx(
	PUNICODE_STRING VariableName,
	LPGUID VendorGuid,
	PVOID Value,
	ULONG ValueLength,
	ULONG Attributes
);

NTSTATUS
__stdcall
ZwSetSystemInformation(
	SYSTEM_INFORMATION_CLASS SystemInformationClass,
	PVOID SystemInformation,
	ULONG SystemInformationLength
);

NTSTATUS
__stdcall
ZwSetSystemPowerState(
	POWER_ACTION SystemAction,
	SYSTEM_POWER_STATE LightestSystemState,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwSetSystemTime(
	PLARGE_INTEGER SystemTime,
	PLARGE_INTEGER PreviousTime
);

NTSTATUS
__stdcall
ZwSetThreadExecutionState(
	EXECUTION_STATE NewFlags,
	EXECUTION_STATE* PreviousFlags
);

NTSTATUS
__stdcall
ZwSetTimer(
	HANDLE TimerHandle,
	PLARGE_INTEGER DueTime,
	PTIMER_APC_ROUTINE TimerApcRoutine,
	PVOID TimerContext,
	BOOLEAN ResumeTimer,
	LONG Period,
	PBOOLEAN PreviousState
);

NTSTATUS
__stdcall
ZwSetTimer2(
	HANDLE TimerHandle,
	PLARGE_INTEGER DueTime,
	PLARGE_INTEGER Period,
	PT2_SET_PARAMETERS Parameters
);

NTSTATUS
__stdcall
ZwSetTimerEx(
	HANDLE TimerHandle,
	TIMER_SET_INFORMATION_CLASS TimerSetInformationClass,
	PVOID TimerSetInformation,
	ULONG TimerSetInformationLength
);

NTSTATUS
__stdcall
ZwSetTimerResolution(
	ULONG DesiredTime,
	BOOLEAN SetResolution,
	PULONG ActualTime
);

NTSTATUS
__stdcall
ZwSetUuidSeed(
	PCHAR Seed
);

NTSTATUS
__stdcall
ZwSetValueKey(
	HANDLE KeyHandle,
	PUNICODE_STRING ValueName,
	ULONG TitleIndex,
	ULONG Type,
	PVOID Data,
	ULONG DataSize
);

NTSTATUS
__stdcall
ZwSetVolumeInformationFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID FsInformation,
	ULONG Length,
	FSINFOCLASS FsInformationClass
);

NTSTATUS
__stdcall
ZwSetWnfProcessNotificationEvent(
	HANDLE NotificationEvent
);

NTSTATUS
__stdcall
ZwShutdownSystem(
	SHUTDOWN_ACTION Action
);

NTSTATUS
__stdcall
ZwShutdownWorkerFactory(
	HANDLE WorkerFactoryHandle,
	volatile LONG* PendingWorkerCount
);

NTSTATUS
__stdcall
ZwSignalAndWaitForSingleObject(
	HANDLE SignalHandle,
	HANDLE WaitHandle,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwSinglePhaseReject(
	HANDLE EnlistmentHandle,
	PLARGE_INTEGER TmVirtualClock
);

NTSTATUS
__stdcall
ZwStartProfile(
	HANDLE ProfileHandle
);

NTSTATUS
__stdcall
ZwStopProfile(
	HANDLE ProfileHandle
);

NTSTATUS
__stdcall
ZwSubscribeWnfStateChange(
	PCWNF_STATE_NAME StateName,
	WNF_CHANGE_STAMP ChangeStamp,
	ULONG EventMask,
	PULONG64 SubscriptionId
);

NTSTATUS
__stdcall
ZwSuspendProcess(
	HANDLE ProcessHandle
);

NTSTATUS
__stdcall
ZwSuspendThread(
	HANDLE ThreadHandle,
	PULONG PreviousSuspendCount
);

NTSTATUS
__stdcall
ZwSystemDebugControl(
	SYSDBG_COMMAND Command,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID OutputBuffer,
	ULONG OutputBufferLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwTerminateEnclave(
	PVOID BaseAddress,
	BOOLEAN WaitForThread
);

NTSTATUS
__stdcall
ZwTerminateJobObject(
	HANDLE JobHandle,
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
ZwTerminateProcess(
	HANDLE ProcessHandle,
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
ZwTerminateThread(
	HANDLE ThreadHandle,
	NTSTATUS ExitStatus
);

NTSTATUS
__stdcall
ZwTestAlert(
	void
);

NTSTATUS
__stdcall
ZwThawRegistry(
	void
);

NTSTATUS
__stdcall
ZwThawTransactions(
	void
);

NTSTATUS
__stdcall
ZwTraceControl(
	TRACE_CONTROL_INFORMATION_CLASS TraceInformationClass,
	PVOID InputBuffer,
	ULONG InputBufferLength,
	PVOID TraceInformation,
	ULONG TraceInformationLength,
	PULONG ReturnLength
);

NTSTATUS
__stdcall
ZwTraceEvent(
	HANDLE TraceHandle,
	ULONG Flags,
	ULONG FieldSize,
	PVOID Fields
);

NTSTATUS
__stdcall
ZwTranslateFilePath(
	PFILE_PATH InputFilePath,
	ULONG OutputType,
	PFILE_PATH OutputFilePath,
	PULONG OutputFilePathLength
);

NTSTATUS
__stdcall
ZwUmsThreadYield(
	PVOID SchedulerParam
);

NTSTATUS
__stdcall
ZwUnloadDriver(
	PUNICODE_STRING DriverServiceName
);

NTSTATUS
__stdcall
ZwUnloadKey(
	POBJECT_ATTRIBUTES TargetKey
);

NTSTATUS
__stdcall
ZwUnloadKey2(
	POBJECT_ATTRIBUTES TargetKey,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwUnloadKeyEx(
	POBJECT_ATTRIBUTES TargetKey,
	HANDLE Event
);

NTSTATUS
__stdcall
ZwUnlockFile(
	HANDLE FileHandle,
	PIO_STATUS_BLOCK IoStatusBlock,
	PLARGE_INTEGER ByteOffset,
	PLARGE_INTEGER Length,
	ULONG Key
);

NTSTATUS
__stdcall
ZwUnlockVirtualMemory(
	HANDLE ProcessHandle,
	PVOID* BaseAddress,
	PSIZE_T RegionSize,
	ULONG MapType
);

NTSTATUS
__stdcall
ZwUnmapViewOfSection(
	HANDLE ProcessHandle,
	PVOID BaseAddress
);

NTSTATUS
__stdcall
ZwUnmapViewOfSectionEx(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	ULONG Flags
);

NTSTATUS
__stdcall
ZwUnsubscribeWnfStateChange(
	PCWNF_STATE_NAME StateName
);

NTSTATUS
__stdcall
ZwUpdateWnfStateData(
	PCWNF_STATE_NAME StateName,
	const void* Buffer,
	ULONG Length,
	PCWNF_TYPE_ID TypeId,
	const void* ExplicitScope,
	WNF_CHANGE_STAMP MatchingChangeStamp,
	LOGICAL CheckStamp
);

NTSTATUS
__stdcall
ZwVdmControl(
	VDMSERVICECLASS Service,
	PVOID ServiceData
);

NTSTATUS
__stdcall
ZwWaitForAlertByThreadId(
	PVOID Address,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwWaitForDebugEvent(
	HANDLE DebugObjectHandle,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout,
	PDBGUI_WAIT_STATE_CHANGE WaitStateChange
);

NTSTATUS
__stdcall
ZwWaitForKeyedEvent(
	HANDLE KeyedEventHandle,
	PVOID KeyValue,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwWaitForMultipleObjects(
	ULONG Count,
	HANDLE Handles[],
	WAIT_TYPE WaitType,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwWaitForMultipleObjects32(
	ULONG Count,
	LONG Handles[],
	WAIT_TYPE WaitType,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwWaitForSingleObject(
	HANDLE Handle,
	BOOLEAN Alertable,
	PLARGE_INTEGER Timeout
);

NTSTATUS
__stdcall
ZwWaitForWorkViaWorkerFactory(
	HANDLE WorkerFactoryHandle,
	struct _FILE_IO_COMPLETION_INFORMATION* MiniPacket
);

NTSTATUS
__stdcall
ZwWaitHighEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
ZwWaitLowEventPair(
	HANDLE EventPairHandle
);

NTSTATUS
__stdcall
ZwWorkerFactoryWorkerReady(
	HANDLE WorkerFactoryHandle
);

NTSTATUS
__stdcall
ZwWriteFile(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PVOID Buffer,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
ZwWriteFileGather(
	HANDLE FileHandle,
	HANDLE Event,
	PIO_APC_ROUTINE ApcRoutine,
	PVOID ApcContext,
	PIO_STATUS_BLOCK IoStatusBlock,
	PFILE_SEGMENT_ELEMENT SegmentArray,
	ULONG Length,
	PLARGE_INTEGER ByteOffset,
	PULONG Key
);

NTSTATUS
__stdcall
ZwWriteRequestData(
	HANDLE PortHandle,
	PPORT_MESSAGE Message,
	ULONG DataEntryIndex,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesWritten
);

NTSTATUS
__stdcall
ZwWriteVirtualMemory(
	HANDLE ProcessHandle,
	PVOID BaseAddress,
	PVOID Buffer,
	SIZE_T BufferSize,
	PSIZE_T NumberOfBytesWritten
);

NTSTATUS
__stdcall
ZwYieldExecution(
	void
);
int main() {
	return 1;
}
